var bircheditor =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var Birch, ChoicePalette, DateTime, Item, ItemPath, Mutation, Outline, OutlineEditor, OutlineSidebar, StyleSheet, configurationOutlines, ref, taskPaperPluginInitFunction, writeRoomPluginInitFunction;
	
	ref = __webpack_require__(1), Outline = ref.Outline, Item = ref.Item, Mutation = ref.Mutation, ItemPath = ref.ItemPath, DateTime = ref.DateTime;
	
	configurationOutlines = __webpack_require__(237);
	
	OutlineSidebar = __webpack_require__(238);
	
	OutlineEditor = __webpack_require__(257);
	
	ChoicePalette = __webpack_require__(500);
	
	StyleSheet = __webpack_require__(259);
	
	Birch = __webpack_require__(252);
	
	taskPaperPluginInitFunction = __webpack_require__(501);
	
	writeRoomPluginInitFunction = __webpack_require__(502);
	
	module.exports = {
	  Birch: Birch,
	  OutlineSidebar: OutlineSidebar,
	  OutlineEditor: OutlineEditor,
	  ChoicePalette: ChoicePalette,
	  StyleSheet: StyleSheet,
	  ItemPath: ItemPath,
	  DateTime: DateTime,
	  Outline: Outline,
	  Item: Item,
	  Mutation: Mutation,
	  searchesConfigurationOutline: configurationOutlines.searches,
	  tagsConfigurationOutline: configurationOutlines.tags,
	  taskPaperPluginInitFunction: taskPaperPluginInitFunction,
	  writeRoomPluginInitFunction: writeRoomPluginInitFunction
	};


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  Birch: __webpack_require__(2),
	  Outline: __webpack_require__(3),
	  Item: __webpack_require__(23),
	  Mutation: __webpack_require__(167),
	  ItemSerializer: __webpack_require__(21),
	  ItemPath: __webpack_require__(165),
	  DateTime: __webpack_require__(25),
	  AttributedString: __webpack_require__(8),
	  Extensions: __webpack_require__(235),
	  ItemPathQuery: __webpack_require__(236),
	  SpanBuffer: __webpack_require__(11),
	  Span: __webpack_require__(14),
	  shortid: __webpack_require__(230),
	  util: __webpack_require__(10)
	};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

	module.exports = {
	  RootID: 'Birch',
	  Version: [0, 2, 1]
	};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, Birch, CompositeDisposable, Disposable, Emitter, Item, ItemPath, ItemSerializer, Mutation, Outline, UndoManager, _, assert, ref, shortid;
	
	ref = __webpack_require__(4), Emitter = ref.Emitter, Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable;
	
	AttributedString = __webpack_require__(8);
	
	ItemSerializer = __webpack_require__(21);
	
	UndoManager = __webpack_require__(229);
	
	ItemPath = __webpack_require__(165);
	
	Mutation = __webpack_require__(167);
	
	shortid = __webpack_require__(230);
	
	_ = __webpack_require__(15);
	
	assert = __webpack_require__(10).assert;
	
	Birch = __webpack_require__(2);
	
	Item = __webpack_require__(23);
	
	Outline = (function() {
	  Outline.prototype.type = null;
	
	  Outline.prototype.metadata = null;
	
	  Outline.prototype.idsToItems = null;
	
	  Outline.prototype.retainCount = 0;
	
	  Outline.prototype.changes = null;
	
	  Outline.prototype.changeCount = 0;
	
	  Outline.prototype.undoSubscriptions = null;
	
	  Outline.prototype.changingCount = 0;
	
	  Outline.prototype.changesCallbacks = null;
	
	  Outline.prototype.coalescingMutation = null;
	
	  Outline.prototype.stoppedChangingDelay = 300;
	
	  Outline.prototype.stoppedChangingTimeout = null;
	
	
	  /*
	  Section: Construction
	   */
	
	  function Outline(type, serialization) {
	    var ref1, undoManager;
	    this.id = shortid();
	    this.metadata = new Map();
	    this.idsToItems = new Map();
	    this.branchContentIDsToItems = null;
	    this.type = type != null ? type : ItemSerializer.TEXTType;
	    this.root = this.createItem('', Birch.RootID);
	    this.root.isInOutline = true;
	    this.changeDelegateProcessing = 0;
	    this.changeDelegate = (ref1 = ItemSerializer.getSerializationsForType(this.type)[0]) != null ? ref1.changeDelegate : void 0;
	    this.undoManager = undoManager = new UndoManager;
	    this.emitter = new Emitter;
	    this.undoSubscriptions = new CompositeDisposable;
	    this.undoSubscriptions.add(undoManager.onDidCloseUndoGroup((function(_this) {
	      return function(group) {
	        if (!undoManager.isUndoing && !undoManager.isRedoing && group.length > 0) {
	          return _this.updateChangeCount(Outline.ChangeDone);
	        }
	      };
	    })(this)));
	    this.undoSubscriptions.add(undoManager.onWillUndo((function(_this) {
	      return function() {
	        return _this.breakUndoCoalescing();
	      };
	    })(this)));
	    this.undoSubscriptions.add(undoManager.onDidUndo((function(_this) {
	      return function() {
	        _this.updateChangeCount(Outline.ChangeUndone);
	        return _this.breakUndoCoalescing();
	      };
	    })(this)));
	    this.undoSubscriptions.add(undoManager.onWillRedo((function(_this) {
	      return function() {
	        return _this.breakUndoCoalescing();
	      };
	    })(this)));
	    this.undoSubscriptions.add(undoManager.onDidRedo((function(_this) {
	      return function() {
	        _this.updateChangeCount(Outline.ChangeRedone);
	        return _this.breakUndoCoalescing();
	      };
	    })(this)));
	    this.getTagAttributeNamesToValues();
	    if (serialization) {
	      this.reloadSerialization(serialization);
	    }
	  }
	
	  Outline.createTaskPaperOutline = function(content) {
	    return new Outline(ItemSerializer.TaskPaperType, content);
	  };
	
	  Outline.createWriteRoomOutline = function(content) {
	    return new Outline(ItemSerializer.WriteRoomType, content);
	  };
	
	  Outline.prototype.destroy = function() {
	    var ref1, ref2;
	    if (!this.destroyed) {
	      if ((ref1 = this.undoSubscriptions) != null) {
	        ref1.dispose();
	      }
	      if ((ref2 = this.undoManager) != null) {
	        ref2.removeAllActions();
	      }
	      this.undoManager.disableUndoRegistration();
	      this.destroyed = true;
	      return this.emitter.emit('did-destroy');
	    }
	  };
	
	
	  /*
	  Section: Finding Outlines
	   */
	
	  Outline.prototype.id = null;
	
	  Outline.outlines = [];
	
	  Outline.getOutlines = function() {
	    return this.outlines.slice();
	  };
	
	  Outline.getOutlineForID = function(id) {
	    var each, i, len, ref1;
	    ref1 = this.outlines;
	    for (i = 0, len = ref1.length; i < len; i++) {
	      each = ref1[i];
	      if (each.id === id) {
	        return each;
	      }
	    }
	  };
	
	  Outline.addOutline = function(outline) {
	    return this.addOutlineAtIndex(outline, this.outlines.length);
	  };
	
	  Outline.addOutlineAtIndex = function(outline, index) {
	    assert(!this.getOutlineForID(outline.id));
	    this.outlines.splice(index, 0, outline);
	    outline.onDidDestroy((function(_this) {
	      return function() {
	        return _this.removeOutline(outline);
	      };
	    })(this));
	    return outline;
	  };
	
	  Outline.removeOutline = function(outline) {
	    var index;
	    index = this.outlines.indexOf(outline);
	    if (index !== -1) {
	      return this.removeOutlineAtIndex(index);
	    }
	  };
	
	  Outline.removeOutlineAtIndex = function(index) {
	    var outline;
	    outline = this.outlines.splice(index, 1)[0];
	    return outline != null ? outline.destroy() : void 0;
	  };
	
	
	  /*
	  Section: Lifecycle
	   */
	
	  Outline.prototype.isRetained = function() {
	    return this.retainCount > 0;
	  };
	
	  Outline.prototype.retain = function() {
	    assert(!this.destroyed, 'Cant retain destroyed outline');
	    if (this.retainCount === 0) {
	      Outline.addOutline(this);
	    }
	    this.retainCount++;
	    return this;
	  };
	
	  Outline.prototype.release = function() {
	    this.retainCount--;
	    if (!this.isRetained()) {
	      this.destroy();
	    }
	    return this;
	  };
	
	
	  /*
	  Section: Metadata
	   */
	
	  Outline.prototype.getMetadata = function(key) {
	    return this.metadata.get(key);
	  };
	
	  Outline.prototype.setMetadata = function(key, value) {
	    var e;
	    if (value) {
	      try {
	        JSON.stringify(value);
	        this.metadata.set(key, value);
	      } catch (error) {
	        e = error;
	        console.log("value: " + value + " not JSON serializable " + e);
	      }
	    } else {
	      this.metadata["delete"](key);
	    }
	    return this.updateChangeCount(Outline.ChangeDone);
	  };
	
	  Outline.prototype.serializedMetadata = null;
	
	  Object.defineProperty(Outline.prototype, 'serializedMetadata', {
	    get: function() {
	      var metadata;
	      metadata = {};
	      this.metadata.forEach(function(value, key) {
	        return metadata[key] = value;
	      });
	      return JSON.stringify(metadata);
	    },
	    set: function(jsonMetadata) {
	      var each, i, len, metadata, ref1, results;
	      if (metadata = JSON.parse(jsonMetadata)) {
	        this.metadata = new Map();
	        ref1 = Object.keys(metadata);
	        results = [];
	        for (i = 0, len = ref1.length; i < len; i++) {
	          each = ref1[i];
	          results.push(this.setMetadata(each, metadata[each]));
	        }
	        return results;
	      }
	    }
	  });
	
	
	  /*
	  Section: Events
	   */
	
	  Outline.prototype.onDidBeginChanges = function(callback) {
	    return this.emitter.on('did-begin-changes', callback);
	  };
	
	  Outline.prototype.onWillChange = function(callback) {
	    return this.emitter.on('will-change', callback);
	  };
	
	  Outline.prototype.onDidChange = function(callback) {
	    return this.emitter.on('did-change', callback);
	  };
	
	  Outline.prototype.onDidEndChanges = function(callback) {
	    return this.emitter.on('did-end-changes', callback);
	  };
	
	  Outline.prototype.onDidUpdateChangeCount = function(callback) {
	    return this.emitter.on('did-update-change-count', callback);
	  };
	
	  Outline.prototype.onWillReload = function(callback) {
	    return this.emitter.on('will-reload', callback);
	  };
	
	  Outline.prototype.onDidReload = function(callback) {
	    return this.emitter.on('did-reload', callback);
	  };
	
	  Outline.prototype.onDidDestroy = function(callback) {
	    return this.emitter.on('did-destroy', callback);
	  };
	
	  Outline.prototype.getStoppedChangingDelay = function() {
	    return this.stoppedChangingDelay;
	  };
	
	
	  /*
	  Section: Reading Items
	   */
	
	  Outline.prototype.root = null;
	
	  Outline.prototype.isEmpty = null;
	
	  Object.defineProperty(Outline.prototype, 'isEmpty', {
	    get: function() {
	      var firstChild;
	      firstChild = this.root.firstChild;
	      return !firstChild || (!firstChild.nextItem && firstChild.bodyString.length === 0);
	    }
	  });
	
	  Outline.prototype.items = null;
	
	  Object.defineProperty(Outline.prototype, 'items', {
	    get: function() {
	      return this.root.descendants;
	    }
	  });
	
	  Outline.prototype.getItemForID = function(id) {
	    return this.idsToItems.get(id);
	  };
	
	  Outline.prototype.getItemsForIDs = function(ids) {
	    var each, i, items, len;
	    if (!ids) {
	      return [];
	    }
	    items = [];
	    for (i = 0, len = ids.length; i < len; i++) {
	      each = ids[i];
	      each = this.getItemForID(each);
	      if (each) {
	        items.push(each);
	      }
	    }
	    return items;
	  };
	
	  Outline.prototype.getItemForBranchContentID = function(contentID) {
	    var each, i, len, ref1;
	    if (!this.branchContentIDsToItems) {
	      this.branchContentIDsToItems = new Map();
	      ref1 = this.root.descendants;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        each = ref1[i];
	        this.branchContentIDsToItems.set(each.branchContentID, each);
	      }
	    }
	    return this.branchContentIDsToItems.get(contentID);
	  };
	
	  Outline.prototype.getItemForFuzzyContentID = function(fuzzyContentID) {};
	
	  Outline.prototype.getAttributeNamesToValues = function(autoIncludeAttributes, excludeAttributes) {
	    var each, eachAttributeName, eachValue, entries, i, j, k, l, len, len1, len2, len3, namesToValues, ref1, ref2, ref3, ref4, valuesSet;
	    if (autoIncludeAttributes == null) {
	      autoIncludeAttributes = [];
	    }
	    if (excludeAttributes == null) {
	      excludeAttributes = [];
	    }
	    namesToValues = new Map();
	    for (i = 0, len = autoIncludeAttributes.length; i < len; i++) {
	      each = autoIncludeAttributes[i];
	      namesToValues.set(each, new Set());
	    }
	    ref1 = this.root.descendants;
	    for (j = 0, len1 = ref1.length; j < len1; j++) {
	      each = ref1[j];
	      ref2 = Object.keys(each.attributes);
	      for (k = 0, len2 = ref2.length; k < len2; k++) {
	        eachAttributeName = ref2[k];
	        if (excludeAttributes.indexOf(eachAttributeName) === -1) {
	          valuesSet = (ref3 = namesToValues.get(eachAttributeName)) != null ? ref3 : new Set();
	          ref4 = each.getAttribute(eachAttributeName, void 0, true);
	          for (l = 0, len3 = ref4.length; l < len3; l++) {
	            eachValue = ref4[l];
	            valuesSet.add(eachValue);
	          }
	          namesToValues.set(eachAttributeName, valuesSet);
	        }
	      }
	    }
	    entries = Array.from(namesToValues.entries());
	    entries.sort(function(a, b) {
	      return a[0].localeCompare(b[0]);
	    });
	    return entries;
	  };
	
	  Outline.prototype.getTagAttributeNamesToValues = function(autoIncludeAttributes, excludeAttributes) {
	    if (autoIncludeAttributes == null) {
	      autoIncludeAttributes = [];
	    }
	    if (excludeAttributes == null) {
	      excludeAttributes = [];
	    }
	    return this.getAttributeNamesToValues(autoIncludeAttributes, excludeAttributes).filter(function(each) {
	      return each[0].substring(0, 5) === 'data-';
	    });
	  };
	
	  Outline.prototype.evaluateItemPath = function(itemPath, contextItem, options) {
	    if (options == null) {
	      options = {};
	    }
	    if (options.root == null) {
	      options.root = this.root;
	    }
	    if (options.types == null) {
	      options.types = ItemSerializer.getSerializationsForType(this.type)[0].itemPathTypes;
	    }
	    if (contextItem == null) {
	      contextItem = this.root;
	    }
	    return ItemPath.evaluate(itemPath, contextItem, options);
	  };
	
	
	  /*
	  Section: Creating Items
	   */
	
	  Outline.prototype.createItem = function(text, id, remapIDCallback) {
	    return new Item(this, text, id, remapIDCallback);
	  };
	
	  Outline.prototype.cloneItem = function(item, deep, remapIDCallback) {
	    var clonedChild, clonedChildren, clonedItem, eachChild;
	    if (deep == null) {
	      deep = true;
	    }
	    assert(!item.isOutlineRoot, 'Can not clone root');
	    assert(item.outline === this, 'Item must be owned by this outline');
	    clonedItem = this.createItem(item.bodyAttributedString.clone());
	    if (item.attributes) {
	      clonedItem.attributes = Object.assign({}, item.attributes);
	    }
	    clonedItem.indent = item.depth;
	    if (deep && (eachChild = item.firstChild)) {
	      clonedChildren = [];
	      while (eachChild) {
	        clonedChild = this.cloneItem(eachChild, deep);
	        clonedChild.indent = eachChild.indent;
	        clonedChildren.push(clonedChild);
	        eachChild = eachChild.nextSibling;
	      }
	      clonedItem.insertChildrenBefore(clonedChildren, null, true);
	    }
	    if (typeof remapIDCallback === "function") {
	      remapIDCallback(item.id, clonedItem.id, clonedItem);
	    }
	    return clonedItem;
	  };
	
	  Outline.prototype.cloneItems = function(items, deep, remapIDCallback) {
	    var clones, each, i, len;
	    if (deep == null) {
	      deep = true;
	    }
	    clones = [];
	    for (i = 0, len = items.length; i < len; i++) {
	      each = items[i];
	      clones.push(this.cloneItem(each, deep, remapIDCallback));
	    }
	    return clones;
	  };
	
	  Outline.prototype.importItem = function(item, deep, remapIDCallback) {
	    var children, eachChild, importedItem;
	    if (deep == null) {
	      deep = true;
	    }
	    assert(!item.isOutlineRoot, 'Can not import root item');
	    assert(item.outline !== this, 'Item must not be owned by this outline');
	    importedItem = this.createItem(item.bodyAttributedString.clone(), item.id, remapIDCallback);
	    if (item.attributes) {
	      importedItem.attributes = Object.assign({}, item.attributes);
	    }
	    if (deep && (eachChild = item.firstChild)) {
	      children = [];
	      while (eachChild) {
	        children.push(this.importItem(eachChild, deep));
	        eachChild = eachChild.nextSibling;
	      }
	      importedItem.appendChildren(children);
	    }
	    return importedItem;
	  };
	
	
	  /*
	  Section: Insert & Remove Items
	   */
	
	  Outline.prototype.insertItemsBefore = function(items, referenceItem) {
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    if (!items.length) {
	      return;
	    }
	    return this.groupUndoAndChanges((function(_this) {
	      return function() {
	        var ancestorStack, current, currentDepth, each, eachGroup, eachGroupDepth, i, j, k, l, lastRoot, len, len1, len2, len3, nextBranch, nextSibling, parent, parentDepth, rootGroups, roots, trailingBranches;
	        roots = Item.buildItemHiearchy(items);
	        if (referenceItem) {
	          assert(referenceItem.isInOutline, 'reference item must be in outline if defined');
	          assert(referenceItem.outline === _this, 'reference item outline must be this outline if defined');
	        }
	        for (i = 0, len = roots.length; i < len; i++) {
	          each = roots[i];
	          if (each.indent < 1) {
	            each.indent = 1;
	          }
	        }
	        rootGroups = [];
	        currentDepth = void 0;
	        for (j = 0, len1 = roots.length; j < len1; j++) {
	          each = roots[j];
	          if (each.depth === currentDepth) {
	            current.push(each);
	          } else {
	            current = [each];
	            rootGroups.push(current);
	            currentDepth = each.depth;
	          }
	        }
	        for (k = 0, len2 = rootGroups.length; k < len2; k++) {
	          eachGroup = rootGroups[k];
	          eachGroupDepth = eachGroup[0].depth;
	          parent = (referenceItem != null ? referenceItem.previousItemOrRoot : void 0) || _this.root.lastBranchItem;
	          nextSibling = parent.firstChild;
	          parentDepth = parent.depth;
	          nextBranch = referenceItem;
	          while (parentDepth >= eachGroupDepth) {
	            nextSibling = parent.nextSibling;
	            parent = parent.parent;
	            parentDepth = parent.depth;
	          }
	          for (l = 0, len3 = eachGroup.length; l < len3; l++) {
	            each = eachGroup[l];
	            each.indent = eachGroupDepth - parent.depth;
	          }
	          parent.insertChildrenBefore(eachGroup, nextSibling, true);
	        }
	        lastRoot = roots[roots.length - 1];
	        ancestorStack = [];
	        each = lastRoot;
	        while (each) {
	          ancestorStack.push(each);
	          each = each.lastChild;
	        }
	        trailingBranches = [];
	        while (referenceItem && (referenceItem.depth > lastRoot.depth)) {
	          trailingBranches.push(referenceItem);
	          referenceItem = referenceItem.nextBranch;
	        }
	        return Item.buildItemHiearchy(trailingBranches, ancestorStack);
	      };
	    })(this));
	  };
	
	  Outline.prototype.removeItems = function(items) {
	    var contiguousItemRanges, currentRange, each, i, len, previousItem;
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    if (!(items.length > 0)) {
	      return;
	    }
	    contiguousItemRanges = [];
	    previousItem = void 0;
	    for (i = 0, len = items.length; i < len; i++) {
	      each = items[i];
	      if (previousItem && previousItem === each.previousItem) {
	        currentRange.push(each);
	      } else {
	        currentRange = [each];
	        contiguousItemRanges.push(currentRange);
	      }
	      previousItem = each;
	    }
	    return this.groupUndoAndChanges((function(_this) {
	      return function() {
	        var j, len1, results;
	        results = [];
	        for (j = 0, len1 = contiguousItemRanges.length; j < len1; j++) {
	          each = contiguousItemRanges[j];
	          results.push(_this._removeContiguousItems(each));
	        }
	        return results;
	      };
	    })(this));
	  };
	
	  Outline.prototype._removeContiguousItems = function(items) {
	    var commonAncestors, coveredItems, each, end, i, insertBefore, j, len, len1, reinsertChildren, removeItemsSet;
	    coveredItems = [];
	    commonAncestors = Item.getCommonAncestors(items);
	    end = commonAncestors[commonAncestors.length - 1].nextBranch;
	    each = items[0];
	    while (each !== end) {
	      coveredItems.push(each);
	      each = each.nextItem;
	    }
	    insertBefore = coveredItems[coveredItems.length - 1].nextBranch;
	    removeItemsSet = new Set();
	    for (i = 0, len = items.length; i < len; i++) {
	      each = items[i];
	      removeItemsSet.add(each);
	    }
	    reinsertChildren = [];
	    for (j = 0, len1 = coveredItems.length; j < len1; j++) {
	      each = coveredItems[j];
	      if (!removeItemsSet.has(each)) {
	        reinsertChildren.push(each);
	      }
	    }
	    Item.removeItemsFromParents(items);
	    return this.insertItemsBefore(reinsertChildren, insertBefore);
	  };
	
	
	  /*
	  Section: Changes
	   */
	
	  Outline.prototype.isChanged = function() {
	    return this.changeCount !== 0;
	  };
	
	  Outline.prototype.updateChangeCount = function(changeType) {
	    switch (changeType) {
	      case Outline.ChangeDone:
	        this.changeCount++;
	        break;
	      case Outline.ChangeUndone:
	        this.changeCount--;
	        break;
	      case Outline.ChangeCleared:
	        this.changeCount = 0;
	        break;
	      case Outline.ChangeRedone:
	        this.changeCount++;
	    }
	    return this.emitter.emit('did-update-change-count', changeType);
	  };
	
	  Outline.prototype.isChanging = null;
	
	  Object.defineProperty(Outline.prototype, 'isChanging', {
	    get: function() {
	      return this.startItem === this.endItem && this.startOffset === this.endOffset;
	    }
	  });
	
	  Outline.prototype.groupChanges = function(callback) {
	    this.beginChanges();
	    callback();
	    return this.endChanges();
	  };
	
	  Outline.prototype.willChange = function(mutation) {
	    return this.emitter.emit('will-change', mutation);
	  };
	
	  Outline.prototype.beginChanges = function() {
	    this.changingCount++;
	    if (this.changingCount === 1) {
	      this.changes = [];
	      this.changesCallbacks = [];
	      return this.emitter.emit('did-begin-changes');
	    }
	  };
	
	  Outline.prototype.itemDidChangeBody = function(item, oldBody) {
	    if (!this.changeDelegate) {
	      return;
	    }
	    this.changeDelegateProcessing++;
	    this.changeDelegate.processItemDidChangeBody(item, oldBody);
	    return this.changeDelegateProcessing--;
	  };
	
	  Outline.prototype.itemDidChangeAttribute = function(item, name, value, oldValue) {
	    if (!this.changeDelegateProcessing && this.changeDelegate) {
	      return this.changeDelegate.processItemDidChangeAttribute(item, name, value, oldValue);
	    }
	  };
	
	  Outline.prototype.recordChange = function(mutation) {
	    var metadata, undoSelection;
	    if (!this.undoManager.isUndoRegistrationEnabled()) {
	      return;
	    }
	    if (this.undoManager.isUndoing || this.undoManager.isUndoing) {
	      this.breakUndoCoalescing();
	    }
	    if (this.coalescingMutation && this.coalescingMutation.coalesce(mutation)) {
	      metadata = this.undoManager.getUndoGroupMetadata();
	      undoSelection = metadata.undoSelection;
	      if (undoSelection && this.coalescingMutation.type === Mutation.BODY_CHANGED) {
	        undoSelection.anchorOffset = this.coalescingMutation.insertedTextLocation;
	        undoSelection.startOffset = this.coalescingMutation.insertedTextLocation;
	        undoSelection.headOffset = this.coalescingMutation.insertedTextLocation + this.coalescingMutation.replacedTextLength;
	        return undoSelection.endOffset = this.coalescingMutation.insertedTextLocation + this.coalescingMutation.replacedTextLength;
	      }
	    } else {
	      this.undoManager.registerUndoOperation(mutation);
	      return this.coalescingMutation = mutation;
	    }
	  };
	
	  Outline.prototype.didChange = function(mutation) {
	    this.changes.push(mutation);
	    return this.emitter.emit('did-change', mutation);
	  };
	
	  Outline.prototype.endChanges = function(callback) {
	    var changesCallbacks, each, i, len;
	    if (callback) {
	      this.changesCallbacks.push(callback);
	    }
	    this.changingCount--;
	    if (this.changingCount === 0) {
	      this.branchContentIDsToItems = null;
	      this.emitter.emit('did-end-changes', this.changes);
	      changesCallbacks = this.changesCallbacks;
	      this.changesCallbacks = null;
	      for (i = 0, len = changesCallbacks.length; i < len; i++) {
	        each = changesCallbacks[i];
	        each(this.changes);
	      }
	      return this.changes = null;
	    }
	  };
	
	
	  /*
	  Section: Undo
	   */
	
	  Outline.prototype.groupUndo = function(callback) {
	    this.beginUndoGrouping();
	    callback();
	    return this.endUndoGrouping();
	  };
	
	  Outline.prototype.groupUndoAndChanges = function(callback) {
	    this.beginUndoGrouping();
	    this.beginChanges();
	    callback();
	    this.endChanges();
	    return this.endUndoGrouping();
	  };
	
	  Outline.prototype.beginUndoGrouping = function(metadata) {
	    return this.undoManager.beginUndoGrouping(metadata);
	  };
	
	  Outline.prototype.endUndoGrouping = function() {
	    return this.undoManager.endUndoGrouping();
	  };
	
	  Outline.prototype.breakUndoCoalescing = function() {
	    return this.coalescingMutation = null;
	  };
	
	  Outline.prototype.undo = function() {
	    return this.undoManager.undo();
	  };
	
	  Outline.prototype.redo = function() {
	    return this.undoManager.redo();
	  };
	
	
	  /*
	  Section: Serialization
	   */
	
	  Outline.prototype.serializeItems = function(items, options) {
	    if (options == null) {
	      options = {};
	    }
	    return ItemSerializer.serializeItems(items, options);
	  };
	
	  Outline.prototype.deserializeItems = function(serializedItems, options) {
	    var e;
	    if (options == null) {
	      options = {};
	    }
	    try {
	      return ItemSerializer.deserializeItems(serializedItems, this, options);
	    } catch (error) {
	      e = error;
	      return null;
	    }
	  };
	
	  Outline.prototype.serialize = function(options) {
	    if (options == null) {
	      options = {};
	    }
	    if (options['type'] == null) {
	      options['type'] = this.type;
	    }
	    return ItemSerializer.serializeItems(this.root.descendants, options);
	  };
	
	  Outline.prototype.reloadSerialization = function(serialization, options) {
	    if (options == null) {
	      options = {};
	    }
	    if (serialization != null) {
	      if (options['type'] == null) {
	        options['type'] = this.type;
	      }
	      this.emitter.emit('will-reload');
	      this.undoManager.removeAllActions();
	      this.undoManager.disableUndoRegistration();
	      this.groupChanges((function(_this) {
	        return function() {
	          var e, items;
	          try {
	            items = ItemSerializer.deserializeItems(serialization, _this, options);
	            _this.root.removeChildren(_this.root.children);
	            return _this.root.appendChildren(items);
	          } catch (error) {
	            e = error;
	          }
	        };
	      })(this));
	      this.undoManager.enableUndoRegistration();
	      this.updateChangeCount(Outline.ChangeCleared);
	      return this.emitter.emit('did-reload');
	    }
	  };
	
	
	  /*
	  Section: Debug
	   */
	
	  Outline.prototype.toString = function() {
	    return this.root.branchToString();
	  };
	
	
	  /*
	  Section: Private Utility Methods
	   */
	
	  Outline.prototype.nextOutlineUniqueItemID = function(candidateID) {
	    var id, loadingLIUsedIDs;
	    loadingLIUsedIDs = this.loadingLIUsedIDs;
	    while (true) {
	      id = candidateID || shortid();
	      if (loadingLIUsedIDs && !loadingLIUsedIDs[id]) {
	        loadingLIUsedIDs[id] = true;
	        return id;
	      } else if (!this.idsToItems.get(id)) {
	        return id;
	      } else {
	        candidateID = null;
	      }
	    }
	  };
	
	  return Outline;
	
	})();
	
	Outline.ChangeDone = 'Done';
	
	Outline.ChangeUndone = 'Undone';
	
	Outline.ChangeRedone = 'Redone';
	
	Outline.ChangeCleared = 'Cleared';
	
	module.exports = Outline;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.Emitter = __webpack_require__(5);
	exports.Disposable = __webpack_require__(6);
	exports.CompositeDisposable = __webpack_require__(7);

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	var Disposable = __webpack_require__(6);
	
	var CompositeDisposable = __webpack_require__(7); // Essential: Utility class to be used when implementing event-based APIs that
	// allows for handlers registered via `::on` to be invoked with calls to
	// `::emit`. Instances of this class are intended to be used internally by
	// classes that expose an event-based API.
	//
	// For example:
	//
	// ```js
	// class User {
	//   constructor() {
	//     this.emitter = new Emitter()
	//   }
	//
	//   onDidChangeName(callback) {
	//     this.emitter.on('did-change-name', callback)
	//   }
	//
	//   setName(name) {
	//     if (name !== this.name) {
	//       this.name = name
	//       this.emitter.emit('did-change-name', name)
	//     }
	//
	//     return this.name
	//   }
	// }
	// ```
	
	
	var Emitter =
	/*#__PURE__*/
	function () {
	  _createClass(Emitter, null, [{
	    key: "onEventHandlerException",
	    value: function onEventHandlerException(exceptionHandler) {
	      var _this = this;
	
	      if (this.exceptionHandlers.length === 0) {
	        this.dispatch = this.exceptionHandlingDispatch;
	      }
	
	      this.exceptionHandlers.push(exceptionHandler);
	      return new Disposable(function () {
	        _this.exceptionHandlers.splice(_this.exceptionHandlers.indexOf(exceptionHandler), 1);
	
	        if (_this.exceptionHandlers.length === 0) {
	          return _this.dispatch = _this.simpleDispatch;
	        }
	      });
	    }
	  }, {
	    key: "simpleDispatch",
	    value: function simpleDispatch(handler, value) {
	      return handler(value);
	    }
	  }, {
	    key: "exceptionHandlingDispatch",
	    value: function exceptionHandlingDispatch(handler, value) {
	      try {
	        return handler(value);
	      } catch (exception) {
	        return this.exceptionHandlers.map(function (exceptionHandler) {
	          return exceptionHandler(exception);
	        });
	      }
	    }
	    /*
	    Section: Construction and Destruction
	    */
	    // Public: Construct an emitter.
	    //
	    // ```js
	    // this.emitter = new Emitter()
	    // ```
	
	  }]);
	
	  function Emitter() {
	    _classCallCheck(this, Emitter);
	
	    this.disposed = false;
	    this.clear();
	  } // Public: Clear out any existing subscribers.
	
	
	  _createClass(Emitter, [{
	    key: "clear",
	    value: function clear() {
	      if (this.subscriptions != null) {
	        this.subscriptions.dispose();
	      }
	
	      this.subscriptions = new CompositeDisposable();
	      this.handlersByEventName = {};
	    } // Public: Unsubscribe all handlers.
	
	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.subscriptions.dispose();
	      this.handlersByEventName = null;
	      this.disposed = true;
	    }
	    /*
	    Section: Event Subscription
	    */
	    // Public: Register the given handler function to be invoked whenever events by
	    // the given name are emitted via {::emit}.
	    //
	    // * `eventName` {String} naming the event that you want to invoke the handler
	    //   when emitted.
	    // * `handler` {Function} to invoke when {::emit} is called with the given
	    //   event name.
	    //
	    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
	
	  }, {
	    key: "on",
	    value: function on(eventName, handler, unshift) {
	      var _this2 = this;
	
	      if (unshift == null) {
	        unshift = false;
	      }
	
	      if (this.disposed) {
	        throw new Error("Emitter has been disposed");
	      }
	
	      if (typeof handler !== "function") {
	        throw new Error("Handler must be a function");
	      }
	
	      var currentHandlers = this.handlersByEventName[eventName];
	
	      if (currentHandlers) {
	        if (unshift) {
	          this.handlersByEventName[eventName].unshift(handler);
	        } else {
	          this.handlersByEventName[eventName].push(handler);
	        }
	      } else {
	        this.handlersByEventName[eventName] = [handler];
	      } // When the emitter is disposed, we want to dispose of all subscriptions.
	      // However, we also need to stop tracking disposables when they're disposed
	      // from outside, otherwise this class will hold references to all the
	      // disposables it created (instead of just the active ones).
	
	
	      var cleanup = new Disposable(function () {
	        _this2.subscriptions.remove(cleanup);
	
	        return _this2.off(eventName, handler);
	      });
	      this.subscriptions.add(cleanup);
	      return cleanup;
	    } // Public: Register the given handler function to be invoked the next time an
	    // events with the given name is emitted via {::emit}.
	    //
	    // * `eventName` {String} naming the event that you want to invoke the handler
	    //   when emitted.
	    // * `handler` {Function} to invoke when {::emit} is called with the given
	    //   event name.
	    //
	    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
	
	  }, {
	    key: "once",
	    value: function once(eventName, handler, unshift) {
	      if (unshift == null) {
	        unshift = false;
	      }
	
	      var wrapped = function wrapped(value) {
	        disposable.dispose();
	        return handler(value);
	      };
	
	      var disposable = this.on(eventName, wrapped, unshift);
	      return disposable;
	    } // Public: Register the given handler function to be invoked *before* all
	    // other handlers existing at the time of subscription whenever events by the
	    // given name are emitted via {::emit}.
	    //
	    // Use this method when you need to be the first to handle a given event. This
	    // could be required when a data structure in a parent object needs to be
	    // updated before third-party event handlers registered on a child object via a
	    // public API are invoked. Your handler could itself be preempted via
	    // subsequent calls to this method, but this can be controlled by keeping
	    // methods based on `::preempt` private.
	    //
	    // * `eventName` {String} naming the event that you want to invoke the handler
	    //   when emitted.
	    // * `handler` {Function} to invoke when {::emit} is called with the given
	    //   event name.
	    //
	    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
	
	  }, {
	    key: "preempt",
	    value: function preempt(eventName, handler) {
	      return this.on(eventName, handler, true);
	    } // Private: Used by the disposable.
	
	  }, {
	    key: "off",
	    value: function off(eventName, handlerToRemove) {
	      if (this.disposed) {
	        return;
	      }
	
	      var handlers = this.handlersByEventName[eventName];
	
	      if (handlers) {
	        var handlerIndex = handlers.indexOf(handlerToRemove);
	
	        if (handlerIndex >= 0) {
	          handlers.splice(handlerIndex, 1);
	        }
	
	        if (handlers.length === 0) {
	          delete this.handlersByEventName[eventName];
	        }
	      }
	    }
	    /*
	    Section: Event Emission
	    */
	    // Public: Invoke handlers registered via {::on} for the given event name.
	    //
	    // * `eventName` The name of the event to emit. Handlers registered with {::on}
	    //   for the same name will be invoked.
	    // * `value` Callbacks will be invoked with this value as an argument.
	
	  }, {
	    key: "emit",
	    value: function emit(eventName, value) {
	      var handlers = this.handlersByEventName && this.handlersByEventName[eventName];
	
	      if (handlers) {
	        // create a copy of `handlers` so that if any handler mutates `handlers`
	        // (e.g. by calling `on` on this same emitter), this does not result in
	        // changing the handlers being called during this same `emit`.
	        var handlersCopy = handlers.slice();
	
	        for (var i = 0; i < handlersCopy.length; i++) {
	          this.constructor.dispatch(handlersCopy[i], value);
	        }
	      }
	    }
	  }, {
	    key: "emitAsync",
	    value: function emitAsync(eventName, value) {
	      var _this3 = this;
	
	      var handlers = this.handlersByEventName && this.handlersByEventName[eventName];
	
	      if (handlers) {
	        var promises = handlers.map(function (handler) {
	          return _this3.constructor.dispatch(handler, value);
	        });
	        return Promise.all(promises).then(function () {});
	      }
	
	      return Promise.resolve();
	    }
	  }, {
	    key: "getEventNames",
	    value: function getEventNames() {
	      return Object.keys(this.handlersByEventName);
	    }
	  }, {
	    key: "listenerCountForEventName",
	    value: function listenerCountForEventName(eventName) {
	      var handlers = this.handlersByEventName[eventName];
	      return handlers == null ? 0 : handlers.length;
	    }
	  }, {
	    key: "getTotalListenerCount",
	    value: function getTotalListenerCount() {
	      var result = 0;
	
	      var _arr = Object.keys(this.handlersByEventName);
	
	      for (var _i = 0; _i < _arr.length; _i++) {
	        var eventName = _arr[_i];
	        result += this.handlersByEventName[eventName].length;
	      }
	
	      return result;
	    }
	  }]);
	
	  return Emitter;
	}();
	
	Emitter.dispatch = Emitter.simpleDispatch;
	Emitter.exceptionHandlers = [];
	module.exports = Emitter;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	// Essential: A handle to a resource that can be disposed. For example,
	// {Emitter::on} returns disposables representing subscriptions.
	module.exports =
	/*#__PURE__*/
	function () {
	  _createClass(Disposable, null, [{
	    key: "isDisposable",
	    // Public: Ensure that `object` correctly implements the `Disposable`
	    // contract.
	    //
	    // * `object` An {Object} you want to perform the check against.
	    //
	    // Returns a {Boolean} indicating whether `object` is a valid `Disposable`.
	    value: function isDisposable(object) {
	      return typeof (object != null ? object.dispose : undefined) === "function";
	    }
	    /*
	    Section: Construction and Destruction
	    */
	    // Public: Construct a Disposable
	    //
	    // * `disposalAction` A {Function} to call when {::dispose} is called for the
	    //   first time.
	
	  }]);
	
	  function Disposable(disposalAction) {
	    _classCallCheck(this, Disposable);
	
	    this.disposed = false;
	    this.disposalAction = disposalAction;
	  } // Public: Perform the disposal action, indicating that the resource associated
	  // with this disposable is no longer needed.
	  //
	  // You can call this method more than once, but the disposal action will only
	  // be performed the first time.
	
	
	  _createClass(Disposable, [{
	    key: "dispose",
	    value: function dispose() {
	      if (!this.disposed) {
	        this.disposed = true;
	
	        if (typeof this.disposalAction === "function") {
	          this.disposalAction();
	        }
	
	        this.disposalAction = null;
	      }
	    }
	  }]);
	
	  return Disposable;
	}();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	var CompositeDisposable;
	var Disposable; // Essential: An object that aggregates multiple {Disposable} instances together
	// into a single disposable, so they can all be disposed as a group.
	//
	// These are very useful when subscribing to multiple events.
	//
	// ## Examples
	//
	// ```js
	// const {CompositeDisposable} = require('atom')
	//
	// class Something {
	//   constructor() {
	//     this.disposables = new CompositeDisposable()
	//     const editor = atom.workspace.getActiveTextEditor()
	//     this.disposables.add(editor.onDidChange(() => {})
	//     this.disposables.add(editor.onDidChangePath(() => {})
	//   }
	//
	//   destroy() {
	//     this.disposables.dispose();
	//   }
	// }
	// ```
	
	module.exports =
	/*#__PURE__*/
	function () {
	  /*
	  Section: Construction and Destruction
	  */
	  // Public: Construct an instance, optionally with one or more disposables
	  function CompositeDisposable() {
	    _classCallCheck(this, CompositeDisposable);
	
	    this.disposed = false;
	    this.disposables = new Set();
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	      for (var _iterator = arguments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var disposable = _step.value;
	        this.add(disposable);
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return != null) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }
	  } // Public: Dispose all disposables added to this composite disposable.
	  //
	  // If this object has already been disposed, this method has no effect.
	
	
	  _createClass(CompositeDisposable, [{
	    key: "dispose",
	    value: function dispose() {
	      if (!this.disposed) {
	        this.disposed = true;
	        this.disposables.forEach(function (disposable) {
	          return disposable.dispose();
	        });
	        this.disposables = null;
	      }
	    }
	    /*
	    Section: Managing Disposables
	    */
	    // Public: Add disposables to be disposed when the composite is disposed.
	    //
	    // If this object has already been disposed, this method has no effect.
	    //
	    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
	    //   methods.
	
	  }, {
	    key: "add",
	    value: function add() {
	      if (!this.disposed) {
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;
	
	        try {
	          for (var _iterator2 = arguments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var disposable = _step2.value;
	            assertDisposable(disposable);
	            this.disposables.add(disposable);
	          }
	        } catch (err) {
	          _didIteratorError2 = true;
	          _iteratorError2 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
	              _iterator2.return();
	            }
	          } finally {
	            if (_didIteratorError2) {
	              throw _iteratorError2;
	            }
	          }
	        }
	      }
	    } // Public: Remove a previously added disposable.
	    //
	    // * `disposable` {Disposable} instance or any object with a `.dispose()`
	    //   method.
	
	  }, {
	    key: "remove",
	    value: function remove(disposable) {
	      if (!this.disposed) {
	        this.disposables.delete(disposable);
	      }
	    } // Public: Alias to {CompositeDisposable::remove}
	
	  }, {
	    key: "delete",
	    value: function _delete(disposable) {
	      this.remove(disposable);
	    } // Public: Clear all disposables. They will not be disposed by the next call
	    // to dispose.
	
	  }, {
	    key: "clear",
	    value: function clear() {
	      if (!this.disposed) {
	        this.disposables.clear();
	      }
	    }
	  }]);
	
	  return CompositeDisposable;
	}();
	
	function assertDisposable(disposable) {
	  if (Disposable == null) {
	    Disposable = __webpack_require__(6);
	  }
	
	  if (!Disposable.isDisposable(disposable)) {
	    throw new TypeError("Arguments to CompositeDisposable.add must have a .dispose() method");
	  }
	}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, Emitter, RunBuffer, _;
	
	RunBuffer = __webpack_require__(9);
	
	Emitter = __webpack_require__(4).Emitter;
	
	_ = __webpack_require__(15);
	
	AttributedString = (function() {
	
	  /*
	  Section: Creating
	   */
	  function AttributedString(text) {
	    var ref;
	    if (text == null) {
	      text = '';
	    }
	    if (text instanceof AttributedString) {
	      this.string = text.getString();
	      this.runBuffer = (ref = text.runBuffer) != null ? ref.clone() : void 0;
	    } else {
	      this.string = text;
	    }
	  }
	
	  AttributedString.prototype.clone = function(location, length) {
	    var clone, insertRuns, slice;
	    if (location == null) {
	      location = 0;
	    }
	    if (length == null) {
	      length = -1;
	    }
	    if (length === -1) {
	      length = this.getLength() - location;
	    }
	    if (length === 0) {
	      return new AttributedString();
	    } else {
	      clone = new AttributedString(this.string.substr(location, length));
	      if (this.runBuffer) {
	        slice = this.runBuffer.sliceSpansToRange(location, length);
	        insertRuns = [];
	        this.runBuffer.iterateRuns(slice.spanIndex, slice.count, function(run) {
	          return insertRuns.push(run.clone());
	        });
	        clone._getRunIndex().replaceSpansFromLocation(0, insertRuns);
	      }
	      return clone;
	    }
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  AttributedString.prototype.string = null;
	
	  AttributedString.prototype.getString = function() {
	    return this.string.toString();
	  };
	
	  AttributedString.prototype.getLength = function() {
	    return this.string.length;
	  };
	
	  AttributedString.prototype.length = null;
	
	  Object.defineProperty(AttributedString.prototype, 'length', {
	    get: function() {
	      return this.string.length;
	    }
	  });
	
	  AttributedString.prototype.substring = function(start, end) {
	    return this.string.substring(start, end);
	  };
	
	  AttributedString.prototype.substr = function(start, length) {
	    return this.string.substr(start, length);
	  };
	
	  AttributedString.prototype.charAt = function(position) {
	    return this.string.charAt(position);
	  };
	
	  AttributedString.prototype.charCodeAt = function(position) {
	    return this.string.charCodeAt(position);
	  };
	
	  AttributedString.prototype.deleteRange = function(location, length) {
	    if (!length) {
	      return;
	    }
	    return this.replaceRange(location, length, '');
	  };
	
	  AttributedString.prototype.insertText = function(location, text) {
	    if (!text.length) {
	      return;
	    }
	    return this.replaceRange(location, 0, text);
	  };
	
	  AttributedString.prototype.appendText = function(text) {
	    return this.insertText(this.string.length, text);
	  };
	
	  AttributedString.prototype.replaceRange = function(location, length, text) {
	    var insertRuns, insertString, ref, textRunBuffer;
	    if (length === -1) {
	      length = this.getLength() - location;
	    }
	    if (text instanceof AttributedString) {
	      insertString = text.string;
	      if (this.runBuffer) {
	        textRunBuffer = text._getRunIndex();
	      } else {
	        textRunBuffer = text.runBuffer;
	      }
	    } else {
	      insertString = text;
	    }
	    this.string = this.string.substr(0, location) + insertString + this.string.substr(location + length);
	    if ((ref = this.runBuffer) != null) {
	      ref.replaceRange(location, length, insertString);
	    }
	    if (textRunBuffer && text.length) {
	      if (this.runBuffer) {
	        this.setAttributesInRange({}, location, text.length);
	      }
	      insertRuns = [];
	      textRunBuffer.iterateRuns(0, textRunBuffer.getRunCount(), function(run) {
	        return insertRuns.push(run.clone());
	      });
	      return this._getRunIndex().replaceSpansFromLocation(location, insertRuns);
	    }
	  };
	
	
	  /*
	  Section: Attributes
	   */
	
	  AttributedString.prototype._getRunIndex = function() {
	    var runBuffer;
	    if (!(runBuffer = this.runBuffer)) {
	      this.runBuffer = runBuffer = new RunBuffer;
	      this.runBuffer.insertString(0, this.string.toString());
	    }
	    return runBuffer;
	  };
	
	  AttributedString.prototype.getRuns = function() {
	    if (this.runBuffer) {
	      return this.runBuffer.getRuns();
	    } else {
	      return [];
	    }
	  };
	
	  AttributedString.prototype.getFirstOccuranceOfAttribute = function(attribute, effectiveRange, longestEffectiveRange) {
	    var eachRun, i, len, ref;
	    ref = this.getRuns();
	    for (i = 0, len = ref.length; i < len; i++) {
	      eachRun = ref[i];
	      if (eachRun.attributes[attribute] != null) {
	        return this.getAttributeAtIndex(attribute, eachRun.getLocation(), effectiveRange, longestEffectiveRange);
	      }
	    }
	    return null;
	  };
	
	  AttributedString.prototype.getAttributesAtIndex = function(index, effectiveRange, longestEffectiveRange) {
	    if (index >= this.length) {
	      throw new Error("Invalide character index: " + index);
	    }
	    if (this.runBuffer) {
	      return this.runBuffer.getAttributesAtIndex(index, effectiveRange, longestEffectiveRange);
	    } else {
	      if (effectiveRange) {
	        effectiveRange.location = 0;
	        effectiveRange.length = this.length;
	      }
	      if (longestEffectiveRange) {
	        longestEffectiveRange.location = 0;
	        longestEffectiveRange.length = this.length;
	      }
	      return {};
	    }
	  };
	
	  AttributedString.prototype.getAttributeAtIndex = function(attribute, index, effectiveRange, longestEffectiveRange) {
	    if (index >= this.length) {
	      throw new Error("Invalide character index: " + index);
	    }
	    if (this.runBuffer) {
	      return this.runBuffer.getAttributeAtIndex(attribute, index, effectiveRange, longestEffectiveRange);
	    } else {
	      if (effectiveRange) {
	        effectiveRange.location = 0;
	        effectiveRange.length = this.length;
	      }
	      if (longestEffectiveRange) {
	        longestEffectiveRange.location = 0;
	        longestEffectiveRange.length = this.length;
	      }
	      return void 0;
	    }
	  };
	
	  AttributedString.prototype.setAttributesInRange = function(attributes, index, length) {
	    return this._getRunIndex().setAttributesInRange(attributes, index, length);
	  };
	
	  AttributedString.prototype.addAttributeInRange = function(attribute, value, index, length) {
	    return this._getRunIndex().addAttributeInRange(attribute, value, index, length);
	  };
	
	  AttributedString.prototype.addAttributesInRange = function(attributes, index, length) {
	    return this._getRunIndex().addAttributesInRange(attributes, index, length);
	  };
	
	  AttributedString.prototype.removeAttributeInRange = function(attribute, index, length) {
	    if (this.runBuffer) {
	      return this.runBuffer.removeAttributeInRange(attribute, index, length);
	    }
	  };
	
	
	  /*
	  Section: Extracting a Substring
	   */
	
	  AttributedString.prototype.attributedSubstringFromRange = function(location, length) {
	    if (location == null) {
	      location = 0;
	    }
	    if (length == null) {
	      length = -1;
	    }
	    return this.clone(location, length);
	  };
	
	
	  /*
	  Section: Debug
	   */
	
	  AttributedString.prototype.toString = function() {
	    if (this.runBuffer) {
	      return this.runBuffer.toString();
	    } else if (this.string) {
	      return "(" + this.string + ")";
	    } else {
	      return '';
	    }
	  };
	
	  return AttributedString;
	
	})();
	
	AttributedString.ObjectReplacementCharacter = '\ufffc';
	
	AttributedString.LineSeparatorCharacter = '\u2028';
	
	module.exports = AttributedString;
	
	__webpack_require__(19);
	
	__webpack_require__(228);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var RunBuffer, RunSpan, SpanBuffer, shallowObjectEqual,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	shallowObjectEqual = __webpack_require__(10).shallowObjectEqual;
	
	SpanBuffer = __webpack_require__(11);
	
	RunSpan = __webpack_require__(18);
	
	RunBuffer = (function(superClass) {
	  extend(RunBuffer, superClass);
	
	  function RunBuffer(children) {
	    RunBuffer.__super__.constructor.call(this, children);
	  }
	
	  RunBuffer.prototype.getRunCount = function() {
	    return this.spanCount;
	  };
	
	  RunBuffer.prototype.getRun = function(index) {
	    return this.getSpan(index);
	  };
	
	  RunBuffer.prototype.getRunIndex = function(child) {
	    return this.getSpanIndex(child);
	  };
	
	  RunBuffer.prototype.getRuns = function(start, count) {
	    return this.getSpans(start, count);
	  };
	
	  RunBuffer.prototype.iterateRuns = function(start, count, operation) {
	    return this.iterateSpans(start, count, operation);
	  };
	
	  RunBuffer.prototype.insertRuns = function(start, lines) {
	    return this.insertSpans(start, lines);
	  };
	
	  RunBuffer.prototype.removeRuns = function(start, removeCount) {
	    return this.removeSpans(start, removeCount);
	  };
	
	  RunBuffer.prototype.sliceRunsToRange = function(location, length) {
	    return this.sliceSpansToRange(location, length);
	  };
	
	  RunBuffer.prototype.createRun = function(text) {
	    return this.createSpan(text);
	  };
	
	  RunBuffer.prototype.createSpan = function(text) {
	    return new RunSpan(text);
	  };
	
	
	  /*
	  Reading attributes
	   */
	
	  RunBuffer.prototype.getAttributesAtIndex = function(characterIndex, effectiveRange, longestEffectiveRange) {
	    var result, start;
	    start = this.getSpanInfoAtCharacterIndex(characterIndex);
	    result = start.span.attributes;
	    if (effectiveRange) {
	      effectiveRange.location = start.spanLocation;
	      effectiveRange.length = start.span.getLength();
	    }
	    if (longestEffectiveRange) {
	      this._longestEffectiveRange(start.spanIndex, start.span, longestEffectiveRange, function(run) {
	        return shallowObjectEqual(run.attributes, result);
	      });
	    }
	    return result;
	  };
	
	  RunBuffer.prototype.getAttributeAtIndex = function(attribute, characterIndex, effectiveRange, longestEffectiveRange) {
	    var result, start;
	    start = this.getSpanInfoAtCharacterIndex(characterIndex);
	    result = start.span.attributes[attribute];
	    if (effectiveRange) {
	      effectiveRange.location = start.spanLocation;
	      effectiveRange.length = start.span.getLength();
	    }
	    if (longestEffectiveRange) {
	      this._longestEffectiveRange(start.spanIndex, start.span, longestEffectiveRange, function(run) {
	        return run.attributes[attribute] === result;
	      });
	    }
	    return result;
	  };
	
	  RunBuffer.prototype._longestEffectiveRange = function(runIndex, attributeRun, range, shouldExtendRunToInclude) {
	    var currentRun, nextIndex, nextRun;
	    nextIndex = runIndex - 1;
	    currentRun = attributeRun;
	    while (nextIndex >= 0) {
	      nextRun = this.getRun(nextIndex);
	      if (shouldExtendRunToInclude(nextRun)) {
	        currentRun = nextRun;
	        nextIndex--;
	      } else {
	        break;
	      }
	    }
	    range.location = currentRun.getLocation();
	    nextIndex = runIndex + 1;
	    currentRun = attributeRun;
	    while (nextIndex < this.getRunCount()) {
	      nextRun = this.getRun(nextIndex);
	      if (shouldExtendRunToInclude(nextRun)) {
	        currentRun = nextRun;
	        nextIndex++;
	      } else {
	        break;
	      }
	    }
	    range.length = (currentRun.getLocation() + currentRun.getLength()) - range.location;
	    return range;
	  };
	
	
	  /*
	  Changing attributes
	   */
	
	  RunBuffer.prototype.sliceAndIterateRunsByRange = function(location, length, operation) {
	    var slice;
	    slice = this.sliceRunsToRange(location, length);
	    return this.iterateSpans(slice.spanIndex, slice.count, operation);
	  };
	
	  RunBuffer.prototype.setAttributesInRange = function(attributes, location, length) {
	    return this.sliceAndIterateRunsByRange(location, length, function(run) {
	      return run.setAttributes(attributes);
	    });
	  };
	
	  RunBuffer.prototype.addAttributeInRange = function(attribute, value, location, length) {
	    return this.sliceAndIterateRunsByRange(location, length, function(run) {
	      return run.addAttribute(attribute, value);
	    });
	  };
	
	  RunBuffer.prototype.addAttributesInRange = function(attributes, location, length) {
	    return this.sliceAndIterateRunsByRange(location, length, function(run) {
	      return run.addAttributes(attributes);
	    });
	  };
	
	  RunBuffer.prototype.removeAttributeInRange = function(attribute, location, length) {
	    return this.sliceAndIterateRunsByRange(location, length, function(run) {
	      return run.removeAttribute(attribute);
	    });
	  };
	
	
	  /*
	  Changing characters and attributes
	   */
	
	  RunBuffer.prototype.insertRunBuffer = function(runIndex, index) {};
	
	  return RunBuffer;
	
	})(SpanBuffer);
	
	module.exports = RunBuffer;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	module.exports = {
	  assert: function(condition, message) {
	    if (message == null) {
	      message = 'Failed Assert';
	    }
	    if (!condition) {
	      throw new Error(message);
	    }
	  },
	  repeat: function(pattern, count) {
	    var result;
	    if (count <= 0) {
	      return '';
	    } else {
	      result = '';
	      while (count > 1) {
	        if (count & 1) {
	          result += pattern;
	        }
	        count >>= 1;
	        pattern += pattern;
	      }
	      return result + pattern;
	    }
	  },
	  shallowArrayEqual: function(a, b) {
	    var i, index, len, value;
	    if (!a && !b) {
	      return true;
	    }
	    if (!a && b || a && !b) {
	      return false;
	    }
	    if (a.length !== b.length) {
	      return false;
	    }
	    for (index = i = 0, len = a.length; i < len; index = ++i) {
	      value = a[index];
	      if (b[index] !== value) {
	        return false;
	      }
	    }
	    return true;
	  },
	  shallowObjectEqual: function(a, b) {
	    var i, j, key, len, len1, numKeysA, numKeysB, ref;
	    if (!a && !b) {
	      return true;
	    }
	    if (!a && b || a && !b) {
	      return false;
	    }
	    numKeysA = 0;
	    numKeysB = 0;
	    ref = Object.keys(b);
	    for (i = 0, len = ref.length; i < len; i++) {
	      key = ref[i];
	      numKeysB++;
	      if (!a[key] !== b[key]) {
	        return false;
	      }
	    }
	    for (j = 0, len1 = a.length; j < len1; j++) {
	      key = a[j];
	      numKeysA++;
	    }
	    return numKeysA === numKeysB;
	  }
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var Emitter, Span, SpanBranch, SpanBuffer, SpanLeaf, assert,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	SpanBranch = __webpack_require__(12);
	
	SpanLeaf = __webpack_require__(13);
	
	Emitter = __webpack_require__(4).Emitter;
	
	assert = __webpack_require__(10).assert;
	
	Span = __webpack_require__(14);
	
	SpanBuffer = (function(superClass) {
	  extend(SpanBuffer, superClass);
	
	  function SpanBuffer(children) {
	    if (children == null) {
	      children = [new SpanLeaf([])];
	    }
	    SpanBuffer.__super__.constructor.call(this, children);
	    this.isRoot = true;
	    this.emitter = null;
	    this.changing = 0;
	    this.scheduledChangeEvent = null;
	    this.scheduledChangeEventFire = null;
	  }
	
	  SpanBuffer.prototype.clone = function() {
	    return SpanBuffer.__super__.clone.call(this);
	  };
	
	  SpanBuffer.prototype.destroy = function() {
	    var ref;
	    if (!this.destroyed) {
	      this.destroyed = true;
	      return (ref = this.emitter) != null ? ref.emit('did-destroy') : void 0;
	    }
	  };
	
	
	  /*
	  Section: Events
	   */
	
	  SpanBuffer.prototype._getEmitter = function() {
	    var emitter;
	    if (!(emitter = this.emitter)) {
	      this.emitter = emitter = new Emitter;
	    }
	    return emitter;
	  };
	
	  SpanBuffer.prototype.onDidBeginChanges = function(callback) {
	    return this._getEmitter().on('did-begin-changes', callback);
	  };
	
	  SpanBuffer.prototype.onWillChange = function(callback) {
	    return this._getEmitter().on('will-change', callback);
	  };
	
	  SpanBuffer.prototype.onDidChange = function(callback) {
	    return this._getEmitter().on('did-change', callback);
	  };
	
	  SpanBuffer.prototype.onDidEndChanges = function(callback) {
	    return this._getEmitter().on('did-end-changes', callback);
	  };
	
	  SpanBuffer.prototype.onDidDestroy = function(callback) {
	    return this._getEmitter().on('did-destroy', callback);
	  };
	
	
	  /*
	  Section: Changing
	   */
	
	  SpanBuffer.prototype.isChanging = null;
	
	  Object.defineProperty(SpanBuffer.prototype, 'isChanging', {
	    get: function() {
	      return this.changing !== 0;
	    }
	  });
	
	  SpanBuffer.prototype.groupChanges = function(changeEvent, callback) {
	    this.beginChanges(changeEvent);
	    callback();
	    return this.endChanges();
	  };
	
	  SpanBuffer.prototype.beginChanges = function(changeEvent) {
	    var ref;
	    this.changing++;
	    if (this.changing === 1) {
	      if ((ref = this.emitter) != null) {
	        ref.emit('did-begin-changes');
	      }
	    }
	    if (changeEvent) {
	      assert(!this.scheduledChangeEvent, 'Can not have two scheduled change events');
	      this.emitter.emit('will-change', changeEvent);
	      this.scheduledChangeEvent = changeEvent;
	      return this.scheduledChangeEventFire = this.changing;
	    }
	  };
	
	  SpanBuffer.prototype.endChanges = function() {
	    var ref;
	    if (this.scheduledChangeEvent && this.scheduledChangeEventFire === this.changing) {
	      this.emitter.emit('did-change', this.scheduledChangeEvent);
	      this.scheduledChangeEvent = null;
	      this.scheduledChangeEventFire = null;
	    }
	    this.changing--;
	    if (this.changing === 0) {
	      return (ref = this.emitter) != null ? ref.emit('did-end-changes') : void 0;
	    }
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  SpanBuffer.prototype.substr = function(location, length) {
	    return this.getString().substr(location, length);
	  };
	
	  SpanBuffer.prototype.deleteRange = function(location, length) {
	    if (!length) {
	      return;
	    }
	    return this.replaceRange(location, length, '');
	  };
	
	  SpanBuffer.prototype.insertString = function(location, string) {
	    if (!string) {
	      return;
	    }
	    return this.replaceRange(location, 0, string);
	  };
	
	  SpanBuffer.prototype.replaceRange = function(location, length, string) {
	    var changeEvent, slice, spanLength, start;
	    if (location < 0 || (location + length) > this.getLength()) {
	      throw new Error("Invalide text range: " + location + "-" + (location + length));
	    }
	    if (this.emitter && !this.scheduledChangeEvent) {
	      changeEvent = {
	        location: location,
	        replacedLength: length,
	        insertedString: string,
	        insertedSpans: [],
	        removedSpans: []
	      };
	    }
	    this.beginChanges(changeEvent);
	    if (this.getSpanCount() === 0) {
	      this.insertSpans(0, [this.createSpan(string)]);
	    } else {
	      start = this.getSpanInfoAtLocation(location);
	      spanLength = start.span.getLength();
	      if (start.location + length <= spanLength && length !== spanLength) {
	        start.span.replaceRange(start.location, length, string);
	      } else {
	        slice = this.sliceSpansToRange(location, length);
	        if (start.location === 0 && string.length) {
	          start.span.replaceRange(0, start.span.getLength(), string);
	          this.removeSpans(slice.spanIndex + 1, slice.count - 1);
	        } else {
	          this.removeSpans(slice.spanIndex, slice.count);
	          if (string) {
	            start = this.getSpanInfoAtLocation(location);
	            start.span.appendString(string);
	          }
	        }
	      }
	    }
	    return this.endChanges();
	  };
	
	  SpanBuffer.prototype.getSpansInRange = function(location, length, chooseRight) {
	    var range;
	    if (chooseRight == null) {
	      chooseRight = false;
	    }
	    range = this.getSpanRangeForCharacterRange(location, length, chooseRight);
	    return this.getSpans(range.location, range.length);
	  };
	
	  SpanBuffer.prototype.getSpanRangeForCharacterRange = function(location, length, chooseRight) {
	    var end, start;
	    if (chooseRight == null) {
	      chooseRight = false;
	    }
	    if (this.getSpanCount() === 0) {
	      return {
	        location: 0,
	        length: 0
	      };
	    }
	    start = this.getSpanInfoAtLocation(location, chooseRight);
	    end = this.getSpanInfoAtLocation(location + length, chooseRight);
	    if (end.location === 0 && end.spanIndex !== start.spanIndex) {
	      end.spanIndex--;
	    }
	    return {
	      location: start.spanIndex,
	      length: (end.spanIndex - start.spanIndex) + 1
	    };
	  };
	
	  SpanBuffer.prototype.getSpanInfoAtCharacterIndex = function(characterIndex) {
	    if (characterIndex < this.getLength()) {
	      return this.getSpanInfoAtLocation(characterIndex, true);
	    } else {
	      throw new Error("Invalide character index: " + characterIndex);
	    }
	  };
	
	  SpanBuffer.prototype.getSpanInfoAtLocation = function(location, chooseRight) {
	    var lastSpan, lastSpanIndex, spanInfo;
	    if (chooseRight == null) {
	      chooseRight = false;
	    }
	    if (location > this.getLength()) {
	      throw new Error("Invalide cursor location: " + location);
	    }
	    if (chooseRight) {
	      if (location === this.getLength()) {
	        lastSpanIndex = this.getSpanCount() - 1;
	        lastSpan = this.getSpan(lastSpanIndex);
	        if (lastSpan) {
	          spanInfo = {
	            span: lastSpan,
	            location: lastSpan.getLength(),
	            spanIndex: lastSpanIndex,
	            spanLocation: location - lastSpan.getLength(),
	            spanYOffset: lastSpan.getYOffset()
	          };
	        } else {
	          null;
	        }
	      } else {
	        spanInfo = SpanBuffer.__super__.getSpanInfoAtLocation.call(this, location + 1);
	        spanInfo.location--;
	      }
	    } else {
	      spanInfo = SpanBuffer.__super__.getSpanInfoAtLocation.call(this, location);
	    }
	    return spanInfo;
	  };
	
	  SpanBuffer.prototype.sliceSpanAtLocation = function(location) {
	    var start, startSplit;
	    start = this.getSpanInfoAtLocation(location);
	    if (startSplit = start.span.split(start.location)) {
	      this.insertSpans(start.spanIndex + 1, [startSplit]);
	    }
	    return start;
	  };
	
	  SpanBuffer.prototype.sliceSpansToRange = function(location, length) {
	    var end, start;
	    assert(length > 0);
	    start = this.sliceSpanAtLocation(location);
	    if (start.location === start.span.getLength()) {
	      start.spanIndex++;
	    }
	    end = this.sliceSpanAtLocation(location + length);
	    return {
	      spanIndex: start.spanIndex,
	      count: (end.spanIndex - start.spanIndex) + 1
	    };
	  };
	
	  SpanBuffer.prototype.replaceSpansFromLocation = function(location, spans) {
	    var each, i, len, slice, totalLength;
	    totalLength = 0;
	    for (i = 0, len = spans.length; i < len; i++) {
	      each = spans[i];
	      totalLength += each.getLength();
	    }
	    slice = this.sliceSpansToRange(location, totalLength);
	    this.removeSpans(slice.spanIndex, slice.count);
	    return this.insertSpans(slice.spanIndex, spans);
	  };
	
	
	  /*
	  Section: Y-Offset
	   */
	
	  SpanBuffer.prototype.getSpansInYOffsetRange = function(topYOffset, bottomYOffset) {
	    var range;
	    range = this.getSpanRangeForYOffsetRange(topYOffset, bottomYOffset);
	    return this.getSpans(range.location, range.length);
	  };
	
	  SpanBuffer.prototype.getSpanRangeForYOffsetRange = function(topYOffset, bottomYOffset) {
	    var end, start;
	    if (this.getSpanCount() === 0) {
	      return {
	        location: 0,
	        length: 0
	      };
	    }
	    start = this.getSpanInfoAtYOffset(topYOffset);
	    end = this.getSpanInfoAtYOffset(bottomYOffset);
	    if (end.location === 0 && end.spanIndex !== start.spanIndex) {
	      end.spanIndex--;
	    }
	    return {
	      location: start.spanIndex,
	      length: (end.spanIndex - start.spanIndex) + 1
	    };
	  };
	
	
	  /*
	  Section: Spans
	   */
	
	  SpanBuffer.prototype.createSpan = function(text) {
	    return new Span(text);
	  };
	
	  SpanBuffer.prototype.insertSpans = function(spanIndex, spans) {
	    var changeEvent, each, insertedString, ref, ref1;
	    if (spanIndex < 0 || spanIndex > this.getSpanCount()) {
	      throw new Error("Invalide span index: " + spanIndex);
	    }
	    if (!spans.length) {
	      return;
	    }
	    if (this.emitter) {
	      if (this.scheduledChangeEvent) {
	        this.scheduledChangeEvent.insertedSpans.concat(spans);
	      } else {
	        insertedString = ((function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = spans.length; i < len; i++) {
	            each = spans[i];
	            results.push(each.getString());
	          }
	          return results;
	        })()).join('');
	        changeEvent = {
	          location: (ref = (ref1 = this.getSpan(spanIndex)) != null ? ref1.getLocation() : void 0) != null ? ref : this.getLength(),
	          replacedLength: 0,
	          insertedString: insertedString,
	          insertedSpans: spans.slice(0),
	          removedSpans: []
	        };
	      }
	    }
	    this.beginChanges(changeEvent);
	    SpanBuffer.__super__.insertSpans.call(this, spanIndex, spans);
	    return this.endChanges();
	  };
	
	  SpanBuffer.prototype.removeSpans = function(spanIndex, removeCount) {
	    var changeEvent, removedSpans, replacedLength;
	    if (spanIndex < 0 || (spanIndex + removeCount) > this.getSpanCount()) {
	      throw new Error("Invalide span range: " + spanIndex + "-" + (spanIndex + removeCount));
	    }
	    if (!removeCount) {
	      return;
	    }
	    if (this.emitter) {
	      if (this.scheduledChangeEvent) {
	        this.scheduledChangeEvent.removedSpans.concat(this.getSpans(spanIndex, removeCount));
	      } else {
	        replacedLength = 0;
	        removedSpans = [];
	        this.iterateSpans(spanIndex, removeCount, function(span) {
	          replacedLength += span.getLength();
	          return removedSpans.push(span);
	        });
	        changeEvent = {
	          location: this.getSpan(spanIndex).getLocation(),
	          replacedLength: replacedLength,
	          insertedString: '',
	          insertedSpans: [],
	          removedSpans: removedSpans.slice(0)
	        };
	      }
	    }
	    this.beginChanges(changeEvent);
	    SpanBuffer.__super__.removeSpans.call(this, spanIndex, removeCount);
	    return this.endChanges();
	  };
	
	
	  /*
	  Section: Debug
	   */
	
	  SpanBuffer.prototype.toString = function() {
	    var spanStrings;
	    spanStrings = [];
	    this.iterateSpans(0, this.getSpanCount(), function(span) {
	      return spanStrings.push(span.toString());
	    });
	    return "" + (spanStrings.join(''));
	  };
	
	  return SpanBuffer;
	
	})(SpanBranch);
	
	module.exports = SpanBuffer;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var SpanBranch, SpanLeaf;
	
	SpanLeaf = __webpack_require__(13);
	
	SpanBranch = (function() {
	  function SpanBranch(children1) {
	    var each, height, j, len, length, ref, spanCount;
	    this.children = children1;
	    this.indexParent = null;
	    spanCount = 0;
	    length = 0;
	    height = 0;
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      each.indexParent = this;
	      spanCount += each.getSpanCount();
	      length += each.getLength();
	      height += each.getHeight();
	    }
	    this.spanCount = spanCount;
	    this.length = length;
	    this.height = height;
	  }
	
	  SpanBranch.prototype.clone = function() {
	    var children, each, j, len, ref;
	    children = [];
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      children.push(each.clone());
	    }
	    return new this.constructor(children);
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  SpanBranch.prototype.getLength = function() {
	    return this.length;
	  };
	
	  SpanBranch.prototype.getString = function() {
	    var each, j, len, ref, strings;
	    strings = [];
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      strings.push(each.getString());
	    }
	    return strings.join('');
	  };
	
	  SpanBranch.prototype.getLocation = function(child) {
	    var each, j, len, length, ref, ref1;
	    length = ((ref = this.indexParent) != null ? ref.getLocation(this) : void 0) || 0;
	    if (child) {
	      ref1 = this.children;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        each = ref1[j];
	        if (each === child) {
	          break;
	        }
	        length += each.getLength();
	      }
	    }
	    return length;
	  };
	
	  SpanBranch.prototype.getSpanInfoAtLocation = function(location, spanIndex, spanLocation, spanYOffset) {
	    var childLength, each, j, len, ref;
	    if (spanIndex == null) {
	      spanIndex = 0;
	    }
	    if (spanLocation == null) {
	      spanLocation = 0;
	    }
	    if (spanYOffset == null) {
	      spanYOffset = 0;
	    }
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      childLength = each.getLength();
	      if (location > childLength) {
	        location -= childLength;
	        spanIndex += each.getSpanCount();
	        spanLocation += childLength;
	        spanYOffset += each.getHeight();
	      } else {
	        return each.getSpanInfoAtLocation(location, spanIndex, spanLocation, spanYOffset);
	      }
	    }
	  };
	
	
	  /*
	  Section: Y-Offset
	   */
	
	  SpanBranch.prototype.getHeight = function() {
	    return this.height;
	  };
	
	  SpanBranch.prototype.getYOffset = function(child) {
	    var each, j, len, ref, ref1, yOffset;
	    yOffset = ((ref = this.indexParent) != null ? ref.getYOffset(this) : void 0) || 0;
	    if (child) {
	      ref1 = this.children;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        each = ref1[j];
	        if (each === child) {
	          break;
	        }
	        yOffset += each.getHeight();
	      }
	    }
	    return yOffset;
	  };
	
	  SpanBranch.prototype.getSpanInfoAtYOffset = function(yOffset, spanIndex, spanLocation, spanYOffset) {
	    var childHeight, each, j, len, overshoot, ref;
	    if (spanIndex == null) {
	      spanIndex = 0;
	    }
	    if (spanLocation == null) {
	      spanLocation = 0;
	    }
	    if (spanYOffset == null) {
	      spanYOffset = 0;
	    }
	    overshoot = Math.max(0, yOffset - this.height);
	    yOffset = Math.min(yOffset, this.height);
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      childHeight = each.getHeight();
	      if (yOffset > childHeight) {
	        yOffset -= childHeight;
	        spanIndex += each.getSpanCount();
	        spanLocation += each.getLength();
	        spanYOffset += childHeight;
	      } else {
	        return each.getSpanInfoAtYOffset(yOffset + overshoot, spanIndex, spanLocation, spanYOffset);
	      }
	    }
	  };
	
	
	  /*
	  Section: Spans
	   */
	
	  SpanBranch.prototype.getSpanCount = function() {
	    return this.spanCount;
	  };
	
	  SpanBranch.prototype.getSpan = function(index) {
	    var childSpanCount, each, j, len, ref;
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      childSpanCount = each.getSpanCount();
	      if (index >= childSpanCount) {
	        index -= childSpanCount;
	      } else {
	        return each.getSpan(index);
	      }
	    }
	  };
	
	  SpanBranch.prototype.getSpanIndex = function(child) {
	    var each, index, j, len, ref, ref1;
	    index = ((ref = this.indexParent) != null ? ref.getSpanIndex(this) : void 0) || 0;
	    if (child) {
	      ref1 = this.children;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        each = ref1[j];
	        if (each === child) {
	          break;
	        }
	        index += each.getSpanCount();
	      }
	    }
	    return index;
	  };
	
	  SpanBranch.prototype.getSpans = function(start, count) {
	    var spans;
	    if (start == null) {
	      start = 0;
	    }
	    if (count == null) {
	      count = this.getSpanCount() - start;
	    }
	    spans = [];
	    this.iterateSpans(start, count, function(span) {
	      return spans.push(span);
	    });
	    return spans;
	  };
	
	  SpanBranch.prototype.iterateSpans = function(spanIndex, count, operation) {
	    var child, childSpanCount, j, len, ref, used;
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      childSpanCount = child.getSpanCount();
	      if (spanIndex < childSpanCount) {
	        used = Math.min(count, childSpanCount - spanIndex);
	        if (child.iterateSpans(spanIndex, used, operation) === false) {
	          return false;
	        }
	        if ((count -= used) === 0) {
	          break;
	        }
	        spanIndex = 0;
	      } else {
	        spanIndex -= childSpanCount;
	      }
	    }
	  };
	
	  SpanBranch.prototype.insertSpans = function(spanIndex, spans) {
	    var child, childSpanCount, each, i, j, k, len, len1, newleaf, ref, results, spilled;
	    this.spanCount += spans.length;
	    for (j = 0, len = spans.length; j < len; j++) {
	      each = spans[j];
	      this.length += each.getLength();
	      this.height += each.getHeight();
	    }
	    ref = this.children;
	    results = [];
	    for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
	      child = ref[i];
	      childSpanCount = child.getSpanCount();
	      if (spanIndex <= childSpanCount) {
	        child.insertSpans(spanIndex, spans);
	        if (child instanceof SpanLeaf && child.children.length > 50) {
	          while (child.children.length > 50) {
	            spilled = child.children.splice(child.children.length - 25, 25);
	            newleaf = new SpanLeaf(spilled);
	            child.length -= newleaf.length;
	            child.height -= newleaf.height;
	            this.children.splice(i + 1, 0, newleaf);
	            newleaf.indexParent = this;
	          }
	          this.maybeSpill();
	        }
	        break;
	      }
	      results.push(spanIndex -= childSpanCount);
	    }
	    return results;
	  };
	
	  SpanBranch.prototype.removeSpans = function(spanIndex, removeCount) {
	    var child, childDeleteCount, childOldHeight, childOldLength, childSpanCount, i;
	    this.spanCount -= removeCount;
	    i = 0;
	    while (child = this.children[i]) {
	      childSpanCount = child.getSpanCount();
	      if (spanIndex < childSpanCount) {
	        childDeleteCount = Math.min(removeCount, childSpanCount - spanIndex);
	        childOldLength = child.getLength();
	        childOldHeight = child.getHeight();
	        child.removeSpans(spanIndex, childDeleteCount);
	        this.length -= childOldLength - child.getLength();
	        this.height -= childOldHeight - child.getHeight();
	        if (childSpanCount === childDeleteCount) {
	          this.children.splice(i--, 1);
	          child.indexParent = null;
	        }
	        if ((removeCount -= childDeleteCount) === 0) {
	          break;
	        }
	        spanIndex = 0;
	      } else {
	        spanIndex -= childSpanCount;
	      }
	      i++;
	    }
	    return this.maybeCollapse(removeCount);
	  };
	
	  SpanBranch.prototype.mergeSpans = function(spanIndex, count) {
	    var each, j, len, prev, removeRange, removeRanges, removeStart, results;
	    prev = null;
	    removeStart = spanIndex;
	    removeRanges = [];
	    removeRange = null;
	    this.iterateSpans(spanIndex, count, function(each) {
	      if (prev != null ? prev.mergeWithSpan(each) : void 0) {
	        if (!removeRange) {
	          removeRange = {
	            spanIndex: removeStart({
	              count: 0
	            })
	          };
	          removeRanges.push(removeRange);
	        }
	        return removeRange.count++;
	      } else {
	        removeRange = null;
	        return removeStart++;
	      }
	    });
	    results = [];
	    for (j = 0, len = removeRanges.length; j < len; j++) {
	      each = removeRanges[j];
	      results.push(this.removeSpans(each.spanIndex, each.count));
	    }
	    return results;
	  };
	
	
	  /*
	  Section: Tree Balance
	   */
	
	  SpanBranch.prototype.maybeSpill = function() {
	    var copy, current, index, sibling, spilled;
	    if (this.children.length <= 10) {
	      return;
	    }
	    current = this;
	    while (current.children.length > 10) {
	      spilled = current.children.splice(current.children.length - 5, 5);
	      sibling = new SpanBranch(spilled);
	      if (current.indexParent) {
	        current.spanCount -= sibling.spanCount;
	        current.length -= sibling.length;
	        current.height -= sibling.height;
	        index = current.indexParent.children.indexOf(current);
	        current.indexParent.children.splice(index + 1, 0, sibling);
	      } else {
	        copy = new SpanBranch(current.children);
	        copy.indexParent = current;
	        current.children = [copy, sibling];
	        current = copy;
	      }
	      sibling.indexParent = current.indexParent;
	    }
	    return current.indexParent.maybeSpill();
	  };
	
	  SpanBranch.prototype.maybeCollapse = function(removeCount) {
	    var spans;
	    if ((this.spanCount - removeCount) > 25) {
	      return;
	    }
	    if (this.children.length > 1 || !(this.children[0] instanceof SpanLeaf)) {
	      spans = [];
	      this.collapse(spans);
	      this.children = [new SpanLeaf(spans)];
	      return this.children[0].indexParent = this;
	    }
	  };
	
	  SpanBranch.prototype.collapse = function(spans) {
	    var each, j, len, ref, results;
	    ref = this.children;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      results.push(each.collapse(spans));
	    }
	    return results;
	  };
	
	  return SpanBranch;
	
	})();
	
	module.exports = SpanBranch;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	var SpanLeaf;
	
	SpanLeaf = (function() {
	  function SpanLeaf(children1) {
	    var each, height, j, len, length, ref;
	    this.children = children1;
	    this.indexParent = null;
	    length = 0;
	    height = 0;
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      each.indexParent = this;
	      length += each.getLength();
	      height += each.getHeight();
	    }
	    this.length = length;
	    this.height = height;
	  }
	
	  SpanLeaf.prototype.clone = function() {
	    var children, each, j, len, ref;
	    children = [];
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      children.push(each.clone());
	    }
	    return new this.constructor(children);
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  SpanLeaf.prototype.getLength = function() {
	    return this.length;
	  };
	
	  SpanLeaf.prototype.getString = function() {
	    var each, j, len, ref, strings;
	    strings = [];
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      strings.push(each.getString());
	    }
	    return strings.join('');
	  };
	
	  SpanLeaf.prototype.getLocation = function(child) {
	    var each, j, len, length, ref, ref1;
	    length = ((ref = this.indexParent) != null ? ref.getLocation(this) : void 0) || 0;
	    if (child) {
	      ref1 = this.children;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        each = ref1[j];
	        if (each === child) {
	          break;
	        }
	        length += each.getLength();
	      }
	    }
	    return length;
	  };
	
	  SpanLeaf.prototype.getSpanInfoAtLocation = function(location, spanIndex, spanLocation, spanYOffset) {
	    var childLength, each, j, len, ref;
	    if (spanIndex == null) {
	      spanIndex = 0;
	    }
	    if (spanLocation == null) {
	      spanLocation = 0;
	    }
	    if (spanYOffset == null) {
	      spanYOffset = 0;
	    }
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      childLength = each.getLength();
	      if (location > childLength) {
	        location -= childLength;
	        spanIndex++;
	        spanLocation += childLength;
	        spanYOffset += each.getHeight();
	      } else {
	        return {
	          span: each,
	          location: location,
	          spanIndex: spanIndex,
	          spanLocation: spanLocation,
	          spanYOffset: spanYOffset
	        };
	      }
	    }
	  };
	
	
	  /*
	  Section: Y-Offset
	   */
	
	  SpanLeaf.prototype.getHeight = function() {
	    return this.height;
	  };
	
	  SpanLeaf.prototype.getYOffset = function(child) {
	    var each, j, len, ref, ref1, yOffset;
	    yOffset = ((ref = this.indexParent) != null ? ref.getYOffset(this) : void 0) || 0;
	    if (child) {
	      ref1 = this.children;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        each = ref1[j];
	        if (each === child) {
	          break;
	        }
	        yOffset += each.getHeight();
	      }
	    }
	    return yOffset;
	  };
	
	  SpanLeaf.prototype.getSpanInfoAtYOffset = function(yOffset, spanIndex, spanLocation, spanYOffset) {
	    var childHeight, each, j, len, overshoot, ref;
	    if (spanIndex == null) {
	      spanIndex = 0;
	    }
	    if (spanLocation == null) {
	      spanLocation = 0;
	    }
	    if (spanYOffset == null) {
	      spanYOffset = 0;
	    }
	    overshoot = Math.max(0, yOffset - this.height);
	    yOffset = Math.min(yOffset, this.height);
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      childHeight = each.getHeight();
	      if (yOffset > childHeight) {
	        yOffset -= childHeight;
	        spanIndex++;
	        spanLocation += each.getLength();
	        spanYOffset += childHeight;
	      } else {
	        return {
	          span: each,
	          yOffset: yOffset + overshoot,
	          spanIndex: spanIndex,
	          spanLocation: spanLocation,
	          spanYOffset: spanYOffset
	        };
	      }
	    }
	  };
	
	
	  /*
	  Section: Spans
	   */
	
	  SpanLeaf.prototype.getSpanCount = function() {
	    return this.children.length;
	  };
	
	  SpanLeaf.prototype.getSpan = function(index) {
	    return this.children[index];
	  };
	
	  SpanLeaf.prototype.getSpanIndex = function(child) {
	    var index, ref;
	    index = ((ref = this.indexParent) != null ? ref.getSpanIndex(this) : void 0) || 0;
	    if (child) {
	      index += this.children.indexOf(child);
	    }
	    return index;
	  };
	
	  SpanLeaf.prototype.iterateSpans = function(start, count, operation) {
	    var i, j, ref, ref1;
	    for (i = j = ref = start, ref1 = start + count; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	      if (operation(this.children[i]) === false) {
	        return false;
	      }
	    }
	  };
	
	  SpanLeaf.prototype.insertSpans = function(index, spans) {
	    var each, j, len;
	    for (j = 0, len = spans.length; j < len; j++) {
	      each = spans[j];
	      each.indexParent = this;
	      this.length += each.getLength();
	      this.height += each.getHeight();
	    }
	    return this.children = this.children.slice(0, index).concat(spans).concat(this.children.slice(index));
	  };
	
	  SpanLeaf.prototype.removeSpans = function(start, removeCount) {
	    var each, end, i, j, ref, ref1;
	    end = start + removeCount;
	    for (i = j = ref = start, ref1 = end; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
	      each = this.children[i];
	      each.indexParent = null;
	      this.length -= each.getLength();
	      this.height -= each.getHeight();
	    }
	    return this.children.splice(start, removeCount);
	  };
	
	
	  /*
	  Section: Util
	   */
	
	  SpanLeaf.prototype.collapse = function(spans) {
	    var each, j, len, ref, results;
	    ref = this.children;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      results.push(spans.push(each));
	    }
	    return results;
	  };
	
	  return SpanLeaf;
	
	})();
	
	module.exports = SpanLeaf;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var Span, _;
	
	_ = __webpack_require__(15);
	
	Span = (function() {
	  function Span(string1) {
	    this.string = string1 != null ? string1 : '';
	    this.indexParent = null;
	  }
	
	  Span.prototype.clone = function() {
	    return new this.constructor(this.string);
	  };
	
	  Span.prototype.split = function(location) {
	    var clone;
	    if (location === 0 || location === this.getLength()) {
	      return null;
	    }
	    clone = this.clone();
	    clone.deleteRange(0, location);
	    this.deleteRange(location, this.getLength() - location);
	    return clone;
	  };
	
	  Span.prototype.mergeWithSpan = function(span) {
	    return false;
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  Span.prototype.getLocation = function() {
	    return this.indexParent.getLocation(this) || 0;
	  };
	
	  Span.prototype.getLength = function() {
	    return this.string.length;
	  };
	
	  Span.prototype.getEnd = function() {
	    return this.getLocation() + this.getLength();
	  };
	
	  Span.prototype.getString = function() {
	    return this.string;
	  };
	
	  Span.prototype.setString = function(string) {
	    if (string == null) {
	      string = '';
	    }
	    return replaceRange(0, this.getLength(), string);
	  };
	
	  Span.prototype.deleteRange = function(location, length) {
	    return this.replaceRange(location, length, '');
	  };
	
	  Span.prototype.insertString = function(location, string) {
	    return this.replaceRange(location, 0, string);
	  };
	
	  Span.prototype.appendString = function(string) {
	    return this.insertString(this.getLength(), string);
	  };
	
	  Span.prototype.replaceRange = function(location, length, string) {
	    var delta, each;
	    delta = string.length - length;
	    if (location === 0 && length === this.string.length) {
	      this.string = string;
	    } else {
	      this.string = this.string.substr(0, location) + string + this.string.slice(location + length);
	    }
	    if (delta) {
	      each = this.indexParent;
	      while (each) {
	        each.length += delta;
	        each = each.indexParent;
	      }
	    }
	    return this;
	  };
	
	
	  /*
	  Section: Y-Offset
	   */
	
	  Span.prototype.getYOffset = function() {
	    return this.indexParent.getYOffset(this) || 0;
	  };
	
	  Span.prototype.getHeight = function() {
	    var ref;
	    return (ref = this.height) != null ? ref : 10;
	  };
	
	  Span.prototype.setHeight = function(height) {
	    var delta, each;
	    if (height == null) {
	      height = 0;
	    }
	    delta = height - this.getHeight();
	    this.height = height;
	    if (delta) {
	      each = this.indexParent;
	      while (each) {
	        each.height += delta;
	        each = each.indexParent;
	      }
	    }
	    return this;
	  };
	
	
	  /*
	  Section: Spans
	   */
	
	  Span.prototype.getRoot = function() {
	    var each;
	    each = this.indexParent;
	    while (each) {
	      if (each.isRoot) {
	        return each;
	      }
	      each = each.indexParent;
	    }
	    return null;
	  };
	
	  Span.prototype.getSpanIndex = function() {
	    return this.indexParent.getSpanIndex(this);
	  };
	
	  Span.prototype.getSpanCount = function() {
	    return 1;
	  };
	
	
	  /*
	  Section: Debug
	   */
	
	  Span.prototype.toString = function(extra) {
	    if (extra) {
	      return "(" + (this.getString()) + "/" + extra + ")";
	    } else {
	      return "(" + (this.getString()) + ")";
	    }
	  };
	
	  return Span;
	
	})();
	
	module.exports = Span;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {(function() {
	  var isEqual, isPlainObject, macModifierKeyMap, nonMacModifierKeyMap, plus, shiftKeyMap, splitKeyPath, _,
	    __slice = [].slice;
	
	  _ = __webpack_require__(17);
	
	  macModifierKeyMap = {
	    cmd: '\u2318',
	    ctrl: '\u2303',
	    alt: '\u2325',
	    option: '\u2325',
	    shift: '\u21e7',
	    enter: '\u23ce',
	    left: '\u2190',
	    right: '\u2192',
	    up: '\u2191',
	    down: '\u2193'
	  };
	
	  nonMacModifierKeyMap = {
	    cmd: 'Cmd',
	    ctrl: 'Ctrl',
	    alt: 'Alt',
	    option: 'Alt',
	    shift: 'Shift',
	    enter: 'Enter',
	    left: 'Left',
	    right: 'Right',
	    up: 'Up',
	    down: 'Down'
	  };
	
	  shiftKeyMap = {
	    '~': '`',
	    '_': '-',
	    '+': '=',
	    '|': '\\',
	    '{': '[',
	    '}': ']',
	    ':': ';',
	    '"': '\'',
	    '<': ',',
	    '>': '.',
	    '?': '/'
	  };
	
	  splitKeyPath = function(keyPath) {
	    var char, i, keyPathArray, startIndex, _i, _len;
	    startIndex = 0;
	    keyPathArray = [];
	    if (keyPath == null) {
	      return keyPathArray;
	    }
	    for (i = _i = 0, _len = keyPath.length; _i < _len; i = ++_i) {
	      char = keyPath[i];
	      if (char === '.' && (i === 0 || keyPath[i - 1] !== '\\')) {
	        keyPathArray.push(keyPath.substring(startIndex, i));
	        startIndex = i + 1;
	      }
	    }
	    keyPathArray.push(keyPath.substr(startIndex, keyPath.length));
	    return keyPathArray;
	  };
	
	  isPlainObject = function(value) {
	    return _.isObject(value) && !_.isArray(value);
	  };
	
	  plus = {
	    adviseBefore: function(object, methodName, advice) {
	      var original;
	      original = object[methodName];
	      return object[methodName] = function() {
	        var args;
	        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	        if (advice.apply(this, args) !== false) {
	          return original.apply(this, args);
	        }
	      };
	    },
	    camelize: function(string) {
	      if (string) {
	        return string.replace(/[_-]+(\w)/g, function(m) {
	          return m[1].toUpperCase();
	        });
	      } else {
	        return '';
	      }
	    },
	    capitalize: function(word) {
	      if (!word) {
	        return '';
	      }
	      if (word.toLowerCase() === 'github') {
	        return 'GitHub';
	      } else {
	        return word[0].toUpperCase() + word.slice(1);
	      }
	    },
	    compactObject: function(object) {
	      var key, newObject, value;
	      newObject = {};
	      for (key in object) {
	        value = object[key];
	        if (value != null) {
	          newObject[key] = value;
	        }
	      }
	      return newObject;
	    },
	    dasherize: function(string) {
	      if (!string) {
	        return '';
	      }
	      string = string[0].toLowerCase() + string.slice(1);
	      return string.replace(/([A-Z])|(_)/g, function(m, letter) {
	        if (letter) {
	          return "-" + letter.toLowerCase();
	        } else {
	          return "-";
	        }
	      });
	    },
	    deepClone: function(object) {
	      if (_.isArray(object)) {
	        return object.map(function(value) {
	          return plus.deepClone(value);
	        });
	      } else if (_.isObject(object) && !_.isFunction(object)) {
	        return plus.mapObject(object, (function(_this) {
	          return function(key, value) {
	            return [key, plus.deepClone(value)];
	          };
	        })(this));
	      } else {
	        return object;
	      }
	    },
	    deepExtend: function(target) {
	      var i, key, object, result, _i, _len, _ref;
	      result = target;
	      i = 0;
	      while (++i < arguments.length) {
	        object = arguments[i];
	        if (isPlainObject(result) && isPlainObject(object)) {
	          _ref = Object.keys(object);
	          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	            key = _ref[_i];
	            result[key] = plus.deepExtend(result[key], object[key]);
	          }
	        } else {
	          result = plus.deepClone(object);
	        }
	      }
	      return result;
	    },
	    deepContains: function(array, target) {
	      var object, _i, _len;
	      if (array == null) {
	        return false;
	      }
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        object = array[_i];
	        if (_.isEqual(object, target)) {
	          return true;
	        }
	      }
	      return false;
	    },
	    endsWith: function(string, suffix) {
	      if (suffix == null) {
	        suffix = '';
	      }
	      if (string) {
	        return string.indexOf(suffix, string.length - suffix.length) !== -1;
	      } else {
	        return false;
	      }
	    },
	    escapeAttribute: function(string) {
	      if (string) {
	        return string.replace(/"/g, '&quot;').replace(/\n/g, '').replace(/\\/g, '-');
	      } else {
	        return '';
	      }
	    },
	    escapeRegExp: function(string) {
	      if (string) {
	        return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	      } else {
	        return '';
	      }
	    },
	    humanizeEventName: function(eventName, eventDoc) {
	      var event, namespace, namespaceDoc, _ref;
	      _ref = eventName.split(':'), namespace = _ref[0], event = _ref[1];
	      if (event == null) {
	        return plus.undasherize(namespace);
	      }
	      namespaceDoc = plus.undasherize(namespace);
	      if (eventDoc == null) {
	        eventDoc = plus.undasherize(event);
	      }
	      return "" + namespaceDoc + ": " + eventDoc;
	    },
	    humanizeKey: function(key, platform) {
	      var modifierKeyMap;
	      if (platform == null) {
	        platform = process.platform;
	      }
	      if (!key) {
	        return key;
	      }
	      modifierKeyMap = platform === 'darwin' ? macModifierKeyMap : nonMacModifierKeyMap;
	      if (modifierKeyMap[key]) {
	        return modifierKeyMap[key];
	      } else if (key.length === 1 && (shiftKeyMap[key] != null)) {
	        return [modifierKeyMap.shift, shiftKeyMap[key]];
	      } else if (key.length === 1 && key === key.toUpperCase() && key.toUpperCase() !== key.toLowerCase()) {
	        return [modifierKeyMap.shift, key.toUpperCase()];
	      } else if (key.length === 1 || /f[0-9]{1,2}/.test(key)) {
	        return key.toUpperCase();
	      } else {
	        if (platform === 'darwin') {
	          return key;
	        } else {
	          return plus.capitalize(key);
	        }
	      }
	    },
	    humanizeKeystroke: function(keystroke, platform) {
	      var humanizedKeystrokes, index, key, keys, keystrokes, splitKeystroke, _i, _j, _len, _len1;
	      if (platform == null) {
	        platform = process.platform;
	      }
	      if (!keystroke) {
	        return keystroke;
	      }
	      keystrokes = keystroke.split(' ');
	      humanizedKeystrokes = [];
	      for (_i = 0, _len = keystrokes.length; _i < _len; _i++) {
	        keystroke = keystrokes[_i];
	        keys = [];
	        splitKeystroke = keystroke.split('-');
	        for (index = _j = 0, _len1 = splitKeystroke.length; _j < _len1; index = ++_j) {
	          key = splitKeystroke[index];
	          if (key === '' && splitKeystroke[index - 1] === '') {
	            key = '-';
	          }
	          if (key) {
	            keys.push(plus.humanizeKey(key, platform));
	          }
	        }
	        keys = _.uniq(_.flatten(keys));
	        if (platform === 'darwin') {
	          keys = keys.join('');
	        } else {
	          keys = keys.join('+');
	        }
	        humanizedKeystrokes.push(keys);
	      }
	      return humanizedKeystrokes.join(' ');
	    },
	    isSubset: function(potentialSubset, potentialSuperset) {
	      return _.every(potentialSubset, function(element) {
	        return _.include(potentialSuperset, element);
	      });
	    },
	    losslessInvert: function(hash) {
	      var inverted, key, value;
	      inverted = {};
	      for (key in hash) {
	        value = hash[key];
	        if (inverted[value] == null) {
	          inverted[value] = [];
	        }
	        inverted[value].push(key);
	      }
	      return inverted;
	    },
	    mapObject: function(object, iterator) {
	      var key, newObject, value, _i, _len, _ref, _ref1;
	      newObject = {};
	      _ref = Object.keys(object);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        key = _ref[_i];
	        _ref1 = iterator(key, object[key]), key = _ref1[0], value = _ref1[1];
	        newObject[key] = value;
	      }
	      return newObject;
	    },
	    multiplyString: function(string, n) {
	      var finalString, i;
	      finalString = "";
	      i = 0;
	      while (i < n) {
	        finalString += string;
	        i++;
	      }
	      return finalString;
	    },
	    pluralize: function(count, singular, plural) {
	      if (count == null) {
	        count = 0;
	      }
	      if (plural == null) {
	        plural = singular + 's';
	      }
	      if (count === 1) {
	        return "" + count + " " + singular;
	      } else {
	        return "" + count + " " + plural;
	      }
	    },
	    remove: function(array, element) {
	      var index;
	      index = array.indexOf(element);
	      if (index >= 0) {
	        array.splice(index, 1);
	      }
	      return array;
	    },
	    setValueForKeyPath: function(object, keyPath, value) {
	      var key, keys;
	      keys = splitKeyPath(keyPath);
	      while (keys.length > 1) {
	        key = keys.shift();
	        if (object[key] == null) {
	          object[key] = {};
	        }
	        object = object[key];
	      }
	      if (value != null) {
	        return object[keys.shift()] = value;
	      } else {
	        return delete object[keys.shift()];
	      }
	    },
	    hasKeyPath: function(object, keyPath) {
	      var key, keys, _i, _len;
	      keys = splitKeyPath(keyPath);
	      for (_i = 0, _len = keys.length; _i < _len; _i++) {
	        key = keys[_i];
	        if (!object.hasOwnProperty(key)) {
	          return false;
	        }
	        object = object[key];
	      }
	      return true;
	    },
	    spliceWithArray: function(originalArray, start, length, insertedArray, chunkSize) {
	      var chunkStart, _i, _ref, _results;
	      if (chunkSize == null) {
	        chunkSize = 100000;
	      }
	      if (insertedArray.length < chunkSize) {
	        return originalArray.splice.apply(originalArray, [start, length].concat(__slice.call(insertedArray)));
	      } else {
	        originalArray.splice(start, length);
	        _results = [];
	        for (chunkStart = _i = 0, _ref = insertedArray.length; chunkSize > 0 ? _i <= _ref : _i >= _ref; chunkStart = _i += chunkSize) {
	          _results.push(originalArray.splice.apply(originalArray, [start + chunkStart, 0].concat(__slice.call(insertedArray.slice(chunkStart, chunkStart + chunkSize)))));
	        }
	        return _results;
	      }
	    },
	    sum: function(array) {
	      var elt, sum, _i, _len;
	      sum = 0;
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        elt = array[_i];
	        sum += elt;
	      }
	      return sum;
	    },
	    uncamelcase: function(string) {
	      var result;
	      if (!string) {
	        return '';
	      }
	      result = string.replace(/([A-Z])|_+/g, function(match, letter) {
	        if (letter == null) {
	          letter = '';
	        }
	        return " " + letter;
	      });
	      return plus.capitalize(result.trim());
	    },
	    undasherize: function(string) {
	      if (string) {
	        return string.split('-').map(plus.capitalize).join(' ');
	      } else {
	        return '';
	      }
	    },
	    underscore: function(string) {
	      if (!string) {
	        return '';
	      }
	      string = string[0].toLowerCase() + string.slice(1);
	      return string.replace(/([A-Z])|-+/g, function(match, letter) {
	        if (letter == null) {
	          letter = '';
	        }
	        return "_" + (letter.toLowerCase());
	      });
	    },
	    valueForKeyPath: function(object, keyPath) {
	      var key, keys, _i, _len;
	      keys = splitKeyPath(keyPath);
	      for (_i = 0, _len = keys.length; _i < _len; _i++) {
	        key = keys[_i];
	        object = object[key];
	        if (object == null) {
	          return;
	        }
	      }
	      return object;
	    },
	    isEqual: function(a, b, aStack, bStack) {
	      if (_.isArray(aStack) && _.isArray(bStack)) {
	        return isEqual(a, b, aStack, bStack);
	      } else {
	        return isEqual(a, b);
	      }
	    },
	    isEqualForProperties: function() {
	      var a, b, properties, property, _i, _len;
	      a = arguments[0], b = arguments[1], properties = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
	      for (_i = 0, _len = properties.length; _i < _len; _i++) {
	        property = properties[_i];
	        if (!_.isEqual(a[property], b[property])) {
	          return false;
	        }
	      }
	      return true;
	    }
	  };
	
	  isEqual = function(a, b, aStack, bStack) {
	    var aCtor, aCtorValid, aElement, aKeyCount, aValue, bCtor, bCtorValid, bKeyCount, bValue, equal, i, key, stackIndex, _i, _len;
	    if (aStack == null) {
	      aStack = [];
	    }
	    if (bStack == null) {
	      bStack = [];
	    }
	    if (a === b) {
	      return _.isEqual(a, b);
	    }
	    if (_.isFunction(a) || _.isFunction(b)) {
	      return _.isEqual(a, b);
	    }
	    stackIndex = aStack.length;
	    while (stackIndex--) {
	      if (aStack[stackIndex] === a) {
	        return bStack[stackIndex] === b;
	      }
	    }
	    aStack.push(a);
	    bStack.push(b);
	    equal = false;
	    if (_.isFunction(a != null ? a.isEqual : void 0)) {
	      equal = a.isEqual(b, aStack, bStack);
	    } else if (_.isFunction(b != null ? b.isEqual : void 0)) {
	      equal = b.isEqual(a, bStack, aStack);
	    } else if (_.isArray(a) && _.isArray(b) && a.length === b.length) {
	      equal = true;
	      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
	        aElement = a[i];
	        if (!isEqual(aElement, b[i], aStack, bStack)) {
	          equal = false;
	          break;
	        }
	      }
	    } else if (_.isRegExp(a) && _.isRegExp(b)) {
	      equal = _.isEqual(a, b);
	    } else if (_.isElement(a) && _.isElement(b)) {
	      equal = a === b;
	    } else if (_.isObject(a) && _.isObject(b)) {
	      aCtor = a.constructor;
	      bCtor = b.constructor;
	      aCtorValid = _.isFunction(aCtor) && aCtor instanceof aCtor;
	      bCtorValid = _.isFunction(bCtor) && bCtor instanceof bCtor;
	      if (aCtor !== bCtor && !(aCtorValid && bCtorValid)) {
	        equal = false;
	      } else {
	        aKeyCount = 0;
	        equal = true;
	        for (key in a) {
	          aValue = a[key];
	          if (!_.has(a, key)) {
	            continue;
	          }
	          aKeyCount++;
	          if (!(_.has(b, key) && isEqual(aValue, b[key], aStack, bStack))) {
	            equal = false;
	            break;
	          }
	        }
	        if (equal) {
	          bKeyCount = 0;
	          for (key in b) {
	            bValue = b[key];
	            if (_.has(b, key)) {
	              bKeyCount++;
	            }
	          }
	          equal = aKeyCount === bKeyCount;
	        }
	      }
	    } else {
	      equal = _.isEqual(a, b);
	    }
	    aStack.pop();
	    bStack.pop();
	    return equal;
	  };
	
	  module.exports = _.extend({}, _, plus);
	
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define('underscore', factory) :
	  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {
	    var current = global._;
	    var exports = global._ = factory();
	    exports.noConflict = function () { global._ = current; return exports; };
	  }()));
	}(this, (function () {
	  //     Underscore.js 1.13.4
	  //     https://underscorejs.org
	  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors
	  //     Underscore may be freely distributed under the MIT license.
	
	  // Current version.
	  var VERSION = '1.13.4';
	
	  // Establish the root object, `window` (`self`) in the browser, `global`
	  // on the server, or `this` in some virtual machines. We use `self`
	  // instead of `window` for `WebWorker` support.
	  var root = (typeof self == 'object' && self.self === self && self) ||
	            (typeof global == 'object' && global.global === global && global) ||
	            Function('return this')() ||
	            {};
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
	  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var push = ArrayProto.push,
	      slice = ArrayProto.slice,
	      toString = ObjProto.toString,
	      hasOwnProperty = ObjProto.hasOwnProperty;
	
	  // Modern feature detection.
	  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
	      supportsDataView = typeof DataView !== 'undefined';
	
	  // All **ECMAScript 5+** native function implementations that we hope to use
	  // are declared here.
	  var nativeIsArray = Array.isArray,
	      nativeKeys = Object.keys,
	      nativeCreate = Object.create,
	      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
	
	  // Create references to these builtin functions because we override them.
	  var _isNaN = isNaN,
	      _isFinite = isFinite;
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  // The largest integer that can be represented exactly.
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	
	  // Some functions take a variable number of arguments, or a few expected
	  // arguments at the beginning and then a variable number of values to operate
	  // on. This helper accumulates all remaining arguments past the function’s
	  // argument length (or an explicit `startIndex`), into an array that becomes
	  // the last argument. Similar to ES6’s "rest parameter".
	  function restArguments(func, startIndex) {
	    startIndex = startIndex == null ? func.length - 1 : +startIndex;
	    return function() {
	      var length = Math.max(arguments.length - startIndex, 0),
	          rest = Array(length),
	          index = 0;
	      for (; index < length; index++) {
	        rest[index] = arguments[index + startIndex];
	      }
	      switch (startIndex) {
	        case 0: return func.call(this, rest);
	        case 1: return func.call(this, arguments[0], rest);
	        case 2: return func.call(this, arguments[0], arguments[1], rest);
	      }
	      var args = Array(startIndex + 1);
	      for (index = 0; index < startIndex; index++) {
	        args[index] = arguments[index];
	      }
	      args[startIndex] = rest;
	      return func.apply(this, args);
	    };
	  }
	
	  // Is a given variable an object?
	  function isObject(obj) {
	    var type = typeof obj;
	    return type === 'function' || (type === 'object' && !!obj);
	  }
	
	  // Is a given value equal to null?
	  function isNull(obj) {
	    return obj === null;
	  }
	
	  // Is a given variable undefined?
	  function isUndefined(obj) {
	    return obj === void 0;
	  }
	
	  // Is a given value a boolean?
	  function isBoolean(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  }
	
	  // Is a given value a DOM element?
	  function isElement(obj) {
	    return !!(obj && obj.nodeType === 1);
	  }
	
	  // Internal function for creating a `toString`-based type tester.
	  function tagTester(name) {
	    var tag = '[object ' + name + ']';
	    return function(obj) {
	      return toString.call(obj) === tag;
	    };
	  }
	
	  var isString = tagTester('String');
	
	  var isNumber = tagTester('Number');
	
	  var isDate = tagTester('Date');
	
	  var isRegExp = tagTester('RegExp');
	
	  var isError = tagTester('Error');
	
	  var isSymbol = tagTester('Symbol');
	
	  var isArrayBuffer = tagTester('ArrayBuffer');
	
	  var isFunction = tagTester('Function');
	
	  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
	  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	  var nodelist = root.document && root.document.childNodes;
	  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
	    isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  var isFunction$1 = isFunction;
	
	  var hasObjectTag = tagTester('Object');
	
	  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
	  // In IE 11, the most common among them, this problem also applies to
	  // `Map`, `WeakMap` and `Set`.
	  var hasStringTagBug = (
	        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
	      ),
	      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));
	
	  var isDataView = tagTester('DataView');
	
	  // In IE 10 - Edge 13, we need a different heuristic
	  // to determine whether an object is a `DataView`.
	  function ie10IsDataView(obj) {
	    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
	  }
	
	  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native `Array.isArray`.
	  var isArray = nativeIsArray || tagTester('Array');
	
	  // Internal function to check whether `key` is an own property name of `obj`.
	  function has$1(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  }
	
	  var isArguments = tagTester('Arguments');
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  (function() {
	    if (!isArguments(arguments)) {
	      isArguments = function(obj) {
	        return has$1(obj, 'callee');
	      };
	    }
	  }());
	
	  var isArguments$1 = isArguments;
	
	  // Is a given object a finite number?
	  function isFinite$1(obj) {
	    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
	  }
	
	  // Is the given value `NaN`?
	  function isNaN$1(obj) {
	    return isNumber(obj) && _isNaN(obj);
	  }
	
	  // Predicate-generating function. Often useful outside of Underscore.
	  function constant(value) {
	    return function() {
	      return value;
	    };
	  }
	
	  // Common internal logic for `isArrayLike` and `isBufferLike`.
	  function createSizePropertyCheck(getSizeProperty) {
	    return function(collection) {
	      var sizeProperty = getSizeProperty(collection);
	      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
	    }
	  }
	
	  // Internal helper to generate a function to obtain property `key` from `obj`.
	  function shallowProperty(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  }
	
	  // Internal helper to obtain the `byteLength` property of an object.
	  var getByteLength = shallowProperty('byteLength');
	
	  // Internal helper to determine whether we should spend extensive checks against
	  // `ArrayBuffer` et al.
	  var isBufferLike = createSizePropertyCheck(getByteLength);
	
	  // Is a given value a typed array?
	  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
	  function isTypedArray(obj) {
	    // `ArrayBuffer.isView` is the most future-proof, so use it when available.
	    // Otherwise, fall back on the above regular expression.
	    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
	                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
	  }
	
	  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);
	
	  // Internal helper to obtain the `length` property of an object.
	  var getLength = shallowProperty('length');
	
	  // Internal helper to create a simple lookup structure.
	  // `collectNonEnumProps` used to depend on `_.contains`, but this led to
	  // circular imports. `emulatedSet` is a one-off solution that only works for
	  // arrays of strings.
	  function emulatedSet(keys) {
	    var hash = {};
	    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
	    return {
	      contains: function(key) { return hash[key] === true; },
	      push: function(key) {
	        hash[key] = true;
	        return keys.push(key);
	      }
	    };
	  }
	
	  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
	  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if
	  // needed.
	  function collectNonEnumProps(obj, keys) {
	    keys = emulatedSet(keys);
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`.
	  function keys(obj) {
	    if (!isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (has$1(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  }
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  function isEmpty(obj) {
	    if (obj == null) return true;
	    // Skip the more expensive `toString`-based type checks if `obj` has no
	    // `.length`.
	    var length = getLength(obj);
	    if (typeof length == 'number' && (
	      isArray(obj) || isString(obj) || isArguments$1(obj)
	    )) return length === 0;
	    return getLength(keys(obj)) === 0;
	  }
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  function isMatch(object, attrs) {
	    var _keys = keys(attrs), length = _keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = _keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  }
	
	  // If Underscore is called as a function, it returns a wrapped object that can
	  // be used OO-style. This wrapper holds altered versions of all functions added
	  // through `_.mixin`. Wrapped objects may be chained.
	  function _$1(obj) {
	    if (obj instanceof _$1) return obj;
	    if (!(this instanceof _$1)) return new _$1(obj);
	    this._wrapped = obj;
	  }
	
	  _$1.VERSION = VERSION;
	
	  // Extracts the result from a wrapped and chained object.
	  _$1.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxies for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;
	
	  _$1.prototype.toString = function() {
	    return String(this._wrapped);
	  };
	
	  // Internal function to wrap or shallow-copy an ArrayBuffer,
	  // typed array or DataView to a new view, reusing the buffer.
	  function toBufferView(bufferSource) {
	    return new Uint8Array(
	      bufferSource.buffer || bufferSource,
	      bufferSource.byteOffset || 0,
	      getByteLength(bufferSource)
	    );
	  }
	
	  // We use this string twice, so give it a name for minification.
	  var tagDataView = '[object DataView]';
	
	  // Internal recursive comparison function for `_.isEqual`.
	  function eq(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null) return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a) return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
	    return deepEq(a, b, aStack, bStack);
	  }
	
	  // Internal recursive comparison function for `_.isEqual`.
	  function deepEq(a, b, aStack, bStack) {
	    // Unwrap any wrapped objects.
	    if (a instanceof _$1) a = a._wrapped;
	    if (b instanceof _$1) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    // Work around a bug in IE 10 - Edge 13.
	    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
	      if (!isDataView$1(b)) return false;
	      className = tagDataView;
	    }
	    switch (className) {
	      // These types are compared by value.
	      case '[object RegExp]':
	        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN.
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	      case '[object Symbol]':
	        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	      case '[object ArrayBuffer]':
	      case tagDataView:
	        // Coerce to typed array so we can fall through.
	        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays && isTypedArray$1(a)) {
	        var byteLength = getByteLength(a);
	        if (byteLength !== getByteLength(b)) return false;
	        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
	        areArrays = true;
	    }
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
	                               isFunction$1(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var _keys = keys(a), key;
	      length = _keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = _keys[length];
	        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  }
	
	  // Perform a deep comparison to check if two objects are equal.
	  function isEqual(a, b) {
	    return eq(a, b);
	  }
	
	  // Retrieve all the enumerable property names of an object.
	  function allKeys(obj) {
	    if (!isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  }
	
	  // Since the regular `Object.prototype.toString` type tests don't work for
	  // some types in IE 11, we use a fingerprinting heuristic instead, based
	  // on the methods. It's not great, but it's the best we got.
	  // The fingerprint method lists are defined below.
	  function ie11fingerprint(methods) {
	    var length = getLength(methods);
	    return function(obj) {
	      if (obj == null) return false;
	      // `Map`, `WeakMap` and `Set` have no enumerable keys.
	      var keys = allKeys(obj);
	      if (getLength(keys)) return false;
	      for (var i = 0; i < length; i++) {
	        if (!isFunction$1(obj[methods[i]])) return false;
	      }
	      // If we are testing against `WeakMap`, we need to ensure that
	      // `obj` doesn't have a `forEach` method in order to distinguish
	      // it from a regular `Map`.
	      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
	    };
	  }
	
	  // In the interest of compact minification, we write
	  // each string in the fingerprints only once.
	  var forEachName = 'forEach',
	      hasName = 'has',
	      commonInit = ['clear', 'delete'],
	      mapTail = ['get', hasName, 'set'];
	
	  // `Map`, `WeakMap` and `Set` each have slightly different
	  // combinations of the above sublists.
	  var mapMethods = commonInit.concat(forEachName, mapTail),
	      weakMapMethods = commonInit.concat(mapTail),
	      setMethods = ['add'].concat(commonInit, forEachName, hasName);
	
	  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');
	
	  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');
	
	  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');
	
	  var isWeakSet = tagTester('WeakSet');
	
	  // Retrieve the values of an object's properties.
	  function values(obj) {
	    var _keys = keys(obj);
	    var length = _keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[_keys[i]];
	    }
	    return values;
	  }
	
	  // Convert an object into a list of `[key, value]` pairs.
	  // The opposite of `_.object` with one argument.
	  function pairs(obj) {
	    var _keys = keys(obj);
	    var length = _keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [_keys[i], obj[_keys[i]]];
	    }
	    return pairs;
	  }
	
	  // Invert the keys and values of an object. The values must be serializable.
	  function invert(obj) {
	    var result = {};
	    var _keys = keys(obj);
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      result[obj[_keys[i]]] = _keys[i];
	    }
	    return result;
	  }
	
	  // Return a sorted list of the function names available on the object.
	  function functions(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (isFunction$1(obj[key])) names.push(key);
	    }
	    return names.sort();
	  }
	
	  // An internal function for creating assigner functions.
	  function createAssigner(keysFunc, defaults) {
	    return function(obj) {
	      var length = arguments.length;
	      if (defaults) obj = Object(obj);
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!defaults || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  }
	
	  // Extend a given object with all the properties in passed-in object(s).
	  var extend = createAssigner(allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in
	  // object(s).
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  var extendOwn = createAssigner(keys);
	
	  // Fill in a given object with default properties.
	  var defaults = createAssigner(allKeys, true);
	
	  // Create a naked function reference for surrogate-prototype-swapping.
	  function ctor() {
	    return function(){};
	  }
	
	  // An internal function for creating a new object that inherits from another.
	  function baseCreate(prototype) {
	    if (!isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    var Ctor = ctor();
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  }
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  function create(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) extendOwn(result, props);
	    return result;
	  }
	
	  // Create a (shallow-cloned) duplicate of an object.
	  function clone(obj) {
	    if (!isObject(obj)) return obj;
	    return isArray(obj) ? obj.slice() : extend({}, obj);
	  }
	
	  // Invokes `interceptor` with the `obj` and then returns `obj`.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  function tap(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  }
	
	  // Normalize a (deep) property `path` to array.
	  // Like `_.iteratee`, this function can be customized.
	  function toPath$1(path) {
	    return isArray(path) ? path : [path];
	  }
	  _$1.toPath = toPath$1;
	
	  // Internal wrapper for `_.toPath` to enable minification.
	  // Similar to `cb` for `_.iteratee`.
	  function toPath(path) {
	    return _$1.toPath(path);
	  }
	
	  // Internal function to obtain a nested property in `obj` along `path`.
	  function deepGet(obj, path) {
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      if (obj == null) return void 0;
	      obj = obj[path[i]];
	    }
	    return length ? obj : void 0;
	  }
	
	  // Get the value of the (deep) property on `path` from `object`.
	  // If any property in `path` does not exist or if the value is
	  // `undefined`, return `defaultValue` instead.
	  // The `path` is normalized through `_.toPath`.
	  function get(object, path, defaultValue) {
	    var value = deepGet(object, toPath(path));
	    return isUndefined(value) ? defaultValue : value;
	  }
	
	  // Shortcut function for checking if an object has a given property directly on
	  // itself (in other words, not on a prototype). Unlike the internal `has`
	  // function, this public version can also traverse nested properties.
	  function has(obj, path) {
	    path = toPath(path);
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      var key = path[i];
	      if (!has$1(obj, key)) return false;
	      obj = obj[key];
	    }
	    return !!length;
	  }
	
	  // Keep the identity function around for default iteratees.
	  function identity(value) {
	    return value;
	  }
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  function matcher(attrs) {
	    attrs = extendOwn({}, attrs);
	    return function(obj) {
	      return isMatch(obj, attrs);
	    };
	  }
	
	  // Creates a function that, when passed an object, will traverse that object’s
	  // properties down the given `path`, specified as an array of keys or indices.
	  function property(path) {
	    path = toPath(path);
	    return function(obj) {
	      return deepGet(obj, path);
	    };
	  }
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  function optimizeCb(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      // The 2-argument case is omitted because we’re not using it.
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  }
	
	  // An internal function to generate callbacks that can be applied to each
	  // element in a collection, returning the desired result — either `_.identity`,
	  // an arbitrary callback, a property matcher, or a property accessor.
	  function baseIteratee(value, context, argCount) {
	    if (value == null) return identity;
	    if (isFunction$1(value)) return optimizeCb(value, context, argCount);
	    if (isObject(value) && !isArray(value)) return matcher(value);
	    return property(value);
	  }
	
	  // External wrapper for our callback generator. Users may customize
	  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	  // This abstraction hides the internal-only `argCount` argument.
	  function iteratee(value, context) {
	    return baseIteratee(value, context, Infinity);
	  }
	  _$1.iteratee = iteratee;
	
	  // The function we call internally to generate a callback. It invokes
	  // `_.iteratee` if overridden, otherwise `baseIteratee`.
	  function cb(value, context, argCount) {
	    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
	    return baseIteratee(value, context, argCount);
	  }
	
	  // Returns the results of applying the `iteratee` to each element of `obj`.
	  // In contrast to `_.map` it returns an object.
	  function mapObject(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var _keys = keys(obj),
	        length = _keys.length,
	        results = {};
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys[index];
	      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  }
	
	  // Predicate-generating function. Often useful outside of Underscore.
	  function noop(){}
	
	  // Generates a function for a given object that returns a given property.
	  function propertyOf(obj) {
	    if (obj == null) return noop;
	    return function(path) {
	      return get(obj, path);
	    };
	  }
	
	  // Run a function **n** times.
	  function times(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  }
	
	  // Return a random integer between `min` and `max` (inclusive).
	  function random(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  }
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  var now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	  // Internal helper to generate functions for escaping and unescaping strings
	  // to/from HTML interpolation.
	  function createEscaper(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped.
	    var source = '(?:' + keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  }
	
	  // Internal list of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	
	  // Function for escaping strings to HTML interpolation.
	  var _escape = createEscaper(escapeMap);
	
	  // Internal list of HTML entities for unescaping.
	  var unescapeMap = invert(escapeMap);
	
	  // Function for unescaping strings from HTML interpolation.
	  var _unescape = createEscaper(unescapeMap);
	
	  // By default, Underscore uses ERB-style template delimiters. Change the
	  // following template settings to use alternative delimiters.
	  var templateSettings = _$1.templateSettings = {
	    evaluate: /<%([\s\S]+?)%>/g,
	    interpolate: /<%=([\s\S]+?)%>/g,
	    escape: /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `_.templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'": "'",
	    '\\': '\\',
	    '\r': 'r',
	    '\n': 'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  function escapeChar(match) {
	    return '\\' + escapes[match];
	  }
	
	  // In order to prevent third-party code injection through
	  // `_.templateSettings.variable`, we test it against the following regular
	  // expression. It is intentionally a bit more liberal than just matching valid
	  // identifiers, but still prevents possible loopholes through defaults or
	  // destructuring assignment.
	  var bareIdentifier = /^\s*(\w|\$)+\s*$/;
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  function template(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = defaults({}, settings, _$1.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offset.
	      return match;
	    });
	    source += "';\n";
	
	    var argument = settings.variable;
	    if (argument) {
	      // Insure against third-party code injection. (CVE-2021-23358)
	      if (!bareIdentifier.test(argument)) throw new Error(
	        'variable is not a bare identifier: ' + argument
	      );
	    } else {
	      // If a variable is not specified, place data values in local scope.
	      source = 'with(obj||{}){\n' + source + '}\n';
	      argument = 'obj';
	    }
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    var render;
	    try {
	      render = new Function(argument, '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _$1);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  }
	
	  // Traverses the children of `obj` along `path`. If a child is a function, it
	  // is invoked with its parent as context. Returns the value of the final
	  // child, or `fallback` if any child is undefined.
	  function result(obj, path, fallback) {
	    path = toPath(path);
	    var length = path.length;
	    if (!length) {
	      return isFunction$1(fallback) ? fallback.call(obj) : fallback;
	    }
	    for (var i = 0; i < length; i++) {
	      var prop = obj == null ? void 0 : obj[path[i]];
	      if (prop === void 0) {
	        prop = fallback;
	        i = length; // Ensure we don't continue iterating.
	      }
	      obj = isFunction$1(prop) ? prop.call(obj) : prop;
	    }
	    return obj;
	  }
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  function uniqueId(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  }
	
	  // Start chaining a wrapped Underscore object.
	  function chain(obj) {
	    var instance = _$1(obj);
	    instance._chain = true;
	    return instance;
	  }
	
	  // Internal function to execute `sourceFunc` bound to `context` with optional
	  // `args`. Determines whether to execute a function as a constructor or as a
	  // normal function.
	  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (isObject(result)) return result;
	    return self;
	  }
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. `_` acts
	  // as a placeholder by default, allowing any combination of arguments to be
	  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
	  var partial = restArguments(function(func, boundArgs) {
	    var placeholder = partial.placeholder;
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  });
	
	  partial.placeholder = _$1;
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally).
	  var bind = restArguments(function(func, context, args) {
	    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
	    var bound = restArguments(function(callArgs) {
	      return executeBound(func, bound, context, this, args.concat(callArgs));
	    });
	    return bound;
	  });
	
	  // Internal helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object.
	  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var isArrayLike = createSizePropertyCheck(getLength);
	
	  // Internal implementation of a recursive `flatten` function.
	  function flatten$1(input, depth, strict, output) {
	    output = output || [];
	    if (!depth && depth !== 0) {
	      depth = Infinity;
	    } else if (depth <= 0) {
	      return output.concat(input);
	    }
	    var idx = output.length;
	    for (var i = 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
	        // Flatten current level of array or arguments object.
	        if (depth > 1) {
	          flatten$1(value, depth - 1, strict, output);
	          idx = output.length;
	        } else {
	          var j = 0, len = value.length;
	          while (j < len) output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  }
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  var bindAll = restArguments(function(obj, keys) {
	    keys = flatten$1(keys, false, false);
	    var index = keys.length;
	    if (index < 1) throw new Error('bindAll must be passed function names');
	    while (index--) {
	      var key = keys[index];
	      obj[key] = bind(obj[key], obj);
	    }
	    return obj;
	  });
	
	  // Memoize an expensive function by storing its results.
	  function memoize(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  }
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  var delay = restArguments(function(func, wait, args) {
	    return setTimeout(function() {
	      return func.apply(null, args);
	    }, wait);
	  });
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  var defer = partial(delay, _$1, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  function throttle(func, wait, options) {
	    var timeout, context, args, result;
	    var previous = 0;
	    if (!options) options = {};
	
	    var later = function() {
	      previous = options.leading === false ? 0 : now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	
	    var throttled = function() {
	      var _now = now();
	      if (!previous && options.leading === false) previous = _now;
	      var remaining = wait - (_now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = _now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	
	    throttled.cancel = function() {
	      clearTimeout(timeout);
	      previous = 0;
	      timeout = context = args = null;
	    };
	
	    return throttled;
	  }
	
	  // When a sequence of calls of the returned function ends, the argument
	  // function is triggered. The end of a sequence is defined by the `wait`
	  // parameter. If `immediate` is passed, the argument function will be
	  // triggered at the beginning of the sequence instead of at the end.
	  function debounce(func, wait, immediate) {
	    var timeout, previous, args, result, context;
	
	    var later = function() {
	      var passed = now() - previous;
	      if (wait > passed) {
	        timeout = setTimeout(later, wait - passed);
	      } else {
	        timeout = null;
	        if (!immediate) result = func.apply(context, args);
	        // This check is needed because `func` can recursively invoke `debounced`.
	        if (!timeout) args = context = null;
	      }
	    };
	
	    var debounced = restArguments(function(_args) {
	      context = this;
	      args = _args;
	      previous = now();
	      if (!timeout) {
	        timeout = setTimeout(later, wait);
	        if (immediate) result = func.apply(context, args);
	      }
	      return result;
	    });
	
	    debounced.cancel = function() {
	      clearTimeout(timeout);
	      timeout = args = context = null;
	    };
	
	    return debounced;
	  }
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  function wrap(func, wrapper) {
	    return partial(wrapper, func);
	  }
	
	  // Returns a negated version of the passed-in predicate.
	  function negate(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  }
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  function compose() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  }
	
	  // Returns a function that will only be executed on and after the Nth call.
	  function after(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  }
	
	  // Returns a function that will only be executed up to (but not including) the
	  // Nth call.
	  function before(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  }
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  var once = partial(before, 2);
	
	  // Returns the first key on an object that passes a truth test.
	  function findKey(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = keys(obj), key;
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      key = _keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  }
	
	  // Internal function to generate `_.findIndex` and `_.findLastIndex`.
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a truth test.
	  var findIndex = createPredicateIndexFinder(1);
	
	  // Returns the last index on an array-like that passes a truth test.
	  var findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  function sortedIndex(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  }
	
	  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	          i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), isNaN$1);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  var indexOf = createIndexFinder(1, findIndex, sortedIndex);
	
	  // Return the position of the last occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  var lastIndexOf = createIndexFinder(-1, findLastIndex);
	
	  // Return the first value which passes a truth test.
	  function find(obj, predicate, context) {
	    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
	    var key = keyFinder(obj, predicate, context);
	    if (key !== void 0 && key !== -1) return obj[key];
	  }
	
	  // Convenience version of a common use case of `_.find`: getting the first
	  // object containing specific `key:value` pairs.
	  function findWhere(obj, attrs) {
	    return find(obj, matcher(attrs));
	  }
	
	  // The cornerstone for collection functions, an `each`
	  // implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  function each(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var _keys = keys(obj);
	      for (i = 0, length = _keys.length; i < length; i++) {
	        iteratee(obj[_keys[i]], _keys[i], obj);
	      }
	    }
	    return obj;
	  }
	
	  // Return the results of applying the iteratee to each element.
	  function map(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  }
	
	  // Internal helper to create a reducing function, iterating left or right.
	  function createReduce(dir) {
	    // Wrap code that reassigns argument variables in a separate function than
	    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	    var reducer = function(obj, iteratee, memo, initial) {
	      var _keys = !isArrayLike(obj) && keys(obj),
	          length = (_keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      if (!initial) {
	        memo = obj[_keys ? _keys[index] : index];
	        index += dir;
	      }
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = _keys ? _keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    };
	
	    return function(obj, iteratee, memo, context) {
	      var initial = arguments.length >= 3;
	      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  var reduce = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  var reduceRight = createReduce(-1);
	
	  // Return all the elements that pass a truth test.
	  function filter(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  }
	
	  // Return all the elements for which a truth test fails.
	  function reject(obj, predicate, context) {
	    return filter(obj, negate(cb(predicate)), context);
	  }
	
	  // Determine whether all of the elements pass a truth test.
	  function every(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  }
	
	  // Determine if at least one element in the object passes a truth test.
	  function some(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  }
	
	  // Determine if the array or object contains a given item (using `===`).
	  function contains(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return indexOf(obj, item, fromIndex) >= 0;
	  }
	
	  // Invoke a method (with arguments) on every item in a collection.
	  var invoke = restArguments(function(obj, path, args) {
	    var contextPath, func;
	    if (isFunction$1(path)) {
	      func = path;
	    } else {
	      path = toPath(path);
	      contextPath = path.slice(0, -1);
	      path = path[path.length - 1];
	    }
	    return map(obj, function(context) {
	      var method = func;
	      if (!method) {
	        if (contextPath && contextPath.length) {
	          context = deepGet(context, contextPath);
	        }
	        if (context == null) return void 0;
	        method = context[path];
	      }
	      return method == null ? method : method.apply(context, args);
	    });
	  });
	
	  // Convenience version of a common use case of `_.map`: fetching a property.
	  function pluck(obj, key) {
	    return map(obj, property(key));
	  }
	
	  // Convenience version of a common use case of `_.filter`: selecting only
	  // objects containing specific `key:value` pairs.
	  function where(obj, attrs) {
	    return filter(obj, matcher(attrs));
	  }
	
	  // Return the maximum element (or element-based computation).
	  function max(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
	      obj = isArrayLike(obj) ? obj : values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  }
	
	  // Return the minimum element (or element-based computation).
	  function min(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
	      obj = isArrayLike(obj) ? obj : values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  }
	
	  // Safely create a real, live array from anything iterable.
	  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	  function toArray(obj) {
	    if (!obj) return [];
	    if (isArray(obj)) return slice.call(obj);
	    if (isString(obj)) {
	      // Keep surrogate pair characters together.
	      return obj.match(reStrSymbol);
	    }
	    if (isArrayLike(obj)) return map(obj, identity);
	    return values(obj);
	  }
	
	  // Sample **n** random values from a collection using the modern version of the
	  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `_.map`.
	  function sample(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = values(obj);
	      return obj[random(obj.length - 1)];
	    }
	    var sample = toArray(obj);
	    var length = getLength(sample);
	    n = Math.max(Math.min(n, length), 0);
	    var last = length - 1;
	    for (var index = 0; index < n; index++) {
	      var rand = random(index, last);
	      var temp = sample[index];
	      sample[index] = sample[rand];
	      sample[rand] = temp;
	    }
	    return sample.slice(0, n);
	  }
	
	  // Shuffle a collection.
	  function shuffle(obj) {
	    return sample(obj, Infinity);
	  }
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  function sortBy(obj, iteratee, context) {
	    var index = 0;
	    iteratee = cb(iteratee, context);
	    return pluck(map(obj, function(value, key, list) {
	      return {
	        value: value,
	        index: index++,
	        criteria: iteratee(value, key, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  }
	
	  // An internal function used for aggregate "group by" operations.
	  function group(behavior, partition) {
	    return function(obj, iteratee, context) {
	      var result = partition ? [[], []] : {};
	      iteratee = cb(iteratee, context);
	      each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  }
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  var groupBy = group(function(result, value, key) {
	    if (has$1(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for
	  // when you know that your index values will be unique.
	  var indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  var countBy = group(function(result, value, key) {
	    if (has$1(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Split a collection into two arrays: one whose elements all pass the given
	  // truth test, and one whose elements all do not pass the truth test.
	  var partition = group(function(result, value, pass) {
	    result[pass ? 0 : 1].push(value);
	  }, true);
	
	  // Return the number of elements in a collection.
	  function size(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : keys(obj).length;
	  }
	
	  // Internal `_.pick` helper function to determine whether `key` is an enumerable
	  // property name of `obj`.
	  function keyInObj(value, key, obj) {
	    return key in obj;
	  }
	
	  // Return a copy of the object only containing the allowed properties.
	  var pick = restArguments(function(obj, keys) {
	    var result = {}, iteratee = keys[0];
	    if (obj == null) return result;
	    if (isFunction$1(iteratee)) {
	      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
	      keys = allKeys(obj);
	    } else {
	      iteratee = keyInObj;
	      keys = flatten$1(keys, false, false);
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  });
	
	  // Return a copy of the object without the disallowed properties.
	  var omit = restArguments(function(obj, keys) {
	    var iteratee = keys[0], context;
	    if (isFunction$1(iteratee)) {
	      iteratee = negate(iteratee);
	      if (keys.length > 1) context = keys[1];
	    } else {
	      keys = map(flatten$1(keys, false, false), String);
	      iteratee = function(value, key) {
	        return !contains(keys, key);
	      };
	    }
	    return pick(obj, iteratee, context);
	  });
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  function initial(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  }
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. The **guard** check allows it to work with `_.map`.
	  function first(array, n, guard) {
	    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
	    if (n == null || guard) return array[0];
	    return initial(array, array.length - n);
	  }
	
	  // Returns everything but the first entry of the `array`. Especially useful on
	  // the `arguments` object. Passing an **n** will return the rest N values in the
	  // `array`.
	  function rest(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  }
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  function last(array, n, guard) {
	    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
	    if (n == null || guard) return array[array.length - 1];
	    return rest(array, Math.max(0, array.length - n));
	  }
	
	  // Trim out all falsy values from an array.
	  function compact(array) {
	    return filter(array, Boolean);
	  }
	
	  // Flatten out an array, either recursively (by default), or up to `depth`.
	  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
	  function flatten(array, depth) {
	    return flatten$1(array, depth, false);
	  }
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  var difference = restArguments(function(array, rest) {
	    rest = flatten$1(rest, true, true);
	    return filter(array, function(value){
	      return !contains(rest, value);
	    });
	  });
	
	  // Return a version of the array that does not contain the specified value(s).
	  var without = restArguments(function(array, otherArrays) {
	    return difference(array, otherArrays);
	  });
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // The faster algorithm will not work with an iteratee if the iteratee
	  // is not a one-to-one function, so providing an iteratee will disable
	  // the faster algorithm.
	  function uniq(array, isSorted, iteratee, context) {
	    if (!isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted && !iteratee) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  }
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  var union = restArguments(function(arrays) {
	    return uniq(flatten$1(arrays, true, true));
	  });
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  function intersection(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (contains(result, item)) continue;
	      var j;
	      for (j = 1; j < argsLength; j++) {
	        if (!contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  }
	
	  // Complement of zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices.
	  function unzip(array) {
	    var length = (array && max(array, getLength).length) || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = pluck(array, index);
	    }
	    return result;
	  }
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  var zip = restArguments(unzip);
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.
	  function object(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  }
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](https://docs.python.org/library/functions.html#range).
	  function range(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    if (!step) {
	      step = stop < start ? -1 : 1;
	    }
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  }
	
	  // Chunk a single array into multiple arrays, each containing `count` or fewer
	  // items.
	  function chunk(array, count) {
	    if (count == null || count < 1) return [];
	    var result = [];
	    var i = 0, length = array.length;
	    while (i < length) {
	      result.push(slice.call(array, i, i += count));
	    }
	    return result;
	  }
	
	  // Helper function to continue chaining intermediate results.
	  function chainResult(instance, obj) {
	    return instance._chain ? _$1(obj).chain() : obj;
	  }
	
	  // Add your own custom functions to the Underscore object.
	  function mixin(obj) {
	    each(functions(obj), function(name) {
	      var func = _$1[name] = obj[name];
	      _$1.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return chainResult(this, func.apply(_$1, args));
	      };
	    });
	    return _$1;
	  }
	
	  // Add all mutator `Array` functions to the wrapper.
	  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _$1.prototype[name] = function() {
	      var obj = this._wrapped;
	      if (obj != null) {
	        method.apply(obj, arguments);
	        if ((name === 'shift' || name === 'splice') && obj.length === 0) {
	          delete obj[0];
	        }
	      }
	      return chainResult(this, obj);
	    };
	  });
	
	  // Add all accessor `Array` functions to the wrapper.
	  each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _$1.prototype[name] = function() {
	      var obj = this._wrapped;
	      if (obj != null) obj = method.apply(obj, arguments);
	      return chainResult(this, obj);
	    };
	  });
	
	  // Named Exports
	
	  var allExports = {
	    __proto__: null,
	    VERSION: VERSION,
	    restArguments: restArguments,
	    isObject: isObject,
	    isNull: isNull,
	    isUndefined: isUndefined,
	    isBoolean: isBoolean,
	    isElement: isElement,
	    isString: isString,
	    isNumber: isNumber,
	    isDate: isDate,
	    isRegExp: isRegExp,
	    isError: isError,
	    isSymbol: isSymbol,
	    isArrayBuffer: isArrayBuffer,
	    isDataView: isDataView$1,
	    isArray: isArray,
	    isFunction: isFunction$1,
	    isArguments: isArguments$1,
	    isFinite: isFinite$1,
	    isNaN: isNaN$1,
	    isTypedArray: isTypedArray$1,
	    isEmpty: isEmpty,
	    isMatch: isMatch,
	    isEqual: isEqual,
	    isMap: isMap,
	    isWeakMap: isWeakMap,
	    isSet: isSet,
	    isWeakSet: isWeakSet,
	    keys: keys,
	    allKeys: allKeys,
	    values: values,
	    pairs: pairs,
	    invert: invert,
	    functions: functions,
	    methods: functions,
	    extend: extend,
	    extendOwn: extendOwn,
	    assign: extendOwn,
	    defaults: defaults,
	    create: create,
	    clone: clone,
	    tap: tap,
	    get: get,
	    has: has,
	    mapObject: mapObject,
	    identity: identity,
	    constant: constant,
	    noop: noop,
	    toPath: toPath$1,
	    property: property,
	    propertyOf: propertyOf,
	    matcher: matcher,
	    matches: matcher,
	    times: times,
	    random: random,
	    now: now,
	    escape: _escape,
	    unescape: _unescape,
	    templateSettings: templateSettings,
	    template: template,
	    result: result,
	    uniqueId: uniqueId,
	    chain: chain,
	    iteratee: iteratee,
	    partial: partial,
	    bind: bind,
	    bindAll: bindAll,
	    memoize: memoize,
	    delay: delay,
	    defer: defer,
	    throttle: throttle,
	    debounce: debounce,
	    wrap: wrap,
	    negate: negate,
	    compose: compose,
	    after: after,
	    before: before,
	    once: once,
	    findKey: findKey,
	    findIndex: findIndex,
	    findLastIndex: findLastIndex,
	    sortedIndex: sortedIndex,
	    indexOf: indexOf,
	    lastIndexOf: lastIndexOf,
	    find: find,
	    detect: find,
	    findWhere: findWhere,
	    each: each,
	    forEach: each,
	    map: map,
	    collect: map,
	    reduce: reduce,
	    foldl: reduce,
	    inject: reduce,
	    reduceRight: reduceRight,
	    foldr: reduceRight,
	    filter: filter,
	    select: filter,
	    reject: reject,
	    every: every,
	    all: every,
	    some: some,
	    any: some,
	    contains: contains,
	    includes: contains,
	    include: contains,
	    invoke: invoke,
	    pluck: pluck,
	    where: where,
	    max: max,
	    min: min,
	    shuffle: shuffle,
	    sample: sample,
	    sortBy: sortBy,
	    groupBy: groupBy,
	    indexBy: indexBy,
	    countBy: countBy,
	    partition: partition,
	    toArray: toArray,
	    size: size,
	    pick: pick,
	    omit: omit,
	    first: first,
	    head: first,
	    take: first,
	    initial: initial,
	    last: last,
	    rest: rest,
	    tail: rest,
	    drop: rest,
	    compact: compact,
	    flatten: flatten,
	    without: without,
	    uniq: uniq,
	    unique: uniq,
	    union: union,
	    intersection: intersection,
	    difference: difference,
	    unzip: unzip,
	    transpose: unzip,
	    zip: zip,
	    object: object,
	    range: range,
	    chunk: chunk,
	    mixin: mixin,
	    'default': _$1
	  };
	
	  // Default Export
	
	  // Add all of the Underscore functions to the wrapper object.
	  var _ = mixin(allExports);
	  // Legacy Node.js API.
	  _._ = _;
	
	  return _;
	
	})));
	//# sourceMappingURL=underscore-umd.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var RunSpan, Span, assert, ref, shallowObjectEqual, validateAttributes,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(10), assert = ref.assert, shallowObjectEqual = ref.shallowObjectEqual;
	
	Span = __webpack_require__(14);
	
	validateAttributes = function(attributes) {
	  var attribute, results, value;
	  results = [];
	  for (attribute in attributes) {
	    value = attributes[attribute];
	    assert(typeof attribute === 'string', "Expected " + attribute + " to be string");
	    if (value) {
	      if (_.isObject(value)) {
	        results.push((function() {
	          var results1;
	          results1 = [];
	          for (attribute in value) {
	            value = value[attribute];
	            assert(typeof attribute === 'string', "Expected " + attribute + " to be string");
	            results1.push(assert(typeof value === 'string', "Expected " + value + " to be string"));
	          }
	          return results1;
	        })());
	      } else {
	        results.push(assert(typeof value === 'string', "Expected " + value + " to be string"));
	      }
	    } else {
	      results.push(void 0);
	    }
	  }
	  return results;
	};
	
	RunSpan = (function(superClass) {
	  extend(RunSpan, superClass);
	
	  RunSpan.attributes = null;
	
	  function RunSpan(text, attributes1) {
	    this.attributes = attributes1 != null ? attributes1 : {};
	    RunSpan.__super__.constructor.call(this, text);
	  }
	
	  RunSpan.prototype.clone = function() {
	    var clone;
	    clone = RunSpan.__super__.clone.call(this);
	    clone.attributes = Object.assign({}, this.attributes);
	    return clone;
	  };
	
	
	  /*
	  tagName: null
	  Object.defineProperty @::, 'tagName',
	    get: -> 'run'
	   */
	
	  RunSpan.prototype.setAttributes = function(attributes) {
	    if (attributes == null) {
	      attributes = {};
	    }
	    return this.attributes = Object.assign({}, attributes);
	  };
	
	  RunSpan.prototype.addAttribute = function(attribute, value) {
	    return this.attributes[attribute] = value;
	  };
	
	  RunSpan.prototype.addAttributes = function(attributes) {
	    var k, results, v;
	    results = [];
	    for (k in attributes) {
	      v = attributes[k];
	      results.push(this.attributes[k] = v);
	    }
	    return results;
	  };
	
	  RunSpan.prototype.removeAttribute = function(attribute) {
	    return delete this.attributes[attribute];
	  };
	
	  RunSpan.prototype.mergeWithSpan = function(run) {
	    if (shallowObjectEqual(this.attributes, run.attributes)) {
	      this.insertString(this.getLength(), run.string);
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  RunSpan.prototype.toString = function() {
	    var name, nameValues, sortedNames;
	    sortedNames = (function() {
	      var results;
	      results = [];
	      for (name in this.attributes) {
	        results.push(name);
	      }
	      return results;
	    }).call(this);
	    sortedNames.sort();
	    nameValues = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = sortedNames.length; i < len; i++) {
	        name = sortedNames[i];
	        results.push(name + ":" + (JSON.stringify(this.attributes[name])));
	      }
	      return results;
	    }).call(this);
	    return RunSpan.__super__.toString.call(this, nameValues.join('/'));
	  };
	
	  return RunSpan;
	
	})(Span);
	
	module.exports = RunSpan;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, ElementType, ItemSerializer, addDOMNodeToAttributedString, assert, bmlTags, dom, htmlparser;
	
	AttributedString = __webpack_require__(8);
	
	bmlTags = __webpack_require__(20);
	
	ItemSerializer = __webpack_require__(21);
	
	ElementType = __webpack_require__(174);
	
	htmlparser = __webpack_require__(176);
	
	assert = __webpack_require__(10).assert;
	
	dom = __webpack_require__(175);
	
	AttributedString.fromInlineBMLString = function(inlineBMLString) {
	  var handler, parser, result;
	  result = null;
	  handler = new htmlparser.DomHandler((function(_this) {
	    return function(error, dom) {
	      if (error) {
	        return console.log(error);
	      } else {
	        return result = _this.fromInlineBML(dom);
	      }
	    };
	  })(this));
	  parser = new htmlparser.Parser(handler, {
	    decodeEntities: true,
	    lowerCaseTags: true
	  });
	  parser.write(inlineBMLString);
	  parser.done();
	  return result;
	};
	
	AttributedString.fromInlineBML = function(domArray) {
	  var attributedString, each, i, len;
	  if (domArray.length === 0) {
	    new AttributedString();
	  }
	  if (domArray.length === 1 && domArray[0].type === ElementType.Text) {
	    return new AttributedString(domArray[0].data);
	  } else {
	    attributedString = new AttributedString();
	    for (i = 0, len = domArray.length; i < len; i++) {
	      each = domArray[i];
	      addDOMNodeToAttributedString(each, attributedString);
	    }
	    return attributedString;
	  }
	};
	
	AttributedString.validateInlineBML = function(inlineBMLContainer) {
	  var each, end, results, tagName;
	  end = dom.nodeNextBranch(inlineBMLContainer);
	  each = dom.nextNode(inlineBMLContainer);
	  results = [];
	  while (each !== end) {
	    if (tagName = each.name) {
	      assert(bmlTags[tagName], "Unexpected tagName '" + tagName + "' in 'P'");
	    }
	    results.push(each = dom.nextNode(each));
	  }
	  return results;
	};
	
	addDOMNodeToAttributedString = function(node, attributedString) {
	  var each, image, lineBreak, tagStart, type;
	  type = node.type;
	  if (type === ElementType.Text) {
	    return attributedString.appendText(new AttributedString(ItemSerializer.replaceParagraphBreaks(node.data, '')));
	  } else if (type === ElementType.Tag) {
	    tagStart = attributedString.getLength();
	    each = dom.firstChild(node);
	    if (each) {
	      while (each) {
	        addDOMNodeToAttributedString(each, attributedString);
	        each = each.next;
	      }
	      if (bmlTags[node.name]) {
	        return attributedString.addAttributeInRange(node.name, node.attribs, tagStart, attributedString.getLength() - tagStart);
	      }
	    } else if (bmlTags[node.name]) {
	      if (node.name === 'br') {
	        lineBreak = new AttributedString(AttributedString.LineSeparatorCharacter);
	        lineBreak.addAttributeInRange('br', node.attribs, 0, 1);
	        return attributedString.appendText(lineBreak);
	      } else if (node.name === 'img') {
	        image = new AttributedString(AttributedString.ObjectReplacementCharacter);
	        image.addAttributeInRange('img', node.attribs, 0, 1);
	        return attributedString.appendText(image);
	      }
	    }
	  }
	};
	
	AttributedString.inlineBMLToText = function(inlineBMLContainer) {
	  var each, end, tagName, text, type;
	  if (inlineBMLContainer) {
	    end = dom.nodeNextBranch(inlineBMLContainer);
	    each = dom.nextNode(inlineBMLContainer);
	    text = [];
	    while (each !== end) {
	      type = each.type;
	      if (type === ElementType.Text) {
	        text.push(each.data);
	      } else if (type === ElementType.Tag && !dom.firstChild(each)) {
	        tagName = each.name;
	        if (tagName === 'br') {
	          text.push(AttributedString.LineSeparatorCharacter);
	        } else if (tagName === 'img') {
	          text.push(AttributedString.ObjectReplacementCharacter);
	        }
	      }
	      each = dom.nextNode(each);
	    }
	    return text.join('');
	  } else {
	    return '';
	  }
	};
	
	module.exports = AttributedString;


/***/ }),
/* 20 */
/***/ (function(module, exports) {

	module.exports = {
	  'a': true,
	  'abbr': true,
	  'b': true,
	  'bdi': true,
	  'bdo': true,
	  'br': true,
	  'cite': true,
	  'code': true,
	  'data': true,
	  'dfn': true,
	  'em': true,
	  'i': true,
	  'kbd': true,
	  'mark': true,
	  'q': true,
	  'rp': true,
	  'rt': true,
	  'ruby': true,
	  's': true,
	  'samp': true,
	  'small': true,
	  'span': true,
	  'strong': true,
	  'sub': true,
	  'sup': true,
	  'time': true,
	  'u': true,
	  'var': true,
	  'wbr': true,
	  'audio': true,
	  'img': true,
	  'video': true,
	  'del': true,
	  'ins': true
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var ItemSerializer, _,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	_ = __webpack_require__(15);
	
	ItemSerializer = (function() {
	
	  /*
	  Section: Format Constants
	   */
	  ItemSerializer.ItemReferencesType = 'application/json+item-ids';
	
	  ItemSerializer.BMLType = 'text/bml+html';
	
	  ItemSerializer.BMLMimeType = ItemSerializer.BMLType;
	
	  ItemSerializer.OPMLType = 'text/opml+xml';
	
	  ItemSerializer.OPMLMimeType = ItemSerializer.OPMLType;
	
	  ItemSerializer.TaskPaperType = 'text/taskpaper';
	
	  ItemSerializer.TaskPaperMimeType = ItemSerializer.TaskPaperType;
	
	  ItemSerializer.WriteRoomType = 'text/writeroom';
	
	  ItemSerializer.WriteRoomMimeType = ItemSerializer.WriteRoomType;
	
	  ItemSerializer.TEXTType = 'text/plain';
	
	  ItemSerializer.TEXTMimeType = ItemSerializer.TEXTType;
	
	  ItemSerializer.UTIToTypeMap = {
	    'public.plain-text': ItemSerializer.TEXTType,
	    'public.utf8-plain-text': ItemSerializer.TEXTType,
	    'com.taskpaper.text': ItemSerializer.TaskPaperType,
	    'com.writeroom.text': ItemSerializer.WriteRoomType,
	    'com.hogbaysoftware.ItemReferencePboardType': ItemSerializer.ItemReferencesType,
	    'com.hogbaysoftware.BirchMarkupLanguagePboardType': ItemSerializer.BMLType
	  };
	
	  ItemSerializer.serializations = [];
	
	  function ItemSerializer() {
	    throw new Error('This is a static class');
	  }
	
	  ItemSerializer.registerSerialization = function(serialization) {
	    if (serialization.priority == null) {
	      serialization.priority = Number.Infinity;
	    }
	    this.serializations.push(serialization);
	    return this.serializations.sort(function(a, b) {
	      return a.priority - b.priority;
	    });
	  };
	
	  ItemSerializer.getSerializationsForType = function(type) {
	    var each, results;
	    if (this.UTIToTypeMap[type]) {
	      type = this.UTIToTypeMap[type];
	    }
	    results = (function() {
	      var i, len, ref, results1;
	      ref = this.serializations;
	      results1 = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        each = ref[i];
	        if (indexOf.call(each.types, type) >= 0) {
	          results1.push(each.serialization);
	        }
	      }
	      return results1;
	    }).call(this);
	    if (results.length === 0) {
	      results = this.getSerializationsForType(ItemSerializer.TEXTType);
	    }
	    return results;
	  };
	
	  ItemSerializer.getSerializationsForExtension = function(extension) {
	    var each, results;
	    if (extension == null) {
	      extension = '';
	    }
	    extension = extension.toLowerCase();
	    results = (function() {
	      var i, len, ref, results1;
	      ref = this.serializations;
	      results1 = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        each = ref[i];
	        if (indexOf.call(each.extensions, extension) >= 0) {
	          results1.push(each.serialization);
	        }
	      }
	      return results1;
	    }).call(this);
	    if (results.length === 0) {
	      results = this.getSerializationsForType(ItemSerializer.TEXTType);
	    }
	    return results;
	  };
	
	
	  /*
	  Section: Serialize & Deserialize Items
	   */
	
	  ItemSerializer.serializeItems = function(items, options, legacyOptions) {
	    var context, each, emptyEncodeLastItem, endOffset, firstItem, i, itemBody, itemStack, j, lastItem, len, len1, ref, ref1, ref2, ref3, serialization, startOffset;
	    if (options == null) {
	      options = {};
	    }
	    if (typeof legacyOptions === 'string') {
	      options = {
	        type: legacyOptions
	      };
	    }
	    firstItem = items[0];
	    lastItem = items[items.length - 1];
	    if (options.type == null) {
	      options.type = (ref = (ref1 = items[0]) != null ? ref1.outline.type : void 0) != null ? ref : ItemSerializer.BMLType;
	    }
	    if (options.startOffset == null) {
	      options.startOffset = 0;
	    }
	    if (options.endOffset == null) {
	      options.endOffset = (ref2 = lastItem != null ? lastItem.bodyString.length : void 0) != null ? ref2 : 0;
	    }
	    if (options.baseDepth == null) {
	      options.baseDepth = Number.MAX_VALUE;
	    }
	    serialization = ((function() {
	      var i, len, ref3, results1;
	      ref3 = this.getSerializationsForType(options['type']);
	      results1 = [];
	      for (i = 0, len = ref3.length; i < len; i++) {
	        each = ref3[i];
	        if (each.beginSerialization) {
	          results1.push(each);
	        }
	      }
	      return results1;
	    }).call(this))[0];
	    startOffset = options.startOffset;
	    endOffset = options.endOffset;
	    emptyEncodeLastItem = false;
	    context = {};
	    if (items.length > 1 && endOffset === 0) {
	      items.pop();
	      lastItem = items[items.length - 1];
	      endOffset = lastItem.bodyString.length;
	      emptyEncodeLastItem = true;
	    }
	    for (i = 0, len = items.length; i < len; i++) {
	      each = items[i];
	      if (each.depth < options.baseDepth) {
	        options.baseDepth = each.depth;
	      }
	    }
	    serialization.beginSerialization(items, options, context);
	    if (items.length === 1) {
	      serialization.beginSerializeItem(items[0], options, context);
	      serialization.serializeItemBody(items[0], items[0].bodyAttributedSubstringFromRange(startOffset, endOffset - startOffset), options, context);
	      serialization.endSerializeItem(items[0], options, context);
	    } else {
	      itemStack = [];
	      for (j = 0, len1 = items.length; j < len1; j++) {
	        each = items[j];
	        while (((ref3 = itemStack[itemStack.length - 1]) != null ? ref3.depth : void 0) >= each.depth) {
	          serialization.endSerializeItem(itemStack.pop(), options, context);
	        }
	        itemStack.push(each);
	        serialization.beginSerializeItem(each, options, context);
	        itemBody = each.bodyAttributedString;
	        if (each === firstItem) {
	          itemBody = itemBody.attributedSubstringFromRange(startOffset, itemBody.length - startOffset);
	        } else if (each === lastItem) {
	          itemBody = itemBody.attributedSubstringFromRange(0, endOffset);
	        }
	        serialization.serializeItemBody(each, itemBody, options, context);
	      }
	      while (itemStack.length) {
	        serialization.endSerializeItem(itemStack.pop(), options, context);
	      }
	    }
	    if (emptyEncodeLastItem) {
	      if (typeof serialization.emptyEncodeLastItem === "function") {
	        serialization.emptyEncodeLastItem(options, context);
	      }
	    }
	    return serialization.endSerialization(options, context);
	  };
	
	  ItemSerializer.deserializeItems = function(serializedItems, outline, options) {
	    var each, ref, serialization;
	    if (options == null) {
	      options = {};
	    }
	    if (typeof options === 'string') {
	      options = {
	        type: options
	      };
	    }
	    if (options['type'] == null) {
	      options['type'] = (ref = outline.type) != null ? ref : ItemSerializer.BMLType;
	    }
	    serialization = ((function() {
	      var i, len, ref1, results1;
	      ref1 = this.getSerializationsForType(options['type']);
	      results1 = [];
	      for (i = 0, len = ref1.length; i < len; i++) {
	        each = ref1[i];
	        if (each.deserializeItems) {
	          results1.push(each);
	        }
	      }
	      return results1;
	    }).call(this))[0];
	    return serialization.deserializeItems(this.replaceParagraphBreaks(serializedItems, '\n'), outline, options);
	  };
	
	
	  /*
	  Section: Paragraph Breaks - https://en.wikipedia.org/wiki/Newline
	   */
	
	  ItemSerializer.paragraphBreakRegex = /\r\n?|[\n\f\u2B7F\u2029]/g;
	
	  ItemSerializer.replaceParagraphBreaks = function(text, replacement) {
	    if (replacement == null) {
	      replacement = '\n';
	    }
	    return text.replace(this.paragraphBreakRegex, replacement);
	  };
	
	  return ItemSerializer;
	
	})();
	
	ItemSerializer.registerSerialization({
	  priority: 0,
	  extensions: [],
	  types: [ItemSerializer.ItemReferencesType],
	  serialization: __webpack_require__(22)
	});
	
	ItemSerializer.registerSerialization({
	  priority: 1,
	  extensions: ['bml'],
	  types: [ItemSerializer.BMLType],
	  serialization: __webpack_require__(173)
	});
	
	ItemSerializer.registerSerialization({
	  priority: 2,
	  extensions: ['opml'],
	  types: [ItemSerializer.OPMLType],
	  serialization: __webpack_require__(219)
	});
	
	ItemSerializer.registerSerialization({
	  priority: 3,
	  extensions: ['taskpaper'],
	  types: [ItemSerializer.TaskPaperType],
	  serialization: __webpack_require__(220)
	});
	
	ItemSerializer.registerSerialization({
	  priority: 3,
	  extensions: ['writeroom'],
	  types: [ItemSerializer.WriteRoomType],
	  serialization: __webpack_require__(226)
	});
	
	ItemSerializer.registerSerialization({
	  priority: 4,
	  extensions: [],
	  types: ['public.file-url', 'NSFilenamesPboardType'],
	  serialization: __webpack_require__(227)
	});
	
	ItemSerializer.registerSerialization({
	  priority: 5,
	  extensions: [],
	  types: [ItemSerializer.TEXTType],
	  serialization: __webpack_require__(225)
	});
	
	module.exports = ItemSerializer;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var Item, _, beginSerialization, beginSerializeItem, deserializeItems, endSerialization, endSerializeItem, serializeItemBody;
	
	_ = __webpack_require__(15);
	
	Item = __webpack_require__(23);
	
	
	/*
	Serialization
	 */
	
	beginSerialization = function(items, options, context) {
	  var coverItems, each, expandedItemIDs, expandedItemIDsSet, i, j, len, len1, outline, serializedItems;
	  coverItems = Item.getCommonAncestors(items);
	  expandedItemIDsSet = new Set();
	  serializedItems = [];
	  if (expandedItemIDs = options != null ? options.expandedItemIDs : void 0) {
	    for (i = 0, len = expandedItemIDs.length; i < len; i++) {
	      each = expandedItemIDs[i];
	      expandedItemIDsSet.add(each);
	    }
	  }
	  outline = null;
	  for (j = 0, len1 = items.length; j < len1; j++) {
	    each = items[j];
	    if (outline == null) {
	      outline = each.outline;
	    }
	    serializedItems.push({
	      id: each.id,
	      expanded: expandedItemIDsSet.has(each.id)
	    });
	  }
	  return context.json = JSON.stringify({
	    outlineID: outline.id,
	    items: serializedItems
	  });
	};
	
	beginSerializeItem = function(item, options, context) {};
	
	serializeItemBody = function(item, bodyAttributedString, options, context) {};
	
	endSerializeItem = function(item, options, context) {};
	
	endSerialization = function(options, context) {
	  return context.json;
	};
	
	
	/*
	Deserialization
	 */
	
	deserializeItems = function(json, outline, options) {
	  var Outline, each, expandedItemIDs, i, item, items, len, ref, sourceOutline;
	  Outline = __webpack_require__(3);
	  json = JSON.parse(json);
	  items = [];
	  expandedItemIDs = [];
	  items.loadOptions = {
	    expanded: expandedItemIDs
	  };
	  sourceOutline = Outline.getOutlineForID(json.outlineID);
	  if (sourceOutline) {
	    ref = json.items;
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      if (item = sourceOutline.getItemForID(each.id)) {
	        items.push(item);
	        if (each.expanded) {
	          expandedItemIDs.push(each.id);
	        }
	      }
	    }
	  }
	  return Item.getCommonAncestors(items);
	};
	
	module.exports = {
	  beginSerialization: beginSerialization,
	  beginSerializeItem: beginSerializeItem,
	  serializeItemBody: serializeItemBody,
	  endSerializeItem: endSerializeItem,
	  endSerialization: endSerialization,
	  deserializeItems: deserializeItems
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, DateTime, Item, ItemPath, Mutation, _, assert, ctphHash, stringHash;
	
	AttributedString = __webpack_require__(8);
	
	stringHash = __webpack_require__(24);
	
	DateTime = __webpack_require__(25);
	
	ItemPath = __webpack_require__(165);
	
	Mutation = __webpack_require__(167);
	
	_ = __webpack_require__(15);
	
	assert = __webpack_require__(10).assert;
	
	ctphHash = __webpack_require__(168);
	
	module.exports = Item = (function() {
	  function Item(outline, text, id, remappedIDCallback) {
	    this.id = outline.nextOutlineUniqueItemID(id);
	    this.cachedBranchContentID = null;
	    this.outline = outline;
	    this.inOutline = false;
	    this.hasBeenInOutline = false;
	    this.bodyHighlighted = null;
	    if (text instanceof AttributedString) {
	      this.body = text;
	    } else {
	      this.body = new AttributedString(text);
	    }
	    outline.itemDidChangeBody(this, '');
	    if (id !== this.id) {
	      if (remappedIDCallback && id) {
	        remappedIDCallback(id, this.id, this);
	      }
	    }
	  }
	
	
	  /*
	  Section: Properties
	   */
	
	  Item.prototype.id = null;
	
	  Item.prototype.contentID = null;
	
	  Object.defineProperty(Item.prototype, 'contentID', {
	    get: function() {
	      return stringHash(this.bodyString);
	    }
	  });
	
	  Item.prototype.branchContentID = null;
	
	  Object.defineProperty(Item.prototype, 'branchContentID', {
	    get: function() {
	      var childBranchContentIDs, each;
	      if (!this.cachedBranchContentID) {
	        childBranchContentIDs = [this.contentID];
	        each = this.firstChild;
	        while (each) {
	          childBranchContentIDs.push(each.branchContentID);
	          each = each.nextSibling;
	        }
	        this.cachedBranchContentID = "" + (stringHash(childBranchContentIDs.join('')));
	      }
	      return this.cachedBranchContentID;
	    }
	  });
	
	  Item.prototype.clearCachedBranchContentID = function() {
	    var each, results1;
	    each = this;
	    results1 = [];
	    while (each) {
	      each.cachedBranchContentID = null;
	      results1.push(each = each.parent);
	    }
	    return results1;
	  };
	
	  Item.prototype.outline = null;
	
	
	  /*
	  Section: Clone
	   */
	
	  Item.prototype.clone = function(deep, remappedIDCallback) {
	    return this.outline.cloneItem(this, deep, remappedIDCallback);
	  };
	
	
	  /*
	  Section: Structure
	   */
	
	  Item.prototype.isInOutline = false;
	
	  Object.defineProperty(Item.prototype, 'isInOutline', {
	    get: function() {
	      return this.inOutline;
	    },
	    set: function(isInOutline) {
	      var each;
	      if (this.inOutline !== isInOutline) {
	        if (isInOutline) {
	          this.hasBeenInOutline = true;
	          this.outline.idsToItems.set(this.id, this);
	        } else {
	          this.outline.idsToItems["delete"](this.id);
	        }
	        this.inOutline = isInOutline;
	        each = this.firstChild;
	        while (each) {
	          each.isInOutline = isInOutline;
	          each = each.nextSibling;
	        }
	      }
	      return this;
	    }
	  });
	
	  Item.prototype.isOutlineRoot = null;
	
	  Object.defineProperty(Item.prototype, 'isOutlineRoot', {
	    get: function() {
	      return this === this.outline.root;
	    }
	  });
	
	  Item.prototype.localRoot = null;
	
	  Object.defineProperty(Item.prototype, 'localRoot', {
	    get: function() {
	      var each;
	      if (this.isInOutline) {
	        return this.outline.root;
	      } else {
	        each = this;
	        while (each.parent) {
	          each = each.parent;
	        }
	        return each;
	      }
	    }
	  });
	
	  Item.prototype.depth = null;
	
	  Object.defineProperty(Item.prototype, 'depth', {
	    get: function() {
	      var ancestor, depth;
	      depth = this.indent;
	      ancestor = this.parent;
	      while (ancestor) {
	        depth += ancestor.indent;
	        ancestor = ancestor.parent;
	      }
	      return depth;
	    }
	  });
	
	  Item.prototype.row = null;
	
	  Object.defineProperty(Item.prototype, 'row', {
	    get: function() {
	      var each, row;
	      if (this.isOutlineRoot) {
	        return -1;
	      }
	      row = 0;
	      each = this.previousItem;
	      while (each) {
	        row++;
	        each = each.previousItem;
	      }
	      return row;
	    }
	  });
	
	  Item.prototype.parent = null;
	
	  Item.prototype.firstChild = null;
	
	  Item.prototype.lastChild = null;
	
	  Item.prototype.previousSibling = null;
	
	  Item.prototype.nextSibling = null;
	
	  Item.prototype.previousBranch = null;
	
	  Object.defineProperty(Item.prototype, 'previousBranch', {
	    get: function() {
	      return this.previousSibling || this.previousItem;
	    }
	  });
	
	  Item.prototype.nextBranch = null;
	
	  Object.defineProperty(Item.prototype, 'nextBranch', {
	    get: function() {
	      return this.lastBranchItem.nextItem;
	    }
	  });
	
	  Item.prototype.ancestors = null;
	
	  Object.defineProperty(Item.prototype, 'ancestors', {
	    get: function() {
	      var ancestors, each;
	      ancestors = [];
	      each = this.parent;
	      while (each) {
	        ancestors.unshift(each);
	        each = each.parent;
	      }
	      return ancestors;
	    }
	  });
	
	  Item.prototype.descendants = null;
	
	  Object.defineProperty(Item.prototype, 'descendants', {
	    get: function() {
	      var descendants, each, end;
	      descendants = [];
	      end = this.nextBranch;
	      each = this.nextItem;
	      while (each !== end) {
	        descendants.push(each);
	        each = each.nextItem;
	      }
	      return descendants;
	    }
	  });
	
	  Item.prototype.lastDescendant = null;
	
	  Object.defineProperty(Item.prototype, 'lastDescendant', {
	    get: function() {
	      var each;
	      each = this.lastChild;
	      while (each != null ? each.lastChild : void 0) {
	        each = each.lastChild;
	      }
	      return each;
	    }
	  });
	
	  Item.prototype.branchItems = null;
	
	  Object.defineProperty(Item.prototype, 'branchItems', {
	    get: function() {
	      var descendants;
	      descendants = this.descendants;
	      descendants.unshift(this);
	      return descendants;
	    }
	  });
	
	  Item.prototype.lastBranchItem = null;
	
	  Object.defineProperty(Item.prototype, 'lastBranchItem', {
	    get: function() {
	      return this.lastDescendant || this;
	    }
	  });
	
	  Item.prototype.previousItem = null;
	
	  Object.defineProperty(Item.prototype, 'previousItem', {
	    get: function() {
	      var parent, previousSibling;
	      previousSibling = this.previousSibling;
	      if (previousSibling) {
	        return previousSibling.lastBranchItem;
	      } else {
	        parent = this.parent;
	        if (!parent || parent.isOutlineRoot) {
	          return null;
	        } else {
	          return parent;
	        }
	      }
	    }
	  });
	
	  Object.defineProperty(Item.prototype, 'previousItemOrRoot', {
	    get: function() {
	      return this.previousItem || this.parent;
	    }
	  });
	
	  Item.prototype.nextItem = null;
	
	  Object.defineProperty(Item.prototype, 'nextItem', {
	    get: function() {
	      var firstChild, nextSibling, parent;
	      firstChild = this.firstChild;
	      if (firstChild) {
	        return firstChild;
	      }
	      nextSibling = this.nextSibling;
	      if (nextSibling) {
	        return nextSibling;
	      }
	      parent = this.parent;
	      while (parent) {
	        nextSibling = parent.nextSibling;
	        if (nextSibling) {
	          return nextSibling;
	        }
	        parent = parent.parent;
	      }
	      return null;
	    }
	  });
	
	  Item.prototype.hasChildren = null;
	
	  Object.defineProperty(Item.prototype, 'hasChildren', {
	    get: function() {
	      return !!this.firstChild;
	    }
	  });
	
	  Item.prototype.children = null;
	
	  Object.defineProperty(Item.prototype, 'children', {
	    get: function() {
	      var children, each;
	      children = [];
	      each = this.firstChild;
	      while (each) {
	        children.push(each);
	        each = each.nextSibling;
	      }
	      return children;
	    }
	  });
	
	  Item.prototype.contains = function(item) {
	    var ancestor;
	    ancestor = item != null ? item.parent : void 0;
	    while (ancestor) {
	      if (ancestor === this) {
	        return true;
	      }
	      ancestor = ancestor.parent;
	    }
	    return false;
	  };
	
	  Item.getCommonAncestors = function(items) {
	    var commonAncestors, each, itemIDs, j, k, len, len1, p;
	    commonAncestors = [];
	    itemIDs = {};
	    for (j = 0, len = items.length; j < len; j++) {
	      each = items[j];
	      itemIDs[each.id] = true;
	    }
	    for (k = 0, len1 = items.length; k < len1; k++) {
	      each = items[k];
	      p = each.parent;
	      while (p && !itemIDs[p.id]) {
	        p = p.parent;
	      }
	      if (!p) {
	        commonAncestors.push(each);
	      }
	    }
	    return commonAncestors;
	  };
	
	  Item.buildItemHiearchy = function(items, parentStack) {
	    var each, eachDepth, insertSiblings, j, len, newGroup, parent, roots, siblings, siblingsStack;
	    if (parentStack == null) {
	      parentStack = [];
	    }
	    Item.removeItemsFromParents(items);
	    roots = [];
	    siblingsStack = [];
	    insertSiblings = function(siblings) {
	      var each, j, len, parentDepth, siblingsDepth, siblingsIndent;
	      if (siblings.parent) {
	        parentDepth = siblings.parent.depth;
	        siblingsDepth = siblings.depth;
	        siblingsIndent = siblingsDepth - parentDepth;
	        for (j = 0, len = siblings.length; j < len; j++) {
	          each = siblings[j];
	          each.indent = siblingsIndent;
	        }
	        return siblings.parent.insertChildrenBefore(siblings, null, true);
	      } else {
	        return roots = roots.concat(siblings);
	      }
	    };
	    for (j = 0, len = items.length; j < len; j++) {
	      each = items[j];
	      eachDepth = each.depth;
	      while ((siblings = siblingsStack[siblingsStack.length - 1]) && siblings.depth > eachDepth) {
	        insertSiblings(siblings);
	        siblingsStack.pop();
	      }
	      if (siblings && siblings.depth === eachDepth) {
	        siblings.push(each);
	      } else {
	        while ((parent = parentStack[parentStack.length - 1]) && parent.depth >= eachDepth) {
	          parentStack.pop();
	        }
	        newGroup = [each];
	        newGroup.parent = parent;
	        newGroup.depth = eachDepth;
	        siblingsStack.push(newGroup);
	      }
	      parentStack.push(each);
	    }
	    while (siblingsStack.length) {
	      siblings = siblingsStack[siblingsStack.length - 1];
	      insertSiblings(siblings);
	      siblingsStack.pop();
	    }
	    return roots;
	  };
	
	  Item.flattenItemHiearchy = function(items, removeFromParents) {
	    var each, eachDescendant, flattenedItems, j, k, len, len1, ref;
	    if (removeFromParents == null) {
	      removeFromParents = true;
	    }
	    flattenedItems = [];
	    for (j = 0, len = items.length; j < len; j++) {
	      each = items[j];
	      flattenedItems.push(each);
	      if (each.hasChildren) {
	        ref = each.descendants;
	        for (k = 0, len1 = ref.length; k < len1; k++) {
	          eachDescendant = ref[k];
	          flattenedItems.push(eachDescendant);
	        }
	      }
	    }
	    if (removeFromParents) {
	      this.removeItemsFromParents(flattenedItems);
	    }
	    return flattenedItems;
	  };
	
	  Item.removeItemsFromParents = function(items) {
	    var each, j, len, previous, ref, ref1, siblings;
	    siblings = [];
	    previous = null;
	    for (j = 0, len = items.length; j < len; j++) {
	      each = items[j];
	      if (each.parent != null) {
	        if (!previous || previous.nextSibling === each) {
	          siblings.push(each);
	        } else {
	          if ((ref = siblings[0].parent) != null) {
	            ref.removeChildren(siblings);
	          }
	          siblings = [each];
	        }
	        previous = each;
	      }
	    }
	    if (siblings.length) {
	      if ((ref1 = siblings[0].parent) != null) {
	        ref1.removeChildren(siblings);
	      }
	    }
	  };
	
	  Item.itemsWithAncestors = function(items) {
	    var addedIDs, ancestorsAndItems, each, index, j, len;
	    ancestorsAndItems = [];
	    addedIDs = {};
	    for (j = 0, len = items.length; j < len; j++) {
	      each = items[j];
	      index = ancestorsAndItems.length;
	      while (each) {
	        if (addedIDs[each.id]) {
	          continue;
	        } else {
	          ancestorsAndItems.splice(index, 0, each);
	          addedIDs[each.id] = true;
	        }
	        each = each.parent;
	      }
	    }
	    return ancestorsAndItems;
	  };
	
	
	  /*
	  Section: Mutate Structure
	   */
	
	  Item.prototype.indent = null;
	
	  Object.defineProperty(Item.prototype, 'indent', {
	    get: function() {
	      var indent;
	      if (indent = this.getAttribute('indent')) {
	        return parseInt(indent, 10);
	      } else if (this.parent) {
	        return 1;
	      } else {
	        return 0;
	      }
	    },
	    set: function(indent) {
	      var nextSibling, previousSibling;
	      if (indent < 1) {
	        indent = 1;
	      }
	      if (previousSibling = this.previousSibling) {
	        assert(indent <= previousSibling.indent, 'item indent must be less then or equal to previousSibling indent');
	      }
	      if (nextSibling = this.nextSibling) {
	        assert(indent >= nextSibling.indent, 'item indent must be greater then or equal to nextSibling indent');
	      }
	      if (this.parent && indent === 1) {
	        indent = null;
	      } else if (indent < 1) {
	        indent = null;
	      }
	      return this.setAttribute('indent', indent);
	    }
	  });
	
	  Item.prototype.insertChildrenBefore = function(children, referenceSibling, maintainIndentHack) {
	    var childIndent, each, firstChild, generateMutation, i, isInOutline, j, k, lastChild, len, len1, mutation, outline, previousSibling, ref, ref1;
	    if (maintainIndentHack == null) {
	      maintainIndentHack = false;
	    }
	    if (!Array.isArray(children)) {
	      children = [children];
	    }
	    if (!children.length) {
	      return;
	    }
	    isInOutline = this.isInOutline;
	    outline = this.outline;
	    generateMutation = this.hasBeenInOutline && !outline.disableMutationEvents;
	    if (generateMutation) {
	      outline.undoManager.beginUndoGrouping();
	      outline.beginChanges();
	    }
	    Item.removeItemsFromParents(children);
	    if (referenceSibling) {
	      assert(referenceSibling.parent === this, 'referenceSibling must be child of this item');
	      previousSibling = referenceSibling.previousSibling;
	    } else {
	      previousSibling = this.lastChild;
	    }
	    if (generateMutation) {
	      mutation = Mutation.createChildrenMutation(this, children, [], previousSibling, referenceSibling);
	      outline.willChange(mutation);
	      outline.recordChange(mutation);
	    }
	    childIndent = (ref = (ref1 = previousSibling != null ? previousSibling.indent : void 0) != null ? ref1 : referenceSibling != null ? referenceSibling.indent : void 0) != null ? ref : 1;
	    for (i = j = 0, len = children.length; j < len; i = ++j) {
	      each = children[i];
	      assert(each.parent !== this, 'insert items must not already be children');
	      assert(each.outline === this.outline, 'children must share same outline as parent');
	      if (!maintainIndentHack) {
	        if (childIndent !== 1) {
	          each.indent = childIndent;
	        } else if (each.indent !== 0) {
	          each.removeAttribute('indent');
	        }
	      }
	      each.previousSibling = children[i - 1];
	      each.nextSibling = children[i + 1];
	      each.parent = this;
	    }
	    firstChild = children[0];
	    lastChild = children[children.length - 1];
	    firstChild.previousSibling = previousSibling;
	    if (previousSibling != null) {
	      previousSibling.nextSibling = firstChild;
	    }
	    lastChild.nextSibling = referenceSibling;
	    if (referenceSibling != null) {
	      referenceSibling.previousSibling = lastChild;
	    }
	    if (!firstChild.previousSibling) {
	      this.firstChild = firstChild;
	    }
	    if (!lastChild.nextSibling) {
	      this.lastChild = lastChild;
	    }
	    this.clearCachedBranchContentID();
	    if (isInOutline) {
	      for (k = 0, len1 = children.length; k < len1; k++) {
	        each = children[k];
	        each.isInOutline = true;
	      }
	    }
	    if (generateMutation) {
	      outline.didChange(mutation);
	      outline.endChanges();
	      outline.undoManager.endUndoGrouping();
	    }
	  };
	
	  Item.prototype.appendChildren = function(children) {
	    this.insertChildrenBefore(children, null);
	  };
	
	  Item.prototype.removeChildren = function(children) {
	    var depth, each, eachIndent, firstChild, generateMutation, j, lastChild, len, mutation, nextSibling, outline, previousSibling, undoManager;
	    if (!Array.isArray(children)) {
	      children = [children];
	    }
	    if (!children.length) {
	      return;
	    }
	    outline = this.outline;
	    undoManager = outline.undoManager;
	    generateMutation = this.hasBeenInOutline && !outline.disableMutationEvents;
	    firstChild = children[0];
	    lastChild = children[children.length - 1];
	    previousSibling = firstChild.previousSibling;
	    nextSibling = lastChild.nextSibling;
	    if (generateMutation) {
	      outline.beginChanges();
	      outline.undoManager.beginUndoGrouping();
	      mutation = Mutation.createChildrenMutation(this, [], children, previousSibling, nextSibling);
	      outline.willChange(mutation);
	      outline.recordChange(mutation);
	    }
	    if (previousSibling != null) {
	      previousSibling.nextSibling = nextSibling;
	    }
	    if (nextSibling != null) {
	      nextSibling.previousSibling = previousSibling;
	    }
	    if (firstChild === this.firstChild) {
	      this.firstChild = nextSibling;
	    }
	    if (lastChild === this.lastChild) {
	      this.lastChild = previousSibling;
	    }
	    depth = this.depth;
	    for (j = 0, len = children.length; j < len; j++) {
	      each = children[j];
	      assert(each.parent === this, 'removed items must be children of this item');
	      eachIndent = each.indent;
	      each.isInOutline = false;
	      each.nextSibling = null;
	      each.previousSibling = null;
	      each.parent = null;
	      if (!undoManager.isUndoing && !undoManager.isRedoing) {
	        each.indent = eachIndent + depth;
	      }
	    }
	    this.clearCachedBranchContentID();
	    if (generateMutation) {
	      outline.didChange(mutation);
	      outline.endChanges();
	      outline.undoManager.endUndoGrouping();
	    }
	  };
	
	  Item.prototype.removeFromParent = function() {
	    var ref;
	    if ((ref = this.parent) != null) {
	      ref.removeChildren(this);
	    }
	  };
	
	
	  /*
	  Section: Item Attributes
	   */
	
	  Item.prototype.tagName = null;
	
	  Object.defineProperty(Item.prototype, 'tagName', {
	    get: function() {
	      return 'item';
	    }
	  });
	
	
	  /*
	  Not going to support nested elements for styling, makes invalidating to hard for now.
	  parentNode: null
	  Object.defineProperty @::, 'parentNode',
	    get: -> @parent
	   */
	
	  Item.prototype.attributes = null;
	
	  Item.prototype.attributeNames = null;
	
	  Object.defineProperty(Item.prototype, 'attributeNames', {
	    get: function() {
	      if (this.attributes) {
	        return Object.keys(this.attributes).sort();
	      } else {
	        return [];
	      }
	    }
	  });
	
	  Item.prototype.hasAttribute = function(name) {
	    var ref;
	    return ((ref = this.attributes) != null ? ref[name] : void 0) != null;
	  };
	
	  Item.prototype.getAttribute = function(name, clazz, array) {
	    var ref, value;
	    if (value = (ref = this.attributes) != null ? ref[name] : void 0) {
	      value = Item.attributeValueStringToObject(value, clazz, array);
	    }
	    return value;
	  };
	
	  Item.prototype.setAttribute = function(name, value) {
	    var generateMutation, mutation, oldValue, outline, undoManager;
	    assert(name !== 'id', 'id is reserved attribute name');
	    if (value) {
	      value = Item.objectToAttributeValueString(value);
	    }
	    oldValue = this.getAttribute(name);
	    if (value === oldValue) {
	      return;
	    }
	    outline = this.outline;
	    undoManager = outline.undoManager;
	    generateMutation = this.hasBeenInOutline && !outline.disableMutationEvents;
	    if (generateMutation) {
	      outline.undoManager.beginUndoGrouping();
	      outline.beginChanges();
	      mutation = Mutation.createAttributeMutation(this, name, oldValue);
	      outline.willChange(mutation);
	      outline.recordChange(mutation);
	    }
	    if (value != null) {
	      if (!this.attributes) {
	        this.attributes = {};
	      }
	      this.attributes[name] = value;
	    } else {
	      if (this.attributes) {
	        delete this.attributes[name];
	      }
	    }
	    undoManager.disableUndoRegistration();
	    outline.itemDidChangeAttribute(this, name, value, oldValue);
	    undoManager.enableUndoRegistration();
	    if (generateMutation) {
	      outline.didChange(mutation);
	      outline.endChanges();
	      outline.undoManager.endUndoGrouping();
	    }
	  };
	
	  Item.prototype.removeAttribute = function(name) {
	    if (this.hasAttribute(name)) {
	      return this.setAttribute(name, null);
	    }
	  };
	
	  Item.attributeValueStringToObject = function(value, clazz, array) {
	    var each, ref;
	    if (array) {
	      value = value.split(/\s*,\s*/);
	      if (clazz) {
	        value = (function() {
	          var j, len, results1;
	          results1 = [];
	          for (j = 0, len = value.length; j < len; j++) {
	            each = value[j];
	            results1.push(Item.attributeValueStringToObject(each, clazz));
	          }
	          return results1;
	        })();
	      }
	      return value;
	    } else {
	      switch (clazz) {
	        case Number:
	        case 'Number':
	          return parseFloat(value);
	        case Boolean:
	        case 'Boolean':
	          if (value === 'true') {
	            return true;
	          } else {
	            return false;
	          }
	          break;
	        case Date:
	        case 'Date':
	          return (ref = DateTime.parse(value)) != null ? ref : '';
	        default:
	          return value;
	      }
	    }
	  };
	
	  Item.objectToAttributeValueString = function(object) {
	    var each;
	    switch (typeof object) {
	      case 'string':
	        return object;
	      case 'number':
	      case 'boolean':
	        return object.toString();
	      default:
	        if (object instanceof Date) {
	          return object.toISOString();
	        } else if (Array.isArray(object)) {
	          return ((function() {
	            var j, len, results1;
	            results1 = [];
	            for (j = 0, len = object.length; j < len; j++) {
	              each = object[j];
	              results1.push(Item.objectToAttributeValueString(each));
	            }
	            return results1;
	          })()).join(',');
	        } else if (object) {
	          return object.toString();
	        } else {
	          return object;
	        }
	    }
	  };
	
	
	  /*
	  Section: Item Body Text
	   */
	
	  Item.prototype.bodyString = null;
	
	  Object.defineProperty(Item.prototype, 'bodyString', {
	    get: function() {
	      return this.body.string.toString();
	    },
	    set: function(text) {
	      if (text == null) {
	        text = '';
	      }
	      return this.replaceBodyRange(0, -1, text);
	    }
	  });
	
	  Item.prototype.bodyContentString = null;
	
	  Object.defineProperty(Item.prototype, 'bodyContentString', {
	    get: function() {
	      var range;
	      range = {};
	      if (this.bodyHighlightedAttributedString.getFirstOccuranceOfAttribute('content', null, range) != null) {
	        return this.bodyString.substr(range.location, range.length);
	      } else {
	        return this.bodyString;
	      }
	    },
	    set: function(text) {
	      var range;
	      if (text == null) {
	        text = '';
	      }
	      range = {};
	      if (this.bodyHighlightedAttributedString.getFirstOccuranceOfAttribute('content', null, range) != null) {
	        return this.replaceBodyRange(range.location, range.length, text);
	      } else {
	        return this.bodyString = text;
	      }
	    }
	  });
	
	  Item.prototype.bodyHTMLString = null;
	
	  Object.defineProperty(Item.prototype, 'bodyHTMLString', {
	    get: function() {
	      return this.bodyAttributedString.toInlineBMLString();
	    },
	    set: function(html) {
	      return this.bodyAttributedString = AttributedString.fromInlineBMLString(html);
	    }
	  });
	
	  Item.prototype.bodyAttributedString = null;
	
	  Object.defineProperty(Item.prototype, 'bodyAttributedString', {
	    get: function() {
	      if (this.isOutlineRoot) {
	        return new AttributedString;
	      }
	      return this.body;
	    },
	    set: function(attributedText) {
	      return this.replaceBodyRange(0, -1, attributedText);
	    }
	  });
	
	  Item.prototype.bodyHighlightedAttributedString = null;
	
	  Object.defineProperty(Item.prototype, 'bodyHighlightedAttributedString', {
	    get: function() {
	      var ref;
	      return (ref = this.bodyHighlighted) != null ? ref : this.body;
	    }
	  });
	
	  Item.prototype.bodyAttributedSubstringFromRange = function(location, length) {
	    return this.bodyAttributedString.attributedSubstringFromRange(location, length);
	  };
	
	  Item.prototype.getBodyAttributesAtIndex = function(characterIndex, effectiveRange, longestEffectiveRange) {
	    return this.bodyAttributedString.getAttributesAtIndex(characterIndex, effectiveRange, longestEffectiveRange);
	  };
	
	  Item.prototype.getBodyAttributeAtIndex = function(attribute, characterIndex, effectiveRange, longestEffectiveRange) {
	    return this.bodyAttributedString.getAttributeAtIndex(attribute, characterIndex, effectiveRange, longestEffectiveRange);
	  };
	
	  Item.prototype.setBodyAttributesInRange = function(attributes, location, length) {
	    var changedText;
	    this.bodyAttributedString.setAttributesInRange(attributes, location, length);
	    changedText = this.bodyAttributedSubstringFromRange(location, length);
	    changedText.setAttributesInRange(attributes, location, length);
	    this.replaceBodyRange(location, length, changedText);
	  };
	
	  Item.prototype.addBodyAttributeInRange = function(attribute, value, location, length) {
	    var attributes;
	    attributes = {};
	    attributes[attribute] = value;
	    this.addBodyAttributesInRange(attributes, location, length);
	  };
	
	  Item.prototype.addBodyAttributesInRange = function(attributes, location, length) {
	    var changedText, eachTagName;
	    for (eachTagName in attributes) {
	      assert(eachTagName === eachTagName.toLowerCase(), 'Tag Names Must be Lowercase');
	    }
	    changedText = this.bodyAttributedSubstringFromRange(location, length);
	    changedText.addAttributesInRange(attributes, 0, length);
	    this.replaceBodyRange(location, length, changedText);
	  };
	
	  Item.prototype.removeBodyAttributeInRange = function(attribute, location, length) {
	    this.removeBodyAttributesInRange([attribute], location, length);
	  };
	
	  Item.prototype.removeBodyAttributesInRange = function(attributes, location, length) {
	    var changedText, each, j, len;
	    changedText = this.bodyAttributedSubstringFromRange(location, length);
	    for (j = 0, len = attributes.length; j < len; j++) {
	      each = attributes[j];
	      changedText.removeAttributeInRange(each, 0, length);
	    }
	    this.replaceBodyRange(location, length, changedText);
	  };
	
	  Item.prototype.insertLineBreakInBody = function(index) {};
	
	  Item.prototype.insertImageInBody = function(index, image) {};
	
	  Item.prototype.replaceBodyRange = function(location, length, insertedText) {
	    var bodyAttributedString, generateMutation, insertedString, mutation, oldBody, outline, replacedText, undoManager;
	    if (this.isOutlineRoot) {
	      return;
	    }
	    if (insertedText instanceof AttributedString) {
	      insertedString = insertedText.string;
	    } else {
	      insertedString = insertedText;
	    }
	    if (length === 0 && insertedString.length === 0) {
	      return;
	    }
	    outline = this.outline;
	    undoManager = outline.undoManager;
	    bodyAttributedString = this.bodyAttributedString;
	    oldBody = bodyAttributedString.getString();
	    generateMutation = this.hasBeenInOutline && !outline.disableMutationEvents;
	    assert(insertedString.indexOf('\n') === -1, 'Item body text cannot contain newlines');
	    assert(location + length <= oldBody.length, 'Replace range end must not be greater then body text');
	    if (generateMutation) {
	      replacedText = bodyAttributedString.attributedSubstringFromRange(location, length);
	      if (replacedText.length === 0 && insertedText.length === 0) {
	        return;
	      }
	      outline.undoManager.beginUndoGrouping();
	      mutation = Mutation.createBodyMutation(this, location, insertedString.length, replacedText);
	      outline.beginChanges();
	      outline.willChange(mutation);
	      outline.recordChange(mutation);
	    }
	    bodyAttributedString.replaceRange(location, length, insertedText);
	    this.bodyHighlighted = null;
	    undoManager.disableUndoRegistration();
	    outline.itemDidChangeBody(this, oldBody);
	    undoManager.enableUndoRegistration();
	    this.clearCachedBranchContentID();
	    if (generateMutation) {
	      outline.didChange(mutation);
	      outline.endChanges();
	      undoManager.endUndoGrouping();
	    }
	  };
	
	  Item.prototype.appendBody = function(text) {
	    this.replaceBodyRange(this.bodyString.length, 0, text);
	  };
	
	  Item.prototype.addBodyHighlightAttributeInRange = function(attribute, value, index, length) {
	    if (!this.bodyHighlighted) {
	      this.bodyHighlighted = this.bodyAttributedString.clone();
	    }
	    this.bodyHighlighted.addAttributeInRange(attribute, value, index, length);
	  };
	
	  Item.prototype.addBodyHighlightAttributesInRange = function(attributes, index, length) {
	    if (!this.bodyHighlighted) {
	      this.bodyHighlighted = this.bodyAttributedString.clone();
	    }
	    this.bodyHighlighted.addAttributesInRange(attributes, index, length);
	  };
	
	
	  /*
	  Section: Debug
	   */
	
	  Item.prototype.branchToString = function(depthString) {
	    var each, indent, j, len, ref, results;
	    if (depthString == null) {
	      depthString = '';
	    }
	    indent = this.indent;
	    while (indent) {
	      depthString += '  ';
	      indent--;
	    }
	    results = [this.toString(depthString)];
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      each = ref[j];
	      results.push(each.branchToString(depthString));
	    }
	    return results.join('\n');
	  };
	
	  Item.prototype.toString = function(depthString) {
	    return (depthString || '') + '(' + this.id + ') ' + this.body.toString();
	  };
	
	  return Item;
	
	})();


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	"use strict";
	
	function hash(str) {
	  var hash = 5381,
	      i    = str.length;
	
	  while(i) {
	    hash = (hash * 33) ^ str.charCodeAt(--i);
	  }
	
	  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
	   * integers. Since we want the results to be always positive, convert the
	   * signed int to an unsigned by doing an unsigned bitshift. */
	  return hash >>> 0;
	}
	
	module.exports = hash;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var DateTime, DateTimeParser, moment;
	
	DateTimeParser = __webpack_require__(26);
	
	moment = __webpack_require__(27);
	
	module.exports = DateTime = (function() {
	  function DateTime() {}
	
	  DateTime.parse = function(string) {
	    var e, m;
	    try {
	      return DateTimeParser.parse(string, {
	        moment: moment
	      }).toDate();
	    } catch (error) {
	      e = error;
	      m = moment(string, moment.ISO_8601, true);
	      if (m.isValid()) {
	        return m.toDate();
	      } else {
	        return null;
	      }
	    }
	  };
	
	  DateTime.format = function(dateOrString, showMillisecondsIfNeeded, showSecondsIfNeeded) {
	    var e, m;
	    if (showMillisecondsIfNeeded == null) {
	      showMillisecondsIfNeeded = true;
	    }
	    if (showSecondsIfNeeded == null) {
	      showSecondsIfNeeded = true;
	    }
	    try {
	      m = DateTimeParser.parse(dateOrString, {
	        moment: moment
	      });
	    } catch (error) {
	      e = error;
	      m = moment(dateOrString, moment.ISO_8601, true);
	      if (!m.isValid()) {
	        return 'invalid date';
	      }
	    }
	    if (m.milliseconds() && showMillisecondsIfNeeded) {
	      return m.format('YYYY-MM-DD HH:mm:ss:SSS');
	    } else if (m.seconds() && showSecondsIfNeeded) {
	      return m.format('YYYY-MM-DD HH:mm:ss');
	    } else if (m.hours() || m.minutes()) {
	      return m.format('YYYY-MM-DD HH:mm');
	    } else {
	      return m.format('YYYY-MM-DD');
	    }
	  };
	
	  return DateTime;
	
	})();


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	/*
	 * Generated by PEG.js 0.10.0.
	 *
	 * http://pegjs.org/
	 */
	
	"use strict";
	
	function peg$subclass(child, parent) {
	  function ctor() { this.constructor = child; }
	  ctor.prototype = parent.prototype;
	  child.prototype = new ctor();
	}
	
	function peg$SyntaxError(message, expected, found, location) {
	  this.message  = message;
	  this.expected = expected;
	  this.found    = found;
	  this.location = location;
	  this.name     = "SyntaxError";
	
	  if (typeof Error.captureStackTrace === "function") {
	    Error.captureStackTrace(this, peg$SyntaxError);
	  }
	}
	
	peg$subclass(peg$SyntaxError, Error);
	
	peg$SyntaxError.buildMessage = function(expected, found) {
	  var DESCRIBE_EXPECTATION_FNS = {
	        literal: function(expectation) {
	          return "\"" + literalEscape(expectation.text) + "\"";
	        },
	
	        "class": function(expectation) {
	          var escapedParts = "",
	              i;
	
	          for (i = 0; i < expectation.parts.length; i++) {
	            escapedParts += expectation.parts[i] instanceof Array
	              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
	              : classEscape(expectation.parts[i]);
	          }
	
	          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
	        },
	
	        any: function(expectation) {
	          return "any character";
	        },
	
	        end: function(expectation) {
	          return "end of input";
	        },
	
	        other: function(expectation) {
	          return expectation.description;
	        }
	      };
	
	  function hex(ch) {
	    return ch.charCodeAt(0).toString(16).toUpperCase();
	  }
	
	  function literalEscape(s) {
	    return s
	      .replace(/\\/g, '\\\\')
	      .replace(/"/g,  '\\"')
	      .replace(/\0/g, '\\0')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	  }
	
	  function classEscape(s) {
	    return s
	      .replace(/\\/g, '\\\\')
	      .replace(/\]/g, '\\]')
	      .replace(/\^/g, '\\^')
	      .replace(/-/g,  '\\-')
	      .replace(/\0/g, '\\0')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	  }
	
	  function describeExpectation(expectation) {
	    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	  }
	
	  function describeExpected(expected) {
	    var descriptions = new Array(expected.length),
	        i, j;
	
	    for (i = 0; i < expected.length; i++) {
	      descriptions[i] = describeExpectation(expected[i]);
	    }
	
	    descriptions.sort();
	
	    if (descriptions.length > 0) {
	      for (i = 1, j = 1; i < descriptions.length; i++) {
	        if (descriptions[i - 1] !== descriptions[i]) {
	          descriptions[j] = descriptions[i];
	          j++;
	        }
	      }
	      descriptions.length = j;
	    }
	
	    switch (descriptions.length) {
	      case 1:
	        return descriptions[0];
	
	      case 2:
	        return descriptions[0] + " or " + descriptions[1];
	
	      default:
	        return descriptions.slice(0, -1).join(", ")
	          + ", or "
	          + descriptions[descriptions.length - 1];
	    }
	  }
	
	  function describeFound(found) {
	    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
	  }
	
	  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	};
	
	function peg$parse(input, options) {
	  options = options !== void 0 ? options : {};
	
	  var peg$FAILED = {},
	
	      peg$startRuleFunctions = { DateTimeExpression: peg$parseDateTimeExpression, Time: peg$parseTime, Duration: peg$parseDuration },
	      peg$startRuleFunction  = peg$parseDateTimeExpression,
	
	      peg$c0 = function(dateTime, time, durations) {
	            if (!dateTime) {
	              dateTime = currentMoment()
	            }
	
	            var result = options.moment(dateTime)
	
	            if (time) {
	              result = result.startOf('day');
	              result.add(time);
	            }
	
	            durations.forEach(function(each) {
	              result.add(each[0]);
	            });
	
	            return result;
	          },
	      peg$c1 = ":",
	      peg$c2 = peg$literalExpectation(":", false),
	      peg$c3 = "-",
	      peg$c4 = peg$literalExpectation("-", false),
	      peg$c5 = function(year, month, day) {
	            if (month) {
	              month = month[1]
	            } else {
	              month = 0
	            }
	
	            if (day) {
	              day = day[1]
	            } else {
	              day = 1
	            }
	            return options.moment([year[0], month, day]);
	          },
	      peg$c6 = /^[0-9]/,
	      peg$c7 = peg$classExpectation([["0", "9"]], false, false),
	      peg$c8 = function(year) {
	            return parseInt(year.join(''), 10);
	          },
	      peg$c9 = function(month) {
	            return parseInt(month.join(''), 10) - 1;
	          },
	      peg$c10 = function(day) {
	            return parseInt(day.join(''), 10);
	          },
	      peg$c11 = "now",
	      peg$c12 = peg$literalExpectation("now", true),
	      peg$c13 = function() { return currentMoment(); },
	      peg$c14 = "yesterday",
	      peg$c15 = peg$literalExpectation("yesterday", true),
	      peg$c16 = function() { return currentMoment().startOf('day').subtract(1, 'day'); },
	      peg$c17 = "today",
	      peg$c18 = peg$literalExpectation("today", true),
	      peg$c19 = function() { return currentMoment().startOf('day'); },
	      peg$c20 = "tomorrow",
	      peg$c21 = peg$literalExpectation("tomorrow", true),
	      peg$c22 = function() { return currentMoment().startOf('day').add(1, 'day'); },
	      peg$c23 = function(specifier, month, day) {
	            if (day == undefined) {
	              day = 1;
	            }
	
	            if (!specifier || specifier == 'this') {
	              return currentMoment().startOf('day').month(month).date(day)
	            } else if (specifier == 'next') {
	              return currentMoment().startOf('day').month(month).date(day).add(1, 'year')
	            } else if (specifier == 'last') {
	              return currentMoment().startOf('day').month(month).date(day).subtract(1, 'year')
	            }
	          },
	      peg$c24 = "this",
	      peg$c25 = peg$literalExpectation("this", true),
	      peg$c26 = "next",
	      peg$c27 = peg$literalExpectation("next", true),
	      peg$c28 = "last",
	      peg$c29 = peg$literalExpectation("last", true),
	      peg$c30 = function(specifier) {
	            return specifier.toLowerCase();
	          },
	      peg$c31 = "january",
	      peg$c32 = peg$literalExpectation("january", true),
	      peg$c33 = "jan",
	      peg$c34 = peg$literalExpectation("jan", true),
	      peg$c35 = "february",
	      peg$c36 = peg$literalExpectation("february", true),
	      peg$c37 = "feb",
	      peg$c38 = peg$literalExpectation("feb", true),
	      peg$c39 = "march",
	      peg$c40 = peg$literalExpectation("march", true),
	      peg$c41 = "mar",
	      peg$c42 = peg$literalExpectation("mar", true),
	      peg$c43 = "april",
	      peg$c44 = peg$literalExpectation("april", true),
	      peg$c45 = "apr",
	      peg$c46 = peg$literalExpectation("apr", true),
	      peg$c47 = "may",
	      peg$c48 = peg$literalExpectation("may", true),
	      peg$c49 = "june",
	      peg$c50 = peg$literalExpectation("june", true),
	      peg$c51 = "jun",
	      peg$c52 = peg$literalExpectation("jun", true),
	      peg$c53 = "july",
	      peg$c54 = peg$literalExpectation("july", true),
	      peg$c55 = "jul",
	      peg$c56 = peg$literalExpectation("jul", true),
	      peg$c57 = "august",
	      peg$c58 = peg$literalExpectation("august", true),
	      peg$c59 = "aug",
	      peg$c60 = peg$literalExpectation("aug", true),
	      peg$c61 = "september",
	      peg$c62 = peg$literalExpectation("september", true),
	      peg$c63 = "sep",
	      peg$c64 = peg$literalExpectation("sep", true),
	      peg$c65 = "october",
	      peg$c66 = peg$literalExpectation("october", true),
	      peg$c67 = "oct",
	      peg$c68 = peg$literalExpectation("oct", true),
	      peg$c69 = "november",
	      peg$c70 = peg$literalExpectation("november", true),
	      peg$c71 = "nov",
	      peg$c72 = peg$literalExpectation("nov", true),
	      peg$c73 = "december",
	      peg$c74 = peg$literalExpectation("december", true),
	      peg$c75 = "dec",
	      peg$c76 = peg$literalExpectation("dec", true),
	      peg$c77 = function(specifier, day) {
	            if (!specifier || specifier == 'this') {
	              return currentMoment().startOf('day').isoWeekday(day);
	            } else if (specifier == 'next') {
	              return currentMoment().startOf('day').isoWeekday(day).add(1, 'week');
	            } else if (specifier == 'last') {
	              return currentMoment().startOf('day').isoWeekday(day).subtract(1, 'week');
	            }
	          },
	      peg$c78 = function(specifier, durationUnit) {
	            var durationStart = durationUnit
	            if (durationStart == 'weeks') {
	              durationStart = 'isoweeks';
	            }
	            if (specifier == 'this') {
	              return currentMoment().startOf(durationStart);
	            } else if (specifier == 'next') {
	              return currentMoment().startOf(durationStart).add(1, durationUnit);
	            } else if (specifier == 'last') {
	              return currentMoment().startOf(durationStart).subtract(1, durationUnit);
	            }
	          },
	      peg$c79 = "monday",
	      peg$c80 = peg$literalExpectation("monday", true),
	      peg$c81 = "mont",
	      peg$c82 = peg$literalExpectation("mont", true),
	      peg$c83 = "mon",
	      peg$c84 = peg$literalExpectation("mon", true),
	      peg$c85 = function() { return 'mon'; },
	      peg$c86 = "tuesday",
	      peg$c87 = peg$literalExpectation("tuesday", true),
	      peg$c88 = "tue",
	      peg$c89 = peg$literalExpectation("tue", true),
	      peg$c90 = "wednesday",
	      peg$c91 = peg$literalExpectation("wednesday", true),
	      peg$c92 = "wed",
	      peg$c93 = peg$literalExpectation("wed", true),
	      peg$c94 = "thursday",
	      peg$c95 = peg$literalExpectation("thursday", true),
	      peg$c96 = "thu",
	      peg$c97 = peg$literalExpectation("thu", true),
	      peg$c98 = "friday",
	      peg$c99 = peg$literalExpectation("friday", true),
	      peg$c100 = "fri",
	      peg$c101 = peg$literalExpectation("fri", true),
	      peg$c102 = "saturday",
	      peg$c103 = peg$literalExpectation("saturday", true),
	      peg$c104 = "sat",
	      peg$c105 = peg$literalExpectation("sat", true),
	      peg$c106 = "sunday",
	      peg$c107 = peg$literalExpectation("sunday", true),
	      peg$c108 = "sun",
	      peg$c109 = peg$literalExpectation("sun", true),
	      peg$c110 = "at",
	      peg$c111 = peg$literalExpectation("at", true),
	      peg$c112 = function(hours, period) {
	            if (period == 'pm') {
	              hours += 12;
	            }
	            return options.moment.duration({ hours: hours });
	          },
	      peg$c113 = function(hours, minutes, seconds, milliseconds, period) {
	            if (period == 'pm') {
	              hours += 12;
	            }
	
	            if (seconds) {
	              seconds = seconds[1];
	            } else {
	              seconds = 0;
	            }
	
	            if (milliseconds) {
	              milliseconds = milliseconds[1]
	            } else {
	              milliseconds = 0
	            }
	
	            return options.moment.duration({
	              hours: hours,
	              minutes: minutes[1],
	              seconds: seconds,
	              milliseconds: milliseconds
	            });
	          },
	      peg$c114 = "pm",
	      peg$c115 = peg$literalExpectation("pm", true),
	      peg$c116 = "am",
	      peg$c117 = peg$literalExpectation("am", true),
	      peg$c118 = function(period) {
	            return period.toLowerCase();
	          },
	      peg$c119 = "+",
	      peg$c120 = peg$literalExpectation("+", false),
	      peg$c121 = function(adjust, quantity, durationUnit) {
	            if (adjust == '-') {
	              quantity *= -1
	            }
	            return options.moment.duration(quantity, durationUnit);
	          },
	      peg$c122 = "milliseconds",
	      peg$c123 = peg$literalExpectation("milliseconds", true),
	      peg$c124 = "millisecond",
	      peg$c125 = peg$literalExpectation("millisecond", true),
	      peg$c126 = "ms",
	      peg$c127 = peg$literalExpectation("ms", true),
	      peg$c128 = function() { return 'milliseconds' },
	      peg$c129 = "seconds",
	      peg$c130 = peg$literalExpectation("seconds", true),
	      peg$c131 = "second",
	      peg$c132 = peg$literalExpectation("second", true),
	      peg$c133 = "sec",
	      peg$c134 = peg$literalExpectation("sec", true),
	      peg$c135 = "sa",
	      peg$c136 = peg$literalExpectation("sa", true),
	      peg$c137 = "su",
	      peg$c138 = peg$literalExpectation("su", true),
	      peg$c139 = "s",
	      peg$c140 = peg$literalExpectation("s", true),
	      peg$c141 = function() { return 'seconds' },
	      peg$c142 = "minutes",
	      peg$c143 = peg$literalExpectation("minutes", true),
	      peg$c144 = "minute",
	      peg$c145 = peg$literalExpectation("minute", true),
	      peg$c146 = "mins",
	      peg$c147 = peg$literalExpectation("mins", true),
	      peg$c148 = "min",
	      peg$c149 = peg$literalExpectation("min", true),
	      peg$c150 = "mo",
	      peg$c151 = peg$literalExpectation("mo", true),
	      peg$c152 = "ma",
	      peg$c153 = peg$literalExpectation("ma", true),
	      peg$c154 = "m",
	      peg$c155 = peg$literalExpectation("m", true),
	      peg$c156 = function() { return 'minutes' },
	      peg$c157 = "hours",
	      peg$c158 = peg$literalExpectation("hours", true),
	      peg$c159 = "hour",
	      peg$c160 = peg$literalExpectation("hour", true),
	      peg$c161 = "h",
	      peg$c162 = peg$literalExpectation("h", true),
	      peg$c163 = function() { return 'hours' },
	      peg$c164 = "days",
	      peg$c165 = peg$literalExpectation("days", true),
	      peg$c166 = "day",
	      peg$c167 = peg$literalExpectation("day", true),
	      peg$c168 = "de",
	      peg$c169 = peg$literalExpectation("de", true),
	      peg$c170 = "d",
	      peg$c171 = peg$literalExpectation("d", true),
	      peg$c172 = function() { return 'days' },
	      peg$c173 = "weeks",
	      peg$c174 = peg$literalExpectation("weeks", true),
	      peg$c175 = "week",
	      peg$c176 = peg$literalExpectation("week", true),
	      peg$c177 = "we",
	      peg$c178 = peg$literalExpectation("we", true),
	      peg$c179 = "w",
	      peg$c180 = peg$literalExpectation("w", true),
	      peg$c181 = function() { return 'weeks' },
	      peg$c182 = "months",
	      peg$c183 = peg$literalExpectation("months", true),
	      peg$c184 = "month",
	      peg$c185 = peg$literalExpectation("month", true),
	      peg$c186 = "oc",
	      peg$c187 = peg$literalExpectation("oc", true),
	      peg$c188 = "o",
	      peg$c189 = peg$literalExpectation("o", true),
	      peg$c190 = function() { return 'months' },
	      peg$c191 = "quarters",
	      peg$c192 = peg$literalExpectation("quarters", true),
	      peg$c193 = "quarter",
	      peg$c194 = peg$literalExpectation("quarter", true),
	      peg$c195 = "q",
	      peg$c196 = peg$literalExpectation("q", true),
	      peg$c197 = function() { return 'quarters' },
	      peg$c198 = "years",
	      peg$c199 = peg$literalExpectation("years", true),
	      peg$c200 = "year",
	      peg$c201 = peg$literalExpectation("year", true),
	      peg$c202 = "y",
	      peg$c203 = peg$literalExpectation("y", true),
	      peg$c204 = function() { return 'years' },
	      peg$c205 = peg$otherExpectation("integer"),
	      peg$c206 = function() { return parseInt(text(), 10); },
	      peg$c207 = peg$otherExpectation("whitespace"),
	      peg$c208 = function(whitespace) { return whitespace.join("") },
	      peg$c209 = /^[ \t\n\r]/,
	      peg$c210 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
	
	      peg$currPos          = 0,
	      peg$savedPos         = 0,
	      peg$posDetailsCache  = [{ line: 1, column: 1 }],
	      peg$maxFailPos       = 0,
	      peg$maxFailExpected  = [],
	      peg$silentFails      = 0,
	
	      peg$resultsCache = {},
	
	      peg$result;
	
	  if ("startRule" in options) {
	    if (!(options.startRule in peg$startRuleFunctions)) {
	      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	    }
	
	    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	  }
	
	  function text() {
	    return input.substring(peg$savedPos, peg$currPos);
	  }
	
	  function location() {
	    return peg$computeLocation(peg$savedPos, peg$currPos);
	  }
	
	  function expected(description, location) {
	    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
	
	    throw peg$buildStructuredError(
	      [peg$otherExpectation(description)],
	      input.substring(peg$savedPos, peg$currPos),
	      location
	    );
	  }
	
	  function error(message, location) {
	    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
	
	    throw peg$buildSimpleError(message, location);
	  }
	
	  function peg$literalExpectation(text, ignoreCase) {
	    return { type: "literal", text: text, ignoreCase: ignoreCase };
	  }
	
	  function peg$classExpectation(parts, inverted, ignoreCase) {
	    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
	  }
	
	  function peg$anyExpectation() {
	    return { type: "any" };
	  }
	
	  function peg$endExpectation() {
	    return { type: "end" };
	  }
	
	  function peg$otherExpectation(description) {
	    return { type: "other", description: description };
	  }
	
	  function peg$computePosDetails(pos) {
	    var details = peg$posDetailsCache[pos], p;
	
	    if (details) {
	      return details;
	    } else {
	      p = pos - 1;
	      while (!peg$posDetailsCache[p]) {
	        p--;
	      }
	
	      details = peg$posDetailsCache[p];
	      details = {
	        line:   details.line,
	        column: details.column
	      };
	
	      while (p < pos) {
	        if (input.charCodeAt(p) === 10) {
	          details.line++;
	          details.column = 1;
	        } else {
	          details.column++;
	        }
	
	        p++;
	      }
	
	      peg$posDetailsCache[pos] = details;
	      return details;
	    }
	  }
	
	  function peg$computeLocation(startPos, endPos) {
	    var startPosDetails = peg$computePosDetails(startPos),
	        endPosDetails   = peg$computePosDetails(endPos);
	
	    return {
	      start: {
	        offset: startPos,
	        line:   startPosDetails.line,
	        column: startPosDetails.column
	      },
	      end: {
	        offset: endPos,
	        line:   endPosDetails.line,
	        column: endPosDetails.column
	      }
	    };
	  }
	
	  function peg$fail(expected) {
	    if (peg$currPos < peg$maxFailPos) { return; }
	
	    if (peg$currPos > peg$maxFailPos) {
	      peg$maxFailPos = peg$currPos;
	      peg$maxFailExpected = [];
	    }
	
	    peg$maxFailExpected.push(expected);
	  }
	
	  function peg$buildSimpleError(message, location) {
	    return new peg$SyntaxError(message, null, null, location);
	  }
	
	  function peg$buildStructuredError(expected, found, location) {
	    return new peg$SyntaxError(
	      peg$SyntaxError.buildMessage(expected, found),
	      expected,
	      found,
	      location
	    );
	  }
	
	  function peg$parseDateTimeExpression() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
	
	    var key    = peg$currPos * 20 + 0,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseDate();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseTime();
	        if (s3 === peg$FAILED) {
	          s3 = null;
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = [];
	            s6 = peg$currPos;
	            s7 = peg$parseDuration();
	            if (s7 !== peg$FAILED) {
	              s8 = peg$parse_();
	              if (s8 !== peg$FAILED) {
	                s7 = [s7, s8];
	                s6 = s7;
	              } else {
	                peg$currPos = s6;
	                s6 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            while (s6 !== peg$FAILED) {
	              s5.push(s6);
	              s6 = peg$currPos;
	              s7 = peg$parseDuration();
	              if (s7 !== peg$FAILED) {
	                s8 = peg$parse_();
	                if (s8 !== peg$FAILED) {
	                  s7 = [s7, s8];
	                  s6 = s7;
	                } else {
	                  peg$currPos = s6;
	                  s6 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s6;
	                s6 = peg$FAILED;
	              }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c0(s1, s3, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseDate() {
	    var s0;
	
	    var key    = peg$currPos * 20 + 1,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$parseAbsoluteDate();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseRelativeDate();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseAbsoluteDate() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
	
	    var key    = peg$currPos * 20 + 2,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$currPos;
	    s2 = peg$parseYear();
	    if (s2 !== peg$FAILED) {
	      s3 = peg$parse_();
	      if (s3 !== peg$FAILED) {
	        s4 = peg$currPos;
	        peg$silentFails++;
	        s5 = peg$parseDurationUnit();
	        peg$silentFails--;
	        if (s5 === peg$FAILED) {
	          s4 = void 0;
	        } else {
	          peg$currPos = s4;
	          s4 = peg$FAILED;
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parse_();
	          if (s5 !== peg$FAILED) {
	            s6 = peg$currPos;
	            peg$silentFails++;
	            s7 = peg$parsePeriod();
	            peg$silentFails--;
	            if (s7 === peg$FAILED) {
	              s6 = void 0;
	            } else {
	              peg$currPos = s6;
	              s6 = peg$FAILED;
	            }
	            if (s6 !== peg$FAILED) {
	              s7 = peg$parse_();
	              if (s7 !== peg$FAILED) {
	                s8 = peg$currPos;
	                peg$silentFails++;
	                if (input.charCodeAt(peg$currPos) === 58) {
	                  s9 = peg$c1;
	                  peg$currPos++;
	                } else {
	                  s9 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c2); }
	                }
	                peg$silentFails--;
	                if (s9 === peg$FAILED) {
	                  s8 = void 0;
	                } else {
	                  peg$currPos = s8;
	                  s8 = peg$FAILED;
	                }
	                if (s8 !== peg$FAILED) {
	                  s2 = [s2, s3, s4, s5, s6, s7, s8];
	                  s1 = s2;
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s1;
	            s1 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s1;
	          s1 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s1;
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 45) {
	        s3 = peg$c3;
	        peg$currPos++;
	      } else {
	        s3 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c4); }
	      }
	      if (s3 !== peg$FAILED) {
	        s4 = peg$parseMonthNumber();
	        if (s4 !== peg$FAILED) {
	          s3 = [s3, s4];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	      if (s2 === peg$FAILED) {
	        s2 = null;
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 45) {
	          s4 = peg$c3;
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c4); }
	        }
	        if (s4 !== peg$FAILED) {
	          s5 = peg$parseDayNumberOfMonth();
	          if (s5 !== peg$FAILED) {
	            s4 = [s4, s5];
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        if (s3 === peg$FAILED) {
	          s3 = null;
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c5(s1, s2, s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseYear() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 20 + 3,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    if (peg$c6.test(input.charAt(peg$currPos))) {
	      s2 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c7); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (peg$c6.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c7); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c8(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseMonthNumber() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 20 + 4,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    if (peg$c6.test(input.charAt(peg$currPos))) {
	      s2 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c7); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (peg$c6.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c7); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c9(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseDayNumberOfMonth() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 20 + 5,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    if (peg$c6.test(input.charAt(peg$currPos))) {
	      s2 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c7); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (peg$c6.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c7); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c10(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseRelativeDate() {
	    var s0, s1;
	
	    var key    = peg$currPos * 20 + 6,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c11) {
	      s1 = input.substr(peg$currPos, 3);
	      peg$currPos += 3;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c12); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c13();
	    }
	    s0 = s1;
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c14) {
	        s1 = input.substr(peg$currPos, 9);
	        peg$currPos += 9;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c15); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c16();
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c17) {
	          s1 = input.substr(peg$currPos, 5);
	          peg$currPos += 5;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c18); }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c19();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c20) {
	            s1 = input.substr(peg$currPos, 8);
	            peg$currPos += 8;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c21); }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c22();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$parseRelativeMonth();
	            if (s0 === peg$FAILED) {
	              s0 = peg$parseRelativeDayOfWeek();
	              if (s0 === peg$FAILED) {
	                s0 = peg$parseRelativeDuration();
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseRelativeMonth() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 20 + 7,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseRelativeSpecifier();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseMonthName();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseDayNumberOfMonth();
	            if (s5 === peg$FAILED) {
	              s5 = null;
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c23(s1, s3, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseRelativeSpecifier() {
	    var s0, s1;
	
	    var key    = peg$currPos * 20 + 8,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c24) {
	      s1 = input.substr(peg$currPos, 4);
	      peg$currPos += 4;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c25); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c26) {
	        s1 = input.substr(peg$currPos, 4);
	        peg$currPos += 4;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c27); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c28) {
	          s1 = input.substr(peg$currPos, 4);
	          peg$currPos += 4;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c29); }
	        }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c30(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseMonthName() {
	    var s0;
	
	    var key    = peg$currPos * 20 + 9,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {
	      s0 = input.substr(peg$currPos, 7);
	      peg$currPos += 7;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c32); }
	    }
	    if (s0 === peg$FAILED) {
	      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c33) {
	        s0 = input.substr(peg$currPos, 3);
	        peg$currPos += 3;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c34); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c35) {
	          s0 = input.substr(peg$currPos, 8);
	          peg$currPos += 8;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c36); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c37) {
	            s0 = input.substr(peg$currPos, 3);
	            peg$currPos += 3;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c38); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c39) {
	              s0 = input.substr(peg$currPos, 5);
	              peg$currPos += 5;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c40); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c41) {
	                s0 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c42); }
	              }
	              if (s0 === peg$FAILED) {
	                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c43) {
	                  s0 = input.substr(peg$currPos, 5);
	                  peg$currPos += 5;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c45) {
	                    s0 = input.substr(peg$currPos, 3);
	                    peg$currPos += 3;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
	                  }
	                  if (s0 === peg$FAILED) {
	                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c47) {
	                      s0 = input.substr(peg$currPos, 3);
	                      peg$currPos += 3;
	                    } else {
	                      s0 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
	                    }
	                    if (s0 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c49) {
	                        s0 = input.substr(peg$currPos, 4);
	                        peg$currPos += 4;
	                      } else {
	                        s0 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
	                      }
	                      if (s0 === peg$FAILED) {
	                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c51) {
	                          s0 = input.substr(peg$currPos, 3);
	                          peg$currPos += 3;
	                        } else {
	                          s0 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c52); }
	                        }
	                        if (s0 === peg$FAILED) {
	                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c53) {
	                            s0 = input.substr(peg$currPos, 4);
	                            peg$currPos += 4;
	                          } else {
	                            s0 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c54); }
	                          }
	                          if (s0 === peg$FAILED) {
	                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c55) {
	                              s0 = input.substr(peg$currPos, 3);
	                              peg$currPos += 3;
	                            } else {
	                              s0 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c56); }
	                            }
	                            if (s0 === peg$FAILED) {
	                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c57) {
	                                s0 = input.substr(peg$currPos, 6);
	                                peg$currPos += 6;
	                              } else {
	                                s0 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c58); }
	                              }
	                              if (s0 === peg$FAILED) {
	                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {
	                                  s0 = input.substr(peg$currPos, 3);
	                                  peg$currPos += 3;
	                                } else {
	                                  s0 = peg$FAILED;
	                                  if (peg$silentFails === 0) { peg$fail(peg$c60); }
	                                }
	                                if (s0 === peg$FAILED) {
	                                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c61) {
	                                    s0 = input.substr(peg$currPos, 9);
	                                    peg$currPos += 9;
	                                  } else {
	                                    s0 = peg$FAILED;
	                                    if (peg$silentFails === 0) { peg$fail(peg$c62); }
	                                  }
	                                  if (s0 === peg$FAILED) {
	                                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c63) {
	                                      s0 = input.substr(peg$currPos, 3);
	                                      peg$currPos += 3;
	                                    } else {
	                                      s0 = peg$FAILED;
	                                      if (peg$silentFails === 0) { peg$fail(peg$c64); }
	                                    }
	                                    if (s0 === peg$FAILED) {
	                                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c65) {
	                                        s0 = input.substr(peg$currPos, 7);
	                                        peg$currPos += 7;
	                                      } else {
	                                        s0 = peg$FAILED;
	                                        if (peg$silentFails === 0) { peg$fail(peg$c66); }
	                                      }
	                                      if (s0 === peg$FAILED) {
	                                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c67) {
	                                          s0 = input.substr(peg$currPos, 3);
	                                          peg$currPos += 3;
	                                        } else {
	                                          s0 = peg$FAILED;
	                                          if (peg$silentFails === 0) { peg$fail(peg$c68); }
	                                        }
	                                        if (s0 === peg$FAILED) {
	                                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c69) {
	                                            s0 = input.substr(peg$currPos, 8);
	                                            peg$currPos += 8;
	                                          } else {
	                                            s0 = peg$FAILED;
	                                            if (peg$silentFails === 0) { peg$fail(peg$c70); }
	                                          }
	                                          if (s0 === peg$FAILED) {
	                                            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c71) {
	                                              s0 = input.substr(peg$currPos, 3);
	                                              peg$currPos += 3;
	                                            } else {
	                                              s0 = peg$FAILED;
	                                              if (peg$silentFails === 0) { peg$fail(peg$c72); }
	                                            }
	                                            if (s0 === peg$FAILED) {
	                                              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c73) {
	                                                s0 = input.substr(peg$currPos, 8);
	                                                peg$currPos += 8;
	                                              } else {
	                                                s0 = peg$FAILED;
	                                                if (peg$silentFails === 0) { peg$fail(peg$c74); }
	                                              }
	                                              if (s0 === peg$FAILED) {
	                                                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c75) {
	                                                  s0 = input.substr(peg$currPos, 3);
	                                                  peg$currPos += 3;
	                                                } else {
	                                                  s0 = peg$FAILED;
	                                                  if (peg$silentFails === 0) { peg$fail(peg$c76); }
	                                                }
	                                              }
	                                            }
	                                          }
	                                        }
	                                      }
	                                    }
	                                  }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseRelativeDayOfWeek() {
	    var s0, s1, s2, s3;
	
	    var key    = peg$currPos * 20 + 10,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseRelativeSpecifier();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseDayOfWeek();
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c77(s1, s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseRelativeDuration() {
	    var s0, s1, s2, s3;
	
	    var key    = peg$currPos * 20 + 11,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseRelativeSpecifier();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseDurationUnit();
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c78(s1, s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseDayOfWeek() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 20 + 12,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c79) {
	      s0 = input.substr(peg$currPos, 6);
	      peg$currPos += 6;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c80); }
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      peg$silentFails++;
	      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c81) {
	        s2 = input.substr(peg$currPos, 4);
	        peg$currPos += 4;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c82); }
	      }
	      peg$silentFails--;
	      if (s2 === peg$FAILED) {
	        s1 = void 0;
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c83) {
	          s2 = input.substr(peg$currPos, 3);
	          peg$currPos += 3;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c84); }
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c85();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c86) {
	          s0 = input.substr(peg$currPos, 7);
	          peg$currPos += 7;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c87); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c88) {
	            s0 = input.substr(peg$currPos, 3);
	            peg$currPos += 3;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c89); }
	          }
	          if (s0 === peg$FAILED) {
	            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c90) {
	              s0 = input.substr(peg$currPos, 9);
	              peg$currPos += 9;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c91); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c92) {
	                s0 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c93); }
	              }
	              if (s0 === peg$FAILED) {
	                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c94) {
	                  s0 = input.substr(peg$currPos, 8);
	                  peg$currPos += 8;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c95); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c96) {
	                    s0 = input.substr(peg$currPos, 3);
	                    peg$currPos += 3;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c97); }
	                  }
	                  if (s0 === peg$FAILED) {
	                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c98) {
	                      s0 = input.substr(peg$currPos, 6);
	                      peg$currPos += 6;
	                    } else {
	                      s0 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c99); }
	                    }
	                    if (s0 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c100) {
	                        s0 = input.substr(peg$currPos, 3);
	                        peg$currPos += 3;
	                      } else {
	                        s0 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c101); }
	                      }
	                      if (s0 === peg$FAILED) {
	                        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c102) {
	                          s0 = input.substr(peg$currPos, 8);
	                          peg$currPos += 8;
	                        } else {
	                          s0 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c103); }
	                        }
	                        if (s0 === peg$FAILED) {
	                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c104) {
	                            s0 = input.substr(peg$currPos, 3);
	                            peg$currPos += 3;
	                          } else {
	                            s0 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c105); }
	                          }
	                          if (s0 === peg$FAILED) {
	                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c106) {
	                              s0 = input.substr(peg$currPos, 6);
	                              peg$currPos += 6;
	                            } else {
	                              s0 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c107); }
	                            }
	                            if (s0 === peg$FAILED) {
	                              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c108) {
	                                s0 = input.substr(peg$currPos, 3);
	                                peg$currPos += 3;
	                              } else {
	                                s0 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c109); }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseTime() {
	    var s0, s1, s2, s3, s4, s5, s6;
	
	    var key    = peg$currPos * 20 + 13,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parse_();
	    if (s1 !== peg$FAILED) {
	      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c110) {
	        s2 = input.substr(peg$currPos, 2);
	        peg$currPos += 2;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c111); }
	      }
	      if (s2 === peg$FAILED) {
	        s2 = null;
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parse_();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseInteger();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parsePeriod();
	              if (s6 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c112(s4, s6);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      s1 = peg$parseInteger();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$currPos;
	        if (input.charCodeAt(peg$currPos) === 58) {
	          s3 = peg$c1;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c2); }
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseInteger();
	          if (s4 !== peg$FAILED) {
	            s3 = [s3, s4];
	            s2 = s3;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 58) {
	            s4 = peg$c1;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c2); }
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseInteger();
	            if (s5 !== peg$FAILED) {
	              s4 = [s4, s5];
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$currPos;
	            if (input.charCodeAt(peg$currPos) === 58) {
	              s5 = peg$c1;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c2); }
	            }
	            if (s5 !== peg$FAILED) {
	              s6 = peg$parseInteger();
	              if (s6 !== peg$FAILED) {
	                s5 = [s5, s6];
	                s4 = s5;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parse_();
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parsePeriod();
	                if (s6 === peg$FAILED) {
	                  s6 = null;
	                }
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c113(s1, s2, s3, s4, s6);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePeriod() {
	    var s0, s1;
	
	    var key    = peg$currPos * 20 + 14,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c114) {
	      s1 = input.substr(peg$currPos, 2);
	      peg$currPos += 2;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c115); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c116) {
	        s1 = input.substr(peg$currPos, 2);
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c117); }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c118(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseDuration() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 20 + 15,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 45) {
	      s1 = peg$c3;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c4); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 43) {
	        s1 = peg$c119;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c120); }
	      }
	    }
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseInteger();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseDurationUnit();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c121(s1, s3, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseDurationUnit() {
	    var s0, s1, s2, s3, s4;
	
	    var key    = peg$currPos * 20 + 16,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c122) {
	      s1 = input.substr(peg$currPos, 12);
	      peg$currPos += 12;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c123); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c124) {
	        s1 = input.substr(peg$currPos, 11);
	        peg$currPos += 11;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c125); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c126) {
	          s1 = input.substr(peg$currPos, 2);
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c127); }
	        }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c128();
	    }
	    s0 = s1;
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c129) {
	        s1 = input.substr(peg$currPos, 7);
	        peg$currPos += 7;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c130); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c131) {
	          s1 = input.substr(peg$currPos, 6);
	          peg$currPos += 6;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c132); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {
	            s1 = input.substr(peg$currPos, 3);
	            peg$currPos += 3;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c134); }
	          }
	          if (s1 === peg$FAILED) {
	            s1 = peg$currPos;
	            s2 = peg$currPos;
	            peg$silentFails++;
	            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c135) {
	              s3 = input.substr(peg$currPos, 2);
	              peg$currPos += 2;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c136); }
	            }
	            peg$silentFails--;
	            if (s3 === peg$FAILED) {
	              s2 = void 0;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	            if (s2 !== peg$FAILED) {
	              s3 = peg$currPos;
	              peg$silentFails++;
	              if (input.substr(peg$currPos, 2).toLowerCase() === peg$c137) {
	                s4 = input.substr(peg$currPos, 2);
	                peg$currPos += 2;
	              } else {
	                s4 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c138); }
	              }
	              peg$silentFails--;
	              if (s4 === peg$FAILED) {
	                s3 = void 0;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	              if (s3 !== peg$FAILED) {
	                if (input.substr(peg$currPos, 1).toLowerCase() === peg$c139) {
	                  s4 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s4 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c140); }
	                }
	                if (s4 !== peg$FAILED) {
	                  s2 = [s2, s3, s4];
	                  s1 = s2;
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s1;
	                s1 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s1;
	              s1 = peg$FAILED;
	            }
	          }
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c141();
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c142) {
	          s1 = input.substr(peg$currPos, 7);
	          peg$currPos += 7;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c143); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c144) {
	            s1 = input.substr(peg$currPos, 6);
	            peg$currPos += 6;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c145); }
	          }
	          if (s1 === peg$FAILED) {
	            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c146) {
	              s1 = input.substr(peg$currPos, 4);
	              peg$currPos += 4;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c147); }
	            }
	            if (s1 === peg$FAILED) {
	              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {
	                s1 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c149); }
	              }
	              if (s1 === peg$FAILED) {
	                s1 = peg$currPos;
	                s2 = peg$currPos;
	                peg$silentFails++;
	                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c150) {
	                  s3 = input.substr(peg$currPos, 2);
	                  peg$currPos += 2;
	                } else {
	                  s3 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c151); }
	                }
	                peg$silentFails--;
	                if (s3 === peg$FAILED) {
	                  s2 = void 0;
	                } else {
	                  peg$currPos = s2;
	                  s2 = peg$FAILED;
	                }
	                if (s2 !== peg$FAILED) {
	                  s3 = peg$currPos;
	                  peg$silentFails++;
	                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c152) {
	                    s4 = input.substr(peg$currPos, 2);
	                    peg$currPos += 2;
	                  } else {
	                    s4 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c153); }
	                  }
	                  peg$silentFails--;
	                  if (s4 === peg$FAILED) {
	                    s3 = void 0;
	                  } else {
	                    peg$currPos = s3;
	                    s3 = peg$FAILED;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c154) {
	                      s4 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s4 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c155); }
	                    }
	                    if (s4 !== peg$FAILED) {
	                      s2 = [s2, s3, s4];
	                      s1 = s2;
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	              }
	            }
	          }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c156();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c157) {
	            s1 = input.substr(peg$currPos, 5);
	            peg$currPos += 5;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c158); }
	          }
	          if (s1 === peg$FAILED) {
	            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c159) {
	              s1 = input.substr(peg$currPos, 4);
	              peg$currPos += 4;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c160); }
	            }
	            if (s1 === peg$FAILED) {
	              if (input.substr(peg$currPos, 1).toLowerCase() === peg$c161) {
	                s1 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c162); }
	              }
	            }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c163();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c164) {
	              s1 = input.substr(peg$currPos, 4);
	              peg$currPos += 4;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c165); }
	            }
	            if (s1 === peg$FAILED) {
	              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c166) {
	                s1 = input.substr(peg$currPos, 3);
	                peg$currPos += 3;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c167); }
	              }
	              if (s1 === peg$FAILED) {
	                s1 = peg$currPos;
	                s2 = peg$currPos;
	                peg$silentFails++;
	                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c168) {
	                  s3 = input.substr(peg$currPos, 2);
	                  peg$currPos += 2;
	                } else {
	                  s3 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c169); }
	                }
	                peg$silentFails--;
	                if (s3 === peg$FAILED) {
	                  s2 = void 0;
	                } else {
	                  peg$currPos = s2;
	                  s2 = peg$FAILED;
	                }
	                if (s2 !== peg$FAILED) {
	                  if (input.substr(peg$currPos, 1).toLowerCase() === peg$c170) {
	                    s3 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s3 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c171); }
	                  }
	                  if (s3 !== peg$FAILED) {
	                    s2 = [s2, s3];
	                    s1 = s2;
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s1;
	                  s1 = peg$FAILED;
	                }
	              }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c172();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c173) {
	                s1 = input.substr(peg$currPos, 5);
	                peg$currPos += 5;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c174); }
	              }
	              if (s1 === peg$FAILED) {
	                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c175) {
	                  s1 = input.substr(peg$currPos, 4);
	                  peg$currPos += 4;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c176); }
	                }
	                if (s1 === peg$FAILED) {
	                  s1 = peg$currPos;
	                  s2 = peg$currPos;
	                  peg$silentFails++;
	                  if (input.substr(peg$currPos, 2).toLowerCase() === peg$c177) {
	                    s3 = input.substr(peg$currPos, 2);
	                    peg$currPos += 2;
	                  } else {
	                    s3 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c178); }
	                  }
	                  peg$silentFails--;
	                  if (s3 === peg$FAILED) {
	                    s2 = void 0;
	                  } else {
	                    peg$currPos = s2;
	                    s2 = peg$FAILED;
	                  }
	                  if (s2 !== peg$FAILED) {
	                    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c179) {
	                      s3 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s3 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c180); }
	                    }
	                    if (s3 !== peg$FAILED) {
	                      s2 = [s2, s3];
	                      s1 = s2;
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s1;
	                    s1 = peg$FAILED;
	                  }
	                }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c181();
	              }
	              s0 = s1;
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c182) {
	                  s1 = input.substr(peg$currPos, 6);
	                  peg$currPos += 6;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c183); }
	                }
	                if (s1 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 5).toLowerCase() === peg$c184) {
	                    s1 = input.substr(peg$currPos, 5);
	                    peg$currPos += 5;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c185); }
	                  }
	                  if (s1 === peg$FAILED) {
	                    s1 = peg$currPos;
	                    s2 = peg$currPos;
	                    peg$silentFails++;
	                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c186) {
	                      s3 = input.substr(peg$currPos, 2);
	                      peg$currPos += 2;
	                    } else {
	                      s3 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c187); }
	                    }
	                    peg$silentFails--;
	                    if (s3 === peg$FAILED) {
	                      s2 = void 0;
	                    } else {
	                      peg$currPos = s2;
	                      s2 = peg$FAILED;
	                    }
	                    if (s2 !== peg$FAILED) {
	                      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c188) {
	                        s3 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                      } else {
	                        s3 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c189); }
	                      }
	                      if (s3 !== peg$FAILED) {
	                        s2 = [s2, s3];
	                        s1 = s2;
	                      } else {
	                        peg$currPos = s1;
	                        s1 = peg$FAILED;
	                      }
	                    } else {
	                      peg$currPos = s1;
	                      s1 = peg$FAILED;
	                    }
	                  }
	                }
	                if (s1 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c190();
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                  s0 = peg$currPos;
	                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c191) {
	                    s1 = input.substr(peg$currPos, 8);
	                    peg$currPos += 8;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c192); }
	                  }
	                  if (s1 === peg$FAILED) {
	                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c193) {
	                      s1 = input.substr(peg$currPos, 7);
	                      peg$currPos += 7;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c194); }
	                    }
	                    if (s1 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c195) {
	                        s1 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                      } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c196); }
	                      }
	                    }
	                  }
	                  if (s1 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c197();
	                  }
	                  s0 = s1;
	                  if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c198) {
	                      s1 = input.substr(peg$currPos, 5);
	                      peg$currPos += 5;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c199); }
	                    }
	                    if (s1 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c200) {
	                        s1 = input.substr(peg$currPos, 4);
	                        peg$currPos += 4;
	                      } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c201); }
	                      }
	                      if (s1 === peg$FAILED) {
	                        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c202) {
	                          s1 = input.charAt(peg$currPos);
	                          peg$currPos++;
	                        } else {
	                          s1 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c203); }
	                        }
	                      }
	                    }
	                    if (s1 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c204();
	                    }
	                    s0 = s1;
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseInteger() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 20 + 17,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    if (peg$c6.test(input.charAt(peg$currPos))) {
	      s2 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c7); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        if (peg$c6.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c7); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c206();
	    }
	    s0 = s1;
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c205); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parse_() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 20 + 18,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$parsewhitespace();
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = peg$parsewhitespace();
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c208(s1);
	    }
	    s0 = s1;
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c207); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsewhitespace() {
	    var s0;
	
	    var key    = peg$currPos * 20 + 19,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (peg$c209.test(input.charAt(peg$currPos))) {
	      s0 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c210); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	
	    //var script = document.createElement('script')
	    //script.src = "https://cdn.jsdelivr.net/momentjs/2.11.1/moment.min.js";
	    //document.head.appendChild(script);
	
	    if (!options.moment) {
	      options.moment = moment;
	    }
	
	    function currentMoment() {
	      if (!options.currentMoment) {
	        options.currentMoment = options.moment();
	      }
	      return options.moment(options.currentMoment);
	    }
	
	
	  peg$result = peg$startRuleFunction();
	
	  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	    return peg$result;
	  } else {
	    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	      peg$fail(peg$endExpectation());
	    }
	
	    throw peg$buildStructuredError(
	      peg$maxFailExpected,
	      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	      peg$maxFailPos < input.length
	        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	    );
	  }
	}
	
	module.exports = {
	  SyntaxError: peg$SyntaxError,
	  parse:       peg$parse
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.29.4
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	    var hookCallback;
	
	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }
	
	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }
	
	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }
	
	    function map(arr, fn) {
	        var res = [],
	            i,
	            arrLen = arr.length;
	        for (i = 0; i < arrLen; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;
	
	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }
	
	            return false;
	        };
	    }
	
	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));
	
	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	
	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }
	
	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;
	
	    function copyConfig(to, from) {
	        var i,
	            prop,
	            val,
	            momentPropertiesLen = momentProperties.length;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentPropertiesLen > 0) {
	            for (i = 0; i < momentPropertiesLen; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }
	
	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key,
	                    argLen = arguments.length;
	                for (i = 0; i < argLen; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;
	
	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }
	
	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    var keys;
	
	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }
	
	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };
	
	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }
	
	    var formattingTokens =
	            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };
	
	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate() {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };
	
	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }
	
	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    var priorities = {};
	
	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }
	
	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }
	
	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }
	
	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }
	
	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }
	
	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }
	
	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i,
	                prioritizedLen = prioritized.length;
	            for (i = 0; i < prioritizedLen; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord =
	            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;
	
	    regexes = {};
	
	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }
	
	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(
	                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
	                    function (matched, p1, p2, p3, p4) {
	                        return p1 || p2 || p3 || p4;
	                    }
	                )
	        );
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken(token, callback) {
	        var i,
	            func = callback,
	            tokenLen;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        tokenLen = token.length;
	        for (i = 0; i < tokenLen; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;
	
	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }
	
	    var indexOf;
	
	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }
	
	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PRIORITY
	
	    addUnitPriority('month', 8);
	
	    // PARSING
	
	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var defaultLocaleMonths =
	            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	                '_'
	            ),
	        defaultLocaleMonthsShort =
	            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;
	
	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }
	
	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }
	
	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;
	
	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth(mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }
	
	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PRIORITIES
	
	    addUnitPriority('year', 1);
	
	    // PARSING
	
	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    // HOOKS
	
	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', true);
	
	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }
	
	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }
	
	        return date;
	    }
	
	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }
	
	        return date;
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PRIORITIES
	
	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);
	
	    // PARSING
	
	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(
	        ['w', 'ww', 'W', 'WW'],
	        function (input, week, config, token) {
	            week[token.substr(0, 1)] = toInt(input);
	        }
	    );
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);
	
	    // PARSING
	
	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }
	
	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }
	
	    var defaultLocaleWeekdays =
	            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;
	
	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }
	
	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }
	
	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }
	
	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];
	
	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	
	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }
	
	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }
	
	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }
	
	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }
	
	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	
	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;
	
	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    function kFormat() {
	        return this.hours() || 24;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });
	
	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PRIORITY
	    addUnitPriority('hour', 13);
	
	    // PARSING
	
	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);
	
	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,
	
	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,
	
	        week: defaultLocaleWeek,
	
	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,
	
	        meridiemParse: defaultLocaleMeridiemParse,
	    };
	
	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;
	
	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }
	
	    function isLocaleNameSane(name) {
	        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
	        return name.match('^[^/\\\\]*$') != null;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            typeof module !== 'undefined' &&
	            module &&
	            module.exports &&
	            isLocaleNameSane(name)
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = require;
	                __webpack_require__(29)("./" + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }
	
	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;
	
	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }
	
	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function getLocale(key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function listLocales() {
	        return keys(locales);
	    }
	
	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;
	
	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex =
	            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex =
	            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 =
	            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };
	
	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat,
	            isoDatesLen = isoDates.length,
	            isoTimesLen = isoTimes.length;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDatesLen; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimesLen; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];
	
	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }
	
	        return result;
	    }
	
	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }
	
	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^()]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }
	
	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }
	
	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }
	
	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }
	
	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);
	
	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	
	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();
	
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	
	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            curWeek = weekOfYear(createLocal(), dow, doy);
	
	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	            // Default to current week.
	            week = defaults(w.w, curWeek.week);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};
	
	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era,
	            tokenLen;
	
	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];
	        tokenLen = tokens.length;
	        for (i = 0; i < tokenLen; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	
	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );
	
	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false,
	            configfLen = config._f.length;
	
	        if (configfLen === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < configfLen; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );
	
	        configFromArray(config);
	    }
	
	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || getLocale(config._l);
	
	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }
	
	        if (!isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }
	
	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }
	
	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };
	
	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];
	
	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i,
	            orderLen = ordering.length;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }
	
	        for (i = 0; i < orderLen; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }
	
	        return true;
	    }
	
	    function isValid$1() {
	        return this._isValid;
	    }
	
	    function createInvalid$1() {
	        return createDuration(NaN);
	    }
	
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        this._isValid = isDurationValid(normalizedInput);
	
	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;
	
	        this._data = {};
	
	        this._locale = getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }
	
	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    // FORMATTING
	
	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;
	
	        if (matches === null) {
	            return null;
	        }
	
	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }
	
	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }
	
	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {},
	            other;
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex =
	            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	
	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }
	
	        return ret;
	    }
	
	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;
	
	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = {};
	
	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +base.clone().add(res.months, 'M');
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }
	
	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');
	
	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }
	
	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }
	
	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property,
	            propertyLen = properties.length;
	
	        for (i = 0; i < propertyLen; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }
	
	        return objectTest && propertyTest;
	    }
	
	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }
	
	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;
	
	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }
	
	        return objectTest && propertyTest;
	    }
	
	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }
	
	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (!arguments[0]) {
	                time = undefined;
	                formats = undefined;
	            } else if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);
	
	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }
	
	    function clone() {
	        return new Moment(this);
	    }
	
	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }
	
	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }
	
	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }
	
	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }
	
	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }
	
	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }
	
	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }
	
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }
	
	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }
	
	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';
	
	        return this.format(prefix + year + datetime + suffix);
	    }
	
	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }
	
	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }
	
	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );
	
	    function localeData() {
	        return this._locale;
	    }
	
	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
	
	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }
	
	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }
	
	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }
	
	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }
	
	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }
	
	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }
	
	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }
	
	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }
	
	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }
	
	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }
	
	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }
	
	    function toDate() {
	        return new Date(this.valueOf());
	    }
	
	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }
	
	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }
	
	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function isValid$2() {
	        return isValid(this);
	    }
	
	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }
	
	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
	
	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
	
	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);
	
	    addParseToken(
	        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
	        function (input, array, config, token) {
	            var era = config._locale.erasParse(input, token, config._strict);
	            if (era) {
	                getParsingFlags(config).era = era;
	            } else {
	                getParsingFlags(config).invalidEra = input;
	            }
	        }
	    );
	
	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);
	
	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }
	
	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });
	
	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }
	
	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }
	
	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();
	
	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();
	
	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;
	
	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;
	
	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }
	
	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }
	
	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;
	
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }
	
	        return this.year();
	    }
	
	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }
	
	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }
	
	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }
	
	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }
	
	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }
	
	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }
	
	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }
	
	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();
	
	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));
	
	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }
	
	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PRIORITY
	
	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);
	
	    // PARSING
	
	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);
	
	    addWeekParseToken(
	        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
	        function (input, week, config, token) {
	            week[token.substr(0, 2)] = toInt(input);
	        }
	    );
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }
	
	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }
	
	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }
	
	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PRIORITY
	
	    addUnitPriority('quarter', 7);
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PRIORITY
	    addUnitPriority('date', 9);
	
	    // PARSING
	
	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);
	
	    // PARSING
	
	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PRIORITY
	
	    addUnitPriority('minute', 14);
	
	    // PARSING
	
	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PRIORITY
	
	    addUnitPriority('second', 15);
	
	    // PARSING
	
	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PRIORITY
	
	    addUnitPriority('millisecond', 16);
	
	    // PARSING
	
	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);
	
	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	
	    getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var proto = Moment.prototype;
	
	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );
	
	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }
	
	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }
	
	    function preParsePostFormat(string) {
	        return string;
	    }
	
	    var proto$1 = Locale.prototype;
	
	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;
	
	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;
	
	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;
	
	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;
	
	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }
	
	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }
	
	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;
	
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        }
	
	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];
	
	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }
	
	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }
	
	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }
	
	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }
	
	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }
	
	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }
	
	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }
	
	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    // Side effect imports
	
	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );
	
	    var mathAbs = Math.abs;
	
	    function abs() {
	        var data = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);
	
	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);
	
	        return this;
	    }
	
	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }
	
	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;
	
	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;
	
	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days = days;
	        data.months = months;
	        data.years = years;
	
	        return this;
	    }
	
	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }
	
	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }
	
	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }
	
	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');
	
	    function clone$1() {
	        return createDuration(this);
	    }
	
	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');
	
	    function weeks() {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);
	
	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }
	
	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;
	
	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }
	
	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var abs$1 = Math.abs;
	
	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }
	
	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	
	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	
	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }
	
	    var proto$2 = Duration.prototype;
	
	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;
	
	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    //! moment.js
	
	    hooks.version = '2.29.4';
	
	    setHookCallback(createLocal);
	
	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;
	
	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };
	
	    return hooks;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)(module)))

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./af": 30,
		"./af.js": 30,
		"./ar": 31,
		"./ar-dz": 32,
		"./ar-dz.js": 32,
		"./ar-kw": 33,
		"./ar-kw.js": 33,
		"./ar-ly": 34,
		"./ar-ly.js": 34,
		"./ar-ma": 35,
		"./ar-ma.js": 35,
		"./ar-sa": 36,
		"./ar-sa.js": 36,
		"./ar-tn": 37,
		"./ar-tn.js": 37,
		"./ar.js": 31,
		"./az": 38,
		"./az.js": 38,
		"./be": 39,
		"./be.js": 39,
		"./bg": 40,
		"./bg.js": 40,
		"./bm": 41,
		"./bm.js": 41,
		"./bn": 42,
		"./bn-bd": 43,
		"./bn-bd.js": 43,
		"./bn.js": 42,
		"./bo": 44,
		"./bo.js": 44,
		"./br": 45,
		"./br.js": 45,
		"./bs": 46,
		"./bs.js": 46,
		"./ca": 47,
		"./ca.js": 47,
		"./cs": 48,
		"./cs.js": 48,
		"./cv": 49,
		"./cv.js": 49,
		"./cy": 50,
		"./cy.js": 50,
		"./da": 51,
		"./da.js": 51,
		"./de": 52,
		"./de-at": 53,
		"./de-at.js": 53,
		"./de-ch": 54,
		"./de-ch.js": 54,
		"./de.js": 52,
		"./dv": 55,
		"./dv.js": 55,
		"./el": 56,
		"./el.js": 56,
		"./en-au": 57,
		"./en-au.js": 57,
		"./en-ca": 58,
		"./en-ca.js": 58,
		"./en-gb": 59,
		"./en-gb.js": 59,
		"./en-ie": 60,
		"./en-ie.js": 60,
		"./en-il": 61,
		"./en-il.js": 61,
		"./en-in": 62,
		"./en-in.js": 62,
		"./en-nz": 63,
		"./en-nz.js": 63,
		"./en-sg": 64,
		"./en-sg.js": 64,
		"./eo": 65,
		"./eo.js": 65,
		"./es": 66,
		"./es-do": 67,
		"./es-do.js": 67,
		"./es-mx": 68,
		"./es-mx.js": 68,
		"./es-us": 69,
		"./es-us.js": 69,
		"./es.js": 66,
		"./et": 70,
		"./et.js": 70,
		"./eu": 71,
		"./eu.js": 71,
		"./fa": 72,
		"./fa.js": 72,
		"./fi": 73,
		"./fi.js": 73,
		"./fil": 74,
		"./fil.js": 74,
		"./fo": 75,
		"./fo.js": 75,
		"./fr": 76,
		"./fr-ca": 77,
		"./fr-ca.js": 77,
		"./fr-ch": 78,
		"./fr-ch.js": 78,
		"./fr.js": 76,
		"./fy": 79,
		"./fy.js": 79,
		"./ga": 80,
		"./ga.js": 80,
		"./gd": 81,
		"./gd.js": 81,
		"./gl": 82,
		"./gl.js": 82,
		"./gom-deva": 83,
		"./gom-deva.js": 83,
		"./gom-latn": 84,
		"./gom-latn.js": 84,
		"./gu": 85,
		"./gu.js": 85,
		"./he": 86,
		"./he.js": 86,
		"./hi": 87,
		"./hi.js": 87,
		"./hr": 88,
		"./hr.js": 88,
		"./hu": 89,
		"./hu.js": 89,
		"./hy-am": 90,
		"./hy-am.js": 90,
		"./id": 91,
		"./id.js": 91,
		"./is": 92,
		"./is.js": 92,
		"./it": 93,
		"./it-ch": 94,
		"./it-ch.js": 94,
		"./it.js": 93,
		"./ja": 95,
		"./ja.js": 95,
		"./jv": 96,
		"./jv.js": 96,
		"./ka": 97,
		"./ka.js": 97,
		"./kk": 98,
		"./kk.js": 98,
		"./km": 99,
		"./km.js": 99,
		"./kn": 100,
		"./kn.js": 100,
		"./ko": 101,
		"./ko.js": 101,
		"./ku": 102,
		"./ku.js": 102,
		"./ky": 103,
		"./ky.js": 103,
		"./lb": 104,
		"./lb.js": 104,
		"./lo": 105,
		"./lo.js": 105,
		"./lt": 106,
		"./lt.js": 106,
		"./lv": 107,
		"./lv.js": 107,
		"./me": 108,
		"./me.js": 108,
		"./mi": 109,
		"./mi.js": 109,
		"./mk": 110,
		"./mk.js": 110,
		"./ml": 111,
		"./ml.js": 111,
		"./mn": 112,
		"./mn.js": 112,
		"./mr": 113,
		"./mr.js": 113,
		"./ms": 114,
		"./ms-my": 115,
		"./ms-my.js": 115,
		"./ms.js": 114,
		"./mt": 116,
		"./mt.js": 116,
		"./my": 117,
		"./my.js": 117,
		"./nb": 118,
		"./nb.js": 118,
		"./ne": 119,
		"./ne.js": 119,
		"./nl": 120,
		"./nl-be": 121,
		"./nl-be.js": 121,
		"./nl.js": 120,
		"./nn": 122,
		"./nn.js": 122,
		"./oc-lnc": 123,
		"./oc-lnc.js": 123,
		"./pa-in": 124,
		"./pa-in.js": 124,
		"./pl": 125,
		"./pl.js": 125,
		"./pt": 126,
		"./pt-br": 127,
		"./pt-br.js": 127,
		"./pt.js": 126,
		"./ro": 128,
		"./ro.js": 128,
		"./ru": 129,
		"./ru.js": 129,
		"./sd": 130,
		"./sd.js": 130,
		"./se": 131,
		"./se.js": 131,
		"./si": 132,
		"./si.js": 132,
		"./sk": 133,
		"./sk.js": 133,
		"./sl": 134,
		"./sl.js": 134,
		"./sq": 135,
		"./sq.js": 135,
		"./sr": 136,
		"./sr-cyrl": 137,
		"./sr-cyrl.js": 137,
		"./sr.js": 136,
		"./ss": 138,
		"./ss.js": 138,
		"./sv": 139,
		"./sv.js": 139,
		"./sw": 140,
		"./sw.js": 140,
		"./ta": 141,
		"./ta.js": 141,
		"./te": 142,
		"./te.js": 142,
		"./tet": 143,
		"./tet.js": 143,
		"./tg": 144,
		"./tg.js": 144,
		"./th": 145,
		"./th.js": 145,
		"./tk": 146,
		"./tk.js": 146,
		"./tl-ph": 147,
		"./tl-ph.js": 147,
		"./tlh": 148,
		"./tlh.js": 148,
		"./tr": 149,
		"./tr.js": 149,
		"./tzl": 150,
		"./tzl.js": 150,
		"./tzm": 151,
		"./tzm-latn": 152,
		"./tzm-latn.js": 152,
		"./tzm.js": 151,
		"./ug-cn": 153,
		"./ug-cn.js": 153,
		"./uk": 154,
		"./uk.js": 154,
		"./ur": 155,
		"./ur.js": 155,
		"./uz": 156,
		"./uz-latn": 157,
		"./uz-latn.js": 157,
		"./uz.js": 156,
		"./vi": 158,
		"./vi.js": 158,
		"./x-pseudo": 159,
		"./x-pseudo.js": 159,
		"./yo": 160,
		"./yo.js": 160,
		"./zh-cn": 161,
		"./zh-cn.js": 161,
		"./zh-hk": 162,
		"./zh-hk.js": 162,
		"./zh-mo": 163,
		"./zh-mo.js": 163,
		"./zh-tw": 164,
		"./zh-tw.js": 164
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 29;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var af = moment.defineLocale('af', {
	        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
	            '_'
	        ),
	        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM: function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Vandag om] LT',
	            nextDay: '[Môre om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[Gister om] LT',
	            lastWeek: '[Laas] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'oor %s',
	            past: '%s gelede',
	            s: "'n paar sekondes",
	            ss: '%d sekondes',
	            m: "'n minuut",
	            mm: '%d minute',
	            h: "'n uur",
	            hh: '%d ure',
	            d: "'n dag",
	            dd: '%d dae',
	            M: "'n maand",
	            MM: '%d maande',
	            y: "'n jaar",
	            yy: '%d jaar',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            ); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week: {
	            dow: 1, // Maandag is die eerste dag van die week.
	            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        },
	    });
	
	    return af;
	
	})));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '١',
	            2: '٢',
	            3: '٣',
	            4: '٤',
	            5: '٥',
	            6: '٦',
	            7: '٧',
	            8: '٨',
	            9: '٩',
	            0: '٠',
	        },
	        numberMap = {
	            '١': '1',
	            '٢': '2',
	            '٣': '3',
	            '٤': '4',
	            '٥': '5',
	            '٦': '6',
	            '٧': '7',
	            '٨': '8',
	            '٩': '9',
	            '٠': '0',
	        },
	        pluralForm = function (n) {
	            return n === 0
	                ? 0
	                : n === 1
	                ? 1
	                : n === 2
	                ? 2
	                : n % 100 >= 3 && n % 100 <= 10
	                ? 3
	                : n % 100 >= 11
	                ? 4
	                : 5;
	        },
	        plurals = {
	            s: [
	                'أقل من ثانية',
	                'ثانية واحدة',
	                ['ثانيتان', 'ثانيتين'],
	                '%d ثوان',
	                '%d ثانية',
	                '%d ثانية',
	            ],
	            m: [
	                'أقل من دقيقة',
	                'دقيقة واحدة',
	                ['دقيقتان', 'دقيقتين'],
	                '%d دقائق',
	                '%d دقيقة',
	                '%d دقيقة',
	            ],
	            h: [
	                'أقل من ساعة',
	                'ساعة واحدة',
	                ['ساعتان', 'ساعتين'],
	                '%d ساعات',
	                '%d ساعة',
	                '%d ساعة',
	            ],
	            d: [
	                'أقل من يوم',
	                'يوم واحد',
	                ['يومان', 'يومين'],
	                '%d أيام',
	                '%d يومًا',
	                '%d يوم',
	            ],
	            M: [
	                'أقل من شهر',
	                'شهر واحد',
	                ['شهران', 'شهرين'],
	                '%d أشهر',
	                '%d شهرا',
	                '%d شهر',
	            ],
	            y: [
	                'أقل من عام',
	                'عام واحد',
	                ['عامان', 'عامين'],
	                '%d أعوام',
	                '%d عامًا',
	                '%d عام',
	            ],
	        },
	        pluralize = function (u) {
	            return function (number, withoutSuffix, string, isFuture) {
	                var f = pluralForm(number),
	                    str = plurals[u][pluralForm(number)];
	                if (f === 2) {
	                    str = str[withoutSuffix ? 0 : 1];
	                }
	                return str.replace(/%d/i, number);
	            };
	        },
	        months = [
	            'يناير',
	            'فبراير',
	            'مارس',
	            'أبريل',
	            'مايو',
	            'يونيو',
	            'يوليو',
	            'أغسطس',
	            'سبتمبر',
	            'أكتوبر',
	            'نوفمبر',
	            'ديسمبر',
	        ];
	
	    var ar = moment.defineLocale('ar', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y'),
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return ar;
	
	})));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Amine Roukh: https://github.com/Amine27
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var pluralForm = function (n) {
	            return n === 0
	                ? 0
	                : n === 1
	                ? 1
	                : n === 2
	                ? 2
	                : n % 100 >= 3 && n % 100 <= 10
	                ? 3
	                : n % 100 >= 11
	                ? 4
	                : 5;
	        },
	        plurals = {
	            s: [
	                'أقل من ثانية',
	                'ثانية واحدة',
	                ['ثانيتان', 'ثانيتين'],
	                '%d ثوان',
	                '%d ثانية',
	                '%d ثانية',
	            ],
	            m: [
	                'أقل من دقيقة',
	                'دقيقة واحدة',
	                ['دقيقتان', 'دقيقتين'],
	                '%d دقائق',
	                '%d دقيقة',
	                '%d دقيقة',
	            ],
	            h: [
	                'أقل من ساعة',
	                'ساعة واحدة',
	                ['ساعتان', 'ساعتين'],
	                '%d ساعات',
	                '%d ساعة',
	                '%d ساعة',
	            ],
	            d: [
	                'أقل من يوم',
	                'يوم واحد',
	                ['يومان', 'يومين'],
	                '%d أيام',
	                '%d يومًا',
	                '%d يوم',
	            ],
	            M: [
	                'أقل من شهر',
	                'شهر واحد',
	                ['شهران', 'شهرين'],
	                '%d أشهر',
	                '%d شهرا',
	                '%d شهر',
	            ],
	            y: [
	                'أقل من عام',
	                'عام واحد',
	                ['عامان', 'عامين'],
	                '%d أعوام',
	                '%d عامًا',
	                '%d عام',
	            ],
	        },
	        pluralize = function (u) {
	            return function (number, withoutSuffix, string, isFuture) {
	                var f = pluralForm(number),
	                    str = plurals[u][pluralForm(number)];
	                if (f === 2) {
	                    str = str[withoutSuffix ? 0 : 1];
	                }
	                return str.replace(/%d/i, number);
	            };
	        },
	        months = [
	            'جانفي',
	            'فيفري',
	            'مارس',
	            'أفريل',
	            'ماي',
	            'جوان',
	            'جويلية',
	            'أوت',
	            'سبتمبر',
	            'أكتوبر',
	            'نوفمبر',
	            'ديسمبر',
	        ];
	
	    var arDz = moment.defineLocale('ar-dz', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y'),
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return arDz;
	
	})));


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Kuwait) [ar-kw]
	//! author : Nusret Parlak: https://github.com/nusretparlak
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var arKw = moment.defineLocale('ar-kw', {
	        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return arKw;
	
	})));


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Libya) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '1',
	            2: '2',
	            3: '3',
	            4: '4',
	            5: '5',
	            6: '6',
	            7: '7',
	            8: '8',
	            9: '9',
	            0: '0',
	        },
	        pluralForm = function (n) {
	            return n === 0
	                ? 0
	                : n === 1
	                ? 1
	                : n === 2
	                ? 2
	                : n % 100 >= 3 && n % 100 <= 10
	                ? 3
	                : n % 100 >= 11
	                ? 4
	                : 5;
	        },
	        plurals = {
	            s: [
	                'أقل من ثانية',
	                'ثانية واحدة',
	                ['ثانيتان', 'ثانيتين'],
	                '%d ثوان',
	                '%d ثانية',
	                '%d ثانية',
	            ],
	            m: [
	                'أقل من دقيقة',
	                'دقيقة واحدة',
	                ['دقيقتان', 'دقيقتين'],
	                '%d دقائق',
	                '%d دقيقة',
	                '%d دقيقة',
	            ],
	            h: [
	                'أقل من ساعة',
	                'ساعة واحدة',
	                ['ساعتان', 'ساعتين'],
	                '%d ساعات',
	                '%d ساعة',
	                '%d ساعة',
	            ],
	            d: [
	                'أقل من يوم',
	                'يوم واحد',
	                ['يومان', 'يومين'],
	                '%d أيام',
	                '%d يومًا',
	                '%d يوم',
	            ],
	            M: [
	                'أقل من شهر',
	                'شهر واحد',
	                ['شهران', 'شهرين'],
	                '%d أشهر',
	                '%d شهرا',
	                '%d شهر',
	            ],
	            y: [
	                'أقل من عام',
	                'عام واحد',
	                ['عامان', 'عامين'],
	                '%d أعوام',
	                '%d عامًا',
	                '%d عام',
	            ],
	        },
	        pluralize = function (u) {
	            return function (number, withoutSuffix, string, isFuture) {
	                var f = pluralForm(number),
	                    str = plurals[u][pluralForm(number)];
	                if (f === 2) {
	                    str = str[withoutSuffix ? 0 : 1];
	                }
	                return str.replace(/%d/i, number);
	            };
	        },
	        months = [
	            'يناير',
	            'فبراير',
	            'مارس',
	            'أبريل',
	            'مايو',
	            'يونيو',
	            'يوليو',
	            'أغسطس',
	            'سبتمبر',
	            'أكتوبر',
	            'نوفمبر',
	            'ديسمبر',
	        ];
	
	    var arLy = moment.defineLocale('ar-ly', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y'),
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return arLy;
	
	})));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var arMa = moment.defineLocale('ar-ma', {
	        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return arMa;
	
	})));


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '١',
	            2: '٢',
	            3: '٣',
	            4: '٤',
	            5: '٥',
	            6: '٦',
	            7: '٧',
	            8: '٨',
	            9: '٩',
	            0: '٠',
	        },
	        numberMap = {
	            '١': '1',
	            '٢': '2',
	            '٣': '3',
	            '٤': '4',
	            '٥': '5',
	            '٦': '6',
	            '٧': '7',
	            '٨': '8',
	            '٩': '9',
	            '٠': '0',
	        };
	
	    var arSa = moment.defineLocale('ar-sa', {
	        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return arSa;
	
	})));


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var arTn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return arTn;
	
	})));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı',
	    };
	
	    var az = moment.defineLocale('az', {
	        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
	            '_'
	        ),
	        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays:
	            'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split(
	                '_'
	            ),
	        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[bugün saat] LT',
	            nextDay: '[sabah saat] LT',
	            nextWeek: '[gələn həftə] dddd [saat] LT',
	            lastDay: '[dünən] LT',
	            lastWeek: '[keçən həftə] dddd [saat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s sonra',
	            past: '%s əvvəl',
	            s: 'bir neçə saniyə',
	            ss: '%d saniyə',
	            m: 'bir dəqiqə',
	            mm: '%d dəqiqə',
	            h: 'bir saat',
	            hh: '%d saat',
	            d: 'bir gün',
	            dd: '%d gün',
	            M: 'bir ay',
	            MM: '%d ay',
	            y: 'bir il',
	            yy: '%d il',
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM: function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal: function (number) {
	            if (number === 0) {
	                // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = (number % 100) - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return az;
	
	})));


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11
	            ? forms[0]
	            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
	            ? forms[1]
	            : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            dd: 'дзень_дні_дзён',
	            MM: 'месяц_месяцы_месяцаў',
	            yy: 'год_гады_гадоў',
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        } else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	
	    var be = moment.defineLocale('be', {
	        months: {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split(
	                '_'
	            ),
	            standalone:
	                'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split(
	                    '_'
	                ),
	        },
	        monthsShort:
	            'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays: {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split(
	                '_'
	            ),
	            standalone:
	                'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split(
	                    '_'
	                ),
	            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
	        },
	        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY г.',
	            LLL: 'D MMMM YYYY г., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY г., HH:mm',
	        },
	        calendar: {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[У мінулую] dddd [ў] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'праз %s',
	            past: '%s таму',
	            s: 'некалькі секунд',
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: relativeTimeWithPlural,
	            hh: relativeTimeWithPlural,
	            d: 'дзень',
	            dd: relativeTimeWithPlural,
	            M: 'месяц',
	            MM: relativeTimeWithPlural,
	            y: 'год',
	            yy: relativeTimeWithPlural,
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM: function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return (number % 10 === 2 || number % 10 === 3) &&
	                        number % 100 !== 12 &&
	                        number % 100 !== 13
	                        ? number + '-і'
	                        : number + '-ы';
	                case 'D':
	                    return number + '-га';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return be;
	
	})));


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var bg = moment.defineLocale('bg', {
	        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split(
	            '_'
	        ),
	        monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split(
	            '_'
	        ),
	        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[Днес в] LT',
	            nextDay: '[Утре в] LT',
	            nextWeek: 'dddd [в] LT',
	            lastDay: '[Вчера в] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Миналата] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Миналия] dddd [в] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'след %s',
	            past: 'преди %s',
	            s: 'няколко секунди',
	            ss: '%d секунди',
	            m: 'минута',
	            mm: '%d минути',
	            h: 'час',
	            hh: '%d часа',
	            d: 'ден',
	            dd: '%d дена',
	            w: 'седмица',
	            ww: '%d седмици',
	            M: 'месец',
	            MM: '%d месеца',
	            y: 'година',
	            yy: '%d години',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal: function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return bg;
	
	})));


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bambara [bm]
	//! author : Estelle Comment : https://github.com/estellecomment
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var bm = moment.defineLocale('bm', {
	        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split(
	            '_'
	        ),
	        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
	        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
	        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
	        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'MMMM [tile] D [san] YYYY',
	            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	        },
	        calendar: {
	            sameDay: '[Bi lɛrɛ] LT',
	            nextDay: '[Sini lɛrɛ] LT',
	            nextWeek: 'dddd [don lɛrɛ] LT',
	            lastDay: '[Kunu lɛrɛ] LT',
	            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s kɔnɔ',
	            past: 'a bɛ %s bɔ',
	            s: 'sanga dama dama',
	            ss: 'sekondi %d',
	            m: 'miniti kelen',
	            mm: 'miniti %d',
	            h: 'lɛrɛ kelen',
	            hh: 'lɛrɛ %d',
	            d: 'tile kelen',
	            dd: 'tile %d',
	            M: 'kalo kelen',
	            MM: 'kalo %d',
	            y: 'san kelen',
	            yy: 'san %d',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return bm;
	
	})));


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '১',
	            2: '২',
	            3: '৩',
	            4: '৪',
	            5: '৫',
	            6: '৬',
	            7: '৭',
	            8: '৮',
	            9: '৯',
	            0: '০',
	        },
	        numberMap = {
	            '১': '1',
	            '২': '2',
	            '৩': '3',
	            '৪': '4',
	            '৫': '5',
	            '৬': '6',
	            '৭': '7',
	            '৮': '8',
	            '৯': '9',
	            '০': '0',
	        };
	
	    var bn = moment.defineLocale('bn', {
	        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
	            '_'
	        ),
	        monthsShort:
	            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
	                '_'
	            ),
	        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
	            '_'
	        ),
	        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm সময়',
	            LTS: 'A h:mm:ss সময়',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm সময়',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
	        },
	        calendar: {
	            sameDay: '[আজ] LT',
	            nextDay: '[আগামীকাল] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[গতকাল] LT',
	            lastWeek: '[গত] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s পরে',
	            past: '%s আগে',
	            s: 'কয়েক সেকেন্ড',
	            ss: '%d সেকেন্ড',
	            m: 'এক মিনিট',
	            mm: '%d মিনিট',
	            h: 'এক ঘন্টা',
	            hh: '%d ঘন্টা',
	            d: 'এক দিন',
	            dd: '%d দিন',
	            M: 'এক মাস',
	            MM: '%d মাস',
	            y: 'এক বছর',
	            yy: '%d বছর',
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                (meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল'
	            ) {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return bn;
	
	})));


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali (Bangladesh) [bn-bd]
	//! author : Asraf Hossain Patoary : https://github.com/ashwoolford
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '১',
	            2: '২',
	            3: '৩',
	            4: '৪',
	            5: '৫',
	            6: '৬',
	            7: '৭',
	            8: '৮',
	            9: '৯',
	            0: '০',
	        },
	        numberMap = {
	            '১': '1',
	            '২': '2',
	            '৩': '3',
	            '৪': '4',
	            '৫': '5',
	            '৬': '6',
	            '৭': '7',
	            '৮': '8',
	            '৯': '9',
	            '০': '0',
	        };
	
	    var bnBd = moment.defineLocale('bn-bd', {
	        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
	            '_'
	        ),
	        monthsShort:
	            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
	                '_'
	            ),
	        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
	            '_'
	        ),
	        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm সময়',
	            LTS: 'A h:mm:ss সময়',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm সময়',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
	        },
	        calendar: {
	            sameDay: '[আজ] LT',
	            nextDay: '[আগামীকাল] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[গতকাল] LT',
	            lastWeek: '[গত] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s পরে',
	            past: '%s আগে',
	            s: 'কয়েক সেকেন্ড',
	            ss: '%d সেকেন্ড',
	            m: 'এক মিনিট',
	            mm: '%d মিনিট',
	            h: 'এক ঘন্টা',
	            hh: '%d ঘন্টা',
	            d: 'এক দিন',
	            dd: '%d দিন',
	            M: 'এক মাস',
	            MM: '%d মাস',
	            y: 'এক বছর',
	            yy: '%d বছর',
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	
	        meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'রাত') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ভোর') {
	                return hour;
	            } else if (meridiem === 'সকাল') {
	                return hour;
	            } else if (meridiem === 'দুপুর') {
	                return hour >= 3 ? hour : hour + 12;
	            } else if (meridiem === 'বিকাল') {
	                return hour + 12;
	            } else if (meridiem === 'সন্ধ্যা') {
	                return hour + 12;
	            }
	        },
	
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 6) {
	                return 'ভোর';
	            } else if (hour < 12) {
	                return 'সকাল';
	            } else if (hour < 15) {
	                return 'দুপুর';
	            } else if (hour < 18) {
	                return 'বিকাল';
	            } else if (hour < 20) {
	                return 'সন্ধ্যা';
	            } else {
	                return 'রাত';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return bnBd;
	
	})));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '༡',
	            2: '༢',
	            3: '༣',
	            4: '༤',
	            5: '༥',
	            6: '༦',
	            7: '༧',
	            8: '༨',
	            9: '༩',
	            0: '༠',
	        },
	        numberMap = {
	            '༡': '1',
	            '༢': '2',
	            '༣': '3',
	            '༤': '4',
	            '༥': '5',
	            '༦': '6',
	            '༧': '7',
	            '༨': '8',
	            '༩': '9',
	            '༠': '0',
	        };
	
	    var bo = moment.defineLocale('bo', {
	        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split(
	                '_'
	            ),
	        monthsShortRegex: /^(ཟླ་\d{1,2})/,
	        monthsParseExact: true,
	        weekdays:
	            'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split(
	                '_'
	            ),
	        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split(
	            '_'
	        ),
	        weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm',
	        },
	        calendar: {
	            sameDay: '[དི་རིང] LT',
	            nextDay: '[སང་ཉིན] LT',
	            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay: '[ཁ་སང] LT',
	            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ལ་',
	            past: '%s སྔན་ལ',
	            s: 'ལམ་སང',
	            ss: '%d སྐར་ཆ།',
	            m: 'སྐར་མ་གཅིག',
	            mm: '%d སྐར་མ',
	            h: 'ཆུ་ཚོད་གཅིག',
	            hh: '%d ཆུ་ཚོད',
	            d: 'ཉིན་གཅིག',
	            dd: '%d ཉིན་',
	            M: 'ཟླ་བ་གཅིག',
	            MM: '%d ཟླ་བ',
	            y: 'ལོ་གཅིག',
	            yy: '%d ལོ',
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                (meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག'
	            ) {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return bo;
	
	})));


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            mm: 'munutenn',
	            MM: 'miz',
	            dd: 'devezh',
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	            case 1:
	            case 3:
	            case 4:
	            case 5:
	            case 9:
	                return number + ' bloaz';
	            default:
	                return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            m: 'v',
	            b: 'v',
	            d: 'z',
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }
	
	    var monthsParse = [
	            /^gen/i,
	            /^c[ʼ\']hwe/i,
	            /^meu/i,
	            /^ebr/i,
	            /^mae/i,
	            /^(mez|eve)/i,
	            /^gou/i,
	            /^eos/i,
	            /^gwe/i,
	            /^her/i,
	            /^du/i,
	            /^ker/i,
	        ],
	        monthsRegex =
	            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
	        monthsStrictRegex =
	            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
	        monthsShortStrictRegex =
	            /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
	        fullWeekdaysParse = [
	            /^sul/i,
	            /^lun/i,
	            /^meurzh/i,
	            /^merc[ʼ\']her/i,
	            /^yaou/i,
	            /^gwener/i,
	            /^sadorn/i,
	        ],
	        shortWeekdaysParse = [
	            /^Sul/i,
	            /^Lun/i,
	            /^Meu/i,
	            /^Mer/i,
	            /^Yao/i,
	            /^Gwe/i,
	            /^Sad/i,
	        ],
	        minWeekdaysParse = [
	            /^Su/i,
	            /^Lu/i,
	            /^Me([^r]|$)/i,
	            /^Mer/i,
	            /^Ya/i,
	            /^Gw/i,
	            /^Sa/i,
	        ];
	
	    var br = moment.defineLocale('br', {
	        months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
	            '_'
	        ),
	        monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParse: minWeekdaysParse,
	        fullWeekdaysParse: fullWeekdaysParse,
	        shortWeekdaysParse: shortWeekdaysParse,
	        minWeekdaysParse: minWeekdaysParse,
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: monthsStrictRegex,
	        monthsShortStrictRegex: monthsShortStrictRegex,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [a viz] MMMM YYYY',
	            LLL: 'D [a viz] MMMM YYYY HH:mm',
	            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hiziv da] LT',
	            nextDay: '[Warcʼhoazh da] LT',
	            nextWeek: 'dddd [da] LT',
	            lastDay: '[Decʼh da] LT',
	            lastWeek: 'dddd [paset da] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'a-benn %s',
	            past: '%s ʼzo',
	            s: 'un nebeud segondennoù',
	            ss: '%d eilenn',
	            m: 'ur vunutenn',
	            mm: relativeTimeWithMutation,
	            h: 'un eur',
	            hh: '%d eur',
	            d: 'un devezh',
	            dd: relativeTimeWithMutation,
	            M: 'ur miz',
	            MM: relativeTimeWithMutation,
	            y: 'ur bloaz',
	            yy: specialMutationForYears,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	        ordinal: function (number) {
	            var output = number === 1 ? 'añ' : 'vet';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
	        isPM: function (token) {
	            return token === 'g.m.';
	        },
	        meridiem: function (hour, minute, isLower) {
	            return hour < 12 ? 'a.m.' : 'g.m.';
	        },
	    });
	
	    return br;
	
	})));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }
	
	    var bs = moment.defineLocale('bs', {
	        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[jučer u] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'par sekundi',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: 'dan',
	            dd: translate,
	            M: 'mjesec',
	            MM: translate,
	            y: 'godinu',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return bs;
	
	})));


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ca = moment.defineLocale('ca', {
	        months: {
	            standalone:
	                'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
	                    '_'
	                ),
	            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
	                '_'
	            ),
	            isFormat: /D[oD]?(\s)+MMMM/,
	        },
	        monthsShort:
	            'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
	                '_'
	            ),
	        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [de] YYYY',
	            ll: 'D MMM YYYY',
	            LLL: 'D MMMM [de] YYYY [a les] H:mm',
	            lll: 'D MMM YYYY, H:mm',
	            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
	            llll: 'ddd D MMM YYYY, H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            nextDay: function () {
	                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            lastDay: function () {
	                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [passat a ' +
	                    (this.hours() !== 1 ? 'les' : 'la') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: "d'aquí %s",
	            past: 'fa %s',
	            s: 'uns segons',
	            ss: '%d segons',
	            m: 'un minut',
	            mm: '%d minuts',
	            h: 'una hora',
	            hh: '%d hores',
	            d: 'un dia',
	            dd: '%d dies',
	            M: 'un mes',
	            MM: '%d mesos',
	            y: 'un any',
	            yy: '%d anys',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal: function (number, period) {
	            var output =
	                number === 1
	                    ? 'r'
	                    : number === 2
	                    ? 'n'
	                    : number === 3
	                    ? 'r'
	                    : number === 4
	                    ? 't'
	                    : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ca;
	
	})));


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = {
	            format: 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(
	                '_'
	            ),
	            standalone:
	                'ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince'.split(
	                    '_'
	                ),
	        },
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
	        monthsParse = [
	            /^led/i,
	            /^úno/i,
	            /^bře/i,
	            /^dub/i,
	            /^kvě/i,
	            /^(čvn|červen$|června)/i,
	            /^(čvc|červenec|července)/i,
	            /^srp/i,
	            /^zář/i,
	            /^říj/i,
	            /^lis/i,
	            /^pro/i,
	        ],
	        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
	        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
	        monthsRegex =
	            /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;
	
	    function plural(n) {
	        return n > 1 && n < 5 && ~~(n / 10) !== 1;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's': // a few seconds / in a few seconds / a few seconds ago
	                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
	            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekund');
	                } else {
	                    return result + 'sekundami';
	                }
	            case 'm': // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minuty' : 'minut');
	                } else {
	                    return result + 'minutami';
	                }
	            case 'h': // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodin');
	                } else {
	                    return result + 'hodinami';
	                }
	            case 'd': // a day / in a day / a day ago
	                return withoutSuffix || isFuture ? 'den' : 'dnem';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dny' : 'dní');
	                } else {
	                    return result + 'dny';
	                }
	            case 'M': // a month / in a month / a month ago
	                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'měsíce' : 'měsíců');
	                } else {
	                    return result + 'měsíci';
	                }
	            case 'y': // a year / in a year / a year ago
	                return withoutSuffix || isFuture ? 'rok' : 'rokem';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'let');
	                } else {
	                    return result + 'lety';
	                }
	        }
	    }
	
	    var cs = moment.defineLocale('cs', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
	        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
	        monthsStrictRegex:
	            /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
	        monthsShortStrictRegex:
	            /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd D. MMMM YYYY H:mm',
	            l: 'D. M. YYYY',
	        },
	        calendar: {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [v] LT';
	                    case 3:
	                        return '[ve středu v] LT';
	                    case 4:
	                        return '[ve čtvrtek v] LT';
	                    case 5:
	                        return '[v pátek v] LT';
	                    case 6:
	                        return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulou neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[minulé] dddd [v] LT';
	                    case 3:
	                        return '[minulou středu v] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [v] LT';
	                    case 6:
	                        return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'před %s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return cs;
	
	})));


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var cv = moment.defineLocale('cv', {
	        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split(
	            '_'
	        ),
	        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays:
	            'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split(
	                '_'
	            ),
	        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        },
	        calendar: {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (output) {
	                var affix = /сехет$/i.exec(output)
	                    ? 'рен'
	                    : /ҫул$/i.exec(output)
	                    ? 'тан'
	                    : 'ран';
	                return output + affix;
	            },
	            past: '%s каялла',
	            s: 'пӗр-ик ҫеккунт',
	            ss: '%d ҫеккунт',
	            m: 'пӗр минут',
	            mm: '%d минут',
	            h: 'пӗр сехет',
	            hh: '%d сехет',
	            d: 'пӗр кун',
	            dd: '%d кун',
	            M: 'пӗр уйӑх',
	            MM: '%d уйӑх',
	            y: 'пӗр ҫул',
	            yy: '%d ҫул',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	        ordinal: '%d-мӗш',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return cv;
	
	})));


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
	            '_'
	        ),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
	            '_'
	        ),
	        weekdays:
	            'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
	                '_'
	            ),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact: true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            ss: '%d eiliad',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '',
	                    'af',
	                    'il',
	                    'ydd',
	                    'ydd',
	                    'ed',
	                    'ed',
	                    'ed',
	                    'fed',
	                    'fed',
	                    'fed', // 1af to 10fed
	                    'eg',
	                    'fed',
	                    'eg',
	                    'eg',
	                    'fed',
	                    'eg',
	                    'eg',
	                    'fed',
	                    'eg',
	                    'fed', // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return cy;
	
	})));


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var da = moment.defineLocale('da', {
	        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'på dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[i] dddd[s kl.] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s siden',
	            s: 'få sekunder',
	            ss: '%d sekunder',
	            m: 'et minut',
	            mm: '%d minutter',
	            h: 'en time',
	            hh: '%d timer',
	            d: 'en dag',
	            dd: '%d dage',
	            M: 'en måned',
	            MM: '%d måneder',
	            y: 'et år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return da;
	
	})));


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eine Minute', 'einer Minute'],
	            h: ['eine Stunde', 'einer Stunde'],
	            d: ['ein Tag', 'einem Tag'],
	            dd: [number + ' Tage', number + ' Tagen'],
	            w: ['eine Woche', 'einer Woche'],
	            M: ['ein Monat', 'einem Monat'],
	            MM: [number + ' Monate', number + ' Monaten'],
	            y: ['ein Jahr', 'einem Jahr'],
	            yy: [number + ' Jahre', number + ' Jahren'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de = moment.defineLocale('de', {
	        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays:
	            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
	                '_'
	            ),
	        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            w: processRelativeTime,
	            ww: '%d Wochen',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return de;
	
	})));


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eine Minute', 'einer Minute'],
	            h: ['eine Stunde', 'einer Stunde'],
	            d: ['ein Tag', 'einem Tag'],
	            dd: [number + ' Tage', number + ' Tagen'],
	            w: ['eine Woche', 'einer Woche'],
	            M: ['ein Monat', 'einem Monat'],
	            MM: [number + ' Monate', number + ' Monaten'],
	            y: ['ein Jahr', 'einem Jahr'],
	            yy: [number + ' Jahre', number + ' Jahren'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var deAt = moment.defineLocale('de-at', {
	        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays:
	            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
	                '_'
	            ),
	        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            w: processRelativeTime,
	            ww: '%d Wochen',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return deAt;
	
	})));


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Switzerland) [de-ch]
	//! author : sschueller : https://github.com/sschueller
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eine Minute', 'einer Minute'],
	            h: ['eine Stunde', 'einer Stunde'],
	            d: ['ein Tag', 'einem Tag'],
	            dd: [number + ' Tage', number + ' Tagen'],
	            w: ['eine Woche', 'einer Woche'],
	            M: ['ein Monat', 'einem Monat'],
	            MM: [number + ' Monate', number + ' Monaten'],
	            y: ['ein Jahr', 'einem Jahr'],
	            yy: [number + ' Jahre', number + ' Jahren'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var deCh = moment.defineLocale('de-ch', {
	        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays:
	            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
	                '_'
	            ),
	        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            w: processRelativeTime,
	            ww: '%d Wochen',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return deCh;
	
	})));


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'ޖެނުއަރީ',
	            'ފެބްރުއަރީ',
	            'މާރިޗު',
	            'އޭޕްރީލު',
	            'މޭ',
	            'ޖޫން',
	            'ޖުލައި',
	            'އޯގަސްޓު',
	            'ސެޕްޓެމްބަރު',
	            'އޮކްޓޯބަރު',
	            'ނޮވެމްބަރު',
	            'ޑިސެމްބަރު',
	        ],
	        weekdays = [
	            'އާދިއްތަ',
	            'ހޯމަ',
	            'އަންގާރަ',
	            'ބުދަ',
	            'ބުރާސްފަތި',
	            'ހުކުރު',
	            'ހޮނިހިރު',
	        ];
	
	    var dv = moment.defineLocale('dv', {
	        months: months,
	        monthsShort: months,
	        weekdays: weekdays,
	        weekdaysShort: weekdays,
	        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/M/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM: function (input) {
	            return 'މފ' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar: {
	            sameDay: '[މިއަދު] LT',
	            nextDay: '[މާދަމާ] LT',
	            nextWeek: 'dddd LT',
	            lastDay: '[އިއްޔެ] LT',
	            lastWeek: '[ފާއިތުވި] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ތެރޭގައި %s',
	            past: 'ކުރިން %s',
	            s: 'ސިކުންތުކޮޅެއް',
	            ss: 'd% ސިކުންތު',
	            m: 'މިނިޓެއް',
	            mm: 'މިނިޓު %d',
	            h: 'ގަޑިއިރެއް',
	            hh: 'ގަޑިއިރު %d',
	            d: 'ދުވަހެއް',
	            dd: 'ދުވަސް %d',
	            M: 'މަހެއް',
	            MM: 'މަސް %d',
	            y: 'އަހަރެއް',
	            yy: 'އަހަރު %d',
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 7, // Sunday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return dv;
	
	})));


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }
	
	    var el = moment.defineLocale('el', {
	        monthsNominativeEl:
	            'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split(
	                '_'
	            ),
	        monthsGenitiveEl:
	            'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split(
	                '_'
	            ),
	        months: function (momentToFormat, format) {
	            if (!momentToFormat) {
	                return this._monthsNominativeEl;
	            } else if (
	                typeof format === 'string' &&
	                /D/.test(format.substring(0, format.indexOf('MMMM')))
	            ) {
	                // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split(
	            '_'
	        ),
	        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM: function (input) {
	            return (input + '').toLowerCase()[0] === 'μ';
	        },
	        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendarEl: {
	            sameDay: '[Σήμερα {}] LT',
	            nextDay: '[Αύριο {}] LT',
	            nextWeek: 'dddd [{}] LT',
	            lastDay: '[Χθες {}] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        calendar: function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
	        },
	        relativeTime: {
	            future: 'σε %s',
	            past: '%s πριν',
	            s: 'λίγα δευτερόλεπτα',
	            ss: '%d δευτερόλεπτα',
	            m: 'ένα λεπτό',
	            mm: '%d λεπτά',
	            h: 'μία ώρα',
	            hh: '%d ώρες',
	            d: 'μία μέρα',
	            dd: '%d μέρες',
	            M: 'ένας μήνας',
	            MM: '%d μήνες',
	            y: 'ένας χρόνος',
	            yy: '%d χρόνια',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4st is the first week of the year.
	        },
	    });
	
	    return el;
	
	})));


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enAu = moment.defineLocale('en-au', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enAu;
	
	})));


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enCa = moment.defineLocale('en-ca', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'YYYY-MM-DD',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY h:mm A',
	            LLLL: 'dddd, MMMM D, YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    return enCa;
	
	})));


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enGb = moment.defineLocale('en-gb', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enGb;
	
	})));


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enIe = moment.defineLocale('en-ie', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enIe;
	
	})));


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Israel) [en-il]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enIl = moment.defineLocale('en-il', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    return enIl;
	
	})));


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (India) [en-in]
	//! author : Jatin Agrawal : https://github.com/jatinag22
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enIn = moment.defineLocale('en-in', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 1st is the first week of the year.
	        },
	    });
	
	    return enIn;
	
	})));


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enNz = moment.defineLocale('en-nz', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enNz;
	
	})));


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Singapore) [en-sg]
	//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enSg = moment.defineLocale('en-sg', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enSg;
	
	})));


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
	//! comment : miestasmia corrected the translation by colindean
	//! comment : Vivakvo corrected the translation by colindean and miestasmia
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var eo = moment.defineLocale('eo', {
	        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
	        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: '[la] D[-an de] MMMM, YYYY',
	            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
	            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
	            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar: {
	            sameDay: '[Hodiaŭ je] LT',
	            nextDay: '[Morgaŭ je] LT',
	            nextWeek: 'dddd[n je] LT',
	            lastDay: '[Hieraŭ je] LT',
	            lastWeek: '[pasintan] dddd[n je] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'post %s',
	            past: 'antaŭ %s',
	            s: 'kelkaj sekundoj',
	            ss: '%d sekundoj',
	            m: 'unu minuto',
	            mm: '%d minutoj',
	            h: 'unu horo',
	            hh: '%d horoj',
	            d: 'unu tago', //ne 'diurno', ĉar estas uzita por proksimumo
	            dd: '%d tagoj',
	            M: 'unu monato',
	            MM: '%d monatoj',
	            y: 'unu jaro',
	            yy: '%d jaroj',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}a/,
	        ordinal: '%da',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return eo;
	
	})));


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var es = moment.defineLocale('es', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	        invalidDate: 'Fecha inválida',
	    });
	
	    return es;
	
	})));


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esDo = moment.defineLocale('es-do', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return esDo;
	
	})));


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Mexico) [es-mx]
	//! author : JC Franco : https://github.com/jcfranco
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esMx = moment.defineLocale('es-mx', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	        invalidDate: 'Fecha inválida',
	    });
	
	    return esMx;
	
	})));


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (United States) [es-us]
	//! author : bustta : https://github.com/bustta
	//! author : chrisrodz : https://github.com/chrisrodz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esUs = moment.defineLocale('es-us', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'MM/DD/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return esUs;
	
	})));


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            ss: [number + 'sekundi', number + 'sekundit'],
	            m: ['ühe minuti', 'üks minut'],
	            mm: [number + ' minuti', number + ' minutit'],
	            h: ['ühe tunni', 'tund aega', 'üks tund'],
	            hh: [number + ' tunni', number + ' tundi'],
	            d: ['ühe päeva', 'üks päev'],
	            M: ['kuu aja', 'kuu aega', 'üks kuu'],
	            MM: [number + ' kuu', number + ' kuud'],
	            y: ['ühe aasta', 'aasta', 'üks aasta'],
	            yy: [number + ' aasta', number + ' aastat'],
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var et = moment.defineLocale('et', {
	        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
	            '_'
	        ),
	        monthsShort:
	            'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays:
	            'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split(
	                '_'
	            ),
	        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[Täna,] LT',
	            nextDay: '[Homme,] LT',
	            nextWeek: '[Järgmine] dddd LT',
	            lastDay: '[Eile,] LT',
	            lastWeek: '[Eelmine] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s pärast',
	            past: '%s tagasi',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: '%d päeva',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return et;
	
	})));


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var eu = moment.defineLocale('eu', {
	        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
	            '_'
	        ),
	        monthsShort:
	            'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
	                '_'
	            ),
	        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY[ko] MMMM[ren] D[a]',
	            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l: 'YYYY-M-D',
	            ll: 'YYYY[ko] MMM D[a]',
	            lll: 'YYYY[ko] MMM D[a] HH:mm',
	            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
	        },
	        calendar: {
	            sameDay: '[gaur] LT[etan]',
	            nextDay: '[bihar] LT[etan]',
	            nextWeek: 'dddd LT[etan]',
	            lastDay: '[atzo] LT[etan]',
	            lastWeek: '[aurreko] dddd LT[etan]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s barru',
	            past: 'duela %s',
	            s: 'segundo batzuk',
	            ss: '%d segundo',
	            m: 'minutu bat',
	            mm: '%d minutu',
	            h: 'ordu bat',
	            hh: '%d ordu',
	            d: 'egun bat',
	            dd: '%d egun',
	            M: 'hilabete bat',
	            MM: '%d hilabete',
	            y: 'urte bat',
	            yy: '%d urte',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return eu;
	
	})));


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '۱',
	            2: '۲',
	            3: '۳',
	            4: '۴',
	            5: '۵',
	            6: '۶',
	            7: '۷',
	            8: '۸',
	            9: '۹',
	            0: '۰',
	        },
	        numberMap = {
	            '۱': '1',
	            '۲': '2',
	            '۳': '3',
	            '۴': '4',
	            '۵': '5',
	            '۶': '6',
	            '۷': '7',
	            '۸': '8',
	            '۹': '9',
	            '۰': '0',
	        };
	
	    var fa = moment.defineLocale('fa', {
	        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
	                '_'
	            ),
	        weekdays:
	            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
	                '_'
	            ),
	        weekdaysShort:
	            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
	                '_'
	            ),
	        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar: {
	            sameDay: '[امروز ساعت] LT',
	            nextDay: '[فردا ساعت] LT',
	            nextWeek: 'dddd [ساعت] LT',
	            lastDay: '[دیروز ساعت] LT',
	            lastWeek: 'dddd [پیش] [ساعت] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'در %s',
	            past: '%s پیش',
	            s: 'چند ثانیه',
	            ss: '%d ثانیه',
	            m: 'یک دقیقه',
	            mm: '%d دقیقه',
	            h: 'یک ساعت',
	            hh: '%d ساعت',
	            d: 'یک روز',
	            dd: '%d روز',
	            M: 'یک ماه',
	            MM: '%d ماه',
	            y: 'یک سال',
	            yy: '%d سال',
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[۰-۹]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}م/,
	        ordinal: '%dم',
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return fa;
	
	})));


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var numbersPast =
	            'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(
	                ' '
	            ),
	        numbersFuture = [
	            'nolla',
	            'yhden',
	            'kahden',
	            'kolmen',
	            'neljän',
	            'viiden',
	            'kuuden',
	            numbersPast[7],
	            numbersPast[8],
	            numbersPast[9],
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	            case 's':
	                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	            case 'ss':
	                result = isFuture ? 'sekunnin' : 'sekuntia';
	                break;
	            case 'm':
	                return isFuture ? 'minuutin' : 'minuutti';
	            case 'mm':
	                result = isFuture ? 'minuutin' : 'minuuttia';
	                break;
	            case 'h':
	                return isFuture ? 'tunnin' : 'tunti';
	            case 'hh':
	                result = isFuture ? 'tunnin' : 'tuntia';
	                break;
	            case 'd':
	                return isFuture ? 'päivän' : 'päivä';
	            case 'dd':
	                result = isFuture ? 'päivän' : 'päivää';
	                break;
	            case 'M':
	                return isFuture ? 'kuukauden' : 'kuukausi';
	            case 'MM':
	                result = isFuture ? 'kuukauden' : 'kuukautta';
	                break;
	            case 'y':
	                return isFuture ? 'vuoden' : 'vuosi';
	            case 'yy':
	                result = isFuture ? 'vuoden' : 'vuotta';
	                break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10
	            ? isFuture
	                ? numbersFuture[number]
	                : numbersPast[number]
	            : number;
	    }
	
	    var fi = moment.defineLocale('fi', {
	        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
	            '_'
	        ),
	        monthsShort:
	            'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split(
	                '_'
	            ),
	        weekdays:
	            'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
	                '_'
	            ),
	        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD.MM.YYYY',
	            LL: 'Do MMMM[ta] YYYY',
	            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l: 'D.M.YYYY',
	            ll: 'Do MMM YYYY',
	            lll: 'Do MMM YYYY, [klo] HH.mm',
	            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
	        },
	        calendar: {
	            sameDay: '[tänään] [klo] LT',
	            nextDay: '[huomenna] [klo] LT',
	            nextWeek: 'dddd [klo] LT',
	            lastDay: '[eilen] [klo] LT',
	            lastWeek: '[viime] dddd[na] [klo] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s päästä',
	            past: '%s sitten',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fi;
	
	})));


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Filipino [fil]
	//! author : Dan Hagman : https://github.com/hagmandan
	//! author : Matthew Co : https://github.com/matthewdeeco
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var fil = moment.defineLocale('fil', {
	        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
	            '_'
	        ),
	        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
	            '_'
	        ),
	        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'MM/D/YYYY',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY HH:mm',
	            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: 'LT [ngayong araw]',
	            nextDay: '[Bukas ng] LT',
	            nextWeek: 'LT [sa susunod na] dddd',
	            lastDay: 'LT [kahapon]',
	            lastWeek: 'LT [noong nakaraang] dddd',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'sa loob ng %s',
	            past: '%s ang nakalipas',
	            s: 'ilang segundo',
	            ss: '%d segundo',
	            m: 'isang minuto',
	            mm: '%d minuto',
	            h: 'isang oras',
	            hh: '%d oras',
	            d: 'isang araw',
	            dd: '%d araw',
	            M: 'isang buwan',
	            MM: '%d buwan',
	            y: 'isang taon',
	            yy: '%d taon',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function (number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fil;
	
	})));


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	//! author : Kristian Sakarisson : https://github.com/sakarisson
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var fo = moment.defineLocale('fo', {
	        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays:
	            'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split(
	                '_'
	            ),
	        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D. MMMM, YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Í dag kl.] LT',
	            nextDay: '[Í morgin kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[Í gjár kl.] LT',
	            lastWeek: '[síðstu] dddd [kl] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'um %s',
	            past: '%s síðani',
	            s: 'fá sekund',
	            ss: '%d sekundir',
	            m: 'ein minuttur',
	            mm: '%d minuttir',
	            h: 'ein tími',
	            hh: '%d tímar',
	            d: 'ein dagur',
	            dd: '%d dagar',
	            M: 'ein mánaður',
	            MM: '%d mánaðir',
	            y: 'eitt ár',
	            yy: '%d ár',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fo;
	
	})));


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsStrictRegex =
	            /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
	        monthsShortStrictRegex =
	            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
	        monthsRegex =
	            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
	        monthsParse = [
	            /^janv/i,
	            /^févr/i,
	            /^mars/i,
	            /^avr/i,
	            /^mai/i,
	            /^juin/i,
	            /^juil/i,
	            /^août/i,
	            /^sept/i,
	            /^oct/i,
	            /^nov/i,
	            /^déc/i,
	        ];
	
	    var fr = moment.defineLocale('fr', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
	            '_'
	        ),
	        monthsShort:
	            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
	                '_'
	            ),
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: monthsStrictRegex,
	        monthsShortStrictRegex: monthsShortStrictRegex,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            w: 'une semaine',
	            ww: '%d semaines',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // TODO: Return 'e' when day of month > 1. Move this case inside
	                // block for masculine words below.
	                // See https://github.com/moment/moment/issues/3375
	                case 'D':
	                    return number + (number === 1 ? 'er' : '');
	
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fr;
	
	})));


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var frCa = moment.defineLocale('fr-ca', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
	            '_'
	        ),
	        monthsShort:
	            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	    });
	
	    return frCa;
	
	})));


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var frCh = moment.defineLocale('fr-ch', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
	            '_'
	        ),
	        monthsShort:
	            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return frCh;
	
	})));


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortWithDots =
	            'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots =
	            'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	    var fy = moment.defineLocale('fy', {
	        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact: true,
	        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
	            '_'
	        ),
	        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'oer %s',
	            past: '%s lyn',
	            s: 'in pear sekonden',
	            ss: '%d sekonden',
	            m: 'ien minút',
	            mm: '%d minuten',
	            h: 'ien oere',
	            hh: '%d oeren',
	            d: 'ien dei',
	            dd: '%d dagen',
	            M: 'ien moanne',
	            MM: '%d moannen',
	            y: 'ien jier',
	            yy: '%d jierren',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            );
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fy;
	
	})));


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Irish or Irish Gaelic [ga]
	//! author : André Silva : https://github.com/askpt
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'Eanáir',
	            'Feabhra',
	            'Márta',
	            'Aibreán',
	            'Bealtaine',
	            'Meitheamh',
	            'Iúil',
	            'Lúnasa',
	            'Meán Fómhair',
	            'Deireadh Fómhair',
	            'Samhain',
	            'Nollaig',
	        ],
	        monthsShort = [
	            'Ean',
	            'Feabh',
	            'Márt',
	            'Aib',
	            'Beal',
	            'Meith',
	            'Iúil',
	            'Lún',
	            'M.F.',
	            'D.F.',
	            'Samh',
	            'Noll',
	        ],
	        weekdays = [
	            'Dé Domhnaigh',
	            'Dé Luain',
	            'Dé Máirt',
	            'Dé Céadaoin',
	            'Déardaoin',
	            'Dé hAoine',
	            'Dé Sathairn',
	        ],
	        weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
	        weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];
	
	    var ga = moment.defineLocale('ga', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsParseExact: true,
	        weekdays: weekdays,
	        weekdaysShort: weekdaysShort,
	        weekdaysMin: weekdaysMin,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Inniu ag] LT',
	            nextDay: '[Amárach ag] LT',
	            nextWeek: 'dddd [ag] LT',
	            lastDay: '[Inné ag] LT',
	            lastWeek: 'dddd [seo caite] [ag] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'i %s',
	            past: '%s ó shin',
	            s: 'cúpla soicind',
	            ss: '%d soicind',
	            m: 'nóiméad',
	            mm: '%d nóiméad',
	            h: 'uair an chloig',
	            hh: '%d uair an chloig',
	            d: 'lá',
	            dd: '%d lá',
	            M: 'mí',
	            MM: '%d míonna',
	            y: 'bliain',
	            yy: '%d bliain',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
	        ordinal: function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ga;
	
	})));


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'Am Faoilleach',
	            'An Gearran',
	            'Am Màrt',
	            'An Giblean',
	            'An Cèitean',
	            'An t-Ògmhios',
	            'An t-Iuchar',
	            'An Lùnastal',
	            'An t-Sultain',
	            'An Dàmhair',
	            'An t-Samhain',
	            'An Dùbhlachd',
	        ],
	        monthsShort = [
	            'Faoi',
	            'Gear',
	            'Màrt',
	            'Gibl',
	            'Cèit',
	            'Ògmh',
	            'Iuch',
	            'Lùn',
	            'Sult',
	            'Dàmh',
	            'Samh',
	            'Dùbh',
	        ],
	        weekdays = [
	            'Didòmhnaich',
	            'Diluain',
	            'Dimàirt',
	            'Diciadain',
	            'Diardaoin',
	            'Dihaoine',
	            'Disathairne',
	        ],
	        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
	        weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	    var gd = moment.defineLocale('gd', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsParseExact: true,
	        weekdays: weekdays,
	        weekdaysShort: weekdaysShort,
	        weekdaysMin: weekdaysMin,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[An-diugh aig] LT',
	            nextDay: '[A-màireach aig] LT',
	            nextWeek: 'dddd [aig] LT',
	            lastDay: '[An-dè aig] LT',
	            lastWeek: 'dddd [seo chaidh] [aig] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ann an %s',
	            past: 'bho chionn %s',
	            s: 'beagan diogan',
	            ss: '%d diogan',
	            m: 'mionaid',
	            mm: '%d mionaidean',
	            h: 'uair',
	            hh: '%d uairean',
	            d: 'latha',
	            dd: '%d latha',
	            M: 'mìos',
	            MM: '%d mìosan',
	            y: 'bliadhna',
	            yy: '%d bliadhna',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
	        ordinal: function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return gd;
	
	})));


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var gl = moment.defineLocale('gl', {
	        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split(
	            '_'
	        ),
	        monthsShort:
	            'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
	            },
	            lastDay: function () {
	                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (str) {
	                if (str.indexOf('un') === 0) {
	                    return 'n' + str;
	                }
	                return 'en ' + str;
	            },
	            past: 'hai %s',
	            s: 'uns segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'unha hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un ano',
	            yy: '%d anos',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return gl;
	
	})));


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Devanagari script [gom-deva]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
	            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
	            m: ['एका मिणटान', 'एक मिनूट'],
	            mm: [number + ' मिणटांनी', number + ' मिणटां'],
	            h: ['एका वरान', 'एक वर'],
	            hh: [number + ' वरांनी', number + ' वरां'],
	            d: ['एका दिसान', 'एक दीस'],
	            dd: [number + ' दिसांनी', number + ' दीस'],
	            M: ['एका म्हयन्यान', 'एक म्हयनो'],
	            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
	            y: ['एका वर्सान', 'एक वर्स'],
	            yy: [number + ' वर्सांनी', number + ' वर्सां'],
	        };
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var gomDeva = moment.defineLocale('gom-deva', {
	        months: {
	            standalone:
	                'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
	                    '_'
	                ),
	            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split(
	                '_'
	            ),
	            isFormat: /MMMM(\s)+D[oD]?/,
	        },
	        monthsShort:
	            'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
	        weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
	        weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'A h:mm [वाजतां]',
	            LTS: 'A h:mm:ss [वाजतां]',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
	            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
	            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]',
	        },
	        calendar: {
	            sameDay: '[आयज] LT',
	            nextDay: '[फाल्यां] LT',
	            nextWeek: '[फुडलो] dddd[,] LT',
	            lastDay: '[काल] LT',
	            lastWeek: '[फाटलो] dddd[,] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s',
	            past: '%s आदीं',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // the ordinal 'वेर' only applies to day of the month
	                case 'D':
	                    return number + 'वेर';
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                case 'w':
	                case 'W':
	                    return number;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week
	            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
	        },
	        meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राती') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळीं') {
	                return hour;
	            } else if (meridiem === 'दनपारां') {
	                return hour > 12 ? hour : hour + 12;
	            } else if (meridiem === 'सांजे') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'राती';
	            } else if (hour < 12) {
	                return 'सकाळीं';
	            } else if (hour < 16) {
	                return 'दनपारां';
	            } else if (hour < 20) {
	                return 'सांजे';
	            } else {
	                return 'राती';
	            }
	        },
	    });
	
	    return gomDeva;
	
	})));


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Latin script [gom-latn]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['thoddea sekondamni', 'thodde sekond'],
	            ss: [number + ' sekondamni', number + ' sekond'],
	            m: ['eka mintan', 'ek minut'],
	            mm: [number + ' mintamni', number + ' mintam'],
	            h: ['eka voran', 'ek vor'],
	            hh: [number + ' voramni', number + ' voram'],
	            d: ['eka disan', 'ek dis'],
	            dd: [number + ' disamni', number + ' dis'],
	            M: ['eka mhoinean', 'ek mhoino'],
	            MM: [number + ' mhoineamni', number + ' mhoine'],
	            y: ['eka vorsan', 'ek voros'],
	            yy: [number + ' vorsamni', number + ' vorsam'],
	        };
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var gomLatn = moment.defineLocale('gom-latn', {
	        months: {
	            standalone:
	                'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
	                    '_'
	                ),
	            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
	                '_'
	            ),
	            isFormat: /MMMM(\s)+D[oD]?/,
	        },
	        monthsShort:
	            'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
	        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'A h:mm [vazta]',
	            LTS: 'A h:mm:ss [vazta]',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY A h:mm [vazta]',
	            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
	            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
	        },
	        calendar: {
	            sameDay: '[Aiz] LT',
	            nextDay: '[Faleam] LT',
	            nextWeek: '[Fuddlo] dddd[,] LT',
	            lastDay: '[Kal] LT',
	            lastWeek: '[Fattlo] dddd[,] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s',
	            past: '%s adim',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // the ordinal 'er' only applies to day of the month
	                case 'D':
	                    return number + 'er';
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                case 'w':
	                case 'W':
	                    return number;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week
	            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
	        },
	        meridiemParse: /rati|sokallim|donparam|sanje/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'rati') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'sokallim') {
	                return hour;
	            } else if (meridiem === 'donparam') {
	                return hour > 12 ? hour : hour + 12;
	            } else if (meridiem === 'sanje') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'rati';
	            } else if (hour < 12) {
	                return 'sokallim';
	            } else if (hour < 16) {
	                return 'donparam';
	            } else if (hour < 20) {
	                return 'sanje';
	            } else {
	                return 'rati';
	            }
	        },
	    });
	
	    return gomLatn;
	
	})));


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Gujarati [gu]
	//! author : Kaushik Thanki : https://github.com/Kaushik1987
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '૧',
	            2: '૨',
	            3: '૩',
	            4: '૪',
	            5: '૫',
	            6: '૬',
	            7: '૭',
	            8: '૮',
	            9: '૯',
	            0: '૦',
	        },
	        numberMap = {
	            '૧': '1',
	            '૨': '2',
	            '૩': '3',
	            '૪': '4',
	            '૫': '5',
	            '૬': '6',
	            '૭': '7',
	            '૮': '8',
	            '૯': '9',
	            '૦': '0',
	        };
	
	    var gu = moment.defineLocale('gu', {
	        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(
	            '_'
	        ),
	        monthsShort:
	            'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(
	            '_'
	        ),
	        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
	        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm વાગ્યે',
	            LTS: 'A h:mm:ss વાગ્યે',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',
	        },
	        calendar: {
	            sameDay: '[આજ] LT',
	            nextDay: '[કાલે] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ગઇકાલે] LT',
	            lastWeek: '[પાછલા] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s મા',
	            past: '%s પહેલા',
	            s: 'અમુક પળો',
	            ss: '%d સેકંડ',
	            m: 'એક મિનિટ',
	            mm: '%d મિનિટ',
	            h: 'એક કલાક',
	            hh: '%d કલાક',
	            d: 'એક દિવસ',
	            dd: '%d દિવસ',
	            M: 'એક મહિનો',
	            MM: '%d મહિનો',
	            y: 'એક વર્ષ',
	            yy: '%d વર્ષ',
	        },
	        preparse: function (string) {
	            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
	        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'રાત') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'સવાર') {
	                return hour;
	            } else if (meridiem === 'બપોર') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'સાંજ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'રાત';
	            } else if (hour < 10) {
	                return 'સવાર';
	            } else if (hour < 17) {
	                return 'બપોર';
	            } else if (hour < 20) {
	                return 'સાંજ';
	            } else {
	                return 'રાત';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return gu;
	
	})));


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var he = moment.defineLocale('he', {
	        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split(
	            '_'
	        ),
	        monthsShort:
	            'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [ב]MMMM YYYY',
	            LLL: 'D [ב]MMMM YYYY HH:mm',
	            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
	            l: 'D/M/YYYY',
	            ll: 'D MMM YYYY',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd, D MMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[היום ב־]LT',
	            nextDay: '[מחר ב־]LT',
	            nextWeek: 'dddd [בשעה] LT',
	            lastDay: '[אתמול ב־]LT',
	            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'בעוד %s',
	            past: 'לפני %s',
	            s: 'מספר שניות',
	            ss: '%d שניות',
	            m: 'דקה',
	            mm: '%d דקות',
	            h: 'שעה',
	            hh: function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d: 'יום',
	            dd: function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M: 'חודש',
	            MM: function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y: 'שנה',
	            yy: function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            },
	        },
	        meridiemParse:
	            /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM: function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        },
	    });
	
	    return he;
	
	})));


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '१',
	            2: '२',
	            3: '३',
	            4: '४',
	            5: '५',
	            6: '६',
	            7: '७',
	            8: '८',
	            9: '९',
	            0: '०',
	        },
	        numberMap = {
	            '१': '1',
	            '२': '2',
	            '३': '3',
	            '४': '4',
	            '५': '5',
	            '६': '6',
	            '७': '7',
	            '८': '8',
	            '९': '9',
	            '०': '0',
	        },
	        monthsParse = [
	            /^जन/i,
	            /^फ़र|फर/i,
	            /^मार्च/i,
	            /^अप्रै/i,
	            /^मई/i,
	            /^जून/i,
	            /^जुल/i,
	            /^अग/i,
	            /^सितं|सित/i,
	            /^अक्टू/i,
	            /^नव|नवं/i,
	            /^दिसं|दिस/i,
	        ],
	        shortMonthsParse = [
	            /^जन/i,
	            /^फ़र/i,
	            /^मार्च/i,
	            /^अप्रै/i,
	            /^मई/i,
	            /^जून/i,
	            /^जुल/i,
	            /^अग/i,
	            /^सित/i,
	            /^अक्टू/i,
	            /^नव/i,
	            /^दिस/i,
	        ];
	
	    var hi = moment.defineLocale('hi', {
	        months: {
	            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split(
	                '_'
	            ),
	            standalone:
	                'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split(
	                    '_'
	                ),
	        },
	        monthsShort:
	            'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm बजे',
	            LTS: 'A h:mm:ss बजे',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm बजे',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे',
	        },
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: shortMonthsParse,
	
	        monthsRegex:
	            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
	
	        monthsShortRegex:
	            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
	
	        monthsStrictRegex:
	            /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,
	
	        monthsShortStrictRegex:
	            /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,
	
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[कल] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[कल] LT',
	            lastWeek: '[पिछले] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s में',
	            past: '%s पहले',
	            s: 'कुछ ही क्षण',
	            ss: '%d सेकंड',
	            m: 'एक मिनट',
	            mm: '%d मिनट',
	            h: 'एक घंटा',
	            hh: '%d घंटे',
	            d: 'एक दिन',
	            dd: '%d दिन',
	            M: 'एक महीने',
	            MM: '%d महीने',
	            y: 'एक वर्ष',
	            yy: '%d वर्ष',
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return hi;
	
	})));


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }
	
	    var hr = moment.defineLocale('hr', {
	        months: {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
	                '_'
	            ),
	            standalone:
	                'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
	                    '_'
	                ),
	        },
	        monthsShort:
	            'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'Do MMMM YYYY',
	            LLL: 'Do MMMM YYYY H:mm',
	            LLLL: 'dddd, Do MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[jučer u] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prošlu] [nedjelju] [u] LT';
	                    case 3:
	                        return '[prošlu] [srijedu] [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'par sekundi',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: 'dan',
	            dd: translate,
	            M: 'mjesec',
	            MM: translate,
	            y: 'godinu',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return hr;
	
	})));


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	//! author : Peter Viszt  : https://github.com/passatgt
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var weekEndings =
	        'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number;
	        switch (key) {
	            case 's':
	                return isFuture || withoutSuffix
	                    ? 'néhány másodperc'
	                    : 'néhány másodperce';
	            case 'ss':
	                return num + (isFuture || withoutSuffix)
	                    ? ' másodperc'
	                    : ' másodperce';
	            case 'm':
	                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'mm':
	                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'h':
	                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'hh':
	                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'd':
	                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'dd':
	                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'M':
	                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'MM':
	                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'y':
	                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	            case 'yy':
	                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (
	            (isFuture ? '' : '[múlt] ') +
	            '[' +
	            weekEndings[this.day()] +
	            '] LT[-kor]'
	        );
	    }
	
	    var hu = moment.defineLocale('hu', {
	        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'YYYY.MM.DD.',
	            LL: 'YYYY. MMMM D.',
	            LLL: 'YYYY. MMMM D. H:mm',
	            LLLL: 'YYYY. MMMM D., dddd H:mm',
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar: {
	            sameDay: '[ma] LT[-kor]',
	            nextDay: '[holnap] LT[-kor]',
	            nextWeek: function () {
	                return week.call(this, true);
	            },
	            lastDay: '[tegnap] LT[-kor]',
	            lastWeek: function () {
	                return week.call(this, false);
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s múlva',
	            past: '%s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return hu;
	
	})));


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var hyAm = moment.defineLocale('hy-am', {
	        months: {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split(
	                '_'
	            ),
	            standalone:
	                'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split(
	                    '_'
	                ),
	        },
	        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays:
	            'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split(
	                '_'
	            ),
	        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY թ.',
	            LLL: 'D MMMM YYYY թ., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY թ., HH:mm',
	        },
	        calendar: {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s հետո',
	            past: '%s առաջ',
	            s: 'մի քանի վայրկյան',
	            ss: '%d վայրկյան',
	            m: 'րոպե',
	            mm: '%d րոպե',
	            h: 'ժամ',
	            hh: '%d ժամ',
	            d: 'օր',
	            dd: '%d օր',
	            M: 'ամիս',
	            MM: '%d ամիս',
	            y: 'տարի',
	            yy: '%d տարի',
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem: function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'DDD':
	                case 'w':
	                case 'W':
	                case 'DDDo':
	                    if (number === 1) {
	                        return number + '-ին';
	                    }
	                    return number + '-րդ';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return hyAm;
	
	})));


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var id = moment.defineLocale('id', {
	        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Besok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kemarin pukul] LT',
	            lastWeek: 'dddd [lalu pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lalu',
	            s: 'beberapa detik',
	            ss: '%d detik',
	            m: 'semenit',
	            mm: '%d menit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun',
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return id;
	
	})));


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture
	                    ? 'nokkrar sekúndur'
	                    : 'nokkrum sekúndum';
	            case 'ss':
	                if (plural(number)) {
	                    return (
	                        result +
	                        (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum')
	                    );
	                }
	                return result + 'sekúnda';
	            case 'm':
	                return withoutSuffix ? 'mínúta' : 'mínútu';
	            case 'mm':
	                if (plural(number)) {
	                    return (
	                        result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum')
	                    );
	                } else if (withoutSuffix) {
	                    return result + 'mínúta';
	                }
	                return result + 'mínútu';
	            case 'hh':
	                if (plural(number)) {
	                    return (
	                        result +
	                        (withoutSuffix || isFuture
	                            ? 'klukkustundir'
	                            : 'klukkustundum')
	                    );
	                }
	                return result + 'klukkustund';
	            case 'd':
	                if (withoutSuffix) {
	                    return 'dagur';
	                }
	                return isFuture ? 'dag' : 'degi';
	            case 'dd':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'dagar';
	                    }
	                    return result + (isFuture ? 'daga' : 'dögum');
	                } else if (withoutSuffix) {
	                    return result + 'dagur';
	                }
	                return result + (isFuture ? 'dag' : 'degi');
	            case 'M':
	                if (withoutSuffix) {
	                    return 'mánuður';
	                }
	                return isFuture ? 'mánuð' : 'mánuði';
	            case 'MM':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'mánuðir';
	                    }
	                    return result + (isFuture ? 'mánuði' : 'mánuðum');
	                } else if (withoutSuffix) {
	                    return result + 'mánuður';
	                }
	                return result + (isFuture ? 'mánuð' : 'mánuði');
	            case 'y':
	                return withoutSuffix || isFuture ? 'ár' : 'ári';
	            case 'yy':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	                }
	                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }
	
	    var is = moment.defineLocale('is', {
	        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays:
	            'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split(
	                '_'
	            ),
	        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] H:mm',
	            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
	        },
	        calendar: {
	            sameDay: '[í dag kl.] LT',
	            nextDay: '[á morgun kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[í gær kl.] LT',
	            lastWeek: '[síðasta] dddd [kl.] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'eftir %s',
	            past: 'fyrir %s síðan',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: 'klukkustund',
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return is;
	
	})));


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	//! author: Marco : https://github.com/Manfre98
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var it = moment.defineLocale('it', {
	        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
	            '_'
	        ),
	        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
	            '_'
	        ),
	        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return (
	                    '[Oggi a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            nextDay: function () {
	                return (
	                    '[Domani a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            nextWeek: function () {
	                return (
	                    'dddd [a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            lastDay: function () {
	                return (
	                    '[Ieri a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return (
	                            '[La scorsa] dddd [a' +
	                            (this.hours() > 1
	                                ? 'lle '
	                                : this.hours() === 0
	                                ? ' '
	                                : "ll'") +
	                            ']LT'
	                        );
	                    default:
	                        return (
	                            '[Lo scorso] dddd [a' +
	                            (this.hours() > 1
	                                ? 'lle '
	                                : this.hours() === 0
	                                ? ' '
	                                : "ll'") +
	                            ']LT'
	                        );
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'tra %s',
	            past: '%s fa',
	            s: 'alcuni secondi',
	            ss: '%d secondi',
	            m: 'un minuto',
	            mm: '%d minuti',
	            h: "un'ora",
	            hh: '%d ore',
	            d: 'un giorno',
	            dd: '%d giorni',
	            w: 'una settimana',
	            ww: '%d settimane',
	            M: 'un mese',
	            MM: '%d mesi',
	            y: 'un anno',
	            yy: '%d anni',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return it;
	
	})));


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian (Switzerland) [it-ch]
	//! author : xfh : https://github.com/xfh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var itCh = moment.defineLocale('it-ch', {
	        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
	            '_'
	        ),
	        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
	            '_'
	        ),
	        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (s) {
	                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past: '%s fa',
	            s: 'alcuni secondi',
	            ss: '%d secondi',
	            m: 'un minuto',
	            mm: '%d minuti',
	            h: "un'ora",
	            hh: '%d ore',
	            d: 'un giorno',
	            dd: '%d giorni',
	            M: 'un mese',
	            MM: '%d mesi',
	            y: 'un anno',
	            yy: '%d anni',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return itCh;
	
	})));


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ja = moment.defineLocale('ja', {
	        eras: [
	            {
	                since: '2019-05-01',
	                offset: 1,
	                name: '令和',
	                narrow: '㋿',
	                abbr: 'R',
	            },
	            {
	                since: '1989-01-08',
	                until: '2019-04-30',
	                offset: 1,
	                name: '平成',
	                narrow: '㍻',
	                abbr: 'H',
	            },
	            {
	                since: '1926-12-25',
	                until: '1989-01-07',
	                offset: 1,
	                name: '昭和',
	                narrow: '㍼',
	                abbr: 'S',
	            },
	            {
	                since: '1912-07-30',
	                until: '1926-12-24',
	                offset: 1,
	                name: '大正',
	                narrow: '㍽',
	                abbr: 'T',
	            },
	            {
	                since: '1873-01-01',
	                until: '1912-07-29',
	                offset: 6,
	                name: '明治',
	                narrow: '㍾',
	                abbr: 'M',
	            },
	            {
	                since: '0001-01-01',
	                until: '1873-12-31',
	                offset: 1,
	                name: '西暦',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: '紀元前',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        eraYearOrdinalRegex: /(元|\d+)年/,
	        eraYearOrdinalParse: function (input, match) {
	            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
	        },
	        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日 dddd HH:mm',
	            l: 'YYYY/MM/DD',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日(ddd) HH:mm',
	        },
	        meridiemParse: /午前|午後/i,
	        isPM: function (input) {
	            return input === '午後';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar: {
	            sameDay: '[今日] LT',
	            nextDay: '[明日] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    return '[来週]dddd LT';
	                } else {
	                    return 'dddd LT';
	                }
	            },
	            lastDay: '[昨日] LT',
	            lastWeek: function (now) {
	                if (this.week() !== now.week()) {
	                    return '[先週]dddd LT';
	                } else {
	                    return 'dddd LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}日/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'y':
	                    return number === 1 ? '元年' : number + '年';
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '数秒',
	            ss: '%d秒',
	            m: '1分',
	            mm: '%d分',
	            h: '1時間',
	            hh: '%d時間',
	            d: '1日',
	            dd: '%d日',
	            M: '1ヶ月',
	            MM: '%dヶ月',
	            y: '1年',
	            yy: '%d年',
	        },
	    });
	
	    return ja;
	
	})));


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var jv = moment.defineLocale('jv', {
	        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar: {
	            sameDay: '[Dinten puniko pukul] LT',
	            nextDay: '[Mbenjang pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kala wingi pukul] LT',
	            lastWeek: 'dddd [kepengker pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'wonten ing %s',
	            past: '%s ingkang kepengker',
	            s: 'sawetawis detik',
	            ss: '%d detik',
	            m: 'setunggal menit',
	            mm: '%d menit',
	            h: 'setunggal jam',
	            hh: '%d jam',
	            d: 'sedinten',
	            dd: '%d dinten',
	            M: 'sewulan',
	            MM: '%d wulan',
	            y: 'setaun',
	            yy: '%d taun',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return jv;
	
	})));


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/IrakliJani
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ka = moment.defineLocale('ka', {
	        months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split(
	            '_'
	        ),
	        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays: {
	            standalone:
	                'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split(
	                    '_'
	                ),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split(
	                '_'
	            ),
	            isFormat: /(წინა|შემდეგ)/,
	        },
	        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[დღეს] LT[-ზე]',
	            nextDay: '[ხვალ] LT[-ზე]',
	            lastDay: '[გუშინ] LT[-ზე]',
	            nextWeek: '[შემდეგ] dddd LT[-ზე]',
	            lastWeek: '[წინა] dddd LT-ზე',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (s) {
	                return s.replace(
	                    /(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,
	                    function ($0, $1, $2) {
	                        return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
	                    }
	                );
	            },
	            past: function (s) {
	                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if (/წელი/.test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	                return s;
	            },
	            s: 'რამდენიმე წამი',
	            ss: '%d წამი',
	            m: 'წუთი',
	            mm: '%d წუთი',
	            h: 'საათი',
	            hh: '%d საათი',
	            d: 'დღე',
	            dd: '%d დღე',
	            M: 'თვე',
	            MM: '%d თვე',
	            y: 'წელი',
	            yy: '%d წელი',
	        },
	        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal: function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if (
	                number < 20 ||
	                (number <= 100 && number % 20 === 0) ||
	                number % 100 === 0
	            ) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week: {
	            dow: 1,
	            doy: 7,
	        },
	    });
	
	    return ka;
	
	})));


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші',
	    };
	
	    var kk = moment.defineLocale('kk', {
	        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split(
	            '_'
	        ),
	        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split(
	            '_'
	        ),
	        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Бүгін сағат] LT',
	            nextDay: '[Ертең сағат] LT',
	            nextWeek: 'dddd [сағат] LT',
	            lastDay: '[Кеше сағат] LT',
	            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ішінде',
	            past: '%s бұрын',
	            s: 'бірнеше секунд',
	            ss: '%d секунд',
	            m: 'бір минут',
	            mm: '%d минут',
	            h: 'бір сағат',
	            hh: '%d сағат',
	            d: 'бір күн',
	            dd: '%d күн',
	            M: 'бір ай',
	            MM: '%d ай',
	            y: 'бір жыл',
	            yy: '%d жыл',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return kk;
	
	})));


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '១',
	            2: '២',
	            3: '៣',
	            4: '៤',
	            5: '៥',
	            6: '៦',
	            7: '៧',
	            8: '៨',
	            9: '៩',
	            0: '០',
	        },
	        numberMap = {
	            '១': '1',
	            '២': '2',
	            '៣': '3',
	            '៤': '4',
	            '៥': '5',
	            '៦': '6',
	            '៧': '7',
	            '៨': '8',
	            '៩': '9',
	            '០': '0',
	        };
	
	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
	            '_'
	        ),
	        monthsShort:
	            'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
	                '_'
	            ),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
	        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ព្រឹក|ល្ងាច/,
	        isPM: function (input) {
	            return input === 'ល្ងាច';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ព្រឹក';
	            } else {
	                return 'ល្ងាច';
	            }
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            ss: '%d វិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ',
	        },
	        dayOfMonthOrdinalParse: /ទី\d{1,2}/,
	        ordinal: 'ទី%d',
	        preparse: function (string) {
	            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return km;
	
	})));


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kannada [kn]
	//! author : Rajeev Naik : https://github.com/rajeevnaikte
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '೧',
	            2: '೨',
	            3: '೩',
	            4: '೪',
	            5: '೫',
	            6: '೬',
	            7: '೭',
	            8: '೮',
	            9: '೯',
	            0: '೦',
	        },
	        numberMap = {
	            '೧': '1',
	            '೨': '2',
	            '೩': '3',
	            '೪': '4',
	            '೫': '5',
	            '೬': '6',
	            '೭': '7',
	            '೮': '8',
	            '೯': '9',
	            '೦': '0',
	        };
	
	    var kn = moment.defineLocale('kn', {
	        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split(
	            '_'
	        ),
	        monthsShort:
	            'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split(
	            '_'
	        ),
	        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm',
	        },
	        calendar: {
	            sameDay: '[ಇಂದು] LT',
	            nextDay: '[ನಾಳೆ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ನಿನ್ನೆ] LT',
	            lastWeek: '[ಕೊನೆಯ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ನಂತರ',
	            past: '%s ಹಿಂದೆ',
	            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
	            ss: '%d ಸೆಕೆಂಡುಗಳು',
	            m: 'ಒಂದು ನಿಮಿಷ',
	            mm: '%d ನಿಮಿಷ',
	            h: 'ಒಂದು ಗಂಟೆ',
	            hh: '%d ಗಂಟೆ',
	            d: 'ಒಂದು ದಿನ',
	            dd: '%d ದಿನ',
	            M: 'ಒಂದು ತಿಂಗಳು',
	            MM: '%d ತಿಂಗಳು',
	            y: 'ಒಂದು ವರ್ಷ',
	            yy: '%d ವರ್ಷ',
	        },
	        preparse: function (string) {
	            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ರಾತ್ರಿ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	                return hour;
	            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ಸಂಜೆ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ರಾತ್ರಿ';
	            } else if (hour < 10) {
	                return 'ಬೆಳಿಗ್ಗೆ';
	            } else if (hour < 17) {
	                return 'ಮಧ್ಯಾಹ್ನ';
	            } else if (hour < 20) {
	                return 'ಸಂಜೆ';
	            } else {
	                return 'ರಾತ್ರಿ';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	        ordinal: function (number) {
	            return number + 'ನೇ';
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return kn;
	
	})));


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ko = moment.defineLocale('ko', {
	        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split(
	            '_'
	        ),
	        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'YYYY.MM.DD.',
	            LL: 'YYYY년 MMMM D일',
	            LLL: 'YYYY년 MMMM D일 A h:mm',
	            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
	            l: 'YYYY.MM.DD.',
	            ll: 'YYYY년 MMMM D일',
	            lll: 'YYYY년 MMMM D일 A h:mm',
	            llll: 'YYYY년 MMMM D일 dddd A h:mm',
	        },
	        calendar: {
	            sameDay: '오늘 LT',
	            nextDay: '내일 LT',
	            nextWeek: 'dddd LT',
	            lastDay: '어제 LT',
	            lastWeek: '지난주 dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s 후',
	            past: '%s 전',
	            s: '몇 초',
	            ss: '%d초',
	            m: '1분',
	            mm: '%d분',
	            h: '한 시간',
	            hh: '%d시간',
	            d: '하루',
	            dd: '%d일',
	            M: '한 달',
	            MM: '%d달',
	            y: '일 년',
	            yy: '%d년',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '일';
	                case 'M':
	                    return number + '월';
	                case 'w':
	                case 'W':
	                    return number + '주';
	                default:
	                    return number;
	            }
	        },
	        meridiemParse: /오전|오후/,
	        isPM: function (token) {
	            return token === '오후';
	        },
	        meridiem: function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        },
	    });
	
	    return ko;
	
	})));


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kurdish [ku]
	//! author : Shahram Mebashar : https://github.com/ShahramMebashar
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '١',
	            2: '٢',
	            3: '٣',
	            4: '٤',
	            5: '٥',
	            6: '٦',
	            7: '٧',
	            8: '٨',
	            9: '٩',
	            0: '٠',
	        },
	        numberMap = {
	            '١': '1',
	            '٢': '2',
	            '٣': '3',
	            '٤': '4',
	            '٥': '5',
	            '٦': '6',
	            '٧': '7',
	            '٨': '8',
	            '٩': '9',
	            '٠': '0',
	        },
	        months = [
	            'کانونی دووەم',
	            'شوبات',
	            'ئازار',
	            'نیسان',
	            'ئایار',
	            'حوزەیران',
	            'تەمموز',
	            'ئاب',
	            'ئەیلوول',
	            'تشرینی یەكەم',
	            'تشرینی دووەم',
	            'كانونی یەکەم',
	        ];
	
	    var ku = moment.defineLocale('ku', {
	        months: months,
	        monthsShort: months,
	        weekdays:
	            'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split(
	                '_'
	            ),
	        weekdaysShort:
	            'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
	        weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ئێواره‌|به‌یانی/,
	        isPM: function (input) {
	            return /ئێواره‌/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'به‌یانی';
	            } else {
	                return 'ئێواره‌';
	            }
	        },
	        calendar: {
	            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
	            nextDay: '[به‌یانی كاتژمێر] LT',
	            nextWeek: 'dddd [كاتژمێر] LT',
	            lastDay: '[دوێنێ كاتژمێر] LT',
	            lastWeek: 'dddd [كاتژمێر] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'له‌ %s',
	            past: '%s',
	            s: 'چه‌ند چركه‌یه‌ك',
	            ss: 'چركه‌ %d',
	            m: 'یه‌ك خوله‌ك',
	            mm: '%d خوله‌ك',
	            h: 'یه‌ك كاتژمێر',
	            hh: '%d كاتژمێر',
	            d: 'یه‌ك ڕۆژ',
	            dd: '%d ڕۆژ',
	            M: 'یه‌ك مانگ',
	            MM: '%d مانگ',
	            y: 'یه‌ك ساڵ',
	            yy: '%d ساڵ',
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return ku;
	
	})));


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү',
	    };
	
	    var ky = moment.defineLocale('ky', {
	        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
	            '_'
	        ),
	        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split(
	            '_'
	        ),
	        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split(
	            '_'
	        ),
	        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Бүгүн саат] LT',
	            nextDay: '[Эртең саат] LT',
	            nextWeek: 'dddd [саат] LT',
	            lastDay: '[Кечээ саат] LT',
	            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ичинде',
	            past: '%s мурун',
	            s: 'бирнече секунд',
	            ss: '%d секунд',
	            m: 'бир мүнөт',
	            mm: '%d мүнөт',
	            h: 'бир саат',
	            hh: '%d саат',
	            d: 'бир күн',
	            dd: '%d күн',
	            M: 'бир ай',
	            MM: '%d ай',
	            y: 'бир жыл',
	            yy: '%d жыл',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return ky;
	
	})));


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eng Minutt', 'enger Minutt'],
	            h: ['eng Stonn', 'enger Stonn'],
	            d: ['een Dag', 'engem Dag'],
	            M: ['ee Mount', 'engem Mount'],
	            y: ['ee Joer', 'engem Joer'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10,
	                firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }
	
	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split(
	                '_'
	            ),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            },
	        },
	        relativeTime: {
	            future: processFutureTime,
	            past: processPastTime,
	            s: 'e puer Sekonnen',
	            ss: '%d Sekonnen',
	            m: processRelativeTime,
	            mm: '%d Minutten',
	            h: processRelativeTime,
	            hh: '%d Stonnen',
	            d: processRelativeTime,
	            dd: '%d Deeg',
	            M: processRelativeTime,
	            MM: '%d Méint',
	            y: processRelativeTime,
	            yy: '%d Joer',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return lb;
	
	})));


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var lo = moment.defineLocale('lo', {
	        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
	                '_'
	            ),
	        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'ວັນdddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar: {
	            sameDay: '[ມື້ນີ້ເວລາ] LT',
	            nextDay: '[ມື້ອື່ນເວລາ] LT',
	            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ອີກ %s',
	            past: '%sຜ່ານມາ',
	            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
	            ss: '%d ວິນາທີ',
	            m: '1 ນາທີ',
	            mm: '%d ນາທີ',
	            h: '1 ຊົ່ວໂມງ',
	            hh: '%d ຊົ່ວໂມງ',
	            d: '1 ມື້',
	            dd: '%d ມື້',
	            M: '1 ເດືອນ',
	            MM: '%d ເດືອນ',
	            y: '1 ປີ',
	            yy: '%d ປີ',
	        },
	        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	        ordinal: function (number) {
	            return 'ທີ່' + number;
	        },
	    });
	
	    return lo;
	
	})));


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var units = {
	        ss: 'sekundė_sekundžių_sekundes',
	        m: 'minutė_minutės_minutę',
	        mm: 'minutės_minučių_minutes',
	        h: 'valanda_valandos_valandą',
	        hh: 'valandos_valandų_valandas',
	        d: 'diena_dienos_dieną',
	        dd: 'dienos_dienų_dienas',
	        M: 'mėnuo_mėnesio_mėnesį',
	        MM: 'mėnesiai_mėnesių_mėnesius',
	        y: 'metai_metų_metus',
	        yy: 'metai_metų_metus',
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix
	            ? forms(key)[0]
	            : isFuture
	            ? forms(key)[1]
	            : forms(key)[2];
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return (
	                result + translateSingular(number, withoutSuffix, key[0], isFuture)
	            );
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months: {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split(
	                '_'
	            ),
	            standalone:
	                'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split(
	                    '_'
	                ),
	            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
	        },
	        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays: {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split(
	                '_'
	            ),
	            standalone:
	                'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split(
	                    '_'
	                ),
	            isFormat: /dddd HH:mm/,
	        },
	        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY [m.] MMMM D [d.]',
	            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l: 'YYYY-MM-DD',
	            ll: 'YYYY [m.] MMMM D [d.]',
	            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
	        },
	        calendar: {
	            sameDay: '[Šiandien] LT',
	            nextDay: '[Rytoj] LT',
	            nextWeek: 'dddd LT',
	            lastDay: '[Vakar] LT',
	            lastWeek: '[Praėjusį] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'po %s',
	            past: 'prieš %s',
	            s: translateSeconds,
	            ss: translate,
	            m: translateSingular,
	            mm: translate,
	            h: translateSingular,
	            hh: translate,
	            d: translateSingular,
	            dd: translate,
	            M: translateSingular,
	            MM: translate,
	            y: translateSingular,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	        ordinal: function (number) {
	            return number + '-oji';
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return lt;
	
	})));


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var units = {
	        ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
	        m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        h: 'stundas_stundām_stunda_stundas'.split('_'),
	        hh: 'stundas_stundām_stunda_stundas'.split('_'),
	        d: 'dienas_dienām_diena_dienas'.split('_'),
	        dd: 'dienas_dienām_diena_dienas'.split('_'),
	        M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        y: 'gada_gadiem_gads_gadi'.split('_'),
	        yy: 'gada_gadiem_gads_gadi'.split('_'),
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }
	
	    var lv = moment.defineLocale('lv', {
	        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays:
	            'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split(
	                '_'
	            ),
	        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY.',
	            LL: 'YYYY. [gada] D. MMMM',
	            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
	        },
	        calendar: {
	            sameDay: '[Šodien pulksten] LT',
	            nextDay: '[Rīt pulksten] LT',
	            nextWeek: 'dddd [pulksten] LT',
	            lastDay: '[Vakar pulksten] LT',
	            lastWeek: '[Pagājušā] dddd [pulksten] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'pēc %s',
	            past: 'pirms %s',
	            s: relativeSeconds,
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithSingular,
	            mm: relativeTimeWithPlural,
	            h: relativeTimeWithSingular,
	            hh: relativeTimeWithPlural,
	            d: relativeTimeWithSingular,
	            dd: relativeTimeWithPlural,
	            M: relativeTimeWithSingular,
	            MM: relativeTimeWithPlural,
	            y: relativeTimeWithSingular,
	            yy: relativeTimeWithPlural,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return lv;
	
	})));


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var translator = {
	        words: {
	            //Different grammatical cases
	            ss: ['sekund', 'sekunda', 'sekundi'],
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina'],
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1
	                ? wordKey[0]
	                : number >= 2 && number <= 4
	                ? wordKey[1]
	                : wordKey[2];
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return (
	                    number +
	                    ' ' +
	                    translator.correctGrammaticalCase(number, wordKey)
	                );
	            }
	        },
	    };
	
	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',
	
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[juče u] LT',
	            lastWeek: function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT',
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'nekoliko sekundi',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: 'dan',
	            dd: translator.translate,
	            M: 'mjesec',
	            MM: translator.translate,
	            y: 'godinu',
	            yy: translator.translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return me;
	
	})));


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var mi = moment.defineLocale('mi', {
	        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split(
	            '_'
	        ),
	        monthsShort:
	            'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
	                '_'
	            ),
	        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [i] HH:mm',
	            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
	        },
	        calendar: {
	            sameDay: '[i teie mahana, i] LT',
	            nextDay: '[apopo i] LT',
	            nextWeek: 'dddd [i] LT',
	            lastDay: '[inanahi i] LT',
	            lastWeek: 'dddd [whakamutunga i] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'i roto i %s',
	            past: '%s i mua',
	            s: 'te hēkona ruarua',
	            ss: '%d hēkona',
	            m: 'he meneti',
	            mm: '%d meneti',
	            h: 'te haora',
	            hh: '%d haora',
	            d: 'he ra',
	            dd: '%d ra',
	            M: 'he marama',
	            MM: '%d marama',
	            y: 'he tau',
	            yy: '%d tau',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return mi;
	
	})));


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	//! author : Sashko Todorov : https://github.com/bkyceh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var mk = moment.defineLocale('mk', {
	        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split(
	            '_'
	        ),
	        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split(
	            '_'
	        ),
	        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[Денес во] LT',
	            nextDay: '[Утре во] LT',
	            nextWeek: '[Во] dddd [во] LT',
	            lastDay: '[Вчера во] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Изминатата] dddd [во] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: 'пред %s',
	            s: 'неколку секунди',
	            ss: '%d секунди',
	            m: 'една минута',
	            mm: '%d минути',
	            h: 'еден час',
	            hh: '%d часа',
	            d: 'еден ден',
	            dd: '%d дена',
	            M: 'еден месец',
	            MM: '%d месеци',
	            y: 'една година',
	            yy: '%d години',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal: function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return mk;
	
	})));


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ml = moment.defineLocale('ml', {
	        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split(
	                '_'
	            ),
	        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm -നു',
	            LTS: 'A h:mm:ss -നു',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm -നു',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു',
	        },
	        calendar: {
	            sameDay: '[ഇന്ന്] LT',
	            nextDay: '[നാളെ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ഇന്നലെ] LT',
	            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s കഴിഞ്ഞ്',
	            past: '%s മുൻപ്',
	            s: 'അൽപ നിമിഷങ്ങൾ',
	            ss: '%d സെക്കൻഡ്',
	            m: 'ഒരു മിനിറ്റ്',
	            mm: '%d മിനിറ്റ്',
	            h: 'ഒരു മണിക്കൂർ',
	            hh: '%d മണിക്കൂർ',
	            d: 'ഒരു ദിവസം',
	            dd: '%d ദിവസം',
	            M: 'ഒരു മാസം',
	            MM: '%d മാസം',
	            y: 'ഒരു വർഷം',
	            yy: '%d വർഷം',
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                (meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം'
	            ) {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        },
	    });
	
	    return ml;
	
	})));


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Mongolian [mn]
	//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function translate(number, withoutSuffix, key, isFuture) {
	        switch (key) {
	            case 's':
	                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
	            case 'ss':
	                return number + (withoutSuffix ? ' секунд' : ' секундын');
	            case 'm':
	            case 'mm':
	                return number + (withoutSuffix ? ' минут' : ' минутын');
	            case 'h':
	            case 'hh':
	                return number + (withoutSuffix ? ' цаг' : ' цагийн');
	            case 'd':
	            case 'dd':
	                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
	            case 'M':
	            case 'MM':
	                return number + (withoutSuffix ? ' сар' : ' сарын');
	            case 'y':
	            case 'yy':
	                return number + (withoutSuffix ? ' жил' : ' жилийн');
	            default:
	                return number;
	        }
	    }
	
	    var mn = moment.defineLocale('mn', {
	        months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split(
	            '_'
	        ),
	        monthsShort:
	            '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
	        weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
	        weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY оны MMMMын D',
	            LLL: 'YYYY оны MMMMын D HH:mm',
	            LLLL: 'dddd, YYYY оны MMMMын D HH:mm',
	        },
	        meridiemParse: /ҮӨ|ҮХ/i,
	        isPM: function (input) {
	            return input === 'ҮХ';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ҮӨ';
	            } else {
	                return 'ҮХ';
	            }
	        },
	        calendar: {
	            sameDay: '[Өнөөдөр] LT',
	            nextDay: '[Маргааш] LT',
	            nextWeek: '[Ирэх] dddd LT',
	            lastDay: '[Өчигдөр] LT',
	            lastWeek: '[Өнгөрсөн] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s дараа',
	            past: '%s өмнө',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + ' өдөр';
	                default:
	                    return number;
	            }
	        },
	    });
	
	    return mn;
	
	})));


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '१',
	            2: '२',
	            3: '३',
	            4: '४',
	            5: '५',
	            6: '६',
	            7: '७',
	            8: '८',
	            9: '९',
	            0: '०',
	        },
	        numberMap = {
	            '१': '1',
	            '२': '2',
	            '३': '3',
	            '४': '4',
	            '५': '5',
	            '६': '6',
	            '७': '7',
	            '८': '8',
	            '९': '9',
	            '०': '0',
	        };
	
	    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's':
	                    output = 'काही सेकंद';
	                    break;
	                case 'ss':
	                    output = '%d सेकंद';
	                    break;
	                case 'm':
	                    output = 'एक मिनिट';
	                    break;
	                case 'mm':
	                    output = '%d मिनिटे';
	                    break;
	                case 'h':
	                    output = 'एक तास';
	                    break;
	                case 'hh':
	                    output = '%d तास';
	                    break;
	                case 'd':
	                    output = 'एक दिवस';
	                    break;
	                case 'dd':
	                    output = '%d दिवस';
	                    break;
	                case 'M':
	                    output = 'एक महिना';
	                    break;
	                case 'MM':
	                    output = '%d महिने';
	                    break;
	                case 'y':
	                    output = 'एक वर्ष';
	                    break;
	                case 'yy':
	                    output = '%d वर्षे';
	                    break;
	            }
	        } else {
	            switch (string) {
	                case 's':
	                    output = 'काही सेकंदां';
	                    break;
	                case 'ss':
	                    output = '%d सेकंदां';
	                    break;
	                case 'm':
	                    output = 'एका मिनिटा';
	                    break;
	                case 'mm':
	                    output = '%d मिनिटां';
	                    break;
	                case 'h':
	                    output = 'एका तासा';
	                    break;
	                case 'hh':
	                    output = '%d तासां';
	                    break;
	                case 'd':
	                    output = 'एका दिवसा';
	                    break;
	                case 'dd':
	                    output = '%d दिवसां';
	                    break;
	                case 'M':
	                    output = 'एका महिन्या';
	                    break;
	                case 'MM':
	                    output = '%d महिन्यां';
	                    break;
	                case 'y':
	                    output = 'एका वर्षा';
	                    break;
	                case 'yy':
	                    output = '%d वर्षां';
	                    break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }
	
	    var mr = moment.defineLocale('mr', {
	        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
	            '_'
	        ),
	        monthsShort:
	            'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm वाजता',
	            LTS: 'A h:mm:ss वाजता',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm वाजता',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता',
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[उद्या] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            ss: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr,
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
	                return hour;
	            } else if (
	                meridiem === 'दुपारी' ||
	                meridiem === 'सायंकाळी' ||
	                meridiem === 'रात्री'
	            ) {
	                return hour >= 12 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour >= 0 && hour < 6) {
	                return 'पहाटे';
	            } else if (hour < 12) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return mr;
	
	})));


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ms = moment.defineLocale('ms', {
	        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Esok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kelmarin pukul] LT',
	            lastWeek: 'dddd [lepas pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lepas',
	            s: 'beberapa saat',
	            ss: '%d saat',
	            m: 'seminit',
	            mm: '%d minit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return ms;
	
	})));


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var msMy = moment.defineLocale('ms-my', {
	        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Esok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kelmarin pukul] LT',
	            lastWeek: 'dddd [lepas pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lepas',
	            s: 'beberapa saat',
	            ss: '%d saat',
	            m: 'seminit',
	            mm: '%d minit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return msMy;
	
	})));


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maltese (Malta) [mt]
	//! author : Alessandro Maruccia : https://github.com/alesma
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var mt = moment.defineLocale('mt', {
	        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
	        weekdays:
	            'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split(
	                '_'
	            ),
	        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
	        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Illum fil-]LT',
	            nextDay: '[Għada fil-]LT',
	            nextWeek: 'dddd [fil-]LT',
	            lastDay: '[Il-bieraħ fil-]LT',
	            lastWeek: 'dddd [li għadda] [fil-]LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'f’ %s',
	            past: '%s ilu',
	            s: 'ftit sekondi',
	            ss: '%d sekondi',
	            m: 'minuta',
	            mm: '%d minuti',
	            h: 'siegħa',
	            hh: '%d siegħat',
	            d: 'ġurnata',
	            dd: '%d ġranet',
	            M: 'xahar',
	            MM: '%d xhur',
	            y: 'sena',
	            yy: '%d sni',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return mt;
	
	})));


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '၁',
	            2: '၂',
	            3: '၃',
	            4: '၄',
	            5: '၅',
	            6: '၆',
	            7: '၇',
	            8: '၈',
	            9: '၉',
	            0: '၀',
	        },
	        numberMap = {
	            '၁': '1',
	            '၂': '2',
	            '၃': '3',
	            '၄': '4',
	            '၅': '5',
	            '၆': '6',
	            '၇': '7',
	            '၈': '8',
	            '၉': '9',
	            '၀': '0',
	        };
	
	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split(
	            '_'
	        ),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split(
	            '_'
	        ),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            ss: '%d စက္ကန့်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်',
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return my;
	
	})));


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	//!           Stephen Ramthun : https://github.com/stephenramthun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var nb = moment.defineLocale('nb', {
	        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s siden',
	            s: 'noen sekunder',
	            ss: '%d sekunder',
	            m: 'ett minutt',
	            mm: '%d minutter',
	            h: 'en time',
	            hh: '%d timer',
	            d: 'en dag',
	            dd: '%d dager',
	            w: 'en uke',
	            ww: '%d uker',
	            M: 'en måned',
	            MM: '%d måneder',
	            y: 'ett år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nb;
	
	})));


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '१',
	            2: '२',
	            3: '३',
	            4: '४',
	            5: '५',
	            6: '६',
	            7: '७',
	            8: '८',
	            9: '९',
	            0: '०',
	        },
	        numberMap = {
	            '१': '1',
	            '२': '2',
	            '३': '3',
	            '४': '4',
	            '५': '5',
	            '६': '6',
	            '७': '7',
	            '८': '8',
	            '९': '9',
	            '०': '0',
	        };
	
	    var ne = moment.defineLocale('ne', {
	        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split(
	            '_'
	        ),
	        monthsShort:
	            'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split(
	            '_'
	        ),
	        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'Aको h:mm बजे',
	            LTS: 'Aको h:mm:ss बजे',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे',
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[भोलि] LT',
	            nextWeek: '[आउँदो] dddd[,] LT',
	            lastDay: '[हिजो] LT',
	            lastWeek: '[गएको] dddd[,] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sमा',
	            past: '%s अगाडि',
	            s: 'केही क्षण',
	            ss: '%d सेकेण्ड',
	            m: 'एक मिनेट',
	            mm: '%d मिनेट',
	            h: 'एक घण्टा',
	            hh: '%d घण्टा',
	            d: 'एक दिन',
	            dd: '%d दिन',
	            M: 'एक महिना',
	            MM: '%d महिना',
	            y: 'एक बर्ष',
	            yy: '%d बर्ष',
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return ne;
	
	})));


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortWithDots =
	            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots =
	            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        monthsParse = [
	            /^jan/i,
	            /^feb/i,
	            /^maart|mrt.?$/i,
	            /^apr/i,
	            /^mei$/i,
	            /^jun[i.]?$/i,
	            /^jul[i.]?$/i,
	            /^aug/i,
	            /^sep/i,
	            /^okt/i,
	            /^nov/i,
	            /^dec/i,
	        ],
	        monthsRegex =
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	    var nl = moment.defineLocale('nl', {
	        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex:
	            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        weekdays:
	            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'over %s',
	            past: '%s geleden',
	            s: 'een paar seconden',
	            ss: '%d seconden',
	            m: 'één minuut',
	            mm: '%d minuten',
	            h: 'één uur',
	            hh: '%d uur',
	            d: 'één dag',
	            dd: '%d dagen',
	            w: 'één week',
	            ww: '%d weken',
	            M: 'één maand',
	            MM: '%d maanden',
	            y: 'één jaar',
	            yy: '%d jaar',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            );
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nl;
	
	})));


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortWithDots =
	            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots =
	            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        monthsParse = [
	            /^jan/i,
	            /^feb/i,
	            /^maart|mrt.?$/i,
	            /^apr/i,
	            /^mei$/i,
	            /^jun[i.]?$/i,
	            /^jul[i.]?$/i,
	            /^aug/i,
	            /^sep/i,
	            /^okt/i,
	            /^nov/i,
	            /^dec/i,
	        ],
	        monthsRegex =
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	    var nlBe = moment.defineLocale('nl-be', {
	        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex:
	            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        weekdays:
	            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'over %s',
	            past: '%s geleden',
	            s: 'een paar seconden',
	            ss: '%d seconden',
	            m: 'één minuut',
	            mm: '%d minuten',
	            h: 'één uur',
	            hh: '%d uur',
	            d: 'één dag',
	            dd: '%d dagen',
	            M: 'één maand',
	            MM: '%d maanden',
	            y: 'één jaar',
	            yy: '%d jaar',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            );
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nlBe;
	
	})));


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! authors : https://github.com/mechuwind
	//!           Stephen Ramthun : https://github.com/stephenramthun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var nn = moment.defineLocale('nn', {
	        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
	        weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] H:mm',
	            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s sidan',
	            s: 'nokre sekund',
	            ss: '%d sekund',
	            m: 'eit minutt',
	            mm: '%d minutt',
	            h: 'ein time',
	            hh: '%d timar',
	            d: 'ein dag',
	            dd: '%d dagar',
	            w: 'ei veke',
	            ww: '%d veker',
	            M: 'ein månad',
	            MM: '%d månader',
	            y: 'eit år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nn;
	
	})));


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Occitan, lengadocian dialecte [oc-lnc]
	//! author : Quentin PAGÈS : https://github.com/Quenty31
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ocLnc = moment.defineLocale('oc-lnc', {
	        months: {
	            standalone:
	                'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split(
	                    '_'
	                ),
	            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
	                '_'
	            ),
	            isFormat: /D[oD]?(\s)+MMMM/,
	        },
	        monthsShort:
	            'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split(
	            '_'
	        ),
	        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [de] YYYY',
	            ll: 'D MMM YYYY',
	            LLL: 'D MMMM [de] YYYY [a] H:mm',
	            lll: 'D MMM YYYY, H:mm',
	            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
	            llll: 'ddd D MMM YYYY, H:mm',
	        },
	        calendar: {
	            sameDay: '[uèi a] LT',
	            nextDay: '[deman a] LT',
	            nextWeek: 'dddd [a] LT',
	            lastDay: '[ièr a] LT',
	            lastWeek: 'dddd [passat a] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: "d'aquí %s",
	            past: 'fa %s',
	            s: 'unas segondas',
	            ss: '%d segondas',
	            m: 'una minuta',
	            mm: '%d minutas',
	            h: 'una ora',
	            hh: '%d oras',
	            d: 'un jorn',
	            dd: '%d jorns',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal: function (number, period) {
	            var output =
	                number === 1
	                    ? 'r'
	                    : number === 2
	                    ? 'n'
	                    : number === 3
	                    ? 'r'
	                    : number === 4
	                    ? 't'
	                    : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4,
	        },
	    });
	
	    return ocLnc;
	
	})));


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '੧',
	            2: '੨',
	            3: '੩',
	            4: '੪',
	            5: '੫',
	            6: '੬',
	            7: '੭',
	            8: '੮',
	            9: '੯',
	            0: '੦',
	        },
	        numberMap = {
	            '੧': '1',
	            '੨': '2',
	            '੩': '3',
	            '੪': '4',
	            '੫': '5',
	            '੬': '6',
	            '੭': '7',
	            '੮': '8',
	            '੯': '9',
	            '੦': '0',
	        };
	
	    var paIn = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
	        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
	                '_'
	            ),
	        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split(
	            '_'
	        ),
	        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm ਵਜੇ',
	            LTS: 'A h:mm:ss ਵਜੇ',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ',
	        },
	        calendar: {
	            sameDay: '[ਅਜ] LT',
	            nextDay: '[ਕਲ] LT',
	            nextWeek: '[ਅਗਲਾ] dddd, LT',
	            lastDay: '[ਕਲ] LT',
	            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ਵਿੱਚ',
	            past: '%s ਪਿਛਲੇ',
	            s: 'ਕੁਝ ਸਕਿੰਟ',
	            ss: '%d ਸਕਿੰਟ',
	            m: 'ਇਕ ਮਿੰਟ',
	            mm: '%d ਮਿੰਟ',
	            h: 'ਇੱਕ ਘੰਟਾ',
	            hh: '%d ਘੰਟੇ',
	            d: 'ਇੱਕ ਦਿਨ',
	            dd: '%d ਦਿਨ',
	            M: 'ਇੱਕ ਮਹੀਨਾ',
	            MM: '%d ਮਹੀਨੇ',
	            y: 'ਇੱਕ ਸਾਲ',
	            yy: '%d ਸਾਲ',
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return paIn;
	
	})));


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsNominative =
	            'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split(
	                '_'
	            ),
	        monthsSubjective =
	            'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split(
	                '_'
	            ),
	        monthsParse = [
	            /^sty/i,
	            /^lut/i,
	            /^mar/i,
	            /^kwi/i,
	            /^maj/i,
	            /^cze/i,
	            /^lip/i,
	            /^sie/i,
	            /^wrz/i,
	            /^paź/i,
	            /^lis/i,
	            /^gru/i,
	        ];
	    function plural(n) {
	        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                return result + (plural(number) ? 'sekundy' : 'sekund');
	            case 'm':
	                return withoutSuffix ? 'minuta' : 'minutę';
	            case 'mm':
	                return result + (plural(number) ? 'minuty' : 'minut');
	            case 'h':
	                return withoutSuffix ? 'godzina' : 'godzinę';
	            case 'hh':
	                return result + (plural(number) ? 'godziny' : 'godzin');
	            case 'ww':
	                return result + (plural(number) ? 'tygodnie' : 'tygodni');
	            case 'MM':
	                return result + (plural(number) ? 'miesiące' : 'miesięcy');
	            case 'yy':
	                return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }
	
	    var pl = moment.defineLocale('pl', {
	        months: function (momentToFormat, format) {
	            if (!momentToFormat) {
	                return monthsNominative;
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays:
	            'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W niedzielę o] LT';
	
	                    case 2:
	                        return '[We wtorek o] LT';
	
	                    case 3:
	                        return '[W środę o] LT';
	
	                    case 6:
	                        return '[W sobotę o] LT';
	
	                    default:
	                        return '[W] dddd [o] LT';
	                }
	            },
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W zeszłą niedzielę o] LT';
	                    case 3:
	                        return '[W zeszłą środę o] LT';
	                    case 6:
	                        return '[W zeszłą sobotę o] LT';
	                    default:
	                        return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: '%s temu',
	            s: 'kilka sekund',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: '1 dzień',
	            dd: '%d dni',
	            w: 'tydzień',
	            ww: translate,
	            M: 'miesiąc',
	            MM: translate,
	            y: 'rok',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return pl;
	
	})));


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var pt = moment.defineLocale('pt', {
	        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
	            '_'
	        ),
	        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays:
	            'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split(
	                '_'
	            ),
	        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return this.day() === 0 || this.day() === 6
	                    ? '[Último] dddd [às] LT' // Saturday + Sunday
	                    : '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'em %s',
	            past: 'há %s',
	            s: 'segundos',
	            ss: '%d segundos',
	            m: 'um minuto',
	            mm: '%d minutos',
	            h: 'uma hora',
	            hh: '%d horas',
	            d: 'um dia',
	            dd: '%d dias',
	            w: 'uma semana',
	            ww: '%d semanas',
	            M: 'um mês',
	            MM: '%d meses',
	            y: 'um ano',
	            yy: '%d anos',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return pt;
	
	})));


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ptBr = moment.defineLocale('pt-br', {
	        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
	            '_'
	        ),
	        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays:
	            'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split(
	                '_'
	            ),
	        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
	        weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return this.day() === 0 || this.day() === 6
	                    ? '[Último] dddd [às] LT' // Saturday + Sunday
	                    : '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'em %s',
	            past: 'há %s',
	            s: 'poucos segundos',
	            ss: '%d segundos',
	            m: 'um minuto',
	            mm: '%d minutos',
	            h: 'uma hora',
	            hh: '%d horas',
	            d: 'um dia',
	            dd: '%d dias',
	            M: 'um mês',
	            MM: '%d meses',
	            y: 'um ano',
	            yy: '%d anos',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        invalidDate: 'Data inválida',
	    });
	
	    return ptBr;
	
	})));


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	//! author : Emanuel Cepoi : https://github.com/cepem
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                ss: 'secunde',
	                mm: 'minute',
	                hh: 'ore',
	                dd: 'zile',
	                ww: 'săptămâni',
	                MM: 'luni',
	                yy: 'ani',
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }
	
	    var ro = moment.defineLocale('ro', {
	        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
	            '_'
	        ),
	        monthsShort:
	            'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'peste %s',
	            past: '%s în urmă',
	            s: 'câteva secunde',
	            ss: relativeTimeWithPlural,
	            m: 'un minut',
	            mm: relativeTimeWithPlural,
	            h: 'o oră',
	            hh: relativeTimeWithPlural,
	            d: 'o zi',
	            dd: relativeTimeWithPlural,
	            w: 'o săptămână',
	            ww: relativeTimeWithPlural,
	            M: 'o lună',
	            MM: relativeTimeWithPlural,
	            y: 'un an',
	            yy: relativeTimeWithPlural,
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return ro;
	
	})));


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11
	            ? forms[0]
	            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
	            ? forms[1]
	            : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            hh: 'час_часа_часов',
	            dd: 'день_дня_дней',
	            ww: 'неделя_недели_недель',
	            MM: 'месяц_месяца_месяцев',
	            yy: 'год_года_лет',
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [
	        /^янв/i,
	        /^фев/i,
	        /^мар/i,
	        /^апр/i,
	        /^ма[йя]/i,
	        /^июн/i,
	        /^июл/i,
	        /^авг/i,
	        /^сен/i,
	        /^окт/i,
	        /^ноя/i,
	        /^дек/i,
	    ];
	
	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months: {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split(
	                '_'
	            ),
	            standalone:
	                'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
	                    '_'
	                ),
	        },
	        monthsShort: {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split(
	                '_'
	            ),
	            standalone:
	                'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split(
	                    '_'
	                ),
	        },
	        weekdays: {
	            standalone:
	                'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split(
	                    '_'
	                ),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split(
	                '_'
	            ),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/,
	        },
	        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	        monthsRegex:
	            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	        // копия предыдущего
	        monthsShortRegex:
	            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	        // полные названия с падежами
	        monthsStrictRegex:
	            /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	
	        // Выражение, которое соответствует только сокращённым формам
	        monthsShortStrictRegex:
	            /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY г.',
	            LLL: 'D MMMM YYYY г., H:mm',
	            LLLL: 'dddd, D MMMM YYYY г., H:mm',
	        },
	        calendar: {
	            sameDay: '[Сегодня, в] LT',
	            nextDay: '[Завтра, в] LT',
	            lastDay: '[Вчера, в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В следующее] dddd, [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В следующий] dddd, [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В следующую] dddd, [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd, [в] LT';
	                    } else {
	                        return '[В] dddd, [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В прошлое] dddd, [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В прошлый] dddd, [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В прошлую] dddd, [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd, [в] LT';
	                    } else {
	                        return '[В] dddd, [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'через %s',
	            past: '%s назад',
	            s: 'несколько секунд',
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: 'час',
	            hh: relativeTimeWithPlural,
	            d: 'день',
	            dd: relativeTimeWithPlural,
	            w: 'неделя',
	            ww: relativeTimeWithPlural,
	            M: 'месяц',
	            MM: relativeTimeWithPlural,
	            y: 'год',
	            yy: relativeTimeWithPlural,
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM: function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                case 'w':
	                case 'W':
	                    return number + '-я';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ru;
	
	})));


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sindhi [sd]
	//! author : Narain Sagar : https://github.com/narainsagar
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'جنوري',
	            'فيبروري',
	            'مارچ',
	            'اپريل',
	            'مئي',
	            'جون',
	            'جولاءِ',
	            'آگسٽ',
	            'سيپٽمبر',
	            'آڪٽوبر',
	            'نومبر',
	            'ڊسمبر',
	        ],
	        days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];
	
	    var sd = moment.defineLocale('sd', {
	        months: months,
	        monthsShort: months,
	        weekdays: days,
	        weekdaysShort: days,
	        weekdaysMin: days,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd، D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /صبح|شام/,
	        isPM: function (input) {
	            return 'شام' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar: {
	            sameDay: '[اڄ] LT',
	            nextDay: '[سڀاڻي] LT',
	            nextWeek: 'dddd [اڳين هفتي تي] LT',
	            lastDay: '[ڪالهه] LT',
	            lastWeek: '[گزريل هفتي] dddd [تي] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s پوء',
	            past: '%s اڳ',
	            s: 'چند سيڪنڊ',
	            ss: '%d سيڪنڊ',
	            m: 'هڪ منٽ',
	            mm: '%d منٽ',
	            h: 'هڪ ڪلاڪ',
	            hh: '%d ڪلاڪ',
	            d: 'هڪ ڏينهن',
	            dd: '%d ڏينهن',
	            M: 'هڪ مهينو',
	            MM: '%d مهينا',
	            y: 'هڪ سال',
	            yy: '%d سال',
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sd;
	
	})));


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var se = moment.defineLocale('se', {
	        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split(
	            '_'
	        ),
	        monthsShort:
	            'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays:
	            'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split(
	                '_'
	            ),
	        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'MMMM D. [b.] YYYY',
	            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s geažes',
	            past: 'maŋit %s',
	            s: 'moadde sekunddat',
	            ss: '%d sekunddat',
	            m: 'okta minuhta',
	            mm: '%d minuhtat',
	            h: 'okta diimmu',
	            hh: '%d diimmut',
	            d: 'okta beaivi',
	            dd: '%d beaivvit',
	            M: 'okta mánnu',
	            MM: '%d mánut',
	            y: 'okta jahki',
	            yy: '%d jagit',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return se;
	
	})));


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split(
	            '_'
	        ),
	        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split(
	            '_'
	        ),
	        weekdays:
	            'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split(
	                '_'
	            ),
	        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'a h:mm',
	            LTS: 'a h:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY MMMM D',
	            LLL: 'YYYY MMMM D, a h:mm',
	            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss',
	        },
	        calendar: {
	            sameDay: '[අද] LT[ට]',
	            nextDay: '[හෙට] LT[ට]',
	            nextWeek: 'dddd LT[ට]',
	            lastDay: '[ඊයේ] LT[ට]',
	            lastWeek: '[පසුගිය] dddd LT[ට]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sකින්',
	            past: '%sකට පෙර',
	            s: 'තත්පර කිහිපය',
	            ss: 'තත්පර %d',
	            m: 'මිනිත්තුව',
	            mm: 'මිනිත්තු %d',
	            h: 'පැය',
	            hh: 'පැය %d',
	            d: 'දිනය',
	            dd: 'දින %d',
	            M: 'මාසය',
	            MM: 'මාස %d',
	            y: 'වසර',
	            yy: 'වසර %d',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	        ordinal: function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM: function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        },
	    });
	
	    return si;
	
	})));


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months =
	            'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split(
	                '_'
	            ),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return n > 1 && n < 5;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's': // a few seconds / in a few seconds / a few seconds ago
	                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
	            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
	                } else {
	                    return result + 'sekundami';
	                }
	            case 'm': // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minúty' : 'minút');
	                } else {
	                    return result + 'minútami';
	                }
	            case 'h': // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodín');
	                } else {
	                    return result + 'hodinami';
	                }
	            case 'd': // a day / in a day / a day ago
	                return withoutSuffix || isFuture ? 'deň' : 'dňom';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dni' : 'dní');
	                } else {
	                    return result + 'dňami';
	                }
	            case 'M': // a month / in a month / a month ago
	                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
	                } else {
	                    return result + 'mesiacmi';
	                }
	            case 'y': // a year / in a year / a year ago
	                return withoutSuffix || isFuture ? 'rok' : 'rokom';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'rokov');
	                } else {
	                    return result + 'rokmi';
	                }
	        }
	    }
	
	    var sk = moment.defineLocale('sk', {
	        months: months,
	        monthsShort: monthsShort,
	        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [o] LT';
	                    case 3:
	                        return '[v stredu o] LT';
	                    case 4:
	                        return '[vo štvrtok o] LT';
	                    case 5:
	                        return '[v piatok o] LT';
	                    case 6:
	                        return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulú nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[minulý] dddd [o] LT';
	                    case 3:
	                        return '[minulú stredu o] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [o] LT';
	                    case 6:
	                        return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'pred %s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sk;
	
	})));


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture
	                    ? 'nekaj sekund'
	                    : 'nekaj sekundami';
	            case 'ss':
	                if (number === 1) {
	                    result += withoutSuffix ? 'sekundo' : 'sekundi';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
	                } else {
	                    result += 'sekund';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'ena minuta' : 'eno minuto';
	            case 'mm':
	                if (number === 1) {
	                    result += withoutSuffix ? 'minuta' : 'minuto';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'ena ura' : 'eno uro';
	            case 'hh':
	                if (number === 1) {
	                    result += withoutSuffix ? 'ura' : 'uro';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
	                }
	                return result;
	            case 'd':
	                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	            case 'dd':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	                } else {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	                }
	                return result;
	            case 'M':
	                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	            case 'MM':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	                } else {
	                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	                }
	                return result;
	            case 'y':
	                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	            case 'yy':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
	                } else {
	                    result += withoutSuffix || isFuture ? 'let' : 'leti';
	                }
	                return result;
	        }
	    }
	
	    var sl = moment.defineLocale('sl', {
	        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danes ob] LT',
	            nextDay: '[jutri ob] LT',
	
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[v] [sredo] [ob] LT';
	                    case 6:
	                        return '[v] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay: '[včeraj ob] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prejšnjo] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[prejšnjo] [sredo] [ob] LT';
	                    case 6:
	                        return '[prejšnjo] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'čez %s',
	            past: 'pred %s',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return sl;
	
	})));


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var sq = moment.defineLocale('sq', {
	        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split(
	            '_'
	        ),
	        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact: true,
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Sot në] LT',
	            nextDay: '[Nesër në] LT',
	            nextWeek: 'dddd [në] LT',
	            lastDay: '[Dje në] LT',
	            lastWeek: 'dddd [e kaluar në] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'në %s',
	            past: '%s më parë',
	            s: 'disa sekonda',
	            ss: '%d sekonda',
	            m: 'një minutë',
	            mm: '%d minuta',
	            h: 'një orë',
	            hh: '%d orë',
	            d: 'një ditë',
	            dd: '%d ditë',
	            M: 'një muaj',
	            MM: '%d muaj',
	            y: 'një vit',
	            yy: '%d vite',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sq;
	
	})));


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var translator = {
	        words: {
	            //Different grammatical cases
	            ss: ['sekunda', 'sekunde', 'sekundi'],
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            d: ['jedan dan', 'jednog dana'],
	            dd: ['dan', 'dana', 'dana'],
	            M: ['jedan mesec', 'jednog meseca'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            y: ['jednu godinu', 'jedne godine'],
	            yy: ['godinu', 'godine', 'godina'],
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            if (
	                number % 10 >= 1 &&
	                number % 10 <= 4 &&
	                (number % 100 < 10 || number % 100 >= 20)
	            ) {
	                return number % 10 === 1 ? wordKey[0] : wordKey[1];
	            }
	            return wordKey[2];
	        },
	        translate: function (number, withoutSuffix, key, isFuture) {
	            var wordKey = translator.words[key],
	                word;
	
	            if (key.length === 1) {
	                // Nominativ
	                if (key === 'y' && withoutSuffix) return 'jedna godina';
	                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
	            }
	
	            word = translator.correctGrammaticalCase(number, wordKey);
	            // Nominativ
	            if (key === 'yy' && withoutSuffix && word === 'godinu') {
	                return number + ' godina';
	            }
	
	            return number + ' ' + word;
	        },
	    };
	
	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D. M. YYYY.',
	            LL: 'D. MMMM YYYY.',
	            LLL: 'D. MMMM YYYY. H:mm',
	            LLLL: 'dddd, D. MMMM YYYY. H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedelju] [u] LT';
	                    case 3:
	                        return '[u] [sredu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[juče u] LT',
	            lastWeek: function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT',
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'pre %s',
	            s: 'nekoliko sekundi',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: translator.translate,
	            dd: translator.translate,
	            M: translator.translate,
	            MM: translator.translate,
	            y: translator.translate,
	            yy: translator.translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return sr;
	
	})));


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var translator = {
	        words: {
	            //Different grammatical cases
	            ss: ['секунда', 'секунде', 'секунди'],
	            m: ['један минут', 'једног минута'],
	            mm: ['минут', 'минута', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            d: ['један дан', 'једног дана'],
	            dd: ['дан', 'дана', 'дана'],
	            M: ['један месец', 'једног месеца'],
	            MM: ['месец', 'месеца', 'месеци'],
	            y: ['једну годину', 'једне године'],
	            yy: ['годину', 'године', 'година'],
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            if (
	                number % 10 >= 1 &&
	                number % 10 <= 4 &&
	                (number % 100 < 10 || number % 100 >= 20)
	            ) {
	                return number % 10 === 1 ? wordKey[0] : wordKey[1];
	            }
	            return wordKey[2];
	        },
	        translate: function (number, withoutSuffix, key, isFuture) {
	            var wordKey = translator.words[key],
	                word;
	
	            if (key.length === 1) {
	                // Nominativ
	                if (key === 'y' && withoutSuffix) return 'једна година';
	                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
	            }
	
	            word = translator.correctGrammaticalCase(number, wordKey);
	            // Nominativ
	            if (key === 'yy' && withoutSuffix && word === 'годину') {
	                return number + ' година';
	            }
	
	            return number + ' ' + word;
	        },
	    };
	
	    var srCyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split(
	            '_'
	        ),
	        monthsShort:
	            'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D. M. YYYY.',
	            LL: 'D. MMMM YYYY.',
	            LLL: 'D. MMMM YYYY. H:mm',
	            LLLL: 'dddd, D. MMMM YYYY. H:mm',
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[у] [недељу] [у] LT';
	                    case 3:
	                        return '[у] [среду] [у] LT';
	                    case 6:
	                        return '[у] [суботу] [у] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[у] dddd [у] LT';
	                }
	            },
	            lastDay: '[јуче у] LT',
	            lastWeek: function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT',
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: 'пре %s',
	            s: 'неколико секунди',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: translator.translate,
	            dd: translator.translate,
	            M: translator.translate,
	            MM: translator.translate,
	            y: translator.translate,
	            yy: translator.translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 1st is the first week of the year.
	        },
	    });
	
	    return srCyrl;
	
	})));


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ss = moment.defineLocale('ss', {
	        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
	            '_'
	        ),
	        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays:
	            'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
	                '_'
	            ),
	        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Namuhla nga] LT',
	            nextDay: '[Kusasa nga] LT',
	            nextWeek: 'dddd [nga] LT',
	            lastDay: '[Itolo nga] LT',
	            lastWeek: 'dddd [leliphelile] [nga] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'nga %s',
	            past: 'wenteka nga %s',
	            s: 'emizuzwana lomcane',
	            ss: '%d mzuzwana',
	            m: 'umzuzu',
	            mm: '%d emizuzu',
	            h: 'lihora',
	            hh: '%d emahora',
	            d: 'lilanga',
	            dd: '%d emalanga',
	            M: 'inyanga',
	            MM: '%d tinyanga',
	            y: 'umnyaka',
	            yy: '%d iminyaka',
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: '%d',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ss;
	
	})));


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var sv = moment.defineLocale('sv', {
	        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [kl.] HH:mm',
	            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd D MMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: 'för %s sedan',
	            s: 'några sekunder',
	            ss: '%d sekunder',
	            m: 'en minut',
	            mm: '%d minuter',
	            h: 'en timme',
	            hh: '%d timmar',
	            d: 'en dag',
	            dd: '%d dagar',
	            M: 'en månad',
	            MM: '%d månader',
	            y: 'ett år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? ':e'
	                        : b === 1
	                        ? ':a'
	                        : b === 2
	                        ? ':a'
	                        : b === 3
	                        ? ':e'
	                        : ':e';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sv;
	
	})));


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var sw = moment.defineLocale('sw', {
	        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays:
	            'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
	                '_'
	            ),
	        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'hh:mm A',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[leo saa] LT',
	            nextDay: '[kesho saa] LT',
	            nextWeek: '[wiki ijayo] dddd [saat] LT',
	            lastDay: '[jana] LT',
	            lastWeek: '[wiki iliyopita] dddd [saat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s baadaye',
	            past: 'tokea %s',
	            s: 'hivi punde',
	            ss: 'sekunde %d',
	            m: 'dakika moja',
	            mm: 'dakika %d',
	            h: 'saa limoja',
	            hh: 'masaa %d',
	            d: 'siku moja',
	            dd: 'siku %d',
	            M: 'mwezi mmoja',
	            MM: 'miezi %d',
	            y: 'mwaka mmoja',
	            yy: 'miaka %d',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return sw;
	
	})));


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '௧',
	            2: '௨',
	            3: '௩',
	            4: '௪',
	            5: '௫',
	            6: '௬',
	            7: '௭',
	            8: '௮',
	            9: '௯',
	            0: '௦',
	        },
	        numberMap = {
	            '௧': '1',
	            '௨': '2',
	            '௩': '3',
	            '௪': '4',
	            '௫': '5',
	            '௬': '6',
	            '௭': '7',
	            '௮': '8',
	            '௯': '9',
	            '௦': '0',
	        };
	
	    var ta = moment.defineLocale('ta', {
	        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
	            '_'
	        ),
	        monthsShort:
	            'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
	                '_'
	            ),
	        weekdays:
	            'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split(
	                '_'
	            ),
	        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split(
	            '_'
	        ),
	        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, HH:mm',
	            LLLL: 'dddd, D MMMM YYYY, HH:mm',
	        },
	        calendar: {
	            sameDay: '[இன்று] LT',
	            nextDay: '[நாளை] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[நேற்று] LT',
	            lastWeek: '[கடந்த வாரம்] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s இல்',
	            past: '%s முன்',
	            s: 'ஒரு சில விநாடிகள்',
	            ss: '%d விநாடிகள்',
	            m: 'ஒரு நிமிடம்',
	            mm: '%d நிமிடங்கள்',
	            h: 'ஒரு மணி நேரம்',
	            hh: '%d மணி நேரம்',
	            d: 'ஒரு நாள்',
	            dd: '%d நாட்கள்',
	            M: 'ஒரு மாதம்',
	            MM: '%d மாதங்கள்',
	            y: 'ஒரு வருடம்',
	            yy: '%d ஆண்டுகள்',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}வது/,
	        ordinal: function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை'; // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return ta;
	
	})));


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var te = moment.defineLocale('te', {
	        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split(
	            '_'
	        ),
	        monthsShort:
	            'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split(
	                '_'
	            ),
	        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm',
	        },
	        calendar: {
	            sameDay: '[నేడు] LT',
	            nextDay: '[రేపు] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[నిన్న] LT',
	            lastWeek: '[గత] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s లో',
	            past: '%s క్రితం',
	            s: 'కొన్ని క్షణాలు',
	            ss: '%d సెకన్లు',
	            m: 'ఒక నిమిషం',
	            mm: '%d నిమిషాలు',
	            h: 'ఒక గంట',
	            hh: '%d గంటలు',
	            d: 'ఒక రోజు',
	            dd: '%d రోజులు',
	            M: 'ఒక నెల',
	            MM: '%d నెలలు',
	            y: 'ఒక సంవత్సరం',
	            yy: '%d సంవత్సరాలు',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}వ/,
	        ordinal: '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return te;
	
	})));


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	//! author : Sonia Simoes : https://github.com/soniasimoes
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tet = moment.defineLocale('tet', {
	        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
	        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
	        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Ohin iha] LT',
	            nextDay: '[Aban iha] LT',
	            nextWeek: 'dddd [iha] LT',
	            lastDay: '[Horiseik iha] LT',
	            lastWeek: 'dddd [semana kotuk] [iha] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'iha %s',
	            past: '%s liuba',
	            s: 'segundu balun',
	            ss: 'segundu %d',
	            m: 'minutu ida',
	            mm: 'minutu %d',
	            h: 'oras ida',
	            hh: 'oras %d',
	            d: 'loron ida',
	            dd: 'loron %d',
	            M: 'fulan ida',
	            MM: 'fulan %d',
	            y: 'tinan ida',
	            yy: 'tinan %d',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return tet;
	
	})));


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tajik [tg]
	//! author : Orif N. Jr. : https://github.com/orif-jr
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        0: '-ум',
	        1: '-ум',
	        2: '-юм',
	        3: '-юм',
	        4: '-ум',
	        5: '-ум',
	        6: '-ум',
	        7: '-ум',
	        8: '-ум',
	        9: '-ум',
	        10: '-ум',
	        12: '-ум',
	        13: '-ум',
	        20: '-ум',
	        30: '-юм',
	        40: '-ум',
	        50: '-ум',
	        60: '-ум',
	        70: '-ум',
	        80: '-ум',
	        90: '-ум',
	        100: '-ум',
	    };
	
	    var tg = moment.defineLocale('tg', {
	        months: {
	            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split(
	                '_'
	            ),
	            standalone:
	                'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
	                    '_'
	                ),
	        },
	        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split(
	            '_'
	        ),
	        weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
	        weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Имрӯз соати] LT',
	            nextDay: '[Фардо соати] LT',
	            lastDay: '[Дирӯз соати] LT',
	            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
	            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'баъди %s',
	            past: '%s пеш',
	            s: 'якчанд сония',
	            m: 'як дақиқа',
	            mm: '%d дақиқа',
	            h: 'як соат',
	            hh: '%d соат',
	            d: 'як рӯз',
	            dd: '%d рӯз',
	            M: 'як моҳ',
	            MM: '%d моҳ',
	            y: 'як сол',
	            yy: '%d сол',
	        },
	        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'шаб') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'субҳ') {
	                return hour;
	            } else if (meridiem === 'рӯз') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'бегоҳ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'шаб';
	            } else if (hour < 11) {
	                return 'субҳ';
	            } else if (hour < 16) {
	                return 'рӯз';
	            } else if (hour < 19) {
	                return 'бегоҳ';
	            } else {
	                return 'шаб';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 1th is the first week of the year.
	        },
	    });
	
	    return tg;
	
	})));


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var th = moment.defineLocale('th', {
	        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split(
	            '_'
	        ),
	        monthsShort:
	            'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY เวลา H:mm',
	            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm',
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar: {
	            sameDay: '[วันนี้ เวลา] LT',
	            nextDay: '[พรุ่งนี้ เวลา] LT',
	            nextWeek: 'dddd[หน้า เวลา] LT',
	            lastDay: '[เมื่อวานนี้ เวลา] LT',
	            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'อีก %s',
	            past: '%sที่แล้ว',
	            s: 'ไม่กี่วินาที',
	            ss: '%d วินาที',
	            m: '1 นาที',
	            mm: '%d นาที',
	            h: '1 ชั่วโมง',
	            hh: '%d ชั่วโมง',
	            d: '1 วัน',
	            dd: '%d วัน',
	            w: '1 สัปดาห์',
	            ww: '%d สัปดาห์',
	            M: '1 เดือน',
	            MM: '%d เดือน',
	            y: '1 ปี',
	            yy: '%d ปี',
	        },
	    });
	
	    return th;
	
	})));


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkmen [tk]
	//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        1: "'inji",
	        5: "'inji",
	        8: "'inji",
	        70: "'inji",
	        80: "'inji",
	        2: "'nji",
	        7: "'nji",
	        20: "'nji",
	        50: "'nji",
	        3: "'ünji",
	        4: "'ünji",
	        100: "'ünji",
	        6: "'njy",
	        9: "'unjy",
	        10: "'unjy",
	        30: "'unjy",
	        60: "'ynjy",
	        90: "'ynjy",
	    };
	
	    var tk = moment.defineLocale('tk', {
	        months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(
	            '_'
	        ),
	        monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
	        weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(
	            '_'
	        ),
	        weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
	        weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[bugün sagat] LT',
	            nextDay: '[ertir sagat] LT',
	            nextWeek: '[indiki] dddd [sagat] LT',
	            lastDay: '[düýn] LT',
	            lastWeek: '[geçen] dddd [sagat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s soň',
	            past: '%s öň',
	            s: 'birnäçe sekunt',
	            m: 'bir minut',
	            mm: '%d minut',
	            h: 'bir sagat',
	            hh: '%d sagat',
	            d: 'bir gün',
	            dd: '%d gün',
	            M: 'bir aý',
	            MM: '%d aý',
	            y: 'bir ýyl',
	            yy: '%d ýyl',
	        },
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'Do':
	                case 'DD':
	                    return number;
	                default:
	                    if (number === 0) {
	                        // special case for zero
	                        return number + "'unjy";
	                    }
	                    var a = number % 10,
	                        b = (number % 100) - a,
	                        c = number >= 100 ? 100 : null;
	                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return tk;
	
	})));


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tlPh = moment.defineLocale('tl-ph', {
	        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
	            '_'
	        ),
	        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
	            '_'
	        ),
	        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'MM/D/YYYY',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY HH:mm',
	            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: 'LT [ngayong araw]',
	            nextDay: '[Bukas ng] LT',
	            nextWeek: 'LT [sa susunod na] dddd',
	            lastDay: 'LT [kahapon]',
	            lastWeek: 'LT [noong nakaraang] dddd',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'sa loob ng %s',
	            past: '%s ang nakalipas',
	            s: 'ilang segundo',
	            ss: '%d segundo',
	            m: 'isang minuto',
	            mm: '%d minuto',
	            h: 'isang oras',
	            hh: '%d oras',
	            d: 'isang araw',
	            dd: '%d araw',
	            M: 'isang buwan',
	            MM: '%d buwan',
	            y: 'isang taon',
	            yy: '%d taon',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function (number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return tlPh;
	
	})));


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	    function translateFuture(output) {
	        var time = output;
	        time =
	            output.indexOf('jaj') !== -1
	                ? time.slice(0, -3) + 'leS'
	                : output.indexOf('jar') !== -1
	                ? time.slice(0, -3) + 'waQ'
	                : output.indexOf('DIS') !== -1
	                ? time.slice(0, -3) + 'nem'
	                : time + ' pIq';
	        return time;
	    }
	
	    function translatePast(output) {
	        var time = output;
	        time =
	            output.indexOf('jaj') !== -1
	                ? time.slice(0, -3) + 'Hu’'
	                : output.indexOf('jar') !== -1
	                ? time.slice(0, -3) + 'wen'
	                : output.indexOf('DIS') !== -1
	                ? time.slice(0, -3) + 'ben'
	                : time + ' ret';
	        return time;
	    }
	
	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'ss':
	                return numberNoun + ' lup';
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }
	
	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	            ten = Math.floor((number % 100) / 10),
	            one = number % 10,
	            word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += (word !== '' ? ' ' : '') + numbersNouns[one];
	        }
	        return word === '' ? 'pagh' : word;
	    }
	
	    var tlh = moment.defineLocale('tlh', {
	        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split(
	            '_'
	        ),
	        monthsShort:
	            'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
	            '_'
	        ),
	        weekdaysShort:
	            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin:
	            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: translateFuture,
	            past: translatePast,
	            s: 'puS lup',
	            ss: translate,
	            m: 'wa’ tup',
	            mm: translate,
	            h: 'wa’ rep',
	            hh: translate,
	            d: 'wa’ jaj',
	            dd: translate,
	            M: 'wa’ jar',
	            MM: translate,
	            y: 'wa’ DIS',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return tlh;
	
	})));


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        1: "'inci",
	        5: "'inci",
	        8: "'inci",
	        70: "'inci",
	        80: "'inci",
	        2: "'nci",
	        7: "'nci",
	        20: "'nci",
	        50: "'nci",
	        3: "'üncü",
	        4: "'üncü",
	        100: "'üncü",
	        6: "'ncı",
	        9: "'uncu",
	        10: "'uncu",
	        30: "'uncu",
	        60: "'ıncı",
	        90: "'ıncı",
	    };
	
	    var tr = moment.defineLocale('tr', {
	        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split(
	            '_'
	        ),
	        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split(
	            '_'
	        ),
	        weekdaysShort: 'Paz_Pzt_Sal_Çar_Per_Cum_Cmt'.split('_'),
	        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'öö' : 'ÖÖ';
	            } else {
	                return isLower ? 'ös' : 'ÖS';
	            }
	        },
	        meridiemParse: /öö|ÖÖ|ös|ÖS/,
	        isPM: function (input) {
	            return input === 'ös' || input === 'ÖS';
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[bugün saat] LT',
	            nextDay: '[yarın saat] LT',
	            nextWeek: '[gelecek] dddd [saat] LT',
	            lastDay: '[dün] LT',
	            lastWeek: '[geçen] dddd [saat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s sonra',
	            past: '%s önce',
	            s: 'birkaç saniye',
	            ss: '%d saniye',
	            m: 'bir dakika',
	            mm: '%d dakika',
	            h: 'bir saat',
	            hh: '%d saat',
	            d: 'bir gün',
	            dd: '%d gün',
	            w: 'bir hafta',
	            ww: '%d hafta',
	            M: 'bir ay',
	            MM: '%d ay',
	            y: 'bir yıl',
	            yy: '%d yıl',
	        },
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'Do':
	                case 'DD':
	                    return number;
	                default:
	                    if (number === 0) {
	                        // special case for zero
	                        return number + "'ıncı";
	                    }
	                    var a = number % 10,
	                        b = (number % 100) - a,
	                        c = number >= 100 ? 100 : null;
	                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return tr;
	
	})));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM [dallas] YYYY',
	            LLL: 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM: function (input) {
	            return "d'o" === input.toLowerCase();
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? "d'o" : "D'O";
	            } else {
	                return isLower ? "d'a" : "D'A";
	            }
	        },
	        calendar: {
	            sameDay: '[oxhi à] LT',
	            nextDay: '[demà à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[ieiri à] LT',
	            lastWeek: '[sür el] dddd [lasteu à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'osprei %s',
	            past: 'ja%s',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['viensas secunds', "'iensas secunds"],
	            ss: [number + ' secunds', '' + number + ' secunds'],
	            m: ["'n míut", "'iens míut"],
	            mm: [number + ' míuts', '' + number + ' míuts'],
	            h: ["'n þora", "'iensa þora"],
	            hh: [number + ' þoras', '' + number + ' þoras'],
	            d: ["'n ziua", "'iensa ziua"],
	            dd: [number + ' ziuas', '' + number + ' ziuas'],
	            M: ["'n mes", "'iens mes"],
	            MM: [number + ' mesen', '' + number + ' mesen'],
	            y: ["'n ar", "'iens ar"],
	            yy: [number + ' ars', '' + number + ' ars'],
	        };
	        return isFuture
	            ? format[key][0]
	            : withoutSuffix
	            ? format[key][0]
	            : format[key][1];
	    }
	
	    return tzl;
	
	})));


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tzm = moment.defineLocale('tzm', {
	        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
	                '_'
	            ),
	        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past: 'ⵢⴰⵏ %s',
	            s: 'ⵉⵎⵉⴽ',
	            ss: '%d ⵉⵎⵉⴽ',
	            m: 'ⵎⵉⵏⵓⴺ',
	            mm: '%d ⵎⵉⵏⵓⴺ',
	            h: 'ⵙⴰⵄⴰ',
	            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d: 'ⴰⵙⵙ',
	            dd: '%d oⵙⵙⴰⵏ',
	            M: 'ⴰⵢoⵓⵔ',
	            MM: '%d ⵉⵢⵢⵉⵔⵏ',
	            y: 'ⴰⵙⴳⴰⵙ',
	            yy: '%d ⵉⵙⴳⴰⵙⵏ',
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return tzm;
	
	})));


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tzmLatn = moment.defineLocale('tzm-latn', {
	        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
	            '_'
	        ),
	        monthsShort:
	            'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
	                '_'
	            ),
	        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dadkh s yan %s',
	            past: 'yan %s',
	            s: 'imik',
	            ss: '%d imik',
	            m: 'minuḍ',
	            mm: '%d minuḍ',
	            h: 'saɛa',
	            hh: '%d tassaɛin',
	            d: 'ass',
	            dd: '%d ossan',
	            M: 'ayowr',
	            MM: '%d iyyirn',
	            y: 'asgas',
	            yy: '%d isgasn',
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return tzmLatn;
	
	})));


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uyghur (China) [ug-cn]
	//! author: boyaq : https://github.com/boyaq
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ugCn = moment.defineLocale('ug-cn', {
	        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
	                '_'
	            ),
	        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
	            '_'
	        ),
	        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
	        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
	            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
	            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
	        },
	        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                meridiem === 'يېرىم كېچە' ||
	                meridiem === 'سەھەر' ||
	                meridiem === 'چۈشتىن بۇرۇن'
	            ) {
	                return hour;
	            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
	                return hour + 12;
	            } else {
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return 'يېرىم كېچە';
	            } else if (hm < 900) {
	                return 'سەھەر';
	            } else if (hm < 1130) {
	                return 'چۈشتىن بۇرۇن';
	            } else if (hm < 1230) {
	                return 'چۈش';
	            } else if (hm < 1800) {
	                return 'چۈشتىن كېيىن';
	            } else {
	                return 'كەچ';
	            }
	        },
	        calendar: {
	            sameDay: '[بۈگۈن سائەت] LT',
	            nextDay: '[ئەتە سائەت] LT',
	            nextWeek: '[كېلەركى] dddd [سائەت] LT',
	            lastDay: '[تۆنۈگۈن] LT',
	            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s كېيىن',
	            past: '%s بۇرۇن',
	            s: 'نەچچە سېكونت',
	            ss: '%d سېكونت',
	            m: 'بىر مىنۇت',
	            mm: '%d مىنۇت',
	            h: 'بىر سائەت',
	            hh: '%d سائەت',
	            d: 'بىر كۈن',
	            dd: '%d كۈن',
	            M: 'بىر ئاي',
	            MM: '%d ئاي',
	            y: 'بىر يىل',
	            yy: '%d يىل',
	        },
	
	        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '-كۈنى';
	                case 'w':
	                case 'W':
	                    return number + '-ھەپتە';
	                default:
	                    return number;
	            }
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 1st is the first week of the year.
	        },
	    });
	
	    return ugCn;
	
	})));


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11
	            ? forms[0]
	            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
	            ? forms[1]
	            : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
	            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            dd: 'день_дні_днів',
	            MM: 'місяць_місяці_місяців',
	            yy: 'рік_роки_років',
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        } else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	                nominative:
	                    'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split(
	                        '_'
	                    ),
	                accusative:
	                    'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split(
	                        '_'
	                    ),
	                genitive:
	                    'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split(
	                        '_'
	                    ),
	            },
	            nounCase;
	
	        if (m === true) {
	            return weekdays['nominative']
	                .slice(1, 7)
	                .concat(weekdays['nominative'].slice(0, 1));
	        }
	        if (!m) {
	            return weekdays['nominative'];
	        }
	
	        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
	            ? 'accusative'
	            : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
	            ? 'genitive'
	            : 'nominative';
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }
	
	    var uk = moment.defineLocale('uk', {
	        months: {
	            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split(
	                '_'
	            ),
	            standalone:
	                'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split(
	                    '_'
	                ),
	        },
	        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split(
	            '_'
	        ),
	        weekdays: weekdaysCaseReplace,
	        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY р.',
	            LLL: 'D MMMM YYYY р., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY р., HH:mm',
	        },
	        calendar: {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return processHoursFunction('[Минулої] dddd [').call(this);
	                    case 1:
	                    case 2:
	                    case 4:
	                        return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: '%s тому',
	            s: 'декілька секунд',
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: 'годину',
	            hh: relativeTimeWithPlural,
	            d: 'день',
	            dd: relativeTimeWithPlural,
	            M: 'місяць',
	            MM: relativeTimeWithPlural,
	            y: 'рік',
	            yy: relativeTimeWithPlural,
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return uk;
	
	})));


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Urdu [ur]
	//! author : Sawood Alam : https://github.com/ibnesayeed
	//! author : Zack : https://github.com/ZackVision
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'جنوری',
	            'فروری',
	            'مارچ',
	            'اپریل',
	            'مئی',
	            'جون',
	            'جولائی',
	            'اگست',
	            'ستمبر',
	            'اکتوبر',
	            'نومبر',
	            'دسمبر',
	        ],
	        days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];
	
	    var ur = moment.defineLocale('ur', {
	        months: months,
	        monthsShort: months,
	        weekdays: days,
	        weekdaysShort: days,
	        weekdaysMin: days,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd، D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /صبح|شام/,
	        isPM: function (input) {
	            return 'شام' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar: {
	            sameDay: '[آج بوقت] LT',
	            nextDay: '[کل بوقت] LT',
	            nextWeek: 'dddd [بوقت] LT',
	            lastDay: '[گذشتہ روز بوقت] LT',
	            lastWeek: '[گذشتہ] dddd [بوقت] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s بعد',
	            past: '%s قبل',
	            s: 'چند سیکنڈ',
	            ss: '%d سیکنڈ',
	            m: 'ایک منٹ',
	            mm: '%d منٹ',
	            h: 'ایک گھنٹہ',
	            hh: '%d گھنٹے',
	            d: 'ایک دن',
	            dd: '%d دن',
	            M: 'ایک ماہ',
	            MM: '%d ماہ',
	            y: 'ایک سال',
	            yy: '%d سال',
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ur;
	
	})));


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var uz = moment.defineLocale('uz', {
	        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
	            '_'
	        ),
	        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'D MMMM YYYY, dddd HH:mm',
	        },
	        calendar: {
	            sameDay: '[Бугун соат] LT [да]',
	            nextDay: '[Эртага] LT [да]',
	            nextWeek: 'dddd [куни соат] LT [да]',
	            lastDay: '[Кеча соат] LT [да]',
	            lastWeek: '[Утган] dddd [куни соат] LT [да]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'Якин %s ичида',
	            past: 'Бир неча %s олдин',
	            s: 'фурсат',
	            ss: '%d фурсат',
	            m: 'бир дакика',
	            mm: '%d дакика',
	            h: 'бир соат',
	            hh: '%d соат',
	            d: 'бир кун',
	            dd: '%d кун',
	            M: 'бир ой',
	            MM: '%d ой',
	            y: 'бир йил',
	            yy: '%d йил',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return uz;
	
	})));


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek Latin [uz-latn]
	//! author : Rasulbek Mirzayev : github.com/Rasulbeeek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var uzLatn = moment.defineLocale('uz-latn', {
	        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
	            '_'
	        ),
	        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	        weekdays:
	            'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
	                '_'
	            ),
	        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'D MMMM YYYY, dddd HH:mm',
	        },
	        calendar: {
	            sameDay: '[Bugun soat] LT [da]',
	            nextDay: '[Ertaga] LT [da]',
	            nextWeek: 'dddd [kuni soat] LT [da]',
	            lastDay: '[Kecha soat] LT [da]',
	            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'Yaqin %s ichida',
	            past: 'Bir necha %s oldin',
	            s: 'soniya',
	            ss: '%d soniya',
	            m: 'bir daqiqa',
	            mm: '%d daqiqa',
	            h: 'bir soat',
	            hh: '%d soat',
	            d: 'bir kun',
	            dd: '%d kun',
	            M: 'bir oy',
	            MM: '%d oy',
	            y: 'bir yil',
	            yy: '%d yil',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return uzLatn;
	
	})));


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	//! author : Chien Kira : https://github.com/chienkira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var vi = moment.defineLocale('vi', {
	        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split(
	            '_'
	        ),
	        monthsShort:
	            'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split(
	            '_'
	        ),
	        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact: true,
	        meridiemParse: /sa|ch/i,
	        isPM: function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [năm] YYYY',
	            LLL: 'D MMMM [năm] YYYY HH:mm',
	            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
	            l: 'DD/M/YYYY',
	            ll: 'D MMM YYYY',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd, D MMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần trước lúc] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s tới',
	            past: '%s trước',
	            s: 'vài giây',
	            ss: '%d giây',
	            m: 'một phút',
	            mm: '%d phút',
	            h: 'một giờ',
	            hh: '%d giờ',
	            d: 'một ngày',
	            dd: '%d ngày',
	            w: 'một tuần',
	            ww: '%d tuần',
	            M: 'một tháng',
	            MM: '%d tháng',
	            y: 'một năm',
	            yy: '%d năm',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function (number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return vi;
	
	})));


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var xPseudo = moment.defineLocale('x-pseudo', {
	        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split(
	            '_'
	        ),
	        monthsShort:
	            'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split(
	                '_'
	            ),
	        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[T~ódá~ý át] LT',
	            nextDay: '[T~ómó~rró~w át] LT',
	            nextWeek: 'dddd [át] LT',
	            lastDay: '[Ý~ést~érdá~ý át] LT',
	            lastWeek: '[L~ást] dddd [át] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'í~ñ %s',
	            past: '%s á~gó',
	            s: 'á ~féw ~sécó~ñds',
	            ss: '%d s~écóñ~ds',
	            m: 'á ~míñ~úté',
	            mm: '%d m~íñú~tés',
	            h: 'á~ñ hó~úr',
	            hh: '%d h~óúrs',
	            d: 'á ~dáý',
	            dd: '%d d~áýs',
	            M: 'á ~móñ~th',
	            MM: '%d m~óñt~hs',
	            y: 'á ~ýéár',
	            yy: '%d ý~éárs',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return xPseudo;
	
	})));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var yo = moment.defineLocale('yo', {
	        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split(
	            '_'
	        ),
	        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Ònì ni] LT',
	            nextDay: '[Ọ̀la ni] LT',
	            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
	            lastDay: '[Àna ni] LT',
	            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ní %s',
	            past: '%s kọjá',
	            s: 'ìsẹjú aayá die',
	            ss: 'aayá %d',
	            m: 'ìsẹjú kan',
	            mm: 'ìsẹjú %d',
	            h: 'wákati kan',
	            hh: 'wákati %d',
	            d: 'ọjọ́ kan',
	            dd: 'ọjọ́ %d',
	            M: 'osù kan',
	            MM: 'osù %d',
	            y: 'ọdún kan',
	            yy: 'ọdún %d',
	        },
	        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
	        ordinal: 'ọjọ́ %d',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return yo;
	
	})));


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	//! author : uu109 : https://github.com/uu109
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhCn = moment.defineLocale('zh-cn', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日Ah点mm分',
	            LLLL: 'YYYY年M月D日ddddAh点mm分',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    return '[下]dddLT';
	                } else {
	                    return '[本]dddLT';
	                }
	            },
	            lastDay: '[昨天]LT',
	            lastWeek: function (now) {
	                if (this.week() !== now.week()) {
	                    return '[上]dddLT';
	                } else {
	                    return '[本]dddLT';
	                }
	            },
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s后',
	            past: '%s前',
	            s: '几秒',
	            ss: '%d 秒',
	            m: '1 分钟',
	            mm: '%d 分钟',
	            h: '1 小时',
	            hh: '%d 小时',
	            d: '1 天',
	            dd: '%d 天',
	            w: '1 周',
	            ww: '%d 周',
	            M: '1 个月',
	            MM: '%d 个月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	        week: {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return zhCn;
	
	})));


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	//! author : Anthony : https://github.com/anthonylau
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhHk = moment.defineLocale('zh-hk', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1200) {
	                return '上午';
	            } else if (hm === 1200) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: '[下]ddddLT',
	            lastDay: '[昨天]LT',
	            lastWeek: '[上]ddddLT',
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	    });
	
	    return zhHk;
	
	})));


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Macau) [zh-mo]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Tan Yuanhong : https://github.com/le0tan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhMo = moment.defineLocale('zh-mo', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'D/M/YYYY',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天] LT',
	            nextDay: '[明天] LT',
	            nextWeek: '[下]dddd LT',
	            lastDay: '[昨天] LT',
	            lastWeek: '[上]dddd LT',
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s內',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	    });
	
	    return zhMo;
	
	})));


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(27)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhTw = moment.defineLocale('zh-tw', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天] LT',
	            nextDay: '[明天] LT',
	            nextWeek: '[下]dddd LT',
	            lastDay: '[昨天] LT',
	            lastWeek: '[上]dddd LT',
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	    });
	
	    return zhTw;
	
	})));


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	var DateTime, ItemPath, ItemPathParser, _, shallowArrayEqual, util;
	
	ItemPathParser = __webpack_require__(166);
	
	DateTime = __webpack_require__(25);
	
	util = __webpack_require__(10);
	
	_ = __webpack_require__(15);
	
	shallowArrayEqual = util.shallowArrayEqual;
	
	module.exports = ItemPath = (function() {
	  ItemPath.parse = function(path, startRule, types) {
	    var e, exception, keywords, parsedPath;
	    if (startRule == null) {
	      startRule = 'ItemPathExpression';
	    }
	    if (types == null) {
	      types = {};
	    }
	    exception = null;
	    keywords = [];
	    try {
	      parsedPath = ItemPathParser.parse(path, {
	        startRule: startRule,
	        types: types
	      });
	    } catch (error1) {
	      e = error1;
	      exception = e;
	    }
	    if (parsedPath) {
	      keywords = parsedPath.keywords;
	    }
	    return {
	      parsedPath: parsedPath,
	      keywords: keywords,
	      error: exception
	    };
	  };
	
	  ItemPath.evaluate = function(itemPath, contextItem, options) {
	    var results;
	    if (options == null) {
	      options = {};
	    }
	    if (typeof itemPath === 'string') {
	      itemPath = new ItemPath(itemPath, options);
	    }
	    itemPath.options = options;
	    results = itemPath.evaluate(contextItem);
	    itemPath.options = options;
	    return results;
	  };
	
	  function ItemPath(pathExpressionString, options1) {
	    var parsed;
	    this.pathExpressionString = pathExpressionString;
	    this.options = options1;
	    if (this.options == null) {
	      this.options = {};
	    }
	    this.itemToRowMap = new Map;
	    parsed = this.constructor.parse(this.pathExpressionString, void 0, this.options.types);
	    this.pathExpressionAST = parsed.parsedPath;
	    this.pathExpressionKeywords = parsed.keywords;
	    this.pathExpressionError = parsed.error;
	  }
	
	
	  /*
	  Section: Evaluation
	   */
	
	  ItemPath.prototype.evaluate = function(item) {
	    var result;
	    this.now = new Date;
	    this.itemToRowMap.clear();
	    if (this.pathExpressionAST) {
	      result = this.evaluatePathExpression(this.pathExpressionAST, item);
	    } else {
	      result = [];
	    }
	    this.itemToRowMap.clear();
	    return result;
	  };
	
	  ItemPath.prototype.evaluatePathExpression = function(pathExpressionAST, item) {
	    var except, intersect, results, union;
	    union = pathExpressionAST.union;
	    intersect = pathExpressionAST.intersect;
	    except = pathExpressionAST.except;
	    results;
	    if (union) {
	      results = this.evaluateUnion(union, item);
	    } else if (intersect) {
	      results = this.evaluateIntersect(intersect, item);
	    } else if (except) {
	      results = this.evaluateExcept(except, item);
	    } else {
	      results = this.evaluatePath(pathExpressionAST, item);
	    }
	    this.sliceResultsFrom(pathExpressionAST.slice, results, 0);
	    return results;
	  };
	
	  ItemPath.prototype.rowForItem = function(item) {
	    var each, root, row;
	    if (this.itemToRowMap.size === 0) {
	      root = item.outline.root;
	      this.itemToRowMap.set(root.id, -1);
	      each = root.firstChild;
	      row = 0;
	      while (each) {
	        this.itemToRowMap.set(each.id, row);
	        each = each.nextItem;
	        row++;
	      }
	    }
	    return this.itemToRowMap.get(item.id);
	  };
	
	  ItemPath.prototype.unionOutlineOrderedResults = function(results1, results2, outline) {
	    var each, i, j, k, l, len, len1, r1, r2, ref, ref1, results;
	    results = [];
	    i = 0;
	    j = 0;
	    while (true) {
	      r1 = results1[i];
	      r2 = results2[j];
	      if (!r1) {
	        if (r2) {
	          ref = results2.slice(j);
	          for (k = 0, len = ref.length; k < len; k++) {
	            each = ref[k];
	            results.push(each);
	          }
	        }
	        return results;
	      } else if (!r2) {
	        if (r1) {
	          ref1 = results1.slice(i);
	          for (l = 0, len1 = ref1.length; l < len1; l++) {
	            each = ref1[l];
	            results.push(each);
	          }
	        }
	        return results;
	      } else if (r1 === r2) {
	        results.push(r2);
	        i++;
	        j++;
	      } else {
	        if (this.rowForItem(r1) < this.rowForItem(r2)) {
	          results.push(r1);
	          i++;
	        } else {
	          results.push(r2);
	          j++;
	        }
	      }
	    }
	  };
	
	  ItemPath.prototype.evaluateUnion = function(pathsAST, item) {
	    var results1, results2;
	    results1 = this.evaluatePathExpression(pathsAST[0], item);
	    results2 = this.evaluatePathExpression(pathsAST[1], item);
	    return this.unionOutlineOrderedResults(results1, results2, item.outline);
	  };
	
	  ItemPath.prototype.evaluateIntersect = function(pathsAST, item) {
	    var i, j, r1, r2, results, results1, results2;
	    results1 = this.evaluatePathExpression(pathsAST[0], item);
	    results2 = this.evaluatePathExpression(pathsAST[1], item);
	    results = [];
	    i = 0;
	    j = 0;
	    while (true) {
	      r1 = results1[i];
	      r2 = results2[j];
	      if (!r1) {
	        return results;
	      } else if (!r2) {
	        return results;
	      } else if (r1 === r2) {
	        results.push(r2);
	        i++;
	        j++;
	      } else {
	        if (this.rowForItem(r1) < this.rowForItem(r2)) {
	          i++;
	        } else {
	          j++;
	        }
	      }
	    }
	  };
	
	  ItemPath.prototype.evaluateExcept = function(pathsAST, item) {
	    var each, i, j, k, len, r1, r1Index, r1Row, r2, r2Index, ref, results, results1, results2;
	    results1 = this.evaluatePathExpression(pathsAST[0], item);
	    results2 = this.evaluatePathExpression(pathsAST[1], item);
	    results = [];
	    i = 0;
	    j = 0;
	    while (true) {
	      r1 = results1[i];
	      r2 = results2[j];
	      if (r1 && r2) {
	        r1Row = this.rowForItem(r1);
	        while (r2 && (r1Row > this.rowForItem(r2))) {
	          j++;
	          r2 = results2[j];
	        }
	      }
	      if (!r1) {
	        return results;
	      } else if (!r2) {
	        ref = results1.slice(i);
	        for (k = 0, len = ref.length; k < len; k++) {
	          each = ref[k];
	          results.push(each);
	        }
	        return results;
	      } else if (r1 === r2) {
	        r1Index = -1;
	        r2Index = -1;
	        i++;
	        j++;
	      } else {
	        results.push(r1);
	        r1Index = -1;
	        i++;
	      }
	    }
	  };
	
	  ItemPath.prototype.evaluatePath = function(pathAST, item) {
	    var context, contextResults, contexts, k, l, len, len1, outline, ref, results, step;
	    outline = item.outline;
	    contexts = [];
	    results;
	    if (pathAST.absolute) {
	      item = this.options.root || item.localRoot;
	    }
	    contexts.push(item);
	    ref = pathAST.steps;
	    for (k = 0, len = ref.length; k < len; k++) {
	      step = ref[k];
	      results = [];
	      for (l = 0, len1 = contexts.length; l < len1; l++) {
	        context = contexts[l];
	        if (results.length) {
	          contextResults = [];
	          this.evaluateStep(step, context, contextResults);
	          results = this.unionOutlineOrderedResults(results, contextResults, outline);
	        } else {
	          this.evaluateStep(step, context, results);
	        }
	      }
	      contexts = results;
	    }
	    return results;
	  };
	
	  ItemPath.prototype.evaluateStep = function(step, item, results) {
	    var each, end, from, predicate, type;
	    predicate = step.predicate;
	    from = results.length;
	    type = step.type;
	    switch (step.axis) {
	      case 'ancestor-or-self':
	        each = item;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.splice(from, 0, each);
	          }
	          each = each.parent;
	        }
	        break;
	      case 'ancestor':
	        each = item.parent;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.splice(from, 0, each);
	          }
	          each = each.parent;
	        }
	        break;
	      case 'child':
	        each = item.firstChild;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.push(each);
	          }
	          each = each.nextSibling;
	        }
	        break;
	      case 'descendant-or-self':
	        end = item.nextBranch;
	        each = item;
	        while (each && each !== end) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.push(each);
	          }
	          each = each.nextItem;
	        }
	        break;
	      case 'descendant':
	        end = item.nextBranch;
	        each = item.firstChild;
	        while (each && each !== end) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.push(each);
	          }
	          each = each.nextItem;
	        }
	        break;
	      case 'following-sibling':
	        each = item.nextSibling;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.push(each);
	          }
	          each = each.nextSibling;
	        }
	        break;
	      case 'following':
	        each = item.nextItem;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.push(each);
	          }
	          each = each.nextItem;
	        }
	        break;
	      case 'parent':
	        each = item.parent;
	        if (each && this.evaluatePredicate(type, predicate, each)) {
	          results.push(each);
	        }
	        break;
	      case 'preceding-sibling':
	        each = item.previousSibling;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.splice(from, 0, each);
	          }
	          each = each.previousSibling;
	        }
	        break;
	      case 'preceding':
	        each = item.previousItem;
	        while (each) {
	          if (this.evaluatePredicate(type, predicate, each)) {
	            results.splice(from, 0, each);
	          }
	          each = each.previousItem;
	        }
	        break;
	      case 'self':
	        if (this.evaluatePredicate(type, predicate, item)) {
	          results.push(item);
	        }
	    }
	    return this.sliceResultsFrom(step.slice, results, from);
	  };
	
	  ItemPath.prototype.evaluatePredicate = function(type, predicate, item) {
	    var andP, notP, orP;
	    if (type !== '*' && type !== item.getAttribute('data-type')) {
	      return false;
	    } else if (predicate === '*') {
	      return true;
	    } else if (andP = predicate.and) {
	      return this.evaluatePredicate('*', andP[0], item) && this.evaluatePredicate('*', andP[1], item);
	    } else if (orP = predicate.or) {
	      return this.evaluatePredicate('*', orP[0], item) || this.evaluatePredicate('*', orP[1], item);
	    } else if (notP = predicate.not) {
	      return !this.evaluatePredicate('*', notP, item);
	    } else {
	      return this.evaluateComparisonPredicate(predicate, item);
	    }
	  };
	
	  ItemPath.prototype.evaluateComparisonPredicate = function(predicate, item) {
	    var leftValue, relation, rightValue;
	    leftValue = this.evaluateValue(predicate, 'leftValue', item);
	    if (predicate.rightValue == null) {
	      return leftValue != null;
	    } else {
	      relation = predicate.relation;
	      rightValue = this.evaluateValue(predicate, 'rightValue', item);
	      return this.evaluateRelation(leftValue, relation, rightValue, predicate);
	    }
	  };
	
	  ItemPath.prototype.evaluateValue = function(predicate, name, item) {
	    var cacheName, evaluatedValue, value;
	    value = predicate[name];
	    if (value == null) {
	      return;
	    }
	    if (name === 'leftValue') {
	      cacheName = 'leftValueCache';
	    } else {
	      cacheName = 'rightValueCache';
	    }
	    evaluatedValue = predicate[cacheName];
	    if (!evaluatedValue) {
	      if (Array.isArray(value)) {
	        evaluatedValue = this.evaluateFunction(value, item);
	        cacheName = null;
	      } else {
	        evaluatedValue = value;
	      }
	      if (evaluatedValue) {
	        evaluatedValue = this.convertValueForModifier(evaluatedValue, predicate.modifier);
	      }
	      if (cacheName) {
	        predicate[cacheName] = evaluatedValue;
	      }
	    }
	    return evaluatedValue;
	  };
	
	  ItemPath.prototype.evaluateFunction = function(valueFunction, item) {
	    var functionName;
	    functionName = valueFunction[0];
	    switch (functionName) {
	      case 'getAttribute':
	        return this.evaluteGetAttributeFunction(valueFunction, item);
	      case 'count':
	        return this.evaluateCountFunction(valueFunction[1], item);
	    }
	  };
	
	  ItemPath.prototype.evaluteGetAttributeFunction = function(attributePath, item) {
	    var attributeName, ref, value;
	    attributeName = attributePath[1];
	    attributeName = ((ref = this.options.attributeShortcuts) != null ? ref[attributeName] : void 0) || attributeName;
	    switch (attributeName) {
	      case 'id':
	        return item.id;
	      case 'text':
	        return item.bodyString;
	      default:
	        if (value = item.getAttribute(attributeName)) {
	          return value;
	        } else {
	          return item.getAttribute('data-' + attributeName);
	        }
	    }
	  };
	
	  ItemPath.prototype.evaluateCountFunction = function(pathExpressionAST, item) {
	    return '' + this.evaluatePathExpression(pathExpressionAST, item).length;
	  };
	
	  ItemPath.prototype.convertValueForModifier = function(value, modifier) {
	    var Item, each, k, l, len, len1, ref, ref1, ref2, results3, results4;
	    Item = __webpack_require__(23);
	    if (modifier.element === 'i') {
	      if (modifier.list) {
	        ref = Item.attributeValueStringToObject(value, String, true);
	        results3 = [];
	        for (k = 0, len = ref.length; k < len; k++) {
	          each = ref[k];
	          results3.push(each.toLowerCase());
	        }
	        return results3;
	      } else {
	        return value.toLowerCase();
	      }
	    } else if (modifier.element === 'n') {
	      return Item.attributeValueStringToObject(value, Number, modifier.list);
	    } else if (modifier.element === 'd') {
	      if (modifier.list) {
	        ref1 = Item.attributeValueStringToObject(value, Date, true);
	        results4 = [];
	        for (l = 0, len1 = ref1.length; l < len1; l++) {
	          each = ref1[l];
	          results4.push(each != null ? typeof each.getTime === "function" ? each.getTime() : void 0 : void 0);
	        }
	        return results4;
	      } else {
	        return (ref2 = Item.attributeValueStringToObject(value, Date)) != null ? typeof ref2.getTime === "function" ? ref2.getTime() : void 0 : void 0;
	      }
	    } else if (modifier.element === 'b') {
	      return Item.attributeValueStringToObject(value, Boolean, modifier.list);
	    } else if (modifier.element === 's') {
	      return Item.attributeValueStringToObject(value, String, modifier.list);
	    } else {
	      throw new Error('Unexpected Modifier: ' + modifier);
	    }
	  };
	
	  ItemPath.prototype.evaluateRelation = function(left, relation, right, predicate) {
	    var each, eachLeft, eachRight, eachRightRegex, error, index, joinedValueRegexCache, k, l, leftEnd, len, len1, len10, len11, len12, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, pass, q, r, rightEnd, s, t, u, v, w;
	    switch (relation) {
	      case '=':
	        if (Array.isArray(left)) {
	          return shallowArrayEqual(left, right);
	        } else {
	          return left === right;
	        }
	        break;
	      case '!=':
	        if (Array.isArray(left)) {
	          return !shallowArrayEqual(left, right);
	        } else {
	          return left !== right;
	        }
	        break;
	      case '<':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          for (k = 0, len = right.length; k < len; k++) {
	            eachRight = right[k];
	            pass = false;
	            for (l = 0, len1 = left.length; l < len1; l++) {
	              eachLeft = left[l];
	              if (eachLeft < eachRight) {
	                pass = true;
	                break;
	              }
	            }
	            if (!pass) {
	              return false;
	            }
	          }
	          return true;
	        } else if (left != null) {
	          return left < right;
	        } else {
	          return false;
	        }
	        break;
	      case '>':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          for (m = 0, len2 = right.length; m < len2; m++) {
	            eachRight = right[m];
	            pass = false;
	            for (n = 0, len3 = left.length; n < len3; n++) {
	              eachLeft = left[n];
	              if (eachLeft > eachRight) {
	                pass = true;
	                break;
	              }
	            }
	            if (!pass) {
	              return false;
	            }
	          }
	          return true;
	        } else if (left != null) {
	          return left > right;
	        } else {
	          return false;
	        }
	        break;
	      case '<=':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          for (o = 0, len4 = right.length; o < len4; o++) {
	            eachRight = right[o];
	            pass = false;
	            for (p = 0, len5 = left.length; p < len5; p++) {
	              eachLeft = left[p];
	              if (eachLeft <= eachRight) {
	                pass = true;
	                break;
	              }
	            }
	            if (!pass) {
	              return false;
	            }
	          }
	          return true;
	        } else if (left != null) {
	          return left <= right;
	        } else {
	          return false;
	        }
	        break;
	      case '>=':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          for (q = 0, len6 = right.length; q < len6; q++) {
	            eachRight = right[q];
	            pass = false;
	            for (r = 0, len7 = left.length; r < len7; r++) {
	              eachLeft = left[r];
	              if (eachLeft >= eachRight) {
	                pass = true;
	                break;
	              }
	            }
	            if (!pass) {
	              return false;
	            }
	          }
	          return true;
	        } else if (left != null) {
	          return left >= right;
	        } else {
	          return false;
	        }
	        break;
	      case 'beginswith':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          for (index = s = 0, len8 = right.length; s < len8; index = ++s) {
	            each = right[index];
	            if (left[index] !== right[index]) {
	              return false;
	            }
	          }
	          return true;
	        } else if (left != null ? left.startsWith : void 0) {
	          return left.startsWith(right);
	        } else {
	          return false;
	        }
	        break;
	      case 'contains':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          for (t = 0, len9 = right.length; t < len9; t++) {
	            each = right[t];
	            if (left.indexOf(each) === -1) {
	              return false;
	            }
	          }
	          return true;
	        } else if (left != null ? left.indexOf : void 0) {
	          return left.indexOf(right) !== -1;
	        } else {
	          return false;
	        }
	        break;
	      case 'endswith':
	        if (Array.isArray(left)) {
	          if (left.length === 0 || right.length === 0) {
	            return false;
	          }
	          leftEnd = left.length - 1;
	          rightEnd = right.length - 1;
	          while (rightEnd >= 0) {
	            if (left[leftEnd] !== right[rightEnd]) {
	              return false;
	            }
	            rightEnd -= 1;
	            leftEnd -= 1;
	          }
	          return true;
	        } else if (left != null ? left.endsWith : void 0) {
	          return left.endsWith(right);
	        } else {
	          return false;
	        }
	        break;
	      case 'matches':
	        joinedValueRegexCache = predicate.joinedValueRegexCache;
	        if (joinedValueRegexCache === void 0) {
	          try {
	            joinedValueRegexCache = [];
	            if (Array.isArray(right)) {
	              for (u = 0, len10 = right.length; u < len10; u++) {
	                each = right[u];
	                joinedValueRegexCache.push(new RegExp(each.toString()));
	              }
	            } else {
	              joinedValueRegexCache.push(new RegExp(right.toString()));
	            }
	          } catch (error1) {
	            error = error1;
	            joinedValueRegexCache = null;
	          }
	          predicate.joinedValueRegexCache = joinedValueRegexCache;
	        }
	        if ((joinedValueRegexCache != null ? joinedValueRegexCache.length : void 0) > 0) {
	          if (Array.isArray(left)) {
	            if (left.length === 0 || joinedValueRegexCache.length === 0) {
	              return false;
	            }
	            for (v = 0, len11 = joinedValueRegexCache.length; v < len11; v++) {
	              eachRightRegex = joinedValueRegexCache[v];
	              pass = false;
	              for (w = 0, len12 = left.length; w < len12; w++) {
	                eachLeft = left[w];
	                if (eachLeft.toString().match(eachRightRegex)) {
	                  pass = true;
	                  break;
	                }
	              }
	              if (!pass) {
	                return false;
	              }
	            }
	            return true;
	          } else if (left != null) {
	            return left.toString().match(joinedValueRegexCache[0]);
	          } else {
	            return false;
	          }
	        } else {
	          return false;
	        }
	    }
	  };
	
	  ItemPath.prototype.sliceResultsFrom = function(slice, results, from) {
	    var end, length, sliced, start;
	    if (slice) {
	      length = results.length - from;
	      start = slice.start;
	      end = slice.end;
	      if (length === 0) {
	        return;
	      }
	      if (end > length) {
	        end = length;
	      }
	      if (start !== 0 || end !== length) {
	        sliced;
	        if (start < 0) {
	          start += length;
	          if (start < 0) {
	            start = 0;
	          }
	        }
	        if (start > length - 1) {
	          start = length - 1;
	        }
	        if (end === null) {
	          sliced = results[from + start];
	        } else {
	          if (end < 0) {
	            end += length;
	          }
	          if (end < start) {
	            end = start;
	          }
	          sliced = results.slice(from).slice(start, end);
	        }
	        Array.prototype.splice.apply(results, [from, results.length - from].concat(sliced));
	      }
	    }
	  };
	
	
	  /*
	  Section: Path to Item
	   */
	
	  ItemPath.lastSegmentToItem = function(item) {
	    var candidateSegment, candidateSegmentLower, e, each, nextCandidateSegmentLength, targetBodyString;
	    targetBodyString = item.bodyString.replace(/^\s+|\s+$/g, '');
	    nextCandidateSegmentLength = Math.min(4, targetBodyString.length);
	    while (nextCandidateSegmentLength <= targetBodyString.length) {
	      candidateSegment = targetBodyString.substr(0, nextCandidateSegmentLength).replace(/^\s+|\s+$/g, '');
	      candidateSegmentLower = candidateSegment.toLowerCase();
	      each = item.parent.firstChild;
	      while (each) {
	        if (each !== item && each.bodyString.toLowerCase().indexOf(candidateSegmentLower) !== -1) {
	          nextCandidateSegmentLength++;
	          candidateSegment = null;
	          break;
	        }
	        each = each.nextSibling;
	      }
	      if (candidateSegment) {
	        break;
	      }
	    }
	    if (candidateSegment) {
	      candidateSegment = candidateSegment.replace(/\"/g, '\\"');
	      try {
	        ItemPathParser.parse(candidateSegment, {
	          startRule: 'StringValue'
	        });
	      } catch (error1) {
	        e = error1;
	        candidateSegment = "\"" + candidateSegment + "\"";
	      }
	      return candidateSegment;
	    } else {
	      return "@id = " + item.id;
	    }
	  };
	
	  ItemPath.pathToItem = function(item, hoistedItem) {
	    var segments;
	    if (hoistedItem == null) {
	      hoistedItem = item.localRoot;
	    }
	    segments = [];
	    while (item !== hoistedItem) {
	      segments.push(this.lastSegmentToItem(item));
	      item = item.parent;
	    }
	    return '/' + segments.reverse().join('/');
	  };
	
	
	  /*
	  Section: AST To String
	   */
	
	  ItemPath.prototype.predicateToString = function(predicate, group) {
	    var andAST, closeGroup, leftValue, modifier, modifierText, notAST, openGroup, orAST, relation, result, rightValue;
	    if (predicate === '*') {
	      return '*';
	    } else {
	      openGroup = group ? '(' : '';
	      closeGroup = group ? ')' : '';
	      if (andAST = predicate.and) {
	        return openGroup + this.predicateToString(andAST[0], true) + ' and ' + this.predicateToString(andAST[1], true) + closeGroup;
	      } else if (orAST = predicate.or) {
	        return openGroup + this.predicateToString(orAST[0], true) + ' or ' + this.predicateToString(orAST[1], true) + closeGroup;
	      } else if (notAST = predicate.not) {
	        return 'not ' + this.predicateToString(notAST, true);
	      } else {
	        result = [];
	        leftValue = predicate.leftValue;
	        if (leftValue && !(leftValue[0] === 'getAttribute' && leftValue[1] === 'text')) {
	          leftValue = this.valueToString(predicate.leftValue);
	          if (leftValue) {
	            result.push(leftValue);
	          }
	        }
	        if (relation = predicate.relation) {
	          if (relation !== 'contains') {
	            result.push(relation);
	          }
	        }
	        if (modifier = predicate.modifier) {
	          modifierText = '';
	          if (modifier.element !== 'i') {
	            modifierText += modifier.element;
	          }
	          if (modifier.list !== false) {
	            modifierText += 'l';
	          }
	          if (modifierText.length > 0) {
	            result.push('[' + modifierText + ']');
	          }
	        }
	        if (rightValue = this.valueToString(predicate.rightValue)) {
	          result.push(rightValue);
	        }
	        return result.join(' ');
	      }
	    }
	  };
	
	  ItemPath.prototype.valueToString = function(value) {
	    var error, functionName;
	    if (!value) {
	      return;
	    }
	    if (Array.isArray(value)) {
	      functionName = value[0];
	      if (functionName === 'getAttribute') {
	        return '@' + value.slice(1).join(':');
	      } else if (functionName === 'count') {
	        return 'count(' + this.pathExpressionToString(value[1]) + ')';
	      }
	    } else {
	      try {
	        ItemPathParser.parse(value, {
	          startRule: 'StringValue'
	        });
	      } catch (error1) {
	        error = error1;
	        value = '"' + value + '"';
	      }
	      return value;
	    }
	  };
	
	  ItemPath.prototype.stepToString = function(step, first) {
	    var predicate;
	    predicate = this.predicateToString(step.predicate);
	    switch (step.axis) {
	      case 'child':
	        return predicate;
	      case 'descendant':
	        if (first) {
	          return predicate;
	        } else {
	          return '/' + predicate;
	        }
	        break;
	      case 'descendant-or-self':
	        return '//' + predicate;
	      case 'parent':
	        return '..' + predicate;
	      default:
	        return step.axis + '::' + predicate;
	    }
	  };
	
	  ItemPath.prototype.pathToString = function(pathAST) {
	    var first, firstStep, k, len, ref, step, stepStrings;
	    stepStrings = [];
	    firstStep = null;
	    first = true;
	    ref = pathAST.steps;
	    for (k = 0, len = ref.length; k < len; k++) {
	      step = ref[k];
	      if (!firstStep) {
	        firstStep = step;
	        stepStrings.push(this.stepToString(step, true));
	      } else {
	        stepStrings.push(this.stepToString(step));
	      }
	    }
	    if (pathAST.absolute && !(firstStep.axis === 'descendant')) {
	      return '/' + stepStrings.join('/');
	    } else {
	      return stepStrings.join('/');
	    }
	  };
	
	  ItemPath.prototype.pathExpressionToString = function(itemPath, group) {
	    var closeGroup, except, intersect, openGroup, union;
	    openGroup = group ? '(' : '';
	    closeGroup = group ? ')' : '';
	    if (union = itemPath.union) {
	      return openGroup + this.pathExpressionToString(union[0], true) + ' union ' + this.pathExpressionToString(union[1], true) + closeGroup;
	    } else if (intersect = itemPath.intersect) {
	      return openGroup + this.pathExpressionToString(intersect[0], true) + ' intersect ' + this.pathExpressionToString(intersect[1], true) + closeGroup;
	    } else if (except = itemPath.except) {
	      return openGroup + this.pathExpressionToString(except[0], true) + ' except ' + this.pathExpressionToString(except[1], true) + closeGroup;
	    } else {
	      return this.pathToString(itemPath);
	    }
	  };
	
	  ItemPath.prototype.toString = function() {
	    return this.pathExpressionToString(this.pathExpressionAST);
	  };
	
	  return ItemPath;
	
	})();


/***/ }),
/* 166 */
/***/ (function(module, exports) {

	/*
	 * Generated by PEG.js 0.10.0.
	 *
	 * http://pegjs.org/
	 */
	
	"use strict";
	
	function peg$subclass(child, parent) {
	  function ctor() { this.constructor = child; }
	  ctor.prototype = parent.prototype;
	  child.prototype = new ctor();
	}
	
	function peg$SyntaxError(message, expected, found, location) {
	  this.message  = message;
	  this.expected = expected;
	  this.found    = found;
	  this.location = location;
	  this.name     = "SyntaxError";
	
	  if (typeof Error.captureStackTrace === "function") {
	    Error.captureStackTrace(this, peg$SyntaxError);
	  }
	}
	
	peg$subclass(peg$SyntaxError, Error);
	
	peg$SyntaxError.buildMessage = function(expected, found) {
	  var DESCRIBE_EXPECTATION_FNS = {
	        literal: function(expectation) {
	          return "\"" + literalEscape(expectation.text) + "\"";
	        },
	
	        "class": function(expectation) {
	          var escapedParts = "",
	              i;
	
	          for (i = 0; i < expectation.parts.length; i++) {
	            escapedParts += expectation.parts[i] instanceof Array
	              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
	              : classEscape(expectation.parts[i]);
	          }
	
	          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
	        },
	
	        any: function(expectation) {
	          return "any character";
	        },
	
	        end: function(expectation) {
	          return "end of input";
	        },
	
	        other: function(expectation) {
	          return expectation.description;
	        }
	      };
	
	  function hex(ch) {
	    return ch.charCodeAt(0).toString(16).toUpperCase();
	  }
	
	  function literalEscape(s) {
	    return s
	      .replace(/\\/g, '\\\\')
	      .replace(/"/g,  '\\"')
	      .replace(/\0/g, '\\0')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	  }
	
	  function classEscape(s) {
	    return s
	      .replace(/\\/g, '\\\\')
	      .replace(/\]/g, '\\]')
	      .replace(/\^/g, '\\^')
	      .replace(/-/g,  '\\-')
	      .replace(/\0/g, '\\0')
	      .replace(/\t/g, '\\t')
	      .replace(/\n/g, '\\n')
	      .replace(/\r/g, '\\r')
	      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
	  }
	
	  function describeExpectation(expectation) {
	    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	  }
	
	  function describeExpected(expected) {
	    var descriptions = new Array(expected.length),
	        i, j;
	
	    for (i = 0; i < expected.length; i++) {
	      descriptions[i] = describeExpectation(expected[i]);
	    }
	
	    descriptions.sort();
	
	    if (descriptions.length > 0) {
	      for (i = 1, j = 1; i < descriptions.length; i++) {
	        if (descriptions[i - 1] !== descriptions[i]) {
	          descriptions[j] = descriptions[i];
	          j++;
	        }
	      }
	      descriptions.length = j;
	    }
	
	    switch (descriptions.length) {
	      case 1:
	        return descriptions[0];
	
	      case 2:
	        return descriptions[0] + " or " + descriptions[1];
	
	      default:
	        return descriptions.slice(0, -1).join(", ")
	          + ", or "
	          + descriptions[descriptions.length - 1];
	    }
	  }
	
	  function describeFound(found) {
	    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
	  }
	
	  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	};
	
	function peg$parse(input, options) {
	  options = options !== void 0 ? options : {};
	
	  var peg$FAILED = {},
	
	      peg$startRuleFunctions = { ItemPathExpression: peg$parseItemPathExpression, StringValue: peg$parseStringValue },
	      peg$startRuleFunction  = peg$parseItemPathExpression,
	
	      peg$c0 = function(paths) {
	          paths.keywords = keywords;
	          return paths;
	        },
	      peg$c1 = function(left, right) { return combine(left, right, 'union') },
	      peg$c2 = "union",
	      peg$c3 = peg$literalExpectation("union", false),
	      peg$c4 = function(union) {
	          keyword('keyword.set');
	          return union;
	        },
	      peg$c5 = function(left, right) { return combine(left, right, 'except') },
	      peg$c6 = "except",
	      peg$c7 = peg$literalExpectation("except", false),
	      peg$c8 = function(except) {
	          keyword('keyword.set');
	          return except;
	        },
	      peg$c9 = function(left, right) { return combine(left, right, 'intersect') },
	      peg$c10 = "intersect",
	      peg$c11 = peg$literalExpectation("intersect", false),
	      peg$c12 = function(intersect) {
	          keyword('keyword.set');
	          return intersect;
	        },
	      peg$c13 = "[",
	      peg$c14 = peg$literalExpectation("[", false),
	      peg$c15 = "]",
	      peg$c16 = peg$literalExpectation("]", false),
	      peg$c17 = function(start, end) {
	          return {
	            start: start === null ? 0 : start,
	            end: end
	          }
	        },
	      peg$c18 = ":",
	      peg$c19 = peg$literalExpectation(":", false),
	      peg$c20 = function(integer) {
	          if (integer !== null) {
	            return integer;
	          }
	          return Number.MAX_VALUE;
	        },
	      peg$c21 = "-",
	      peg$c22 = peg$literalExpectation("-", false),
	      peg$c23 = /^[0-9]/,
	      peg$c24 = peg$classExpectation([["0", "9"]], false, false),
	      peg$c25 = function(sign, number) {
	          if (sign) {
	            return -parseInt(number.join(''), 10);
	          } else {
	            return parseInt(number.join(''), 10);
	          }
	        },
	      peg$c26 = "(",
	      peg$c27 = peg$literalExpectation("(", false),
	      peg$c28 = ")",
	      peg$c29 = peg$literalExpectation(")", false),
	      peg$c30 = function(expression, slice) {
	          expression.slice = slice;
	          return expression;
	        },
	      peg$c31 = "/",
	      peg$c32 = peg$literalExpectation("/", false),
	      peg$c33 = function(absolute, step, trailingSteps) {
	          absolute = !! absolute;
	
	          if (absolute) {
	            keyword('entity.other.axis', '/');
	          } else if (step.defaultAxis) {
	            // Default to descendent axis for first step in non absolute paths.
	            step.axis = 'descendant';
	          }
	
	          var steps = [step];
	          if (trailingSteps) {
	             steps = steps.concat(trailingSteps);
	          }
	          return {
	            absolute : absolute,
	            steps : steps
	          }
	        },
	      peg$c34 = function(axis, type, predicate, slice) {
	          return type || predicate;
	        },
	      peg$c35 = function(axis, type, predicate, slice) {
	          var defaultAxis = false
	          if (!axis) {
	            defaultAxis = true
	            axis = 'child';
	          }
	
	          if (!type) {
	            type = '*';
	          }
	
	          if (!predicate) {
	            predicate = '*'
	          }
	
	          return {
	            defaultAxis: defaultAxis,
	            axis: axis,
	            type: type,
	            predicate: predicate,
	            slice: slice
	          }
	        },
	      peg$c36 = "ancestor-or-self::",
	      peg$c37 = peg$literalExpectation("ancestor-or-self::", false),
	      peg$c38 = "ancestor::",
	      peg$c39 = peg$literalExpectation("ancestor::", false),
	      peg$c40 = "child::",
	      peg$c41 = peg$literalExpectation("child::", false),
	      peg$c42 = "descendant-or-self::",
	      peg$c43 = peg$literalExpectation("descendant-or-self::", false),
	      peg$c44 = "descendant::",
	      peg$c45 = peg$literalExpectation("descendant::", false),
	      peg$c46 = "following-sibling::",
	      peg$c47 = peg$literalExpectation("following-sibling::", false),
	      peg$c48 = "following::",
	      peg$c49 = peg$literalExpectation("following::", false),
	      peg$c50 = "preceding-sibling::",
	      peg$c51 = peg$literalExpectation("preceding-sibling::", false),
	      peg$c52 = "preceding::",
	      peg$c53 = peg$literalExpectation("preceding::", false),
	      peg$c54 = "parent::",
	      peg$c55 = peg$literalExpectation("parent::", false),
	      peg$c56 = "self::",
	      peg$c57 = peg$literalExpectation("self::", false),
	      peg$c58 = "//",
	      peg$c59 = peg$literalExpectation("//", false),
	      peg$c60 = "..",
	      peg$c61 = peg$literalExpectation("..", false),
	      peg$c62 = ".",
	      peg$c63 = peg$literalExpectation(".", false),
	      peg$c64 = function(axis) {
	            keyword('entity.other.axis');
	
	            switch(axis) {
	            case '//':
	              return 'descendant-or-self';
	            case '/':
	              return 'descendant';
	            case '..':
	              return 'parent';
	            case '.':
	              return 'child';
	            default:
	              return axis.substr(0, axis.length - 2);
	            }
	          },
	      peg$c65 = function(name) {
	          var types = options.types;
	          return types && types[name];
	        },
	      peg$c66 = function(name) {
	          keyword('entity.other.axis');
	          return name;
	        },
	      peg$c67 = function(step) {
	          keyword('entity.other.axis', '/');
	          return step;
	        },
	      peg$c68 = function(left, right) { return combine(left, right, 'or') },
	      peg$c69 = "or",
	      peg$c70 = peg$literalExpectation("or", false),
	      peg$c71 = function(or) {
	          keyword('keyword.boolean');
	          return or;
	        },
	      peg$c72 = function(left, right) { return combine(left, right, 'and') },
	      peg$c73 = "and",
	      peg$c74 = peg$literalExpectation("and", false),
	      peg$c75 = function(and) {
	          keyword('keyword.boolean');
	          return and;
	        },
	      peg$c76 = function(not, expression) {
	          if (not && (not.length % 2)) {
	            return {
	              not : expression
	            };
	          } else {
	            return expression;
	          }
	        },
	      peg$c77 = "not",
	      peg$c78 = peg$literalExpectation("not", false),
	      peg$c79 = function(not) {
	          keyword('keyword.boolean');
	          return not;
	        },
	      peg$c80 = function(expression) { return expression; },
	      peg$c81 = "*",
	      peg$c82 = peg$literalExpectation("*", false),
	      peg$c83 = function(leftValue, relation, modifier, rightValue) {
	          return leftValue != null || rightValue != null;
	        },
	      peg$c84 = function(leftValue, relation, modifier, rightValue) {
	          modifier = modifier || {
	            element: 'i',
	            list: false
	          }
	          if (!relation && !rightValue) {
	            if (leftValue[0] == 'getAttribute') {
	              return {
	                leftValue : leftValue,
	                relation : null,
	                modifier : modifier,
	                rightValue : null
	              };
	            } else {
	              return {
	                leftValue : ['getAttribute', 'text'],
	                relation : relation || 'contains',
	                modifier : modifier,
	                rightValue : leftValue
	              }
	            }
	          }
	          return {
	            leftValue : leftValue || ['getAttribute', 'text'],
	            relation : relation || 'contains',
	            modifier : modifier,
	            rightValue : rightValue
	          }
	        },
	      peg$c85 = "@",
	      peg$c86 = peg$literalExpectation("@", false),
	      peg$c87 = function(name, trailingSegments) {
	          var getAttributeFunction = ['getAttribute', name];
	          if (trailingSegments) {
	            getAttributeFunction = getAttributeFunction.concat(trailingSegments);
	          }
	          keyword('entity.other.attribute-name');
	
	          return getAttributeFunction;
	        },
	      peg$c88 = function(functionName, itemPathExpression) {
	          return [functionName, itemPathExpression];
	        },
	      peg$c89 = function(name) {
	          return name;
	        },
	      peg$c90 = function(chars) {
	          return chars.join('');
	        },
	      peg$c91 = function(char) { return char; },
	      peg$c92 = "count",
	      peg$c93 = peg$literalExpectation("count", false),
	      peg$c94 = function(name) {
	          keyword('entity.other.function-name');
	          return name;
	        },
	      peg$c95 = "beginswith",
	      peg$c96 = peg$literalExpectation("beginswith", false),
	      peg$c97 = "contains",
	      peg$c98 = peg$literalExpectation("contains", false),
	      peg$c99 = "endswith",
	      peg$c100 = peg$literalExpectation("endswith", false),
	      peg$c101 = "matches",
	      peg$c102 = peg$literalExpectation("matches", false),
	      peg$c103 = "=",
	      peg$c104 = peg$literalExpectation("=", false),
	      peg$c105 = "!=",
	      peg$c106 = peg$literalExpectation("!=", false),
	      peg$c107 = "<=",
	      peg$c108 = peg$literalExpectation("<=", false),
	      peg$c109 = ">=",
	      peg$c110 = peg$literalExpectation(">=", false),
	      peg$c111 = "<",
	      peg$c112 = peg$literalExpectation("<", false),
	      peg$c113 = ">",
	      peg$c114 = peg$literalExpectation(">", false),
	      peg$c115 = function(relation) {
	          keyword('keyword.operator.relation');
	          return relation;
	        },
	      peg$c116 = "s",
	      peg$c117 = peg$literalExpectation("s", false),
	      peg$c118 = "i",
	      peg$c119 = peg$literalExpectation("i", false),
	      peg$c120 = "n",
	      peg$c121 = peg$literalExpectation("n", false),
	      peg$c122 = "b",
	      peg$c123 = peg$literalExpectation("b", false),
	      peg$c124 = "d",
	      peg$c125 = peg$literalExpectation("d", false),
	      peg$c126 = "l",
	      peg$c127 = peg$literalExpectation("l", false),
	      peg$c128 = function(element, list) {
	          keyword('keyword.operator.modifier');
	          return {
	            element: element || 'i',
	            list: list === 'l'
	          }
	        },
	      peg$c129 = function(strings) {
	          var results = [];
	          for (var i = 0; i < strings.length; i++) {
	            results.push(strings[i].join(''));
	          }
	          return results.join('').trim();
	        },
	      peg$c130 = peg$otherExpectation("string"),
	      peg$c131 = "\"\"",
	      peg$c132 = peg$literalExpectation("\"\"", false),
	      peg$c133 = function() { return ""; },
	      peg$c134 = "\"",
	      peg$c135 = peg$literalExpectation("\"", false),
	      peg$c136 = function(chars) {
	          keyword('string.quoted');
	          return chars;
	        },
	      peg$c137 = function(chars) { return chars.join(""); },
	      peg$c138 = /^[^"\\\0-\x1F\x7F]/,
	      peg$c139 = peg$classExpectation(["\"", "\\", ["\0", "\x1F"], "\x7F"], true, false),
	      peg$c140 = "\\\"",
	      peg$c141 = peg$literalExpectation("\\\"", false),
	      peg$c142 = function() { return '"';  },
	      peg$c143 = "\\\\",
	      peg$c144 = peg$literalExpectation("\\\\", false),
	      peg$c145 = function() { return "\\"; },
	      peg$c146 = "\\/",
	      peg$c147 = peg$literalExpectation("\\/", false),
	      peg$c148 = function() { return "/";  },
	      peg$c149 = "\\b",
	      peg$c150 = peg$literalExpectation("\\b", false),
	      peg$c151 = function() { return "\b"; },
	      peg$c152 = "\\f",
	      peg$c153 = peg$literalExpectation("\\f", false),
	      peg$c154 = function() { return "\f"; },
	      peg$c155 = "\\n",
	      peg$c156 = peg$literalExpectation("\\n", false),
	      peg$c157 = function() { return "\n"; },
	      peg$c158 = "\\r",
	      peg$c159 = peg$literalExpectation("\\r", false),
	      peg$c160 = function() { return "\r"; },
	      peg$c161 = "\\t",
	      peg$c162 = peg$literalExpectation("\\t", false),
	      peg$c163 = function() { return "\t"; },
	      peg$c164 = /^[~`!#$%\^&*-+={}|\\;',.?\-]/,
	      peg$c165 = peg$classExpectation(["~", "`", "!", "#", "$", "%", "^", "&", ["*", "+"], "=", "{", "}", "|", "\\", ";", "'", ",", ".", "?", "-"], false, false),
	      peg$c166 = function(string) {
	          return reservedWords[string];
	        },
	      peg$c167 = function(string) {
	          keyword('string.unquoted');
	          return string;
	        },
	      peg$c168 = /^[A-Z]/,
	      peg$c169 = peg$classExpectation([["A", "Z"]], false, false),
	      peg$c170 = "_",
	      peg$c171 = peg$literalExpectation("_", false),
	      peg$c172 = /^[a-z]/,
	      peg$c173 = peg$classExpectation([["a", "z"]], false, false),
	      peg$c174 = /^[\xC0-\xD6]/,
	      peg$c175 = peg$classExpectation([["\xC0", "\xD6"]], false, false),
	      peg$c176 = /^[\xD8-\xF6]/,
	      peg$c177 = peg$classExpectation([["\xD8", "\xF6"]], false, false),
	      peg$c178 = /^[\xF8-\u02FF]/,
	      peg$c179 = peg$classExpectation([["\xF8", "\u02FF"]], false, false),
	      peg$c180 = /^[\u0370-\u037D]/,
	      peg$c181 = peg$classExpectation([["\u0370", "\u037D"]], false, false),
	      peg$c182 = /^[\u037F-\u1FFF]/,
	      peg$c183 = peg$classExpectation([["\u037F", "\u1FFF"]], false, false),
	      peg$c184 = /^[\u200C-\u200D]/,
	      peg$c185 = peg$classExpectation([["\u200C", "\u200D"]], false, false),
	      peg$c186 = /^[\u2070-\u218F]/,
	      peg$c187 = peg$classExpectation([["\u2070", "\u218F"]], false, false),
	      peg$c188 = /^[\u2C00-\u2FEF]/,
	      peg$c189 = peg$classExpectation([["\u2C00", "\u2FEF"]], false, false),
	      peg$c190 = /^[\u3001-\uD7FF]/,
	      peg$c191 = peg$classExpectation([["\u3001", "\uD7FF"]], false, false),
	      peg$c192 = /^[\uF900-\uFDCF]/,
	      peg$c193 = peg$classExpectation([["\uF900", "\uFDCF"]], false, false),
	      peg$c194 = /^[\uFDF0-\uFFFD]/,
	      peg$c195 = peg$classExpectation([["\uFDF0", "\uFFFD"]], false, false),
	      peg$c196 = /^[\xB7]/,
	      peg$c197 = peg$classExpectation(["\xB7"], false, false),
	      peg$c198 = /^[\u0300-\u036F]/,
	      peg$c199 = peg$classExpectation([["\u0300", "\u036F"]], false, false),
	      peg$c200 = /^[\u203F-\u2040]/,
	      peg$c201 = peg$classExpectation([["\u203F", "\u2040"]], false, false),
	      peg$c202 = function(startchar, chars) {
	          return startchar + chars.join('');
	        },
	      peg$c203 = peg$otherExpectation("whitespace"),
	      peg$c204 = function(whitespace) { return whitespace.join("") },
	      peg$c205 = /^[ \t\n\r]/,
	      peg$c206 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
	
	      peg$currPos          = 0,
	      peg$savedPos         = 0,
	      peg$posDetailsCache  = [{ line: 1, column: 1 }],
	      peg$maxFailPos       = 0,
	      peg$maxFailExpected  = [],
	      peg$silentFails      = 0,
	
	      peg$resultsCache = {},
	
	      peg$result;
	
	  if ("startRule" in options) {
	    if (!(options.startRule in peg$startRuleFunctions)) {
	      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	    }
	
	    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	  }
	
	  function text() {
	    return input.substring(peg$savedPos, peg$currPos);
	  }
	
	  function location() {
	    return peg$computeLocation(peg$savedPos, peg$currPos);
	  }
	
	  function expected(description, location) {
	    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
	
	    throw peg$buildStructuredError(
	      [peg$otherExpectation(description)],
	      input.substring(peg$savedPos, peg$currPos),
	      location
	    );
	  }
	
	  function error(message, location) {
	    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
	
	    throw peg$buildSimpleError(message, location);
	  }
	
	  function peg$literalExpectation(text, ignoreCase) {
	    return { type: "literal", text: text, ignoreCase: ignoreCase };
	  }
	
	  function peg$classExpectation(parts, inverted, ignoreCase) {
	    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
	  }
	
	  function peg$anyExpectation() {
	    return { type: "any" };
	  }
	
	  function peg$endExpectation() {
	    return { type: "end" };
	  }
	
	  function peg$otherExpectation(description) {
	    return { type: "other", description: description };
	  }
	
	  function peg$computePosDetails(pos) {
	    var details = peg$posDetailsCache[pos], p;
	
	    if (details) {
	      return details;
	    } else {
	      p = pos - 1;
	      while (!peg$posDetailsCache[p]) {
	        p--;
	      }
	
	      details = peg$posDetailsCache[p];
	      details = {
	        line:   details.line,
	        column: details.column
	      };
	
	      while (p < pos) {
	        if (input.charCodeAt(p) === 10) {
	          details.line++;
	          details.column = 1;
	        } else {
	          details.column++;
	        }
	
	        p++;
	      }
	
	      peg$posDetailsCache[pos] = details;
	      return details;
	    }
	  }
	
	  function peg$computeLocation(startPos, endPos) {
	    var startPosDetails = peg$computePosDetails(startPos),
	        endPosDetails   = peg$computePosDetails(endPos);
	
	    return {
	      start: {
	        offset: startPos,
	        line:   startPosDetails.line,
	        column: startPosDetails.column
	      },
	      end: {
	        offset: endPos,
	        line:   endPosDetails.line,
	        column: endPosDetails.column
	      }
	    };
	  }
	
	  function peg$fail(expected) {
	    if (peg$currPos < peg$maxFailPos) { return; }
	
	    if (peg$currPos > peg$maxFailPos) {
	      peg$maxFailPos = peg$currPos;
	      peg$maxFailExpected = [];
	    }
	
	    peg$maxFailExpected.push(expected);
	  }
	
	  function peg$buildSimpleError(message, location) {
	    return new peg$SyntaxError(message, null, null, location);
	  }
	
	  function peg$buildStructuredError(expected, found, location) {
	    return new peg$SyntaxError(
	      peg$SyntaxError.buildMessage(expected, found),
	      expected,
	      found,
	      location
	    );
	  }
	
	  function peg$parseItemPathExpression() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 0,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseUnionPaths();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c0(s1);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseUnionPaths() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 1,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseExceptPaths();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseUnionKeyword();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseUnionPaths();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c1(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseExceptPaths();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseUnionKeyword() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 2,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c2) {
	      s1 = peg$c2;
	      peg$currPos += 5;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c3); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c4(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseExceptPaths() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 3,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseIntersectPaths();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseExceptKeyword();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseExceptPaths();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c5(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseIntersectPaths();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseExceptKeyword() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 4,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 6) === peg$c6) {
	      s1 = peg$c6;
	      peg$currPos += 6;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c7); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c8(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseIntersectPaths() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 5,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parsePathExpression();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseIntersectKeyword();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseIntersectPaths();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c9(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parsePathExpression();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseIntersectKeyword() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 6,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 9) === peg$c10) {
	      s1 = peg$c10;
	      peg$currPos += 9;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c11); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c12(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseSlice() {
	    var s0, s1, s2, s3, s4;
	
	    var key    = peg$currPos * 42 + 7,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 91) {
	      s1 = peg$c13;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c14); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parseInteger();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseSliceEnd();
	        if (s3 === peg$FAILED) {
	          s3 = null;
	        }
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 93) {
	            s4 = peg$c15;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c16); }
	          }
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c17(s2, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseSliceEnd() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 8,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 58) {
	      s1 = peg$c18;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c19); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parseInteger();
	      if (s2 === peg$FAILED) {
	        s2 = null;
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c20(s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseInteger() {
	    var s0, s1, s2, s3;
	
	    var key    = peg$currPos * 42 + 9,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 45) {
	      s1 = peg$c21;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c22); }
	    }
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      if (peg$c23.test(input.charAt(peg$currPos))) {
	        s3 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s3 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c24); }
	      }
	      if (s3 !== peg$FAILED) {
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          if (peg$c23.test(input.charAt(peg$currPos))) {
	            s3 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c24); }
	          }
	        }
	      } else {
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c25(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePathExpression() {
	    var s0, s1, s2, s3, s4, s5, s6, s7;
	
	    var key    = peg$currPos * 42 + 10,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$currPos;
	    peg$silentFails++;
	    s2 = peg$parseOrPredicates();
	    peg$silentFails--;
	    if (s2 === peg$FAILED) {
	      s1 = void 0;
	    } else {
	      peg$currPos = s1;
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 40) {
	        s2 = peg$c26;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c27); }
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parse_();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseUnionPaths();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 41) {
	                s6 = peg$c28;
	                peg$currPos++;
	              } else {
	                s6 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c29); }
	              }
	              if (s6 !== peg$FAILED) {
	                s7 = peg$parseSlice();
	                if (s7 === peg$FAILED) {
	                  s7 = null;
	                }
	                if (s7 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c30(s4, s7);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseItemPath();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseItemPath() {
	    var s0, s1, s2, s3, s4;
	
	    var key    = peg$currPos * 42 + 11,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 47) {
	      s1 = peg$c31;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c32); }
	    }
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parsePathStep();
	      if (s2 !== peg$FAILED) {
	        s3 = [];
	        s4 = peg$parseItemPathTrailingStep();
	        while (s4 !== peg$FAILED) {
	          s3.push(s4);
	          s4 = peg$parseItemPathTrailingStep();
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c33(s1, s2, s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePathStep() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 12,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parsePathStepAxis();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parsePathStepType();
	      if (s2 === peg$FAILED) {
	        s2 = null;
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseOrPredicates();
	        if (s3 === peg$FAILED) {
	          s3 = null;
	        }
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseSlice();
	          if (s4 === peg$FAILED) {
	            s4 = null;
	          }
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = peg$currPos;
	            s5 = peg$c34(s1, s2, s3, s4);
	            if (s5) {
	              s5 = void 0;
	            } else {
	              s5 = peg$FAILED;
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c35(s1, s2, s3, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePathStepAxis() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 13,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 18) === peg$c36) {
	      s1 = peg$c36;
	      peg$currPos += 18;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c37); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.substr(peg$currPos, 10) === peg$c38) {
	        s1 = peg$c38;
	        peg$currPos += 10;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c39); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 7) === peg$c40) {
	          s1 = peg$c40;
	          peg$currPos += 7;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c41); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 20) === peg$c42) {
	            s1 = peg$c42;
	            peg$currPos += 20;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c43); }
	          }
	          if (s1 === peg$FAILED) {
	            if (input.substr(peg$currPos, 12) === peg$c44) {
	              s1 = peg$c44;
	              peg$currPos += 12;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c45); }
	            }
	            if (s1 === peg$FAILED) {
	              if (input.substr(peg$currPos, 19) === peg$c46) {
	                s1 = peg$c46;
	                peg$currPos += 19;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c47); }
	              }
	              if (s1 === peg$FAILED) {
	                if (input.substr(peg$currPos, 11) === peg$c48) {
	                  s1 = peg$c48;
	                  peg$currPos += 11;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c49); }
	                }
	                if (s1 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 19) === peg$c50) {
	                    s1 = peg$c50;
	                    peg$currPos += 19;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c51); }
	                  }
	                  if (s1 === peg$FAILED) {
	                    if (input.substr(peg$currPos, 11) === peg$c52) {
	                      s1 = peg$c52;
	                      peg$currPos += 11;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c53); }
	                    }
	                    if (s1 === peg$FAILED) {
	                      if (input.substr(peg$currPos, 8) === peg$c54) {
	                        s1 = peg$c54;
	                        peg$currPos += 8;
	                      } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c55); }
	                      }
	                      if (s1 === peg$FAILED) {
	                        if (input.substr(peg$currPos, 6) === peg$c56) {
	                          s1 = peg$c56;
	                          peg$currPos += 6;
	                        } else {
	                          s1 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c57); }
	                        }
	                        if (s1 === peg$FAILED) {
	                          if (input.substr(peg$currPos, 2) === peg$c58) {
	                            s1 = peg$c58;
	                            peg$currPos += 2;
	                          } else {
	                            s1 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c59); }
	                          }
	                          if (s1 === peg$FAILED) {
	                            if (input.charCodeAt(peg$currPos) === 47) {
	                              s1 = peg$c31;
	                              peg$currPos++;
	                            } else {
	                              s1 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c32); }
	                            }
	                            if (s1 === peg$FAILED) {
	                              if (input.substr(peg$currPos, 2) === peg$c60) {
	                                s1 = peg$c60;
	                                peg$currPos += 2;
	                              } else {
	                                s1 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c61); }
	                              }
	                              if (s1 === peg$FAILED) {
	                                if (input.charCodeAt(peg$currPos) === 46) {
	                                  s1 = peg$c62;
	                                  peg$currPos++;
	                                } else {
	                                  s1 = peg$FAILED;
	                                  if (peg$silentFails === 0) { peg$fail(peg$c63); }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c64(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePathStepType() {
	    var s0, s1, s2, s3;
	
	    var key    = peg$currPos * 42 + 14,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseName();
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = peg$currPos;
	      s2 = peg$c65(s1);
	      if (s2) {
	        s2 = void 0;
	      } else {
	        s2 = peg$FAILED;
	      }
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parse_();
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c66(s1);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseItemPathTrailingStep() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 15,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 47) {
	      s1 = peg$c31;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c32); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parsePathStep();
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c67(s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseOrPredicates() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 16,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseAndPredicates();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseOrKeyword();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseOrPredicates();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c68(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseAndPredicates();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseOrKeyword() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 17,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 2) === peg$c69) {
	      s1 = peg$c69;
	      peg$currPos += 2;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c70); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c71(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseAndPredicates() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 18,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseNotPredicate();
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseAndKeyword();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parseAndPredicates();
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c72(s1, s5);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseNotPredicate();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseAndKeyword() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 19,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 3) === peg$c73) {
	      s1 = peg$c73;
	      peg$currPos += 3;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c74); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c75(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseNotPredicate() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 20,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$currPos;
	    s3 = peg$parseNotKeyword();
	    if (s3 !== peg$FAILED) {
	      s4 = [];
	      s5 = peg$parsewhitespace();
	      if (s5 !== peg$FAILED) {
	        while (s5 !== peg$FAILED) {
	          s4.push(s5);
	          s5 = peg$parsewhitespace();
	        }
	      } else {
	        s4 = peg$FAILED;
	      }
	      if (s4 !== peg$FAILED) {
	        s3 = [s3, s4];
	        s2 = s3;
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s2;
	      s2 = peg$FAILED;
	    }
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = peg$currPos;
	      s3 = peg$parseNotKeyword();
	      if (s3 !== peg$FAILED) {
	        s4 = [];
	        s5 = peg$parsewhitespace();
	        if (s5 !== peg$FAILED) {
	          while (s5 !== peg$FAILED) {
	            s4.push(s5);
	            s5 = peg$parsewhitespace();
	          }
	        } else {
	          s4 = peg$FAILED;
	        }
	        if (s4 !== peg$FAILED) {
	          s3 = [s3, s4];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parsePredicateExpression();
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c76(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseNotKeyword() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 21,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 3) === peg$c77) {
	      s1 = peg$c77;
	      peg$currPos += 3;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c78); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c79(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePredicateExpression() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 22,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 40) {
	      s1 = peg$c26;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c27); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parse_();
	      if (s2 !== peg$FAILED) {
	        s3 = peg$parseOrPredicates();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parse_();
	          if (s4 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 41) {
	              s5 = peg$c28;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c29); }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c80(s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseComparisionPredicate();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseComparisionPredicate() {
	    var s0, s1, s2, s3, s4, s5, s6, s7, s8;
	
	    var key    = peg$currPos * 42 + 23,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (input.charCodeAt(peg$currPos) === 42) {
	      s0 = peg$c81;
	      peg$currPos++;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c82); }
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      s1 = peg$parsePredicateValue();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parse_();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseRelation();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parse_();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parseModifier();
	              if (s5 === peg$FAILED) {
	                s5 = null;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parse_();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parsePredicateValue();
	                  if (s7 === peg$FAILED) {
	                    s7 = null;
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = peg$currPos;
	                    s8 = peg$c83(s1, s3, s5, s7);
	                    if (s8) {
	                      s8 = void 0;
	                    } else {
	                      s8 = peg$FAILED;
	                    }
	                    if (s8 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c84(s1, s3, s5, s7);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsePredicateValue() {
	    var s0;
	
	    var key    = peg$currPos * 42 + 24,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$parseFunctionValue();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parseStringValue();
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseFunctionValue() {
	    var s0, s1, s2, s3, s4;
	
	    var key    = peg$currPos * 42 + 25,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 64) {
	      s1 = peg$c85;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c86); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parseAttributePathSegmentName();
	      if (s2 !== peg$FAILED) {
	        s3 = [];
	        s4 = peg$parseAttributePathSegment();
	        while (s4 !== peg$FAILED) {
	          s3.push(s4);
	          s4 = peg$parseAttributePathSegment();
	        }
	        if (s3 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c87(s2, s3);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      s1 = peg$parseFunctionName();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 40) {
	          s2 = peg$c26;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c27); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseItemPathExpression();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 41) {
	              s4 = peg$c28;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c29); }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c88(s1, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseAttributePathSegment() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 26,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 58) {
	      s1 = peg$c18;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c19); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parseAttributePathSegmentName();
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c89(s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseAttributePathSegmentName() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 27,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$parseAttributePathSegmentNameChar();
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parseAttributePathSegmentNameChar();
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c90(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseAttributePathSegmentNameChar() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 28,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$currPos;
	    peg$silentFails++;
	    if (input.charCodeAt(peg$currPos) === 58) {
	      s2 = peg$c18;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c19); }
	    }
	    peg$silentFails--;
	    if (s2 === peg$FAILED) {
	      s1 = void 0;
	    } else {
	      peg$currPos = s1;
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$parseNameChar();
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c91(s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseFunctionName() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 29,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c92) {
	      s1 = peg$c92;
	      peg$currPos += 5;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c93); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c94(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseRelation() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 30,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 10) === peg$c95) {
	      s1 = peg$c95;
	      peg$currPos += 10;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c96); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.substr(peg$currPos, 8) === peg$c97) {
	        s1 = peg$c97;
	        peg$currPos += 8;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c98); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 8) === peg$c99) {
	          s1 = peg$c99;
	          peg$currPos += 8;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c100); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.substr(peg$currPos, 7) === peg$c101) {
	            s1 = peg$c101;
	            peg$currPos += 7;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c102); }
	          }
	          if (s1 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 61) {
	              s1 = peg$c103;
	              peg$currPos++;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c104); }
	            }
	            if (s1 === peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c105) {
	                s1 = peg$c105;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c106); }
	              }
	              if (s1 === peg$FAILED) {
	                if (input.substr(peg$currPos, 2) === peg$c107) {
	                  s1 = peg$c107;
	                  peg$currPos += 2;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
	                }
	                if (s1 === peg$FAILED) {
	                  if (input.substr(peg$currPos, 2) === peg$c109) {
	                    s1 = peg$c109;
	                    peg$currPos += 2;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c110); }
	                  }
	                  if (s1 === peg$FAILED) {
	                    if (input.charCodeAt(peg$currPos) === 60) {
	                      s1 = peg$c111;
	                      peg$currPos++;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c112); }
	                    }
	                    if (s1 === peg$FAILED) {
	                      if (input.charCodeAt(peg$currPos) === 62) {
	                        s1 = peg$c113;
	                        peg$currPos++;
	                      } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c114); }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c115(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseModifier() {
	    var s0, s1, s2, s3, s4;
	
	    var key    = peg$currPos * 42 + 31,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 91) {
	      s1 = peg$c13;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c14); }
	    }
	    if (s1 !== peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 115) {
	        s2 = peg$c116;
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c117); }
	      }
	      if (s2 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 105) {
	          s2 = peg$c118;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c119); }
	        }
	        if (s2 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 110) {
	            s2 = peg$c120;
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c121); }
	          }
	          if (s2 === peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 98) {
	              s2 = peg$c122;
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c123); }
	            }
	            if (s2 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 100) {
	                s2 = peg$c124;
	                peg$currPos++;
	              } else {
	                s2 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c125); }
	              }
	            }
	          }
	        }
	      }
	      if (s2 === peg$FAILED) {
	        s2 = null;
	      }
	      if (s2 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 108) {
	          s3 = peg$c126;
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c127); }
	        }
	        if (s3 === peg$FAILED) {
	          s3 = null;
	        }
	        if (s3 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 93) {
	            s4 = peg$c15;
	            peg$currPos++;
	          } else {
	            s4 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c16); }
	          }
	          if (s4 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c128(s2, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseStringValue() {
	    var s0, s1, s2, s3, s4, s5;
	
	    var key    = peg$currPos * 42 + 32,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$currPos;
	    s3 = peg$parse_();
	    if (s3 !== peg$FAILED) {
	      s4 = peg$parseQuotedString();
	      if (s4 === peg$FAILED) {
	        s4 = peg$parseUnquotedString();
	      }
	      if (s4 !== peg$FAILED) {
	        s5 = peg$parse_();
	        if (s5 !== peg$FAILED) {
	          s3 = [s3, s4, s5];
	          s2 = s3;
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s2;
	        s2 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s2;
	      s2 = peg$FAILED;
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$currPos;
	        s3 = peg$parse_();
	        if (s3 !== peg$FAILED) {
	          s4 = peg$parseQuotedString();
	          if (s4 === peg$FAILED) {
	            s4 = peg$parseUnquotedString();
	          }
	          if (s4 !== peg$FAILED) {
	            s5 = peg$parse_();
	            if (s5 !== peg$FAILED) {
	              s3 = [s3, s4, s5];
	              s2 = s3;
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s2;
	          s2 = peg$FAILED;
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c129(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseQuotedString() {
	    var s0, s1, s2, s3;
	
	    var key    = peg$currPos * 42 + 33,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 2) === peg$c131) {
	      s1 = peg$c131;
	      peg$currPos += 2;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c132); }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c133();
	    }
	    s0 = s1;
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 34) {
	        s1 = peg$c134;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c135); }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseChars();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 34) {
	            s3 = peg$c134;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c135); }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c136(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c130); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseChars() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 34,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$parseChar();
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = peg$parseChar();
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c137(s1);
	    }
	    s0 = s1;
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseChar() {
	    var s0, s1;
	
	    var key    = peg$currPos * 42 + 35,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (peg$c138.test(input.charAt(peg$currPos))) {
	      s0 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c139); }
	    }
	    if (s0 === peg$FAILED) {
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 2) === peg$c140) {
	        s1 = peg$c140;
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c141); }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c142();
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 2) === peg$c143) {
	          s1 = peg$c143;
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c144); }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c145();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 2) === peg$c146) {
	            s1 = peg$c146;
	            peg$currPos += 2;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c147); }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c148();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c149) {
	              s1 = peg$c149;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c150); }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c151();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 2) === peg$c152) {
	                s1 = peg$c152;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c153); }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c154();
	              }
	              s0 = s1;
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 2) === peg$c155) {
	                  s1 = peg$c155;
	                  peg$currPos += 2;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c156); }
	                }
	                if (s1 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c157();
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                  s0 = peg$currPos;
	                  if (input.substr(peg$currPos, 2) === peg$c158) {
	                    s1 = peg$c158;
	                    peg$currPos += 2;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c159); }
	                  }
	                  if (s1 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c160();
	                  }
	                  s0 = s1;
	                  if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.substr(peg$currPos, 2) === peg$c161) {
	                      s1 = peg$c161;
	                      peg$currPos += 2;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c162); }
	                    }
	                    if (s1 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c163();
	                    }
	                    s0 = s1;
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseUnquotedString() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 36,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (peg$c23.test(input.charAt(peg$currPos))) {
	      s1 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c24); }
	    }
	    if (s1 === peg$FAILED) {
	      if (peg$c164.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c165); }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = peg$parseName();
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = peg$currPos;
	      s2 = peg$c166(s1);
	      if (s2) {
	        s2 = peg$FAILED;
	      } else {
	        s2 = void 0;
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c167(s1);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c130); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseNameStartChar() {
	    var s0;
	
	    var key    = peg$currPos * 42 + 37,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (input.charCodeAt(peg$currPos) === 58) {
	      s0 = peg$c18;
	      peg$currPos++;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c19); }
	    }
	    if (s0 === peg$FAILED) {
	      if (peg$c168.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c169); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 95) {
	          s0 = peg$c170;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c171); }
	        }
	        if (s0 === peg$FAILED) {
	          if (peg$c172.test(input.charAt(peg$currPos))) {
	            s0 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c173); }
	          }
	          if (s0 === peg$FAILED) {
	            if (peg$c174.test(input.charAt(peg$currPos))) {
	              s0 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c175); }
	            }
	            if (s0 === peg$FAILED) {
	              if (peg$c176.test(input.charAt(peg$currPos))) {
	                s0 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c177); }
	              }
	              if (s0 === peg$FAILED) {
	                if (peg$c178.test(input.charAt(peg$currPos))) {
	                  s0 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c179); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (peg$c180.test(input.charAt(peg$currPos))) {
	                    s0 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c181); }
	                  }
	                  if (s0 === peg$FAILED) {
	                    if (peg$c182.test(input.charAt(peg$currPos))) {
	                      s0 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s0 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c183); }
	                    }
	                    if (s0 === peg$FAILED) {
	                      if (peg$c184.test(input.charAt(peg$currPos))) {
	                        s0 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                      } else {
	                        s0 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c185); }
	                      }
	                      if (s0 === peg$FAILED) {
	                        if (peg$c186.test(input.charAt(peg$currPos))) {
	                          s0 = input.charAt(peg$currPos);
	                          peg$currPos++;
	                        } else {
	                          s0 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c187); }
	                        }
	                        if (s0 === peg$FAILED) {
	                          if (peg$c188.test(input.charAt(peg$currPos))) {
	                            s0 = input.charAt(peg$currPos);
	                            peg$currPos++;
	                          } else {
	                            s0 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c189); }
	                          }
	                          if (s0 === peg$FAILED) {
	                            if (peg$c190.test(input.charAt(peg$currPos))) {
	                              s0 = input.charAt(peg$currPos);
	                              peg$currPos++;
	                            } else {
	                              s0 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c191); }
	                            }
	                            if (s0 === peg$FAILED) {
	                              if (peg$c192.test(input.charAt(peg$currPos))) {
	                                s0 = input.charAt(peg$currPos);
	                                peg$currPos++;
	                              } else {
	                                s0 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c193); }
	                              }
	                              if (s0 === peg$FAILED) {
	                                if (peg$c194.test(input.charAt(peg$currPos))) {
	                                  s0 = input.charAt(peg$currPos);
	                                  peg$currPos++;
	                                } else {
	                                  s0 = peg$FAILED;
	                                  if (peg$silentFails === 0) { peg$fail(peg$c195); }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseNameChar() {
	    var s0;
	
	    var key    = peg$currPos * 42 + 38,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$parseNameStartChar();
	    if (s0 === peg$FAILED) {
	      if (input.charCodeAt(peg$currPos) === 45) {
	        s0 = peg$c21;
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c22); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 46) {
	          s0 = peg$c62;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c63); }
	        }
	        if (s0 === peg$FAILED) {
	          if (peg$c23.test(input.charAt(peg$currPos))) {
	            s0 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c24); }
	          }
	          if (s0 === peg$FAILED) {
	            if (peg$c196.test(input.charAt(peg$currPos))) {
	              s0 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c197); }
	            }
	            if (s0 === peg$FAILED) {
	              if (peg$c198.test(input.charAt(peg$currPos))) {
	                s0 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c199); }
	              }
	              if (s0 === peg$FAILED) {
	                if (peg$c200.test(input.charAt(peg$currPos))) {
	                  s0 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c201); }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parseName() {
	    var s0, s1, s2, s3;
	
	    var key    = peg$currPos * 42 + 39,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    s0 = peg$currPos;
	    s1 = peg$parseNameStartChar();
	    if (s1 !== peg$FAILED) {
	      s2 = [];
	      s3 = peg$parseNameChar();
	      while (s3 !== peg$FAILED) {
	        s2.push(s3);
	        s3 = peg$parseNameChar();
	      }
	      if (s2 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c202(s1, s2);
	        s0 = s1;
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parse_() {
	    var s0, s1, s2;
	
	    var key    = peg$currPos * 42 + 40,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$parsewhitespace();
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = peg$parsewhitespace();
	    }
	    if (s1 !== peg$FAILED) {
	      peg$savedPos = s0;
	      s1 = peg$c204(s1);
	    }
	    s0 = s1;
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c203); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	  function peg$parsewhitespace() {
	    var s0;
	
	    var key    = peg$currPos * 42 + 41,
	        cached = peg$resultsCache[key];
	
	    if (cached) {
	      peg$currPos = cached.nextPos;
	
	      return cached.result;
	    }
	
	    if (peg$c205.test(input.charAt(peg$currPos))) {
	      s0 = input.charAt(peg$currPos);
	      peg$currPos++;
	    } else {
	      s0 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$c206); }
	    }
	
	    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
	
	    return s0;
	  }
	
	
	    var reservedWords = {
	      'union': true,
	      'except': true,
	      'intersect': true,
	      'and': true,
	      'or': true,
	      'not': true,
	      'beginswith': true,
	      'contains': true,
	      'endswith': true,
	      'like': true,
	      'matches': true,
	      // Word starts... covers !=, <=, etc
	      '=': true,
	      '!': true,
	      '<': true,
	      '>': true,
	    }
	
	    function combine(left, right, label) {
	      if (right) {
	        var result = {};
	        result[label] = [left, right];
	        return result;
	      } else {
	        return left;
	      }
	    }
	
	    var keywords = [];
	
	    function keywordCompare(a, b) {
	      var aOffset = a.offset
	      var bOffset = b.offset
	
	      if (aOffset !== bOffset) {
	        return aOffset - bOffset;
	      } else if (a.text.length !== b.text.length) {
	        return a.text.length - b.text.length;
	      } else if (a.label !== b.label) {
	        if (a < b) {
	          return -1;
	        } else {
	          return 1;
	        }
	      } else {
	        return 0;
	      }
	    }
	
	    function keyword(label, textValue) {
	      textValue = textValue === undefined ? text() : textValue;
	
	      var offsetValue = location().start.offset;
	      var length = keywords.length - 1;
	      while (length >= 0 && keywords[length].offset === offsetValue) {
	        keywords.pop();
	        length--;
	      }
	
	      keywords.push({
	        label: label,
	        offset : offsetValue,
	        text : textValue
	      });
	
	      keywords.sort(keywordCompare);
	    }
	
	
	  peg$result = peg$startRuleFunction();
	
	  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	    return peg$result;
	  } else {
	    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	      peg$fail(peg$endExpectation());
	    }
	
	    throw peg$buildStructuredError(
	      peg$maxFailExpected,
	      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	      peg$maxFailPos < input.length
	        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	    );
	  }
	}
	
	module.exports = {
	  SyntaxError: peg$SyntaxError,
	  parse:       peg$parse
	};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var Mutation, assert;
	
	assert = __webpack_require__(10).assert;
	
	module.exports = Mutation = (function() {
	
	  /*
	  Section: Constants
	   */
	  Mutation.ATTRIBUTE_CHANGED = 'attribute';
	
	  Mutation.BODY_CHANGED = 'body';
	
	  Mutation.CHILDREN_CHANGED = 'children';
	
	
	  /*
	  Section: Attribute
	   */
	
	  Mutation.prototype.target = null;
	
	  Mutation.prototype.type = null;
	
	  Mutation.prototype.attributeName = null;
	
	  Mutation.prototype.attributeOldValue = null;
	
	  Mutation.prototype.insertedTextLocation = null;
	
	  Mutation.prototype.insertedTextLength = null;
	
	  Mutation.prototype.replacedTextLength = null;
	
	  Object.defineProperty(Mutation.prototype, 'replacedTextLength', {
	    get: function() {
	      return this.replacedText.length;
	    }
	  });
	
	  Mutation.prototype.replacedText = null;
	
	  Mutation.prototype.addedItems = null;
	
	  Mutation.prototype.removedItems = null;
	
	  Mutation.prototype.previousSibling = null;
	
	  Mutation.prototype.nextSibling = null;
	
	  Mutation.createAttributeMutation = function(target, attributeName, attributeOldValue) {
	    var mutation;
	    assert(attributeName, 'Expect valid attribute name');
	    mutation = new Mutation(target, Mutation.ATTRIBUTE_CHANGED);
	    mutation.attributeName = attributeName;
	    mutation.attributeOldValue = attributeOldValue;
	    return mutation;
	  };
	
	  Mutation.createBodyMutation = function(target, insertedTextLocation, insertedTextLength, replacedText) {
	    var mutation;
	    assert(insertedTextLocation != null, 'Expect valid insertedTextLocation');
	    assert(insertedTextLength != null, 'Expect valid insertedTextLength');
	    mutation = new Mutation(target, Mutation.BODY_CHANGED);
	    mutation.insertedTextLocation = insertedTextLocation;
	    mutation.insertedTextLength = insertedTextLength;
	    mutation.replacedText = replacedText;
	    return mutation;
	  };
	
	  Mutation.createChildrenMutation = function(target, addedItems, removedItems, previousSibling, nextSibling) {
	    var mutation;
	    assert(addedItems.length > 0 || removedItems.length > 0, 'Children added or removed');
	    mutation = new Mutation(target, Mutation.CHILDREN_CHANGED);
	    mutation.addedItems = (addedItems != null ? addedItems.slice() : void 0) || [];
	    mutation.removedItems = (removedItems != null ? removedItems.slice() : void 0) || [];
	    mutation.previousSibling = previousSibling;
	    mutation.nextSibling = nextSibling;
	    return mutation;
	  };
	
	  function Mutation(target1, type) {
	    this.target = target1;
	    this.type = type;
	    this.flattendedAddedItems = null;
	    this.flattenedRemovedItems = null;
	  }
	
	  Mutation.prototype.copy = function() {
	    var mutation, ref;
	    mutation = new Mutation(this.target, this.type);
	    mutation.attributeName = this.attributeName;
	    mutation.attributeNewValue = this.attributeNewValue;
	    mutation.attributeOldValue = this.attributeOldValue;
	    mutation.insertedTextLocation = this.insertedTextLocation;
	    mutation.insertedTextLength = this.insertedTextLength;
	    mutation.replacedText = (ref = this.replacedText) != null ? ref.copy() : void 0;
	    mutation.addedItems = this.addedItems;
	    mutation.removedItems = this.removedItems;
	    mutation.previousSibling = this.previousSibling;
	    mutation.nextSibling = this.nextSibling;
	    return mutation;
	  };
	
	  Mutation.prototype.getFlattendedAddedItems = function() {
	    var each, eachDescendant, i, j, len, len1, ref, ref1;
	    if (!this.flattendedAddedItems) {
	      this.flattendedAddedItems = [];
	      ref = this.addedItems;
	      for (i = 0, len = ref.length; i < len; i++) {
	        each = ref[i];
	        this.flattendedAddedItems.push(each);
	        if (each.hasChildren) {
	          ref1 = each.descendants;
	          for (j = 0, len1 = ref1.length; j < len1; j++) {
	            eachDescendant = ref1[j];
	            this.flattendedAddedItems.push(eachDescendant);
	          }
	        }
	      }
	    }
	    return this.flattendedAddedItems;
	  };
	
	  Mutation.prototype.getFlattendedAddedItemIDs = function() {
	    var each, i, len, ref, results;
	    ref = this.getFlattendedAddedItems();
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      results.push(each.id);
	    }
	    return results;
	  };
	
	  Mutation.prototype.getFlattendedRemovedItems = function() {
	    var each, eachDescendant, i, j, len, len1, ref, ref1;
	    if (!this.flattenedRemovedItems) {
	      this.flattenedRemovedItems = [];
	      ref = this.removedItems;
	      for (i = 0, len = ref.length; i < len; i++) {
	        each = ref[i];
	        this.flattenedRemovedItems.push(each);
	        if (each.hasChildren) {
	          ref1 = each.descendants;
	          for (j = 0, len1 = ref1.length; j < len1; j++) {
	            eachDescendant = ref1[j];
	            this.flattenedRemovedItems.push(eachDescendant);
	          }
	        }
	      }
	    }
	    return this.flattenedRemovedItems;
	  };
	
	  Mutation.prototype.getFlattendedRemovedItemIDs = function() {
	    var each, i, len, ref, results;
	    ref = this.getFlattendedRemovedItems();
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      results.push(each.id);
	    }
	    return results;
	  };
	
	  Mutation.prototype.performUndoOperation = function() {
	    switch (this.type) {
	      case Mutation.ATTRIBUTE_CHANGED:
	        return this.target.setAttribute(this.attributeName, this.attributeOldValue);
	      case Mutation.BODY_CHANGED:
	        return this.target.replaceBodyRange(this.insertedTextLocation, this.insertedTextLength, this.replacedText);
	      case Mutation.CHILDREN_CHANGED:
	        if (this.addedItems.length) {
	          this.target.removeChildren(this.addedItems);
	        }
	        if (this.removedItems.length) {
	          return this.target.insertChildrenBefore(this.removedItems, this.nextSibling, true);
	        }
	    }
	  };
	
	  Mutation.prototype.coalesce = function(operation) {
	    var newInsertedTextLength, newInsertedTextLocation, newReplaceEnd, newReplaceLength, singleDeleteFromEnd, singleInsertAtEnd, thisInsertEnd, thisInsertLength, thisInsertedTextLocation;
	    if (!(operation instanceof Mutation)) {
	      return false;
	    }
	    if (this.target !== operation.target) {
	      return false;
	    }
	    if (this.type !== operation.type) {
	      return false;
	    }
	    if (this.type !== Mutation.BODY_CHANGED) {
	      return false;
	    }
	    thisInsertedTextLocation = this.insertedTextLocation;
	    thisInsertLength = this.insertedTextLength;
	    thisInsertEnd = thisInsertedTextLocation + thisInsertLength;
	    thisInsertEnd = thisInsertedTextLocation + thisInsertLength;
	    newInsertedTextLocation = operation.insertedTextLocation;
	    newInsertedTextLength = operation.insertedTextLength;
	    newReplaceLength = operation.replacedText.length;
	    newReplaceEnd = newInsertedTextLocation + newReplaceLength;
	    singleInsertAtEnd = newInsertedTextLocation === thisInsertEnd && newInsertedTextLength === 1 && newReplaceLength === 0;
	    singleDeleteFromEnd = newReplaceEnd === thisInsertEnd && newInsertedTextLength === 0 && newReplaceLength === 1;
	    if (singleInsertAtEnd) {
	      this.insertedTextLength++;
	      return true;
	    } else if (singleDeleteFromEnd) {
	      if (newInsertedTextLocation < thisInsertedTextLocation) {
	        this.replacedText.insertText(0, operation.replacedText);
	        this.insertedTextLocation--;
	      } else {
	        this.insertedTextLength--;
	      }
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  return Mutation;
	
	})();


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {(function () {
	    var ctph = {};
	    var isBrowser = false;
	    if (typeof module !== 'undefined' && module.exports) {
	        exports = module.exports = ctph;
	    } else {//for browser
	        this.ctph = ctph;
	        isBrowser = true;
	    }
	
	    var HASH_PRIME = 0x01000193;
	    var HASH_INIT = 0x28021967;
	    var B64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	
	    //refer http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
	    function toUTF8Array (str) {
	        var utf8 = unescape(encodeURIComponent(str));
	        var arr = [];
	        for (var i = 0; i < utf8.length; i++) {
	            arr.push(utf8.charCodeAt(i));
	        }
	        return arr;
	    }
	
	    //FNV-1 hash
	    function fnv (base, b) {
	        return ((base * HASH_PRIME) ^ b) >>> 0;
	    }
	
	    //Based on https://github.com/hiddentao/fast-levenshtein
	    function levenshtein (str1, str2) {
	        // base cases
	        if (str1 === str2) return 0;
	        if (str1.length === 0) return str2.length;
	        if (str2.length === 0) return str1.length;
	
	        // two rows
	        var prevRow  = new Array(str2.length + 1),
	            curCol, nextCol, i, j, tmp;
	
	        // initialise previous row
	        for (i=0; i<prevRow.length; ++i) {
	            prevRow[i] = i;
	        }
	
	        // calculate current row distance from previous row
	        for (i=0; i<str1.length; ++i) {
	            nextCol = i + 1;
	
	            for (j=0; j<str2.length; ++j) {
	                curCol = nextCol;
	
	                // substution
	                nextCol = prevRow[j] + ( (str1.charAt(i) === str2.charAt(j)) ? 0 : 1 );
	                // insertion
	                tmp = curCol + 1;
	                if (nextCol > tmp) {
	                    nextCol = tmp;
	                }
	                // deletion
	                tmp = prevRow[j + 1] + 1;
	                if (nextCol > tmp) {
	                    nextCol = tmp;
	                }
	
	                // copy current col value into previous (in preparation for next iteration)
	                prevRow[j] = curCol;
	            }
	
	            // copy last col value into previous (in preparation for next iteration)
	            prevRow[j] = nextCol;
	        }
	        return nextCol;
	    }
	
	    function RollHash () {
	        this.x = 0;
	        this.y = 0;
	        this.z = 0;
	        this.c = 0;
	        this.window = new Array(7);
	    }
	    RollHash.prototype.update = function (d) {
	        this.y -= this.x;
	        this.y += 7 * d;
	        this.x += d;
	        this.x -= this.window[this.c % 7] || 0;
	        this.window[this.c % 7] = d;
	        this.c++;
	        this.z = (this.z << 5)>>>0; // `>>>0` for force unsigned
	        this.z = (this.z ^ d)>>>0;
	    };
	    RollHash.prototype.sum = function () {
	        return (this.x + this.y + this.z) >>> 0;
	    };
	
	    function piecewiseHash (bytes, triggerValue) {
	        var signatures = ['',''];
	        var h1 = HASH_INIT;
	        var h2 = HASH_INIT;
	        var rh = new RollHash();
	        for (var i = 0, len = bytes.length; i < len; i++) {
	            h1 = fnv(h1, bytes[i]);
	            h2 = fnv(h2, bytes[i]);
	            rh.update(bytes[i]);
	            if (i === len - 1 || rh.sum() % triggerValue === (triggerValue - 1)) {
	                signatures[0] += B64.charAt(h1&63);
	                h1 = HASH_INIT;
	            }
	            if (i === len - 1 || rh.sum() % (triggerValue * 2) === (triggerValue * 2 - 1) ) {
	                signatures[1] += B64.charAt(h2&63);
	                h2 = HASH_INIT;
	            }
	        }
	        return signatures;
	    }
	
	    //Context Triggered Piecewise Hash (CTPH)
	    function digest (bytes) {
	        var minb = 3;
	        var bi = Math.ceil(Math.log(bytes.length/(64*minb))/Math.log(2));
	        bi = Math.max(3, bi);
	        var signatures = piecewiseHash(bytes, minb << bi);
	        while (bi>0 && signatures[0].length < 32){
	            signatures = piecewiseHash(bytes, minb << --bi);
	        }
	        return B64.charAt(bi) + ':' + signatures[0] + ':' + signatures[1];
	    }
	
	    function matchScore (s1, s2) {
	        var e = levenshtein(s1, s2);
	        var r = 1 - e/Math.max(s1.length ,s2.length);
	        return r * 100;
	    }
	
	    ctph.digest = function (data) {
	        if (typeof data === 'string') {
	            data = isBrowser?toUTF8Array(data):new Buffer(data).toJSON().data;
	        }
	        return digest(data);
	    };
	
	    ctph.similarity = function (d1, d2) {
	        var b1 = B64.indexOf(d1.charAt(0));
	        var b2 = B64.indexOf(d2.charAt(0));
	        if (b1 > b2) return arguments.callee(d2, d1);
	
	        if (Math.abs(b1-b2) > 1) {
	            return 0;
	        } else if (b1 === b2) {
	            return matchScore(d1.split(':')[1], d2.split(':')[1]);
	        } else {
	            return matchScore(d1.split(':')[2], d2.split(':')[1]);
	        }
	    };
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(169).Buffer))

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(170)
	var ieee754 = __webpack_require__(171)
	var isArray = __webpack_require__(172)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 170 */
/***/ (function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function getLens (b64) {
	  var len = b64.length
	
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len
	
	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)
	
	  return [validLen, placeHoldersLen]
	}
	
	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	
	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
	
	  var curByte = 0
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen
	
	  var i
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }
	
	  return parts.join('')
	}


/***/ }),
/* 171 */
/***/ (function(module, exports) {

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, Birch, ElementType, Item, assert, beginSerialization, beginSerializeItem, createItem, deserializeItems, dom, endSerialization, endSerializeItem, serializeItemBody;
	
	AttributedString = __webpack_require__(8);
	
	ElementType = __webpack_require__(174);
	
	assert = __webpack_require__(10).assert;
	
	Birch = __webpack_require__(2);
	
	Item = __webpack_require__(23);
	
	dom = __webpack_require__(175);
	
	
	/*
	Serialization
	 */
	
	beginSerialization = function(items, options, context) {
	  var body, encodingMeta, expandedIDs, expandedMeta, head, rootUL;
	  context.html = dom.createElement('html', {
	    xmlns: 'http://www.w3.org/1999/xhtml'
	  });
	  context.elementStack = [];
	  context.topElement = function() {
	    return this.elementStack[this.elementStack.length - 1];
	  };
	  context.popElement = function() {
	    return this.elementStack.pop();
	  };
	  context.pushElement = function(element) {
	    return this.elementStack.push(element);
	  };
	  head = dom.createElement('head');
	  dom.appendChild(context.html, head);
	  expandedIDs = options != null ? options.expandedIDs : void 0;
	  if (expandedIDs != null ? expandedIDs.length : void 0) {
	    expandedMeta = dom.createElement('meta', {
	      name: 'expandedItems',
	      content: expandedIDs.join(' ')
	    });
	    dom.appendChild(head, expandedMeta);
	  }
	  encodingMeta = dom.createElement('meta', {
	    charset: 'UTF-8'
	  });
	  dom.appendChild(head, encodingMeta);
	  body = dom.createElement('body');
	  dom.appendChild(context.html, body);
	  rootUL = dom.createElement('ul', {
	    id: Birch.RootID
	  });
	  dom.appendChild(body, rootUL);
	  return context.pushElement(rootUL);
	};
	
	beginSerializeItem = function(item, options, context) {
	  var eachName, eachValue, i, len, liElement, parentElement, ref, ulElement;
	  parentElement = context.topElement();
	  if (parentElement.name === 'li') {
	    context.popElement();
	    ulElement = dom.createElement('ul');
	    dom.appendChild(parentElement, ulElement);
	    parentElement = ulElement;
	    context.pushElement(ulElement);
	  }
	  liElement = dom.createElement('li', {
	    id: item.id
	  });
	  ref = item.attributeNames;
	  for (i = 0, len = ref.length; i < len; i++) {
	    eachName = ref[i];
	    eachValue = item.getAttribute(eachName);
	    if (!(eachName === 'indent' && eachValue === '1')) {
	      liElement.attribs[eachName] = eachValue;
	    }
	  }
	  dom.appendChild(parentElement, liElement);
	  return context.pushElement(liElement);
	};
	
	serializeItemBody = function(item, bodyAttributedString, options, context) {
	  var liElement, pElement;
	  liElement = context.topElement();
	  pElement = dom.createElement('p');
	  bodyAttributedString.toInlineBMLInContainer(pElement);
	  context.lastSerializedLI = liElement;
	  return dom.appendChild(liElement, pElement);
	};
	
	endSerializeItem = function(item, options, context) {
	  return context.popElement();
	};
	
	endSerialization = function(options, context) {
	  var result;
	  dom.prettyDOM(context.html, {
	    p: true
	  });
	  result = dom.getOuterHTML(context.html, {
	    decodeEntities: true,
	    lowerCaseTags: true,
	    xmlMode: true
	  });
	  return '<!DOCTYPE html>\n' + result;
	};
	
	
	/*
	Deserialization
	 */
	
	deserializeItems = function(bmlString, outline, options) {
	  var eachLI, expandedItemIDs, flatItems, htmlElement, items, parsedDOM, ref, ref1, ref2, rootUL;
	  parsedDOM = dom.parseDOM(bmlString);
	  htmlElement = dom.getElementsByTagName('html', parsedDOM, false)[0];
	  rootUL = (ref = (ref1 = (ref2 = dom.getElementById(Birch.RootID, parsedDOM)) != null ? ref2 : dom.getElementById('Birch.Root', parsedDOM)) != null ? ref1 : dom.getElementById('Birch', parsedDOM)) != null ? ref : dom.getElementById('Root', parsedDOM);
	  if (rootUL) {
	    rootUL.attribs['id'] = Birch.RootID;
	    dom.normalizeDOM(rootUL, {
	      'p': true
	    });
	    expandedItemIDs = {};
	    flatItems = [];
	    eachLI = dom.firstChild(rootUL);
	    while (eachLI) {
	      createItem(outline, eachLI, 0, flatItems, function(oldID, newID) {
	        if (expandedItemIDs[oldID]) {
	          delete expandedItemIDs[oldID];
	        }
	        return expandedItemIDs[newID] = true;
	      });
	      eachLI = eachLI.next;
	    }
	    items = Item.buildItemHiearchy(flatItems);
	    return items;
	  } else {
	    throw new Error('Could not find <ul id="Birch"> element.');
	  }
	};
	
	createItem = function(outline, liOrRootUL, depth, flatItems, remapIDCallback) {
	  var P, UL, attributeName, eachLI, i, item, itemIndent, len, p, pOrUL, pOrULTagName, pTagName, ref, tagName, text;
	  tagName = liOrRootUL.name;
	  if (tagName === 'li') {
	    p = dom.firstChild(liOrRootUL);
	    pOrUL = dom.lastChild(liOrRootUL);
	    pTagName = p != null ? p.name : void 0;
	    pOrULTagName = pOrUL != null ? pOrUL.name : void 0;
	    assert(pTagName === 'p', "Expected 'P', but got " + pTagName);
	    if (pTagName === pOrULTagName) {
	      assert(pOrUL === p, "Expect single 'P' child in 'LI'");
	    } else {
	      assert(pOrULTagName === 'ul', "Expected 'UL', but got " + pOrULTagName);
	      assert(pOrUL.prev === p, "Expected previous sibling of 'UL' to be 'P'");
	    }
	    AttributedString.validateInlineBML(p);
	  } else if (tagName === 'ul') {
	    assert(liOrRootUL.id === Birch.RootID);
	  } else {
	    assert(false, "Expected 'LI' or 'UL', but got " + tagName);
	  }
	  P = dom.firstChild(liOrRootUL);
	  UL = dom.lastChild(liOrRootUL);
	  text = AttributedString.fromInlineBML(P.children);
	  item = outline.createItem(text, liOrRootUL.attribs['id'], remapIDCallback);
	  flatItems.push(item);
	  if (liOrRootUL.attribs) {
	    ref = Object.keys(liOrRootUL.attribs);
	    for (i = 0, len = ref.length; i < len; i++) {
	      attributeName = ref[i];
	      if (attributeName !== 'id') {
	        item.setAttribute(attributeName, liOrRootUL.attribs[attributeName]);
	      }
	    }
	  }
	  itemIndent = item.indent || 1;
	  depth = depth + itemIndent;
	  item.indent = depth;
	  if (P !== UL) {
	    eachLI = dom.firstChild(UL);
	    while (eachLI) {
	      createItem(outline, eachLI, depth, flatItems, remapIDCallback);
	      eachLI = eachLI.next;
	    }
	  }
	  return item;
	};
	
	module.exports = {
	  beginSerialization: beginSerialization,
	  beginSerializeItem: beginSerializeItem,
	  serializeItemBody: serializeItemBody,
	  endSerializeItem: endSerializeItem,
	  endSerialization: endSerialization,
	  deserializeItems: deserializeItems
	};


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	//Types of elements found in the DOM
	module.exports = {
		Text: "text", //Text
		Directive: "directive", //<? ... ?>
		Comment: "comment", //<!-- ... -->
		Script: "script", //<script> tags
		Style: "style", //<style> tags
		Tag: "tag", //Any tag
		CDATA: "cdata", //<![CDATA[ ... ]]>
		Doctype: "doctype",
	
		isTag: function(elem){
			return elem.type === "tag" || elem.type === "script" || elem.type === "style";
		}
	};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	var ElementType, _, appendChild, cloneNode, commonAncestor, createElement, createTextNode, domutils, firstChild, getElementById, getElementsByTagName, getInnerHTML, getOuterHTML, htmlparser, insertChildBefore, lastChild, lastDescendantNodeOrSelf, nextNode, nextSibling, nodeNextBranch, normalizeDOM, parents, parseDOM, prettyDOM, previousNode, previousSibling, removeElement, shortestPath, stopEventPropagation;
	
	ElementType = __webpack_require__(174);
	
	htmlparser = __webpack_require__(176);
	
	domutils = __webpack_require__(190);
	
	_ = __webpack_require__(15);
	
	
	/*
	Create
	 */
	
	parseDOM = function(string, options) {
	  var handler, out, parser;
	  if (!options) {
	    options = {
	      decodeEntities: true,
	      lowerCaseTags: true,
	      xmlMode: true
	    };
	  }
	  out = null;
	  handler = new htmlparser.DomHandler(function(error, parsedDOM) {
	    if (error) {
	      throw error;
	    } else {
	      return out = parsedDOM;
	    }
	  });
	  parser = new htmlparser.Parser(handler, options);
	  parser.write(string);
	  parser.done();
	  return out;
	};
	
	createElement = function(tagName, attribs) {
	  if (attribs == null) {
	    attribs = {};
	  }
	  return {
	    type: ElementType.Tag,
	    name: tagName.toLowerCase(),
	    attribs: attribs,
	    children: []
	  };
	};
	
	createTextNode = function(text) {
	  return {
	    type: ElementType.Text,
	    data: text
	  };
	};
	
	cloneNode = function(node) {
	  var clone, each, i, len, ref;
	  clone = Object.assign({}, node);
	  if (clone.children) {
	    clone.children = [];
	    ref = node.children;
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      domutils.appendChild(clone, cloneNode(each));
	    }
	  }
	  return clone;
	};
	
	
	/*
	Manipulate
	 */
	
	appendChild = function(parent, child) {
	  return domutils.appendChild(parent, child);
	};
	
	insertChildBefore = function(parent, child, sibling) {
	  return domutils.appendChild(parent, child);
	};
	
	removeElement = function(element) {
	  return domutils.removeElement(element);
	};
	
	firstChild = function(parent) {
	  var ref;
	  return (ref = parent.children) != null ? ref[0] : void 0;
	};
	
	lastChild = function(parent) {
	  var children;
	  if (children = parent.children) {
	    return children[children.length - 1];
	  }
	  return null;
	};
	
	parents = function(node) {
	  var nodes;
	  nodes = [node];
	  while (node = node.parent) {
	    nodes.unshift(node);
	  }
	  return nodes;
	};
	
	nextSibling = function(node) {
	  return node.next;
	};
	
	previousSibling = function(node) {
	  return node.prev;
	};
	
	shortestPath = function(node1, node2) {
	  var commonDepth, parents1, parents2;
	  if (node1 === node2) {
	    return [node1];
	  } else {
	    parents1 = parents(node1);
	    parents2 = parents(node2);
	    commonDepth = 0;
	    while (parents1[commonDepth] === parents2[commonDepth]) {
	      commonDepth++;
	    }
	    parents1.splice(0, commonDepth - 1);
	    parents2.splice(0, commonDepth);
	    return parents1.concat(parents2);
	  }
	};
	
	commonAncestor = function(node1, node2) {
	  var parents1, parents2;
	  if (node1 === node2) {
	    return [node1];
	  } else {
	    parents1 = parents(node1);
	    parents2 = parents(node2);
	    while (parents1[depth] === parents2[depth]) {
	      depth++;
	    }
	    return parents1[depth - 1];
	  }
	};
	
	previousNode = function(node) {
	  var prev;
	  if (prev = previousSibling(node)) {
	    return lastDescendantNodeOrSelf(prev);
	  } else {
	    return node.parent || null;
	  }
	};
	
	nextNode = function(node) {
	  var first, next, parent;
	  if (first = firstChild(node)) {
	    return first;
	  } else {
	    next = nextSibling(node);
	    if (next) {
	      return next;
	    } else {
	      parent = node.parent;
	      while (parent) {
	        next = nextSibling(parent);
	        if (next) {
	          return next;
	        }
	        parent = parent.parent;
	      }
	      return null;
	    }
	  }
	};
	
	nodeNextBranch = function(node) {
	  var next, p;
	  if (next = nextSibling(node)) {
	    return next;
	  } else {
	    p = node.parent;
	    while (p) {
	      if (next = nextSibling(p)) {
	        return next;
	      }
	      p = p.parent;
	    }
	    return null;
	  }
	};
	
	lastDescendantNodeOrSelf = function(node) {
	  var each, last;
	  last = lastChild(node);
	  each = node;
	  while (last) {
	    each = last;
	    last = lastChild(each);
	  }
	  return each;
	};
	
	getElementById = function(id, element, recurse) {
	  return domutils.getElementById(id, element);
	};
	
	getElementsByTagName = function(name, element, recurse, limit) {
	  return domutils.getElementsByTagName(name, element, recurse, limit);
	};
	
	normalizeDOM = function(element, skip) {
	  var each, i, len, ref, ref1, results;
	  if (skip == null) {
	    skip = {};
	  }
	  if (skip[element.name]) {
	    return;
	  }
	  if (((ref = element.children) != null ? ref.length : void 0) > 0) {
	    ref1 = element.children.slice();
	    results = [];
	    for (i = 0, len = ref1.length; i < len; i++) {
	      each = ref1[i];
	      if (each.type === ElementType.Text) {
	        results.push(removeElement(each));
	      } else {
	        results.push(normalizeDOM(each, skip));
	      }
	    }
	    return results;
	  }
	};
	
	prettyDOM = function(element, skip, trimEmpty, indent) {
	  var childIndent, each, i, len, ref;
	  if (skip == null) {
	    skip = {};
	  }
	  if (trimEmpty == null) {
	    trimEmpty = {};
	  }
	  if (indent == null) {
	    indent = '\n';
	  }
	  if (skip[element.name]) {
	    return;
	  }
	  if (element.children.length > 0) {
	    childIndent = indent + '  ';
	    ref = element.children.slice();
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      domutils.prepend(each, createTextNode(childIndent));
	      prettyDOM(each, skip, trimEmpty, childIndent);
	    }
	    return domutils.append(lastChild(element), createTextNode(indent));
	  }
	};
	
	getInnerHTML = function(node, options) {
	  return domutils.getInnerHTML(node, options);
	};
	
	getOuterHTML = function(node, options) {
	  return domutils.getOuterHTML(node, options);
	};
	
	stopEventPropagation = function(commandListeners) {
	  var commandListener, commandName, fn, newCommandListeners;
	  newCommandListeners = {};
	  fn = function(commandListener) {
	    return newCommandListeners[commandName] = function(event) {
	      event.stopPropagation();
	      return commandListener.call(this, event);
	    };
	  };
	  for (commandName in commandListeners) {
	    commandListener = commandListeners[commandName];
	    fn(commandListener);
	  }
	  return newCommandListeners;
	};
	
	module.exports = {
	  parseDOM: parseDOM,
	  createElement: createElement,
	  createTextNode: createTextNode,
	  cloneNode: cloneNode,
	  appendChild: appendChild,
	  firstChild: firstChild,
	  lastChild: lastChild,
	  parents: parents,
	  shortestPath: shortestPath,
	  commonAncestor: commonAncestor,
	  previousNode: previousNode,
	  nextNode: nextNode,
	  nodeNextBranch: nodeNextBranch,
	  lastDescendantNodeOrSelf: lastDescendantNodeOrSelf,
	  getElementById: getElementById,
	  getElementsByTagName: getElementsByTagName,
	  normalizeDOM: normalizeDOM,
	  prettyDOM: prettyDOM,
	  getInnerHTML: getInnerHTML,
	  getOuterHTML: getOuterHTML,
	  stopEventPropagation: stopEventPropagation
	};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var Parser = __webpack_require__(177);
	var DomHandler = __webpack_require__(186);
	
	function defineProp(name, value) {
	    delete module.exports[name];
	    module.exports[name] = value;
	    return value;
	}
	
	module.exports = {
	    Parser: Parser,
	    Tokenizer: __webpack_require__(178),
	    ElementType: __webpack_require__(174),
	    DomHandler: DomHandler,
	    get FeedHandler() {
	        return defineProp("FeedHandler", __webpack_require__(189));
	    },
	    get Stream() {
	        return defineProp("Stream", __webpack_require__(208));
	    },
	    get WritableStream() {
	        return defineProp("WritableStream", __webpack_require__(209));
	    },
	    get ProxyHandler() {
	        return defineProp("ProxyHandler", __webpack_require__(217));
	    },
	    get DomUtils() {
	        return defineProp("DomUtils", __webpack_require__(190));
	    },
	    get CollectingHandler() {
	        return defineProp(
	            "CollectingHandler",
	            __webpack_require__(218)
	        );
	    },
	    // For legacy support
	    DefaultHandler: DomHandler,
	    get RssHandler() {
	        return defineProp("RssHandler", this.FeedHandler);
	    },
	    //helper methods
	    parseDOM: function(data, options) {
	        var handler = new DomHandler(options);
	        new Parser(handler, options).end(data);
	        return handler.dom;
	    },
	    parseFeed: function(feed, options) {
	        var handler = new module.exports.FeedHandler(options);
	        new Parser(handler, options).end(feed);
	        return handler.dom;
	    },
	    createDomStream: function(cb, options, elementCb) {
	        var handler = new DomHandler(cb, options, elementCb);
	        return new Parser(handler, options);
	    },
	    // List of all events that the parser emits
	    EVENTS: {
	        /* Format: eventname: number of arguments */
	        attribute: 2,
	        cdatastart: 0,
	        cdataend: 0,
	        text: 1,
	        processinginstruction: 2,
	        comment: 1,
	        commentend: 0,
	        closetag: 1,
	        opentag: 2,
	        opentagname: 1,
	        error: 1,
	        end: 0
	    }
	};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	var Tokenizer = __webpack_require__(178);
	
	/*
		Options:
	
		xmlMode: Disables the special behavior for script/style tags (false by default)
		lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
		lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
	*/
	
	/*
		Callbacks:
	
		oncdataend,
		oncdatastart,
		onclosetag,
		oncomment,
		oncommentend,
		onerror,
		onopentag,
		onprocessinginstruction,
		onreset,
		ontext
	*/
	
	var formTags = {
	    input: true,
	    option: true,
	    optgroup: true,
	    select: true,
	    button: true,
	    datalist: true,
	    textarea: true
	};
	
	var openImpliesClose = {
	    tr: { tr: true, th: true, td: true },
	    th: { th: true },
	    td: { thead: true, th: true, td: true },
	    body: { head: true, link: true, script: true },
	    li: { li: true },
	    p: { p: true },
	    h1: { p: true },
	    h2: { p: true },
	    h3: { p: true },
	    h4: { p: true },
	    h5: { p: true },
	    h6: { p: true },
	    select: formTags,
	    input: formTags,
	    output: formTags,
	    button: formTags,
	    datalist: formTags,
	    textarea: formTags,
	    option: { option: true },
	    optgroup: { optgroup: true }
	};
	
	var voidElements = {
	    __proto__: null,
	    area: true,
	    base: true,
	    basefont: true,
	    br: true,
	    col: true,
	    command: true,
	    embed: true,
	    frame: true,
	    hr: true,
	    img: true,
	    input: true,
	    isindex: true,
	    keygen: true,
	    link: true,
	    meta: true,
	    param: true,
	    source: true,
	    track: true,
	    wbr: true
	};
	
	var foreignContextElements = {
	    __proto__: null,
	    math: true,
	    svg: true
	};
	var htmlIntegrationElements = {
	    __proto__: null,
	    mi: true,
	    mo: true,
	    mn: true,
	    ms: true,
	    mtext: true,
	    "annotation-xml": true,
	    foreignObject: true,
	    desc: true,
	    title: true
	};
	
	var re_nameEnd = /\s|\//;
	
	function Parser(cbs, options) {
	    this._options = options || {};
	    this._cbs = cbs || {};
	
	    this._tagname = "";
	    this._attribname = "";
	    this._attribvalue = "";
	    this._attribs = null;
	    this._stack = [];
	    this._foreignContext = [];
	
	    this.startIndex = 0;
	    this.endIndex = null;
	
	    this._lowerCaseTagNames =
	        "lowerCaseTags" in this._options
	            ? !!this._options.lowerCaseTags
	            : !this._options.xmlMode;
	    this._lowerCaseAttributeNames =
	        "lowerCaseAttributeNames" in this._options
	            ? !!this._options.lowerCaseAttributeNames
	            : !this._options.xmlMode;
	
	    if (this._options.Tokenizer) {
	        Tokenizer = this._options.Tokenizer;
	    }
	    this._tokenizer = new Tokenizer(this._options, this);
	
	    if (this._cbs.onparserinit) this._cbs.onparserinit(this);
	}
	
	__webpack_require__(184)(Parser, __webpack_require__(185).EventEmitter);
	
	Parser.prototype._updatePosition = function(initialOffset) {
	    if (this.endIndex === null) {
	        if (this._tokenizer._sectionStart <= initialOffset) {
	            this.startIndex = 0;
	        } else {
	            this.startIndex = this._tokenizer._sectionStart - initialOffset;
	        }
	    } else this.startIndex = this.endIndex + 1;
	    this.endIndex = this._tokenizer.getAbsoluteIndex();
	};
	
	//Tokenizer event handlers
	Parser.prototype.ontext = function(data) {
	    this._updatePosition(1);
	    this.endIndex--;
	
	    if (this._cbs.ontext) this._cbs.ontext(data);
	};
	
	Parser.prototype.onopentagname = function(name) {
	    if (this._lowerCaseTagNames) {
	        name = name.toLowerCase();
	    }
	
	    this._tagname = name;
	
	    if (!this._options.xmlMode && name in openImpliesClose) {
	        for (
	            var el;
	            (el = this._stack[this._stack.length - 1]) in
	            openImpliesClose[name];
	            this.onclosetag(el)
	        );
	    }
	
	    if (this._options.xmlMode || !(name in voidElements)) {
	        this._stack.push(name);
	        if (name in foreignContextElements) this._foreignContext.push(true);
	        else if (name in htmlIntegrationElements)
	            this._foreignContext.push(false);
	    }
	
	    if (this._cbs.onopentagname) this._cbs.onopentagname(name);
	    if (this._cbs.onopentag) this._attribs = {};
	};
	
	Parser.prototype.onopentagend = function() {
	    this._updatePosition(1);
	
	    if (this._attribs) {
	        if (this._cbs.onopentag)
	            this._cbs.onopentag(this._tagname, this._attribs);
	        this._attribs = null;
	    }
	
	    if (
	        !this._options.xmlMode &&
	        this._cbs.onclosetag &&
	        this._tagname in voidElements
	    ) {
	        this._cbs.onclosetag(this._tagname);
	    }
	
	    this._tagname = "";
	};
	
	Parser.prototype.onclosetag = function(name) {
	    this._updatePosition(1);
	
	    if (this._lowerCaseTagNames) {
	        name = name.toLowerCase();
	    }
	    
	    if (name in foreignContextElements || name in htmlIntegrationElements) {
	        this._foreignContext.pop();
	    }
	
	    if (
	        this._stack.length &&
	        (!(name in voidElements) || this._options.xmlMode)
	    ) {
	        var pos = this._stack.lastIndexOf(name);
	        if (pos !== -1) {
	            if (this._cbs.onclosetag) {
	                pos = this._stack.length - pos;
	                while (pos--) this._cbs.onclosetag(this._stack.pop());
	            } else this._stack.length = pos;
	        } else if (name === "p" && !this._options.xmlMode) {
	            this.onopentagname(name);
	            this._closeCurrentTag();
	        }
	    } else if (!this._options.xmlMode && (name === "br" || name === "p")) {
	        this.onopentagname(name);
	        this._closeCurrentTag();
	    }
	};
	
	Parser.prototype.onselfclosingtag = function() {
	    if (
	        this._options.xmlMode ||
	        this._options.recognizeSelfClosing ||
	        this._foreignContext[this._foreignContext.length - 1]
	    ) {
	        this._closeCurrentTag();
	    } else {
	        this.onopentagend();
	    }
	};
	
	Parser.prototype._closeCurrentTag = function() {
	    var name = this._tagname;
	
	    this.onopentagend();
	
	    //self-closing tags will be on the top of the stack
	    //(cheaper check than in onclosetag)
	    if (this._stack[this._stack.length - 1] === name) {
	        if (this._cbs.onclosetag) {
	            this._cbs.onclosetag(name);
	        }
	        this._stack.pop();
	        
	    }
	};
	
	Parser.prototype.onattribname = function(name) {
	    if (this._lowerCaseAttributeNames) {
	        name = name.toLowerCase();
	    }
	    this._attribname = name;
	};
	
	Parser.prototype.onattribdata = function(value) {
	    this._attribvalue += value;
	};
	
	Parser.prototype.onattribend = function() {
	    if (this._cbs.onattribute)
	        this._cbs.onattribute(this._attribname, this._attribvalue);
	    if (
	        this._attribs &&
	        !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	    ) {
	        this._attribs[this._attribname] = this._attribvalue;
	    }
	    this._attribname = "";
	    this._attribvalue = "";
	};
	
	Parser.prototype._getInstructionName = function(value) {
	    var idx = value.search(re_nameEnd),
	        name = idx < 0 ? value : value.substr(0, idx);
	
	    if (this._lowerCaseTagNames) {
	        name = name.toLowerCase();
	    }
	
	    return name;
	};
	
	Parser.prototype.ondeclaration = function(value) {
	    if (this._cbs.onprocessinginstruction) {
	        var name = this._getInstructionName(value);
	        this._cbs.onprocessinginstruction("!" + name, "!" + value);
	    }
	};
	
	Parser.prototype.onprocessinginstruction = function(value) {
	    if (this._cbs.onprocessinginstruction) {
	        var name = this._getInstructionName(value);
	        this._cbs.onprocessinginstruction("?" + name, "?" + value);
	    }
	};
	
	Parser.prototype.oncomment = function(value) {
	    this._updatePosition(4);
	
	    if (this._cbs.oncomment) this._cbs.oncomment(value);
	    if (this._cbs.oncommentend) this._cbs.oncommentend();
	};
	
	Parser.prototype.oncdata = function(value) {
	    this._updatePosition(1);
	
	    if (this._options.xmlMode || this._options.recognizeCDATA) {
	        if (this._cbs.oncdatastart) this._cbs.oncdatastart();
	        if (this._cbs.ontext) this._cbs.ontext(value);
	        if (this._cbs.oncdataend) this._cbs.oncdataend();
	    } else {
	        this.oncomment("[CDATA[" + value + "]]");
	    }
	};
	
	Parser.prototype.onerror = function(err) {
	    if (this._cbs.onerror) this._cbs.onerror(err);
	};
	
	Parser.prototype.onend = function() {
	    if (this._cbs.onclosetag) {
	        for (
	            var i = this._stack.length;
	            i > 0;
	            this._cbs.onclosetag(this._stack[--i])
	        );
	    }
	    if (this._cbs.onend) this._cbs.onend();
	};
	
	//Resets the parser to a blank state, ready to parse a new HTML document
	Parser.prototype.reset = function() {
	    if (this._cbs.onreset) this._cbs.onreset();
	    this._tokenizer.reset();
	
	    this._tagname = "";
	    this._attribname = "";
	    this._attribs = null;
	    this._stack = [];
	
	    if (this._cbs.onparserinit) this._cbs.onparserinit(this);
	};
	
	//Parses a complete HTML document and pushes it to the handler
	Parser.prototype.parseComplete = function(data) {
	    this.reset();
	    this.end(data);
	};
	
	Parser.prototype.write = function(chunk) {
	    this._tokenizer.write(chunk);
	};
	
	Parser.prototype.end = function(chunk) {
	    this._tokenizer.end(chunk);
	};
	
	Parser.prototype.pause = function() {
	    this._tokenizer.pause();
	};
	
	Parser.prototype.resume = function() {
	    this._tokenizer.resume();
	};
	
	//alias for backwards compat
	Parser.prototype.parseChunk = Parser.prototype.write;
	Parser.prototype.done = Parser.prototype.end;
	
	module.exports = Parser;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = Tokenizer;
	
	var decodeCodePoint = __webpack_require__(179);
	var entityMap = __webpack_require__(181);
	var legacyMap = __webpack_require__(182);
	var xmlMap = __webpack_require__(183);
	
	var i = 0;
	
	var TEXT = i++;
	var BEFORE_TAG_NAME = i++; //after <
	var IN_TAG_NAME = i++;
	var IN_SELF_CLOSING_TAG = i++;
	var BEFORE_CLOSING_TAG_NAME = i++;
	var IN_CLOSING_TAG_NAME = i++;
	var AFTER_CLOSING_TAG_NAME = i++;
	
	//attributes
	var BEFORE_ATTRIBUTE_NAME = i++;
	var IN_ATTRIBUTE_NAME = i++;
	var AFTER_ATTRIBUTE_NAME = i++;
	var BEFORE_ATTRIBUTE_VALUE = i++;
	var IN_ATTRIBUTE_VALUE_DQ = i++; // "
	var IN_ATTRIBUTE_VALUE_SQ = i++; // '
	var IN_ATTRIBUTE_VALUE_NQ = i++;
	
	//declarations
	var BEFORE_DECLARATION = i++; // !
	var IN_DECLARATION = i++;
	
	//processing instructions
	var IN_PROCESSING_INSTRUCTION = i++; // ?
	
	//comments
	var BEFORE_COMMENT = i++;
	var IN_COMMENT = i++;
	var AFTER_COMMENT_1 = i++;
	var AFTER_COMMENT_2 = i++;
	
	//cdata
	var BEFORE_CDATA_1 = i++; // [
	var BEFORE_CDATA_2 = i++; // C
	var BEFORE_CDATA_3 = i++; // D
	var BEFORE_CDATA_4 = i++; // A
	var BEFORE_CDATA_5 = i++; // T
	var BEFORE_CDATA_6 = i++; // A
	var IN_CDATA = i++; // [
	var AFTER_CDATA_1 = i++; // ]
	var AFTER_CDATA_2 = i++; // ]
	
	//special tags
	var BEFORE_SPECIAL = i++; //S
	var BEFORE_SPECIAL_END = i++; //S
	
	var BEFORE_SCRIPT_1 = i++; //C
	var BEFORE_SCRIPT_2 = i++; //R
	var BEFORE_SCRIPT_3 = i++; //I
	var BEFORE_SCRIPT_4 = i++; //P
	var BEFORE_SCRIPT_5 = i++; //T
	var AFTER_SCRIPT_1 = i++; //C
	var AFTER_SCRIPT_2 = i++; //R
	var AFTER_SCRIPT_3 = i++; //I
	var AFTER_SCRIPT_4 = i++; //P
	var AFTER_SCRIPT_5 = i++; //T
	
	var BEFORE_STYLE_1 = i++; //T
	var BEFORE_STYLE_2 = i++; //Y
	var BEFORE_STYLE_3 = i++; //L
	var BEFORE_STYLE_4 = i++; //E
	var AFTER_STYLE_1 = i++; //T
	var AFTER_STYLE_2 = i++; //Y
	var AFTER_STYLE_3 = i++; //L
	var AFTER_STYLE_4 = i++; //E
	
	var BEFORE_ENTITY = i++; //&
	var BEFORE_NUMERIC_ENTITY = i++; //#
	var IN_NAMED_ENTITY = i++;
	var IN_NUMERIC_ENTITY = i++;
	var IN_HEX_ENTITY = i++; //X
	
	var j = 0;
	
	var SPECIAL_NONE = j++;
	var SPECIAL_SCRIPT = j++;
	var SPECIAL_STYLE = j++;
	
	function whitespace(c) {
	    return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
	}
	
	function ifElseState(upper, SUCCESS, FAILURE) {
	    var lower = upper.toLowerCase();
	
	    if (upper === lower) {
	        return function(c) {
	            if (c === lower) {
	                this._state = SUCCESS;
	            } else {
	                this._state = FAILURE;
	                this._index--;
	            }
	        };
	    } else {
	        return function(c) {
	            if (c === lower || c === upper) {
	                this._state = SUCCESS;
	            } else {
	                this._state = FAILURE;
	                this._index--;
	            }
	        };
	    }
	}
	
	function consumeSpecialNameChar(upper, NEXT_STATE) {
	    var lower = upper.toLowerCase();
	
	    return function(c) {
	        if (c === lower || c === upper) {
	            this._state = NEXT_STATE;
	        } else {
	            this._state = IN_TAG_NAME;
	            this._index--; //consume the token again
	        }
	    };
	}
	
	function Tokenizer(options, cbs) {
	    this._state = TEXT;
	    this._buffer = "";
	    this._sectionStart = 0;
	    this._index = 0;
	    this._bufferOffset = 0; //chars removed from _buffer
	    this._baseState = TEXT;
	    this._special = SPECIAL_NONE;
	    this._cbs = cbs;
	    this._running = true;
	    this._ended = false;
	    this._xmlMode = !!(options && options.xmlMode);
	    this._decodeEntities = !!(options && options.decodeEntities);
	}
	
	Tokenizer.prototype._stateText = function(c) {
	    if (c === "<") {
	        if (this._index > this._sectionStart) {
	            this._cbs.ontext(this._getSection());
	        }
	        this._state = BEFORE_TAG_NAME;
	        this._sectionStart = this._index;
	    } else if (
	        this._decodeEntities &&
	        this._special === SPECIAL_NONE &&
	        c === "&"
	    ) {
	        if (this._index > this._sectionStart) {
	            this._cbs.ontext(this._getSection());
	        }
	        this._baseState = TEXT;
	        this._state = BEFORE_ENTITY;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateBeforeTagName = function(c) {
	    if (c === "/") {
	        this._state = BEFORE_CLOSING_TAG_NAME;
	    } else if (c === "<") {
	        this._cbs.ontext(this._getSection());
	        this._sectionStart = this._index;
	    } else if (c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
	        this._state = TEXT;
	    } else if (c === "!") {
	        this._state = BEFORE_DECLARATION;
	        this._sectionStart = this._index + 1;
	    } else if (c === "?") {
	        this._state = IN_PROCESSING_INSTRUCTION;
	        this._sectionStart = this._index + 1;
	    } else {
	        this._state =
	            !this._xmlMode && (c === "s" || c === "S")
	                ? BEFORE_SPECIAL
	                : IN_TAG_NAME;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateInTagName = function(c) {
	    if (c === "/" || c === ">" || whitespace(c)) {
	        this._emitToken("onopentagname");
	        this._state = BEFORE_ATTRIBUTE_NAME;
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._stateBeforeCloseingTagName = function(c) {
	    if (whitespace(c));
	    else if (c === ">") {
	        this._state = TEXT;
	    } else if (this._special !== SPECIAL_NONE) {
	        if (c === "s" || c === "S") {
	            this._state = BEFORE_SPECIAL_END;
	        } else {
	            this._state = TEXT;
	            this._index--;
	        }
	    } else {
	        this._state = IN_CLOSING_TAG_NAME;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateInCloseingTagName = function(c) {
	    if (c === ">" || whitespace(c)) {
	        this._emitToken("onclosetag");
	        this._state = AFTER_CLOSING_TAG_NAME;
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._stateAfterCloseingTagName = function(c) {
	    //skip everything until ">"
	    if (c === ">") {
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    }
	};
	
	Tokenizer.prototype._stateBeforeAttributeName = function(c) {
	    if (c === ">") {
	        this._cbs.onopentagend();
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    } else if (c === "/") {
	        this._state = IN_SELF_CLOSING_TAG;
	    } else if (!whitespace(c)) {
	        this._state = IN_ATTRIBUTE_NAME;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateInSelfClosingTag = function(c) {
	    if (c === ">") {
	        this._cbs.onselfclosingtag();
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    } else if (!whitespace(c)) {
	        this._state = BEFORE_ATTRIBUTE_NAME;
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._stateInAttributeName = function(c) {
	    if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
	        this._cbs.onattribname(this._getSection());
	        this._sectionStart = -1;
	        this._state = AFTER_ATTRIBUTE_NAME;
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._stateAfterAttributeName = function(c) {
	    if (c === "=") {
	        this._state = BEFORE_ATTRIBUTE_VALUE;
	    } else if (c === "/" || c === ">") {
	        this._cbs.onattribend();
	        this._state = BEFORE_ATTRIBUTE_NAME;
	        this._index--;
	    } else if (!whitespace(c)) {
	        this._cbs.onattribend();
	        this._state = IN_ATTRIBUTE_NAME;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateBeforeAttributeValue = function(c) {
	    if (c === '"') {
	        this._state = IN_ATTRIBUTE_VALUE_DQ;
	        this._sectionStart = this._index + 1;
	    } else if (c === "'") {
	        this._state = IN_ATTRIBUTE_VALUE_SQ;
	        this._sectionStart = this._index + 1;
	    } else if (!whitespace(c)) {
	        this._state = IN_ATTRIBUTE_VALUE_NQ;
	        this._sectionStart = this._index;
	        this._index--; //reconsume token
	    }
	};
	
	Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {
	    if (c === '"') {
	        this._emitToken("onattribdata");
	        this._cbs.onattribend();
	        this._state = BEFORE_ATTRIBUTE_NAME;
	    } else if (this._decodeEntities && c === "&") {
	        this._emitToken("onattribdata");
	        this._baseState = this._state;
	        this._state = BEFORE_ENTITY;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {
	    if (c === "'") {
	        this._emitToken("onattribdata");
	        this._cbs.onattribend();
	        this._state = BEFORE_ATTRIBUTE_NAME;
	    } else if (this._decodeEntities && c === "&") {
	        this._emitToken("onattribdata");
	        this._baseState = this._state;
	        this._state = BEFORE_ENTITY;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {
	    if (whitespace(c) || c === ">") {
	        this._emitToken("onattribdata");
	        this._cbs.onattribend();
	        this._state = BEFORE_ATTRIBUTE_NAME;
	        this._index--;
	    } else if (this._decodeEntities && c === "&") {
	        this._emitToken("onattribdata");
	        this._baseState = this._state;
	        this._state = BEFORE_ENTITY;
	        this._sectionStart = this._index;
	    }
	};
	
	Tokenizer.prototype._stateBeforeDeclaration = function(c) {
	    this._state =
	        c === "["
	            ? BEFORE_CDATA_1
	            : c === "-"
	                ? BEFORE_COMMENT
	                : IN_DECLARATION;
	};
	
	Tokenizer.prototype._stateInDeclaration = function(c) {
	    if (c === ">") {
	        this._cbs.ondeclaration(this._getSection());
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    }
	};
	
	Tokenizer.prototype._stateInProcessingInstruction = function(c) {
	    if (c === ">") {
	        this._cbs.onprocessinginstruction(this._getSection());
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    }
	};
	
	Tokenizer.prototype._stateBeforeComment = function(c) {
	    if (c === "-") {
	        this._state = IN_COMMENT;
	        this._sectionStart = this._index + 1;
	    } else {
	        this._state = IN_DECLARATION;
	    }
	};
	
	Tokenizer.prototype._stateInComment = function(c) {
	    if (c === "-") this._state = AFTER_COMMENT_1;
	};
	
	Tokenizer.prototype._stateAfterComment1 = function(c) {
	    if (c === "-") {
	        this._state = AFTER_COMMENT_2;
	    } else {
	        this._state = IN_COMMENT;
	    }
	};
	
	Tokenizer.prototype._stateAfterComment2 = function(c) {
	    if (c === ">") {
	        //remove 2 trailing chars
	        this._cbs.oncomment(
	            this._buffer.substring(this._sectionStart, this._index - 2)
	        );
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    } else if (c !== "-") {
	        this._state = IN_COMMENT;
	    }
	    // else: stay in AFTER_COMMENT_2 (`--->`)
	};
	
	Tokenizer.prototype._stateBeforeCdata1 = ifElseState(
	    "C",
	    BEFORE_CDATA_2,
	    IN_DECLARATION
	);
	Tokenizer.prototype._stateBeforeCdata2 = ifElseState(
	    "D",
	    BEFORE_CDATA_3,
	    IN_DECLARATION
	);
	Tokenizer.prototype._stateBeforeCdata3 = ifElseState(
	    "A",
	    BEFORE_CDATA_4,
	    IN_DECLARATION
	);
	Tokenizer.prototype._stateBeforeCdata4 = ifElseState(
	    "T",
	    BEFORE_CDATA_5,
	    IN_DECLARATION
	);
	Tokenizer.prototype._stateBeforeCdata5 = ifElseState(
	    "A",
	    BEFORE_CDATA_6,
	    IN_DECLARATION
	);
	
	Tokenizer.prototype._stateBeforeCdata6 = function(c) {
	    if (c === "[") {
	        this._state = IN_CDATA;
	        this._sectionStart = this._index + 1;
	    } else {
	        this._state = IN_DECLARATION;
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._stateInCdata = function(c) {
	    if (c === "]") this._state = AFTER_CDATA_1;
	};
	
	Tokenizer.prototype._stateAfterCdata1 = function(c) {
	    if (c === "]") this._state = AFTER_CDATA_2;
	    else this._state = IN_CDATA;
	};
	
	Tokenizer.prototype._stateAfterCdata2 = function(c) {
	    if (c === ">") {
	        //remove 2 trailing chars
	        this._cbs.oncdata(
	            this._buffer.substring(this._sectionStart, this._index - 2)
	        );
	        this._state = TEXT;
	        this._sectionStart = this._index + 1;
	    } else if (c !== "]") {
	        this._state = IN_CDATA;
	    }
	    //else: stay in AFTER_CDATA_2 (`]]]>`)
	};
	
	Tokenizer.prototype._stateBeforeSpecial = function(c) {
	    if (c === "c" || c === "C") {
	        this._state = BEFORE_SCRIPT_1;
	    } else if (c === "t" || c === "T") {
	        this._state = BEFORE_STYLE_1;
	    } else {
	        this._state = IN_TAG_NAME;
	        this._index--; //consume the token again
	    }
	};
	
	Tokenizer.prototype._stateBeforeSpecialEnd = function(c) {
	    if (this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")) {
	        this._state = AFTER_SCRIPT_1;
	    } else if (this._special === SPECIAL_STYLE && (c === "t" || c === "T")) {
	        this._state = AFTER_STYLE_1;
	    } else this._state = TEXT;
	};
	
	Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(
	    "R",
	    BEFORE_SCRIPT_2
	);
	Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(
	    "I",
	    BEFORE_SCRIPT_3
	);
	Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(
	    "P",
	    BEFORE_SCRIPT_4
	);
	Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(
	    "T",
	    BEFORE_SCRIPT_5
	);
	
	Tokenizer.prototype._stateBeforeScript5 = function(c) {
	    if (c === "/" || c === ">" || whitespace(c)) {
	        this._special = SPECIAL_SCRIPT;
	    }
	    this._state = IN_TAG_NAME;
	    this._index--; //consume the token again
	};
	
	Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
	Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
	Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
	Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);
	
	Tokenizer.prototype._stateAfterScript5 = function(c) {
	    if (c === ">" || whitespace(c)) {
	        this._special = SPECIAL_NONE;
	        this._state = IN_CLOSING_TAG_NAME;
	        this._sectionStart = this._index - 6;
	        this._index--; //reconsume the token
	    } else this._state = TEXT;
	};
	
	Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(
	    "Y",
	    BEFORE_STYLE_2
	);
	Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(
	    "L",
	    BEFORE_STYLE_3
	);
	Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(
	    "E",
	    BEFORE_STYLE_4
	);
	
	Tokenizer.prototype._stateBeforeStyle4 = function(c) {
	    if (c === "/" || c === ">" || whitespace(c)) {
	        this._special = SPECIAL_STYLE;
	    }
	    this._state = IN_TAG_NAME;
	    this._index--; //consume the token again
	};
	
	Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
	Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
	Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);
	
	Tokenizer.prototype._stateAfterStyle4 = function(c) {
	    if (c === ">" || whitespace(c)) {
	        this._special = SPECIAL_NONE;
	        this._state = IN_CLOSING_TAG_NAME;
	        this._sectionStart = this._index - 5;
	        this._index--; //reconsume the token
	    } else this._state = TEXT;
	};
	
	Tokenizer.prototype._stateBeforeEntity = ifElseState(
	    "#",
	    BEFORE_NUMERIC_ENTITY,
	    IN_NAMED_ENTITY
	);
	Tokenizer.prototype._stateBeforeNumericEntity = ifElseState(
	    "X",
	    IN_HEX_ENTITY,
	    IN_NUMERIC_ENTITY
	);
	
	//for entities terminated with a semicolon
	Tokenizer.prototype._parseNamedEntityStrict = function() {
	    //offset = 1
	    if (this._sectionStart + 1 < this._index) {
	        var entity = this._buffer.substring(
	                this._sectionStart + 1,
	                this._index
	            ),
	            map = this._xmlMode ? xmlMap : entityMap;
	
	        if (map.hasOwnProperty(entity)) {
	            this._emitPartial(map[entity]);
	            this._sectionStart = this._index + 1;
	        }
	    }
	};
	
	//parses legacy entities (without trailing semicolon)
	Tokenizer.prototype._parseLegacyEntity = function() {
	    var start = this._sectionStart + 1,
	        limit = this._index - start;
	
	    if (limit > 6) limit = 6; //the max length of legacy entities is 6
	
	    while (limit >= 2) {
	        //the min length of legacy entities is 2
	        var entity = this._buffer.substr(start, limit);
	
	        if (legacyMap.hasOwnProperty(entity)) {
	            this._emitPartial(legacyMap[entity]);
	            this._sectionStart += limit + 1;
	            return;
	        } else {
	            limit--;
	        }
	    }
	};
	
	Tokenizer.prototype._stateInNamedEntity = function(c) {
	    if (c === ";") {
	        this._parseNamedEntityStrict();
	        if (this._sectionStart + 1 < this._index && !this._xmlMode) {
	            this._parseLegacyEntity();
	        }
	        this._state = this._baseState;
	    } else if (
	        (c < "a" || c > "z") &&
	        (c < "A" || c > "Z") &&
	        (c < "0" || c > "9")
	    ) {
	        if (this._xmlMode);
	        else if (this._sectionStart + 1 === this._index);
	        else if (this._baseState !== TEXT) {
	            if (c !== "=") {
	                this._parseNamedEntityStrict();
	            }
	        } else {
	            this._parseLegacyEntity();
	        }
	
	        this._state = this._baseState;
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._decodeNumericEntity = function(offset, base) {
	    var sectionStart = this._sectionStart + offset;
	
	    if (sectionStart !== this._index) {
	        //parse entity
	        var entity = this._buffer.substring(sectionStart, this._index);
	        var parsed = parseInt(entity, base);
	
	        this._emitPartial(decodeCodePoint(parsed));
	        this._sectionStart = this._index;
	    } else {
	        this._sectionStart--;
	    }
	
	    this._state = this._baseState;
	};
	
	Tokenizer.prototype._stateInNumericEntity = function(c) {
	    if (c === ";") {
	        this._decodeNumericEntity(2, 10);
	        this._sectionStart++;
	    } else if (c < "0" || c > "9") {
	        if (!this._xmlMode) {
	            this._decodeNumericEntity(2, 10);
	        } else {
	            this._state = this._baseState;
	        }
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._stateInHexEntity = function(c) {
	    if (c === ";") {
	        this._decodeNumericEntity(3, 16);
	        this._sectionStart++;
	    } else if (
	        (c < "a" || c > "f") &&
	        (c < "A" || c > "F") &&
	        (c < "0" || c > "9")
	    ) {
	        if (!this._xmlMode) {
	            this._decodeNumericEntity(3, 16);
	        } else {
	            this._state = this._baseState;
	        }
	        this._index--;
	    }
	};
	
	Tokenizer.prototype._cleanup = function() {
	    if (this._sectionStart < 0) {
	        this._buffer = "";
	        this._bufferOffset += this._index;
	        this._index = 0;
	    } else if (this._running) {
	        if (this._state === TEXT) {
	            if (this._sectionStart !== this._index) {
	                this._cbs.ontext(this._buffer.substr(this._sectionStart));
	            }
	            this._buffer = "";
	            this._bufferOffset += this._index;
	            this._index = 0;
	        } else if (this._sectionStart === this._index) {
	            //the section just started
	            this._buffer = "";
	            this._bufferOffset += this._index;
	            this._index = 0;
	        } else {
	            //remove everything unnecessary
	            this._buffer = this._buffer.substr(this._sectionStart);
	            this._index -= this._sectionStart;
	            this._bufferOffset += this._sectionStart;
	        }
	
	        this._sectionStart = 0;
	    }
	};
	
	//TODO make events conditional
	Tokenizer.prototype.write = function(chunk) {
	    if (this._ended) this._cbs.onerror(Error(".write() after done!"));
	
	    this._buffer += chunk;
	    this._parse();
	};
	
	Tokenizer.prototype._parse = function() {
	    while (this._index < this._buffer.length && this._running) {
	        var c = this._buffer.charAt(this._index);
	        if (this._state === TEXT) {
	            this._stateText(c);
	        } else if (this._state === BEFORE_TAG_NAME) {
	            this._stateBeforeTagName(c);
	        } else if (this._state === IN_TAG_NAME) {
	            this._stateInTagName(c);
	        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {
	            this._stateBeforeCloseingTagName(c);
	        } else if (this._state === IN_CLOSING_TAG_NAME) {
	            this._stateInCloseingTagName(c);
	        } else if (this._state === AFTER_CLOSING_TAG_NAME) {
	            this._stateAfterCloseingTagName(c);
	        } else if (this._state === IN_SELF_CLOSING_TAG) {
	            this._stateInSelfClosingTag(c);
	        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {
	
	        /*
			*	attributes
			*/
	            this._stateBeforeAttributeName(c);
	        } else if (this._state === IN_ATTRIBUTE_NAME) {
	            this._stateInAttributeName(c);
	        } else if (this._state === AFTER_ATTRIBUTE_NAME) {
	            this._stateAfterAttributeName(c);
	        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {
	            this._stateBeforeAttributeValue(c);
	        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {
	            this._stateInAttributeValueDoubleQuotes(c);
	        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {
	            this._stateInAttributeValueSingleQuotes(c);
	        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {
	            this._stateInAttributeValueNoQuotes(c);
	        } else if (this._state === BEFORE_DECLARATION) {
	
	        /*
			*	declarations
			*/
	            this._stateBeforeDeclaration(c);
	        } else if (this._state === IN_DECLARATION) {
	            this._stateInDeclaration(c);
	        } else if (this._state === IN_PROCESSING_INSTRUCTION) {
	
	        /*
			*	processing instructions
			*/
	            this._stateInProcessingInstruction(c);
	        } else if (this._state === BEFORE_COMMENT) {
	
	        /*
			*	comments
			*/
	            this._stateBeforeComment(c);
	        } else if (this._state === IN_COMMENT) {
	            this._stateInComment(c);
	        } else if (this._state === AFTER_COMMENT_1) {
	            this._stateAfterComment1(c);
	        } else if (this._state === AFTER_COMMENT_2) {
	            this._stateAfterComment2(c);
	        } else if (this._state === BEFORE_CDATA_1) {
	
	        /*
			*	cdata
			*/
	            this._stateBeforeCdata1(c);
	        } else if (this._state === BEFORE_CDATA_2) {
	            this._stateBeforeCdata2(c);
	        } else if (this._state === BEFORE_CDATA_3) {
	            this._stateBeforeCdata3(c);
	        } else if (this._state === BEFORE_CDATA_4) {
	            this._stateBeforeCdata4(c);
	        } else if (this._state === BEFORE_CDATA_5) {
	            this._stateBeforeCdata5(c);
	        } else if (this._state === BEFORE_CDATA_6) {
	            this._stateBeforeCdata6(c);
	        } else if (this._state === IN_CDATA) {
	            this._stateInCdata(c);
	        } else if (this._state === AFTER_CDATA_1) {
	            this._stateAfterCdata1(c);
	        } else if (this._state === AFTER_CDATA_2) {
	            this._stateAfterCdata2(c);
	        } else if (this._state === BEFORE_SPECIAL) {
	
	        /*
			* special tags
			*/
	            this._stateBeforeSpecial(c);
	        } else if (this._state === BEFORE_SPECIAL_END) {
	            this._stateBeforeSpecialEnd(c);
	        } else if (this._state === BEFORE_SCRIPT_1) {
	
	        /*
			* script
			*/
	            this._stateBeforeScript1(c);
	        } else if (this._state === BEFORE_SCRIPT_2) {
	            this._stateBeforeScript2(c);
	        } else if (this._state === BEFORE_SCRIPT_3) {
	            this._stateBeforeScript3(c);
	        } else if (this._state === BEFORE_SCRIPT_4) {
	            this._stateBeforeScript4(c);
	        } else if (this._state === BEFORE_SCRIPT_5) {
	            this._stateBeforeScript5(c);
	        } else if (this._state === AFTER_SCRIPT_1) {
	            this._stateAfterScript1(c);
	        } else if (this._state === AFTER_SCRIPT_2) {
	            this._stateAfterScript2(c);
	        } else if (this._state === AFTER_SCRIPT_3) {
	            this._stateAfterScript3(c);
	        } else if (this._state === AFTER_SCRIPT_4) {
	            this._stateAfterScript4(c);
	        } else if (this._state === AFTER_SCRIPT_5) {
	            this._stateAfterScript5(c);
	        } else if (this._state === BEFORE_STYLE_1) {
	
	        /*
			* style
			*/
	            this._stateBeforeStyle1(c);
	        } else if (this._state === BEFORE_STYLE_2) {
	            this._stateBeforeStyle2(c);
	        } else if (this._state === BEFORE_STYLE_3) {
	            this._stateBeforeStyle3(c);
	        } else if (this._state === BEFORE_STYLE_4) {
	            this._stateBeforeStyle4(c);
	        } else if (this._state === AFTER_STYLE_1) {
	            this._stateAfterStyle1(c);
	        } else if (this._state === AFTER_STYLE_2) {
	            this._stateAfterStyle2(c);
	        } else if (this._state === AFTER_STYLE_3) {
	            this._stateAfterStyle3(c);
	        } else if (this._state === AFTER_STYLE_4) {
	            this._stateAfterStyle4(c);
	        } else if (this._state === BEFORE_ENTITY) {
	
	        /*
			* entities
			*/
	            this._stateBeforeEntity(c);
	        } else if (this._state === BEFORE_NUMERIC_ENTITY) {
	            this._stateBeforeNumericEntity(c);
	        } else if (this._state === IN_NAMED_ENTITY) {
	            this._stateInNamedEntity(c);
	        } else if (this._state === IN_NUMERIC_ENTITY) {
	            this._stateInNumericEntity(c);
	        } else if (this._state === IN_HEX_ENTITY) {
	            this._stateInHexEntity(c);
	        } else {
	            this._cbs.onerror(Error("unknown _state"), this._state);
	        }
	
	        this._index++;
	    }
	
	    this._cleanup();
	};
	
	Tokenizer.prototype.pause = function() {
	    this._running = false;
	};
	Tokenizer.prototype.resume = function() {
	    this._running = true;
	
	    if (this._index < this._buffer.length) {
	        this._parse();
	    }
	    if (this._ended) {
	        this._finish();
	    }
	};
	
	Tokenizer.prototype.end = function(chunk) {
	    if (this._ended) this._cbs.onerror(Error(".end() after done!"));
	    if (chunk) this.write(chunk);
	
	    this._ended = true;
	
	    if (this._running) this._finish();
	};
	
	Tokenizer.prototype._finish = function() {
	    //if there is remaining data, emit it in a reasonable way
	    if (this._sectionStart < this._index) {
	        this._handleTrailingData();
	    }
	
	    this._cbs.onend();
	};
	
	Tokenizer.prototype._handleTrailingData = function() {
	    var data = this._buffer.substr(this._sectionStart);
	
	    if (
	        this._state === IN_CDATA ||
	        this._state === AFTER_CDATA_1 ||
	        this._state === AFTER_CDATA_2
	    ) {
	        this._cbs.oncdata(data);
	    } else if (
	        this._state === IN_COMMENT ||
	        this._state === AFTER_COMMENT_1 ||
	        this._state === AFTER_COMMENT_2
	    ) {
	        this._cbs.oncomment(data);
	    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {
	        this._parseLegacyEntity();
	        if (this._sectionStart < this._index) {
	            this._state = this._baseState;
	            this._handleTrailingData();
	        }
	    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {
	        this._decodeNumericEntity(2, 10);
	        if (this._sectionStart < this._index) {
	            this._state = this._baseState;
	            this._handleTrailingData();
	        }
	    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {
	        this._decodeNumericEntity(3, 16);
	        if (this._sectionStart < this._index) {
	            this._state = this._baseState;
	            this._handleTrailingData();
	        }
	    } else if (
	        this._state !== IN_TAG_NAME &&
	        this._state !== BEFORE_ATTRIBUTE_NAME &&
	        this._state !== BEFORE_ATTRIBUTE_VALUE &&
	        this._state !== AFTER_ATTRIBUTE_NAME &&
	        this._state !== IN_ATTRIBUTE_NAME &&
	        this._state !== IN_ATTRIBUTE_VALUE_SQ &&
	        this._state !== IN_ATTRIBUTE_VALUE_DQ &&
	        this._state !== IN_ATTRIBUTE_VALUE_NQ &&
	        this._state !== IN_CLOSING_TAG_NAME
	    ) {
	        this._cbs.ontext(data);
	    }
	    //else, ignore remaining data
	    //TODO add a way to remove current tag
	};
	
	Tokenizer.prototype.reset = function() {
	    Tokenizer.call(
	        this,
	        { xmlMode: this._xmlMode, decodeEntities: this._decodeEntities },
	        this._cbs
	    );
	};
	
	Tokenizer.prototype.getAbsoluteIndex = function() {
	    return this._bufferOffset + this._index;
	};
	
	Tokenizer.prototype._getSection = function() {
	    return this._buffer.substring(this._sectionStart, this._index);
	};
	
	Tokenizer.prototype._emitToken = function(name) {
	    this._cbs[name](this._getSection());
	    this._sectionStart = -1;
	};
	
	Tokenizer.prototype._emitPartial = function(value) {
	    if (this._baseState !== TEXT) {
	        this._cbs.onattribdata(value); //TODO implement the new event
	    } else {
	        this._cbs.ontext(value);
	    }
	};


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	var decodeMap = __webpack_require__(180);
	
	module.exports = decodeCodePoint;
	
	// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
	function decodeCodePoint(codePoint) {
	    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
	        return "\uFFFD";
	    }
	
	    if (codePoint in decodeMap) {
	        codePoint = decodeMap[codePoint];
	    }
	
	    var output = "";
	
	    if (codePoint > 0xffff) {
	        codePoint -= 0x10000;
	        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
	        codePoint = 0xdc00 | (codePoint & 0x3ff);
	    }
	
	    output += String.fromCharCode(codePoint);
	    return output;
	}


/***/ }),
/* 180 */
/***/ (function(module, exports) {

	module.exports = {"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}

/***/ }),
/* 181 */
/***/ (function(module, exports) {

	module.exports = {"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}

/***/ }),
/* 182 */
/***/ (function(module, exports) {

	module.exports = {"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\"","QUOT":"\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}

/***/ }),
/* 183 */
/***/ (function(module, exports) {

	module.exports = {"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      })
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor
	      var TempCtor = function () {}
	      TempCtor.prototype = superCtor.prototype
	      ctor.prototype = new TempCtor()
	      ctor.prototype.constructor = ctor
	    }
	  }
	}


/***/ }),
/* 185 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var ElementType = __webpack_require__(174);
	
	var re_whitespace = /\s+/g;
	var NodePrototype = __webpack_require__(187);
	var ElementPrototype = __webpack_require__(188);
	
	function DomHandler(callback, options, elementCB){
		if(typeof callback === "object"){
			elementCB = options;
			options = callback;
			callback = null;
		} else if(typeof options === "function"){
			elementCB = options;
			options = defaultOpts;
		}
		this._callback = callback;
		this._options = options || defaultOpts;
		this._elementCB = elementCB;
		this.dom = [];
		this._done = false;
		this._tagStack = [];
		this._parser = this._parser || null;
	}
	
	//default options
	var defaultOpts = {
		normalizeWhitespace: false, //Replace all whitespace with single spaces
		withStartIndices: false, //Add startIndex properties to nodes
		withEndIndices: false, //Add endIndex properties to nodes
	};
	
	DomHandler.prototype.onparserinit = function(parser){
		this._parser = parser;
	};
	
	//Resets the handler back to starting state
	DomHandler.prototype.onreset = function(){
		DomHandler.call(this, this._callback, this._options, this._elementCB);
	};
	
	//Signals the handler that parsing is done
	DomHandler.prototype.onend = function(){
		if(this._done) return;
		this._done = true;
		this._parser = null;
		this._handleCallback(null);
	};
	
	DomHandler.prototype._handleCallback =
	DomHandler.prototype.onerror = function(error){
		if(typeof this._callback === "function"){
			this._callback(error, this.dom);
		} else {
			if(error) throw error;
		}
	};
	
	DomHandler.prototype.onclosetag = function(){
		//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
		
		var elem = this._tagStack.pop();
	
		if(this._options.withEndIndices && elem){
			elem.endIndex = this._parser.endIndex;
		}
	
		if(this._elementCB) this._elementCB(elem);
	};
	
	DomHandler.prototype._createDomElement = function(properties){
		if (!this._options.withDomLvl1) return properties;
	
		var element;
		if (properties.type === "tag") {
			element = Object.create(ElementPrototype);
		} else {
			element = Object.create(NodePrototype);
		}
	
		for (var key in properties) {
			if (properties.hasOwnProperty(key)) {
				element[key] = properties[key];
			}
		}
	
		return element;
	};
	
	DomHandler.prototype._addDomElement = function(element){
		var parent = this._tagStack[this._tagStack.length - 1];
		var siblings = parent ? parent.children : this.dom;
		var previousSibling = siblings[siblings.length - 1];
	
		element.next = null;
	
		if(this._options.withStartIndices){
			element.startIndex = this._parser.startIndex;
		}
		if(this._options.withEndIndices){
			element.endIndex = this._parser.endIndex;
		}
	
		if(previousSibling){
			element.prev = previousSibling;
			previousSibling.next = element;
		} else {
			element.prev = null;
		}
	
		siblings.push(element);
		element.parent = parent || null;
	};
	
	DomHandler.prototype.onopentag = function(name, attribs){
		var properties = {
			type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
			name: name,
			attribs: attribs,
			children: []
		};
	
		var element = this._createDomElement(properties);
	
		this._addDomElement(element);
	
		this._tagStack.push(element);
	};
	
	DomHandler.prototype.ontext = function(data){
		//the ignoreWhitespace is officially dropped, but for now,
		//it's an alias for normalizeWhitespace
		var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;
	
		var lastTag;
	
		if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(
				this._tagStack.length &&
				(lastTag = this._tagStack[this._tagStack.length - 1]) &&
				(lastTag = lastTag.children[lastTag.children.length - 1]) &&
				lastTag.type === ElementType.Text
			){
				if(normalize){
					lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
				} else {
					lastTag.data += data;
				}
			} else {
				if(normalize){
					data = data.replace(re_whitespace, " ");
				}
	
				var element = this._createDomElement({
					data: data,
					type: ElementType.Text
				});
	
				this._addDomElement(element);
			}
		}
	};
	
	DomHandler.prototype.oncomment = function(data){
		var lastTag = this._tagStack[this._tagStack.length - 1];
	
		if(lastTag && lastTag.type === ElementType.Comment){
			lastTag.data += data;
			return;
		}
	
		var properties = {
			data: data,
			type: ElementType.Comment
		};
	
		var element = this._createDomElement(properties);
	
		this._addDomElement(element);
		this._tagStack.push(element);
	};
	
	DomHandler.prototype.oncdatastart = function(){
		var properties = {
			children: [{
				data: "",
				type: ElementType.Text
			}],
			type: ElementType.CDATA
		};
	
		var element = this._createDomElement(properties);
	
		this._addDomElement(element);
		this._tagStack.push(element);
	};
	
	DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
		this._tagStack.pop();
	};
	
	DomHandler.prototype.onprocessinginstruction = function(name, data){
		var element = this._createDomElement({
			name: name,
			data: data,
			type: ElementType.Directive
		});
	
		this._addDomElement(element);
	};
	
	module.exports = DomHandler;


/***/ }),
/* 187 */
/***/ (function(module, exports) {

	// This object will be used as the prototype for Nodes when creating a
	// DOM-Level-1-compliant structure.
	var NodePrototype = module.exports = {
		get firstChild() {
			var children = this.children;
			return children && children[0] || null;
		},
		get lastChild() {
			var children = this.children;
			return children && children[children.length - 1] || null;
		},
		get nodeType() {
			return nodeTypes[this.type] || nodeTypes.element;
		}
	};
	
	var domLvl1 = {
		tagName: "name",
		childNodes: "children",
		parentNode: "parent",
		previousSibling: "prev",
		nextSibling: "next",
		nodeValue: "data"
	};
	
	var nodeTypes = {
		element: 1,
		text: 3,
		cdata: 4,
		comment: 8
	};
	
	Object.keys(domLvl1).forEach(function(key) {
		var shorthand = domLvl1[key];
		Object.defineProperty(NodePrototype, key, {
			get: function() {
				return this[shorthand] || null;
			},
			set: function(val) {
				this[shorthand] = val;
				return val;
			}
		});
	});


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	// DOM-Level-1-compliant structure
	var NodePrototype = __webpack_require__(187);
	var ElementPrototype = module.exports = Object.create(NodePrototype);
	
	var domLvl1 = {
		tagName: "name"
	};
	
	Object.keys(domLvl1).forEach(function(key) {
		var shorthand = domLvl1[key];
		Object.defineProperty(ElementPrototype, key, {
			get: function() {
				return this[shorthand] || null;
			},
			set: function(val) {
				this[shorthand] = val;
				return val;
			}
		});
	});


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	var DomHandler = __webpack_require__(186);
	var DomUtils = __webpack_require__(190);
	
	//TODO: make this a streamable handler
	function FeedHandler(callback, options) {
	    this.init(callback, options);
	}
	
	__webpack_require__(184)(FeedHandler, DomHandler);
	
	FeedHandler.prototype.init = DomHandler;
	
	function getElements(what, where) {
	    return DomUtils.getElementsByTagName(what, where, true);
	}
	function getOneElement(what, where) {
	    return DomUtils.getElementsByTagName(what, where, true, 1)[0];
	}
	function fetch(what, where, recurse) {
	    return DomUtils.getText(
	        DomUtils.getElementsByTagName(what, where, recurse, 1)
	    ).trim();
	}
	
	function addConditionally(obj, prop, what, where, recurse) {
	    var tmp = fetch(what, where, recurse);
	    if (tmp) obj[prop] = tmp;
	}
	
	var isValidFeed = function(value) {
	    return value === "rss" || value === "feed" || value === "rdf:RDF";
	};
	
	FeedHandler.prototype.onend = function() {
	    var feed = {},
	        feedRoot = getOneElement(isValidFeed, this.dom),
	        tmp,
	        childs;
	
	    if (feedRoot) {
	        if (feedRoot.name === "feed") {
	            childs = feedRoot.children;
	
	            feed.type = "atom";
	            addConditionally(feed, "id", "id", childs);
	            addConditionally(feed, "title", "title", childs);
	            if (
	                (tmp = getOneElement("link", childs)) &&
	                (tmp = tmp.attribs) &&
	                (tmp = tmp.href)
	            )
	                feed.link = tmp;
	            addConditionally(feed, "description", "subtitle", childs);
	            if ((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
	            addConditionally(feed, "author", "email", childs, true);
	
	            feed.items = getElements("entry", childs).map(function(item) {
	                var entry = {},
	                    tmp;
	
	                item = item.children;
	
	                addConditionally(entry, "id", "id", item);
	                addConditionally(entry, "title", "title", item);
	                if (
	                    (tmp = getOneElement("link", item)) &&
	                    (tmp = tmp.attribs) &&
	                    (tmp = tmp.href)
	                )
	                    entry.link = tmp;
	                if ((tmp = fetch("summary", item) || fetch("content", item)))
	                    entry.description = tmp;
	                if ((tmp = fetch("updated", item)))
	                    entry.pubDate = new Date(tmp);
	                return entry;
	            });
	        } else {
	            childs = getOneElement("channel", feedRoot.children).children;
	
	            feed.type = feedRoot.name.substr(0, 3);
	            feed.id = "";
	            addConditionally(feed, "title", "title", childs);
	            addConditionally(feed, "link", "link", childs);
	            addConditionally(feed, "description", "description", childs);
	            if ((tmp = fetch("lastBuildDate", childs)))
	                feed.updated = new Date(tmp);
	            addConditionally(feed, "author", "managingEditor", childs, true);
	
	            feed.items = getElements("item", feedRoot.children).map(function(
	                item
	            ) {
	                var entry = {},
	                    tmp;
	
	                item = item.children;
	
	                addConditionally(entry, "id", "guid", item);
	                addConditionally(entry, "title", "title", item);
	                addConditionally(entry, "link", "link", item);
	                addConditionally(entry, "description", "description", item);
	                if ((tmp = fetch("pubDate", item)))
	                    entry.pubDate = new Date(tmp);
	                return entry;
	            });
	        }
	    }
	    this.dom = feed;
	    DomHandler.prototype._handleCallback.call(
	        this,
	        feedRoot ? null : Error("couldn't find root of feed")
	    );
	};
	
	module.exports = FeedHandler;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var DomUtils = module.exports;
	
	[
		__webpack_require__(191),
		__webpack_require__(203),
		__webpack_require__(204),
		__webpack_require__(205),
		__webpack_require__(206),
		__webpack_require__(207)
	].forEach(function(ext){
		Object.keys(ext).forEach(function(key){
			DomUtils[key] = ext[key].bind(DomUtils);
		});
	});


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	var ElementType = __webpack_require__(174),
	    getOuterHTML = __webpack_require__(192),
	    isTag = ElementType.isTag;
	
	module.exports = {
		getInnerHTML: getInnerHTML,
		getOuterHTML: getOuterHTML,
		getText: getText
	};
	
	function getInnerHTML(elem, opts){
		return elem.children ? elem.children.map(function(elem){
			return getOuterHTML(elem, opts);
		}).join("") : "";
	}
	
	function getText(elem){
		if(Array.isArray(elem)) return elem.map(getText).join("");
		if(isTag(elem)) return elem.name === "br" ? "\n" : getText(elem.children);
		if(elem.type === ElementType.CDATA) return getText(elem.children);
		if(elem.type === ElementType.Text) return elem.data;
		return "";
	}


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	  Module dependencies
	*/
	var ElementType = __webpack_require__(193);
	var entities = __webpack_require__(194);
	
	/* mixed-case SVG and MathML tags & attributes
	   recognized by the HTML parser, see
	   https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
	*/
	var foreignNames = __webpack_require__(202);
	foreignNames.elementNames.__proto__ = null; /* use as a simple dictionary */
	foreignNames.attributeNames.__proto__ = null;
	
	var unencodedElements = {
	  __proto__: null,
	  style: true,
	  script: true,
	  xmp: true,
	  iframe: true,
	  noembed: true,
	  noframes: true,
	  plaintext: true,
	  noscript: true
	};
	
	/*
	  Format attributes
	*/
	function formatAttrs(attributes, opts) {
	  if (!attributes) return;
	
	  var output = '';
	  var value;
	
	  // Loop through the attributes
	  for (var key in attributes) {
	    value = attributes[key];
	    if (output) {
	      output += ' ';
	    }
	
	    if (opts.xmlMode === 'foreign') {
	      /* fix up mixed-case attribute names */
	      key = foreignNames.attributeNames[key] || key;
	    }
	    output += key;
	    if ((value !== null && value !== '') || opts.xmlMode) {
	      output +=
	        '="' +
	        (opts.decodeEntities
	          ? entities.encodeXML(value)
	          : value.replace(/\"/g, '&quot;')) +
	        '"';
	    }
	  }
	
	  return output;
	}
	
	/*
	  Self-enclosing tags (stolen from node-htmlparser)
	*/
	var singleTag = {
	  __proto__: null,
	  area: true,
	  base: true,
	  basefont: true,
	  br: true,
	  col: true,
	  command: true,
	  embed: true,
	  frame: true,
	  hr: true,
	  img: true,
	  input: true,
	  isindex: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	};
	
	var render = (module.exports = function(dom, opts) {
	  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
	  opts = opts || {};
	
	  var output = '';
	
	  for (var i = 0; i < dom.length; i++) {
	    var elem = dom[i];
	
	    if (elem.type === 'root') output += render(elem.children, opts);
	    else if (ElementType.isTag(elem)) output += renderTag(elem, opts);
	    else if (elem.type === ElementType.Directive)
	      output += renderDirective(elem);
	    else if (elem.type === ElementType.Comment) output += renderComment(elem);
	    else if (elem.type === ElementType.CDATA) output += renderCdata(elem);
	    else output += renderText(elem, opts);
	  }
	
	  return output;
	});
	
	var foreignModeIntegrationPoints = [
	  'mi',
	  'mo',
	  'mn',
	  'ms',
	  'mtext',
	  'annotation-xml',
	  'foreignObject',
	  'desc',
	  'title'
	];
	
	function renderTag(elem, opts) {
	  // Handle SVG / MathML in HTML
	  if (opts.xmlMode === 'foreign') {
	    /* fix up mixed-case element names */
	    elem.name = foreignNames.elementNames[elem.name] || elem.name;
	    /* exit foreign mode at integration points */
	    if (
	      elem.parent &&
	      foreignModeIntegrationPoints.indexOf(elem.parent.name) >= 0
	    )
	      opts = Object.assign({}, opts, { xmlMode: false });
	  }
	  if (!opts.xmlMode && ['svg', 'math'].indexOf(elem.name) >= 0) {
	    opts = Object.assign({}, opts, { xmlMode: 'foreign' });
	  }
	
	  var tag = '<' + elem.name;
	  var attribs = formatAttrs(elem.attribs, opts);
	
	  if (attribs) {
	    tag += ' ' + attribs;
	  }
	
	  if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {
	    tag += '/>';
	  } else {
	    tag += '>';
	    if (elem.children) {
	      tag += render(elem.children, opts);
	    }
	
	    if (!singleTag[elem.name] || opts.xmlMode) {
	      tag += '</' + elem.name + '>';
	    }
	  }
	
	  return tag;
	}
	
	function renderDirective(elem) {
	  return '<' + elem.data + '>';
	}
	
	function renderText(elem, opts) {
	  var data = elem.data || '';
	
	  // if entities weren't decoded, no need to encode them back
	  if (
	    opts.decodeEntities &&
	    !(elem.parent && elem.parent.name in unencodedElements)
	  ) {
	    data = entities.encodeXML(data);
	  }
	
	  return data;
	}
	
	function renderCdata(elem) {
	  return '<![CDATA[' + elem.children[0].data + ']]>';
	}
	
	function renderComment(elem) {
	  return '<!--' + elem.data + '-->';
	}


/***/ }),
/* 193 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
	/** Types of elements found in htmlparser2's DOM */
	var ElementType;
	(function (ElementType) {
	    /** Type for the root element of a document */
	    ElementType["Root"] = "root";
	    /** Type for Text */
	    ElementType["Text"] = "text";
	    /** Type for <? ... ?> */
	    ElementType["Directive"] = "directive";
	    /** Type for <!-- ... --> */
	    ElementType["Comment"] = "comment";
	    /** Type for <script> tags */
	    ElementType["Script"] = "script";
	    /** Type for <style> tags */
	    ElementType["Style"] = "style";
	    /** Type for Any tag */
	    ElementType["Tag"] = "tag";
	    /** Type for <![CDATA[ ... ]]> */
	    ElementType["CDATA"] = "cdata";
	    /** Type for <!doctype ...> */
	    ElementType["Doctype"] = "doctype";
	})(ElementType = exports.ElementType || (exports.ElementType = {}));
	/**
	 * Tests whether an element is a tag or not.
	 *
	 * @param elem Element to test
	 */
	function isTag(elem) {
	    return (elem.type === ElementType.Tag ||
	        elem.type === ElementType.Script ||
	        elem.type === ElementType.Style);
	}
	exports.isTag = isTag;
	// Exports for backwards compatibility
	/** Type for the root element of a document */
	exports.Root = ElementType.Root;
	/** Type for Text */
	exports.Text = ElementType.Text;
	/** Type for <? ... ?> */
	exports.Directive = ElementType.Directive;
	/** Type for <!-- ... --> */
	exports.Comment = ElementType.Comment;
	/** Type for <script> tags */
	exports.Script = ElementType.Script;
	/** Type for <style> tags */
	exports.Style = ElementType.Style;
	/** Type for Any tag */
	exports.Tag = ElementType.Tag;
	/** Type for <![CDATA[ ... ]]> */
	exports.CDATA = ElementType.CDATA;
	/** Type for <!doctype ...> */
	exports.Doctype = ElementType.Doctype;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
	var decode_1 = __webpack_require__(195);
	var encode_1 = __webpack_require__(201);
	/**
	 * Decodes a string with entities.
	 *
	 * @param data String to decode.
	 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
	 * @deprecated Use `decodeXML` or `decodeHTML` directly.
	 */
	function decode(data, level) {
	    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
	}
	exports.decode = decode;
	/**
	 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
	 *
	 * @param data String to decode.
	 * @param level Optional level to decode at. 0 = XML, 1 = HTML. Default is 0.
	 * @deprecated Use `decodeHTMLStrict` or `decodeXML` directly.
	 */
	function decodeStrict(data, level) {
	    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
	}
	exports.decodeStrict = decodeStrict;
	/**
	 * Encodes a string with entities.
	 *
	 * @param data String to encode.
	 * @param level Optional level to encode at. 0 = XML, 1 = HTML. Default is 0.
	 * @deprecated Use `encodeHTML`, `encodeXML` or `encodeNonAsciiHTML` directly.
	 */
	function encode(data, level) {
	    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
	}
	exports.encode = encode;
	var encode_2 = __webpack_require__(201);
	Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function () { return encode_2.encodeXML; } });
	Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
	Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function () { return encode_2.encodeNonAsciiHTML; } });
	Object.defineProperty(exports, "escape", { enumerable: true, get: function () { return encode_2.escape; } });
	Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function () { return encode_2.escapeUTF8; } });
	// Legacy aliases (deprecated)
	Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
	Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function () { return encode_2.encodeHTML; } });
	var decode_2 = __webpack_require__(195);
	Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function () { return decode_2.decodeXML; } });
	Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
	Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
	// Legacy aliases (deprecated)
	Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
	Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function () { return decode_2.decodeHTML; } });
	Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
	Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function () { return decode_2.decodeHTMLStrict; } });
	Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function () { return decode_2.decodeXML; } });


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __importDefault = (this && this.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
	var entities_json_1 = __importDefault(__webpack_require__(196));
	var legacy_json_1 = __importDefault(__webpack_require__(197));
	var xml_json_1 = __importDefault(__webpack_require__(198));
	var decode_codepoint_1 = __importDefault(__webpack_require__(199));
	var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
	exports.decodeXML = getStrictDecoder(xml_json_1.default);
	exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
	function getStrictDecoder(map) {
	    var replace = getReplacer(map);
	    return function (str) { return String(str).replace(strictEntityRe, replace); };
	}
	var sorter = function (a, b) { return (a < b ? 1 : -1); };
	exports.decodeHTML = (function () {
	    var legacy = Object.keys(legacy_json_1.default).sort(sorter);
	    var keys = Object.keys(entities_json_1.default).sort(sorter);
	    for (var i = 0, j = 0; i < keys.length; i++) {
	        if (legacy[j] === keys[i]) {
	            keys[i] += ";?";
	            j++;
	        }
	        else {
	            keys[i] += ";";
	        }
	    }
	    var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
	    var replace = getReplacer(entities_json_1.default);
	    function replacer(str) {
	        if (str.substr(-1) !== ";")
	            str += ";";
	        return replace(str);
	    }
	    // TODO consider creating a merged map
	    return function (str) { return String(str).replace(re, replacer); };
	})();
	function getReplacer(map) {
	    return function replace(str) {
	        if (str.charAt(1) === "#") {
	            var secondChar = str.charAt(2);
	            if (secondChar === "X" || secondChar === "x") {
	                return decode_codepoint_1.default(parseInt(str.substr(3), 16));
	            }
	            return decode_codepoint_1.default(parseInt(str.substr(2), 10));
	        }
	        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
	        return map[str.slice(1, -1)] || str;
	    };
	}


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	module.exports = {"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}

/***/ }),
/* 197 */
/***/ (function(module, exports) {

	module.exports = {"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\"","QUOT":"\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}

/***/ }),
/* 198 */
/***/ (function(module, exports) {

	module.exports = {"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __importDefault = (this && this.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var decode_json_1 = __importDefault(__webpack_require__(200));
	// Adapted from https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
	var fromCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	String.fromCodePoint ||
	    function (codePoint) {
	        var output = "";
	        if (codePoint > 0xffff) {
	            codePoint -= 0x10000;
	            output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
	            codePoint = 0xdc00 | (codePoint & 0x3ff);
	        }
	        output += String.fromCharCode(codePoint);
	        return output;
	    };
	function decodeCodePoint(codePoint) {
	    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
	        return "\uFFFD";
	    }
	    if (codePoint in decode_json_1.default) {
	        codePoint = decode_json_1.default[codePoint];
	    }
	    return fromCodePoint(codePoint);
	}
	exports.default = decodeCodePoint;


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	module.exports = {"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __importDefault = (this && this.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
	var xml_json_1 = __importDefault(__webpack_require__(198));
	var inverseXML = getInverseObj(xml_json_1.default);
	var xmlReplacer = getInverseReplacer(inverseXML);
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in XML
	 * documents using XML entities.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	exports.encodeXML = getASCIIEncoder(inverseXML);
	var entities_json_1 = __importDefault(__webpack_require__(196));
	var inverseHTML = getInverseObj(entities_json_1.default);
	var htmlReplacer = getInverseReplacer(inverseHTML);
	/**
	 * Encodes all entities and non-ASCII characters in the input.
	 *
	 * This includes characters that are valid ASCII characters in HTML documents.
	 * For example `#` will be encoded as `&num;`. To get a more compact output,
	 * consider using the `encodeNonAsciiHTML` function.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in HTML
	 * documents using HTML entities.
	 *
	 * If a character has no equivalent entity, a
	 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
	 */
	exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
	function getInverseObj(obj) {
	    return Object.keys(obj)
	        .sort()
	        .reduce(function (inverse, name) {
	        inverse[obj[name]] = "&" + name + ";";
	        return inverse;
	    }, {});
	}
	function getInverseReplacer(inverse) {
	    var single = [];
	    var multiple = [];
	    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
	        var k = _a[_i];
	        if (k.length === 1) {
	            // Add value to single array
	            single.push("\\" + k);
	        }
	        else {
	            // Add value to multiple array
	            multiple.push(k);
	        }
	    }
	    // Add ranges to single characters.
	    single.sort();
	    for (var start = 0; start < single.length - 1; start++) {
	        // Find the end of a run of characters
	        var end = start;
	        while (end < single.length - 1 &&
	            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
	            end += 1;
	        }
	        var count = 1 + end - start;
	        // We want to replace at least three characters
	        if (count < 3)
	            continue;
	        single.splice(start, count, single[start] + "-" + single[end]);
	    }
	    multiple.unshift("[" + single.join("") + "]");
	    return new RegExp(multiple.join("|"), "g");
	}
	// /[^\0-\x7F]/gu
	var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
	var getCodePoint = 
	// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
	String.prototype.codePointAt != null
	    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	        function (str) { return str.codePointAt(0); }
	    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        function (c) {
	            return (c.charCodeAt(0) - 0xd800) * 0x400 +
	                c.charCodeAt(1) -
	                0xdc00 +
	                0x10000;
	        };
	function singleCharReplacer(c) {
	    return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))
	        .toString(16)
	        .toUpperCase() + ";";
	}
	function getInverse(inverse, re) {
	    return function (data) {
	        return data
	            .replace(re, function (name) { return inverse[name]; })
	            .replace(reNonASCII, singleCharReplacer);
	    };
	}
	var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
	/**
	 * Encodes all non-ASCII characters, as well as characters not valid in XML
	 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
	 *
	 * Have a look at `escapeUTF8` if you want a more concise output at the expense
	 * of reduced transportability.
	 *
	 * @param data String to escape.
	 */
	function escape(data) {
	    return data.replace(reEscapeChars, singleCharReplacer);
	}
	exports.escape = escape;
	/**
	 * Encodes all characters not valid in XML documents using numeric hexadecimal
	 * reference (eg. `&#xfc;`).
	 *
	 * Note that the output will be character-set dependent.
	 *
	 * @param data String to escape.
	 */
	function escapeUTF8(data) {
	    return data.replace(xmlReplacer, singleCharReplacer);
	}
	exports.escapeUTF8 = escapeUTF8;
	function getASCIIEncoder(obj) {
	    return function (data) {
	        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });
	    };
	}


/***/ }),
/* 202 */
/***/ (function(module, exports) {

	module.exports = {"elementNames":{"altglyph":"altGlyph","altglyphdef":"altGlyphDef","altglyphitem":"altGlyphItem","animatecolor":"animateColor","animatemotion":"animateMotion","animatetransform":"animateTransform","clippath":"clipPath","feblend":"feBlend","fecolormatrix":"feColorMatrix","fecomponenttransfer":"feComponentTransfer","fecomposite":"feComposite","feconvolvematrix":"feConvolveMatrix","fediffuselighting":"feDiffuseLighting","fedisplacementmap":"feDisplacementMap","fedistantlight":"feDistantLight","fedropshadow":"feDropShadow","feflood":"feFlood","fefunca":"feFuncA","fefuncb":"feFuncB","fefuncg":"feFuncG","fefuncr":"feFuncR","fegaussianblur":"feGaussianBlur","feimage":"feImage","femerge":"feMerge","femergenode":"feMergeNode","femorphology":"feMorphology","feoffset":"feOffset","fepointlight":"fePointLight","fespecularlighting":"feSpecularLighting","fespotlight":"feSpotLight","fetile":"feTile","feturbulence":"feTurbulence","foreignobject":"foreignObject","glyphref":"glyphRef","lineargradient":"linearGradient","radialgradient":"radialGradient","textpath":"textPath"},"attributeNames":{"definitionurl":"definitionURL","attributename":"attributeName","attributetype":"attributeType","basefrequency":"baseFrequency","baseprofile":"baseProfile","calcmode":"calcMode","clippathunits":"clipPathUnits","diffuseconstant":"diffuseConstant","edgemode":"edgeMode","filterunits":"filterUnits","glyphref":"glyphRef","gradienttransform":"gradientTransform","gradientunits":"gradientUnits","kernelmatrix":"kernelMatrix","kernelunitlength":"kernelUnitLength","keypoints":"keyPoints","keysplines":"keySplines","keytimes":"keyTimes","lengthadjust":"lengthAdjust","limitingconeangle":"limitingConeAngle","markerheight":"markerHeight","markerunits":"markerUnits","markerwidth":"markerWidth","maskcontentunits":"maskContentUnits","maskunits":"maskUnits","numoctaves":"numOctaves","pathlength":"pathLength","patterncontentunits":"patternContentUnits","patterntransform":"patternTransform","patternunits":"patternUnits","pointsatx":"pointsAtX","pointsaty":"pointsAtY","pointsatz":"pointsAtZ","preservealpha":"preserveAlpha","preserveaspectratio":"preserveAspectRatio","primitiveunits":"primitiveUnits","refx":"refX","refy":"refY","repeatcount":"repeatCount","repeatdur":"repeatDur","requiredextensions":"requiredExtensions","requiredfeatures":"requiredFeatures","specularconstant":"specularConstant","specularexponent":"specularExponent","spreadmethod":"spreadMethod","startoffset":"startOffset","stddeviation":"stdDeviation","stitchtiles":"stitchTiles","surfacescale":"surfaceScale","systemlanguage":"systemLanguage","tablevalues":"tableValues","targetx":"targetX","targety":"targetY","textlength":"textLength","viewbox":"viewBox","viewtarget":"viewTarget","xchannelselector":"xChannelSelector","ychannelselector":"yChannelSelector","zoomandpan":"zoomAndPan"}}

/***/ }),
/* 203 */
/***/ (function(module, exports) {

	var getChildren = exports.getChildren = function(elem){
		return elem.children;
	};
	
	var getParent = exports.getParent = function(elem){
		return elem.parent;
	};
	
	exports.getSiblings = function(elem){
		var parent = getParent(elem);
		return parent ? getChildren(parent) : [elem];
	};
	
	exports.getAttributeValue = function(elem, name){
		return elem.attribs && elem.attribs[name];
	};
	
	exports.hasAttrib = function(elem, name){
		return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
	};
	
	exports.getName = function(elem){
		return elem.name;
	};


/***/ }),
/* 204 */
/***/ (function(module, exports) {

	exports.removeElement = function(elem){
		if(elem.prev) elem.prev.next = elem.next;
		if(elem.next) elem.next.prev = elem.prev;
	
		if(elem.parent){
			var childs = elem.parent.children;
			childs.splice(childs.lastIndexOf(elem), 1);
		}
	};
	
	exports.replaceElement = function(elem, replacement){
		var prev = replacement.prev = elem.prev;
		if(prev){
			prev.next = replacement;
		}
	
		var next = replacement.next = elem.next;
		if(next){
			next.prev = replacement;
		}
	
		var parent = replacement.parent = elem.parent;
		if(parent){
			var childs = parent.children;
			childs[childs.lastIndexOf(elem)] = replacement;
		}
	};
	
	exports.appendChild = function(elem, child){
		child.parent = elem;
	
		if(elem.children.push(child) !== 1){
			var sibling = elem.children[elem.children.length - 2];
			sibling.next = child;
			child.prev = sibling;
			child.next = null;
		}
	};
	
	exports.append = function(elem, next){
		var parent = elem.parent,
			currNext = elem.next;
	
		next.next = currNext;
		next.prev = elem;
		elem.next = next;
		next.parent = parent;
	
		if(currNext){
			currNext.prev = next;
			if(parent){
				var childs = parent.children;
				childs.splice(childs.lastIndexOf(currNext), 0, next);
			}
		} else if(parent){
			parent.children.push(next);
		}
	};
	
	exports.prepend = function(elem, prev){
		var parent = elem.parent;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(elem), 0, prev);
		}
	
		if(elem.prev){
			elem.prev.next = prev;
		}
		
		prev.parent = parent;
		prev.prev = elem.prev;
		prev.next = elem;
		elem.prev = prev;
	};
	
	


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var isTag = __webpack_require__(174).isTag;
	
	module.exports = {
		filter: filter,
		find: find,
		findOneChild: findOneChild,
		findOne: findOne,
		existsOne: existsOne,
		findAll: findAll
	};
	
	function filter(test, element, recurse, limit){
		if(!Array.isArray(element)) element = [element];
	
		if(typeof limit !== "number" || !isFinite(limit)){
			limit = Infinity;
		}
		return find(test, element, recurse !== false, limit);
	}
	
	function find(test, elems, recurse, limit){
		var result = [], childs;
	
		for(var i = 0, j = elems.length; i < j; i++){
			if(test(elems[i])){
				result.push(elems[i]);
				if(--limit <= 0) break;
			}
	
			childs = elems[i].children;
			if(recurse && childs && childs.length > 0){
				childs = find(test, childs, recurse, limit);
				result = result.concat(childs);
				limit -= childs.length;
				if(limit <= 0) break;
			}
		}
	
		return result;
	}
	
	function findOneChild(test, elems){
		for(var i = 0, l = elems.length; i < l; i++){
			if(test(elems[i])) return elems[i];
		}
	
		return null;
	}
	
	function findOne(test, elems){
		var elem = null;
	
		for(var i = 0, l = elems.length; i < l && !elem; i++){
			if(!isTag(elems[i])){
				continue;
			} else if(test(elems[i])){
				elem = elems[i];
			} else if(elems[i].children.length > 0){
				elem = findOne(test, elems[i].children);
			}
		}
	
		return elem;
	}
	
	function existsOne(test, elems){
		for(var i = 0, l = elems.length; i < l; i++){
			if(
				isTag(elems[i]) && (
					test(elems[i]) || (
						elems[i].children.length > 0 &&
						existsOne(test, elems[i].children)
					)
				)
			){
				return true;
			}
		}
	
		return false;
	}
	
	function findAll(test, rootElems){
		var result = [];
		var stack = rootElems.slice();
		while(stack.length){
			var elem = stack.shift();
			if(!isTag(elem)) continue;
			if (elem.children && elem.children.length > 0) {
				stack.unshift.apply(stack, elem.children);
			}
			if(test(elem)) result.push(elem);
		}
		return result;
	}


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	var ElementType = __webpack_require__(174);
	var isTag = exports.isTag = ElementType.isTag;
	
	exports.testElement = function(options, element){
		for(var key in options){
			if(!options.hasOwnProperty(key));
			else if(key === "tag_name"){
				if(!isTag(element) || !options.tag_name(element.name)){
					return false;
				}
			} else if(key === "tag_type"){
				if(!options.tag_type(element.type)) return false;
			} else if(key === "tag_contains"){
				if(isTag(element) || !options.tag_contains(element.data)){
					return false;
				}
			} else if(!element.attribs || !options[key](element.attribs[key])){
				return false;
			}
		}
		return true;
	};
	
	var Checks = {
		tag_name: function(name){
			if(typeof name === "function"){
				return function(elem){ return isTag(elem) && name(elem.name); };
			} else if(name === "*"){
				return isTag;
			} else {
				return function(elem){ return isTag(elem) && elem.name === name; };
			}
		},
		tag_type: function(type){
			if(typeof type === "function"){
				return function(elem){ return type(elem.type); };
			} else {
				return function(elem){ return elem.type === type; };
			}
		},
		tag_contains: function(data){
			if(typeof data === "function"){
				return function(elem){ return !isTag(elem) && data(elem.data); };
			} else {
				return function(elem){ return !isTag(elem) && elem.data === data; };
			}
		}
	};
	
	function getAttribCheck(attrib, value){
		if(typeof value === "function"){
			return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
		} else {
			return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
		}
	}
	
	function combineFuncs(a, b){
		return function(elem){
			return a(elem) || b(elem);
		};
	}
	
	exports.getElements = function(options, element, recurse, limit){
		var funcs = Object.keys(options).map(function(key){
			var value = options[key];
			return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
		});
	
		return funcs.length === 0 ? [] : this.filter(
			funcs.reduce(combineFuncs),
			element, recurse, limit
		);
	};
	
	exports.getElementById = function(id, element, recurse){
		if(!Array.isArray(element)) element = [element];
		return this.findOne(getAttribCheck("id", id), element, recurse !== false);
	};
	
	exports.getElementsByTagName = function(name, element, recurse, limit){
		return this.filter(Checks.tag_name(name), element, recurse, limit);
	};
	
	exports.getElementsByTagType = function(type, element, recurse, limit){
		return this.filter(Checks.tag_type(type), element, recurse, limit);
	};


/***/ }),
/* 207 */
/***/ (function(module, exports) {

	// removeSubsets
	// Given an array of nodes, remove any member that is contained by another.
	exports.removeSubsets = function(nodes) {
		var idx = nodes.length, node, ancestor, replace;
	
		// Check if each node (or one of its ancestors) is already contained in the
		// array.
		while (--idx > -1) {
			node = ancestor = nodes[idx];
	
			// Temporarily remove the node under consideration
			nodes[idx] = null;
			replace = true;
	
			while (ancestor) {
				if (nodes.indexOf(ancestor) > -1) {
					replace = false;
					nodes.splice(idx, 1);
					break;
				}
				ancestor = ancestor.parent;
			}
	
			// If the node has been found to be unique, re-insert it.
			if (replace) {
				nodes[idx] = node;
			}
		}
	
		return nodes;
	};
	
	// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
	var POSITION = {
		DISCONNECTED: 1,
		PRECEDING: 2,
		FOLLOWING: 4,
		CONTAINS: 8,
		CONTAINED_BY: 16
	};
	
	// Compare the position of one node against another node in any other document.
	// The return value is a bitmask with the following values:
	//
	// document order:
	// > There is an ordering, document order, defined on all the nodes in the
	// > document corresponding to the order in which the first character of the
	// > XML representation of each node occurs in the XML representation of the
	// > document after expansion of general entities. Thus, the document element
	// > node will be the first node. Element nodes occur before their children.
	// > Thus, document order orders element nodes in order of the occurrence of
	// > their start-tag in the XML (after expansion of entities). The attribute
	// > nodes of an element occur after the element and before its children. The
	// > relative order of attribute nodes is implementation-dependent./
	// Source:
	// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
	//
	// @argument {Node} nodaA The first node to use in the comparison
	// @argument {Node} nodeB The second node to use in the comparison
	//
	// @return {Number} A bitmask describing the input nodes' relative position.
	//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
	//         a description of these values.
	var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
		var aParents = [];
		var bParents = [];
		var current, sharedParent, siblings, aSibling, bSibling, idx;
	
		if (nodeA === nodeB) {
			return 0;
		}
	
		current = nodeA;
		while (current) {
			aParents.unshift(current);
			current = current.parent;
		}
		current = nodeB;
		while (current) {
			bParents.unshift(current);
			current = current.parent;
		}
	
		idx = 0;
		while (aParents[idx] === bParents[idx]) {
			idx++;
		}
	
		if (idx === 0) {
			return POSITION.DISCONNECTED;
		}
	
		sharedParent = aParents[idx - 1];
		siblings = sharedParent.children;
		aSibling = aParents[idx];
		bSibling = bParents[idx];
	
		if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
			if (sharedParent === nodeB) {
				return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
			}
			return POSITION.FOLLOWING;
		} else {
			if (sharedParent === nodeA) {
				return POSITION.PRECEDING | POSITION.CONTAINS;
			}
			return POSITION.PRECEDING;
		}
	};
	
	// Sort an array of nodes based on their relative position in the document and
	// remove any duplicate nodes. If the array contains nodes that do not belong
	// to the same document, sort order is unspecified.
	//
	// @argument {Array} nodes Array of DOM nodes
	//
	// @returns {Array} collection of unique nodes, sorted in document order
	exports.uniqueSort = function(nodes) {
		var idx = nodes.length, node, position;
	
		nodes = nodes.slice();
	
		while (--idx > -1) {
			node = nodes[idx];
			position = nodes.indexOf(node);
			if (position > -1 && position < idx) {
				nodes.splice(idx, 1);
			}
		}
		nodes.sort(function(a, b) {
			var relative = comparePos(a, b);
			if (relative & POSITION.PRECEDING) {
				return -1;
			} else if (relative & POSITION.FOLLOWING) {
				return 1;
			}
			return 0;
		});
	
		return nodes;
	};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = Stream;
	
	var Parser = __webpack_require__(209);
	
	function Stream(options) {
	    Parser.call(this, new Cbs(this), options);
	}
	
	__webpack_require__(184)(Stream, Parser);
	
	Stream.prototype.readable = true;
	
	function Cbs(scope) {
	    this.scope = scope;
	}
	
	var EVENTS = __webpack_require__(176).EVENTS;
	
	Object.keys(EVENTS).forEach(function(name) {
	    if (EVENTS[name] === 0) {
	        Cbs.prototype["on" + name] = function() {
	            this.scope.emit(name);
	        };
	    } else if (EVENTS[name] === 1) {
	        Cbs.prototype["on" + name] = function(a) {
	            this.scope.emit(name, a);
	        };
	    } else if (EVENTS[name] === 2) {
	        Cbs.prototype["on" + name] = function(a, b) {
	            this.scope.emit(name, a, b);
	        };
	    } else {
	        throw Error("wrong number of arguments!");
	    }
	});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = Stream;
	
	var Parser = __webpack_require__(177);
	var WritableStream = __webpack_require__(210).Writable;
	var StringDecoder = __webpack_require__(211).StringDecoder;
	var Buffer = __webpack_require__(213).Buffer;
	
	function Stream(cbs, options) {
	    var parser = (this._parser = new Parser(cbs, options));
	    var decoder = (this._decoder = new StringDecoder());
	
	    WritableStream.call(this, { decodeStrings: false });
	
	    this.once("finish", function() {
	        parser.end(decoder.end());
	    });
	}
	
	__webpack_require__(184)(Stream, WritableStream);
	
	Stream.prototype._write = function(chunk, encoding, cb) {
	    if (chunk instanceof Buffer) chunk = this._decoder.write(chunk);
	    this._parser.write(chunk);
	    cb();
	};


/***/ }),
/* 210 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	/*<replacement>*/
	
	var Buffer = __webpack_require__(212).Buffer;
	/*</replacement>*/
	
	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};
	
	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};
	
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}
	
	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};
	
	StringDecoder.prototype.end = utf8End;
	
	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;
	
	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};
	
	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}
	
	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}
	
	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}
	
	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}
	
	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}
	
	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}
	
	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}
	
	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}
	
	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}
	
	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}
	
	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}
	
	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(213)
	var Buffer = buffer.Buffer
	
	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}
	
	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	SafeBuffer.prototype = Object.create(Buffer.prototype)
	
	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)
	
	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}
	
	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}
	
	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(214)
	var ieee754 = __webpack_require__(215)
	var isArray = __webpack_require__(216)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(169).Buffer, (function() { return this; }())))

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function getLens (b64) {
	  var len = b64.length
	
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len
	
	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)
	
	  return [validLen, placeHoldersLen]
	}
	
	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	
	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
	
	  var curByte = 0
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen
	
	  var i
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }
	
	  return parts.join('')
	}


/***/ }),
/* 215 */
/***/ (function(module, exports) {

	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 216 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = ProxyHandler;
	
	function ProxyHandler(cbs) {
	    this._cbs = cbs || {};
	}
	
	var EVENTS = __webpack_require__(176).EVENTS;
	Object.keys(EVENTS).forEach(function(name) {
	    if (EVENTS[name] === 0) {
	        name = "on" + name;
	        ProxyHandler.prototype[name] = function() {
	            if (this._cbs[name]) this._cbs[name]();
	        };
	    } else if (EVENTS[name] === 1) {
	        name = "on" + name;
	        ProxyHandler.prototype[name] = function(a) {
	            if (this._cbs[name]) this._cbs[name](a);
	        };
	    } else if (EVENTS[name] === 2) {
	        name = "on" + name;
	        ProxyHandler.prototype[name] = function(a, b) {
	            if (this._cbs[name]) this._cbs[name](a, b);
	        };
	    } else {
	        throw Error("wrong number of arguments");
	    }
	});


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = CollectingHandler;
	
	function CollectingHandler(cbs) {
	    this._cbs = cbs || {};
	    this.events = [];
	}
	
	var EVENTS = __webpack_require__(176).EVENTS;
	Object.keys(EVENTS).forEach(function(name) {
	    if (EVENTS[name] === 0) {
	        name = "on" + name;
	        CollectingHandler.prototype[name] = function() {
	            this.events.push([name]);
	            if (this._cbs[name]) this._cbs[name]();
	        };
	    } else if (EVENTS[name] === 1) {
	        name = "on" + name;
	        CollectingHandler.prototype[name] = function(a) {
	            this.events.push([name, a]);
	            if (this._cbs[name]) this._cbs[name](a);
	        };
	    } else if (EVENTS[name] === 2) {
	        name = "on" + name;
	        CollectingHandler.prototype[name] = function(a, b) {
	            this.events.push([name, a, b]);
	            if (this._cbs[name]) this._cbs[name](a, b);
	        };
	    } else {
	        throw Error("wrong number of arguments");
	    }
	});
	
	CollectingHandler.prototype.onreset = function() {
	    this.events = [];
	    if (this._cbs.onreset) this._cbs.onreset();
	};
	
	CollectingHandler.prototype.restart = function() {
	    if (this._cbs.onreset) this._cbs.onreset();
	
	    for (var i = 0, len = this.events.length; i < len; i++) {
	        if (this._cbs[this.events[i][0]]) {
	            var num = this.events[i].length;
	
	            if (num === 1) {
	                this._cbs[this.events[i][0]]();
	            } else if (num === 2) {
	                this._cbs[this.events[i][0]](this.events[i][1]);
	            } else {
	                this._cbs[this.events[i][0]](
	                    this.events[i][1],
	                    this.events[i][2]
	                );
	            }
	        }
	    }
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	var Item, _, assert, beginSerialization, beginSerializeItem, createItem, deserializeItems, dom, endSerialization, endSerializeItem, htmlparser, serializeItemBody;
	
	htmlparser = __webpack_require__(176);
	
	assert = __webpack_require__(10).assert;
	
	_ = __webpack_require__(15);
	
	Item = __webpack_require__(23);
	
	dom = __webpack_require__(175);
	
	
	/*
	Serialization
	 */
	
	beginSerialization = function(items, options, context) {
	  var bodyElement, headElement;
	  context.opml = dom.createElement('opml', {
	    version: '2.0'
	  });
	  context.elementStack = [];
	  context.topElement = function() {
	    return this.elementStack[this.elementStack.length - 1];
	  };
	  context.popElement = function() {
	    return this.elementStack.pop();
	  };
	  context.pushElement = function(element) {
	    return this.elementStack.push(element);
	  };
	  headElement = dom.createElement('head');
	  bodyElement = dom.createElement('body');
	  dom.appendChild(context.opml, headElement);
	  dom.appendChild(context.opml, bodyElement);
	  return context.pushElement(bodyElement);
	};
	
	beginSerializeItem = function(item, options, context) {
	  var eachName, eachValue, i, len, outlineElement, parentElement, ref;
	  parentElement = context.topElement();
	  outlineElement = dom.createElement('outline', {
	    id: item.id
	  });
	  ref = item.attributeNames;
	  for (i = 0, len = ref.length; i < len; i++) {
	    eachName = ref[i];
	    if (!(eachName === 'id' || eachName === 'text')) {
	      eachValue = item.getAttribute(eachName);
	      if (!(eachName === 'indent' && eachValue === '1')) {
	        outlineElement.attribs[eachName] = eachValue;
	      }
	    }
	  }
	  dom.appendChild(parentElement, outlineElement);
	  return context.pushElement(outlineElement);
	};
	
	serializeItemBody = function(item, bodyAttributedString, options, context) {
	  var outlineElement;
	  outlineElement = context.topElement();
	  return outlineElement.attribs['text'] = bodyAttributedString.toInlineBMLString();
	};
	
	endSerializeItem = function(item, options, context) {
	  return context.popElement();
	};
	
	endSerialization = function(options, context) {
	  dom.prettyDOM(context.opml, {
	    p: true
	  });
	  return dom.getOuterHTML(context.opml, {
	    decodeEntities: true,
	    lowerCaseTags: true,
	    xmlMode: true
	  });
	};
	
	
	/*
	Deserialization
	 */
	
	deserializeItems = function(opmlString, outline, options) {
	  var bodyElement, eachOutline, flatItems, headElement, items, opmlElement, parsedDOM;
	  parsedDOM = dom.parseDOM(opmlString);
	  opmlElement = dom.getElementsByTagName('opml', parsedDOM, false)[0];
	  if (!opmlElement) {
	    throw new Error('Could not find <opml> element.');
	  }
	  headElement = dom.getElementsByTagName('head', opmlElement.children, false)[0];
	  bodyElement = dom.getElementsByTagName('body', opmlElement.children, false)[0];
	  if (bodyElement) {
	    dom.normalizeDOM(bodyElement);
	    flatItems = [];
	    eachOutline = dom.firstChild(bodyElement);
	    while (eachOutline) {
	      createItem(outline, eachOutline, 0, flatItems);
	      eachOutline = eachOutline.next;
	    }
	    items = Item.buildItemHiearchy(flatItems);
	    return items;
	  } else {
	    throw new Error('Could not find <body> element.');
	  }
	};
	
	createItem = function(outline, outlineElement, depth, flatItems, remapIDCallback) {
	  var each, eachOutline, i, item, itemIndent, len, ref, results;
	  assert(outlineElement.name === 'outline', "Expected OUTLINE element but got " + outlineElement.tagName);
	  item = outline.createItem('', outlineElement.attribs['id']);
	  item.bodyHTMLString = outlineElement.attribs['text'] || '';
	  ref = Object.keys(outlineElement.attribs);
	  for (i = 0, len = ref.length; i < len; i++) {
	    each = ref[i];
	    if (each !== 'id') {
	      item.setAttribute(each, outlineElement.attribs[each]);
	    }
	  }
	  itemIndent = item.indent || 1;
	  depth = depth + itemIndent;
	  item.indent = depth;
	  flatItems.push(item);
	  eachOutline = dom.firstChild(outlineElement);
	  results = [];
	  while (eachOutline) {
	    createItem(outline, eachOutline, depth, flatItems, remapIDCallback);
	    results.push(eachOutline = eachOutline.next);
	  }
	  return results;
	};
	
	module.exports = {
	  beginSerialization: beginSerialization,
	  beginSerializeItem: beginSerializeItem,
	  serializeItemBody: serializeItemBody,
	  endSerializeItem: endSerializeItem,
	  endSerialization: endSerialization,
	  deserializeItems: deserializeItems
	};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	var changeDelegate, deserializeItem, deserializeItems, repeat, serializeItemBody, tagsHelper, text;
	
	tagsHelper = __webpack_require__(221);
	
	changeDelegate = __webpack_require__(222);
	
	repeat = __webpack_require__(10).repeat;
	
	text = __webpack_require__(225);
	
	serializeItemBody = function(item, bodyAttributedString, options, context) {
	  var attributeName, bodyString, encodedAttributes, i, itemClone, len, ref;
	  bodyString = bodyAttributedString.string;
	  if (item.outline.changeDelegate !== changeDelegate) {
	    itemClone = item.clone();
	    encodedAttributes = [];
	    ref = item.attributeNames;
	    for (i = 0, len = ref.length; i < len; i++) {
	      attributeName = ref[i];
	      if (tagsHelper.encodesAttributeName(attributeName)) {
	        tagsHelper.addTag(itemClone, attributeName, itemClone.getAttribute(attributeName));
	      }
	    }
	    if (encodedAttributes.length) {
	      encodedAttributes = encodedAttributes.join(' ');
	      if (bodyString.length) {
	        encodedAttributes = ' ' + encodedAttributes;
	      }
	      bodyString += encodedAttributes;
	    }
	  }
	  return context.lines.push(repeat('\t', item.depth - options.baseDepth) + bodyString);
	};
	
	deserializeItem = function(itemString, outline) {
	  var body, indent, item, removedLength;
	  item = outline.createItem();
	  indent = itemString.match(/^\t*/)[0].length + 1;
	  body = itemString.substring(indent - 1);
	  item.indent = indent;
	  item.bodyString = body;
	  if (item.outline.changeDelegate !== changeDelegate) {
	    removedLength = 0;
	    tagsHelper.parseTags(body, function(tag, value, match) {
	      var index;
	      item.setAttribute(tag, value);
	      index = match.index - removedLength;
	      body = body.substring(0, index) + body.substring(index + match[0].length);
	      return removedLength += match[0].length;
	    });
	  }
	  return item;
	};
	
	deserializeItems = function(itemsString, outline, options) {
	  if (options == null) {
	    options = {};
	  }
	  return text.deserializeItems(itemsString, outline, options, deserializeItem);
	};
	
	module.exports = {
	  changeDelegate: __webpack_require__(222),
	  beginSerialization: text.beginSerialization,
	  beginSerializeItem: text.beginSerializeItem,
	  serializeItemBody: serializeItemBody,
	  endSerializeItem: text.endSerializeItem,
	  endSerialization: text.endSerialization,
	  emptyEncodeLastItem: text.emptyEncodeLastItem,
	  deserializeItems: deserializeItems,
	  itemPathTypes: {
	    'project': true,
	    'task': true,
	    'note': true
	  }
	};


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	var Item, addTag, encodeNameForAttributeName, encodeTag, encodesAttributeName, parseTags, removeTag, reservedTags, syncTagAttributeToItemBody, tagRange, tagRegex, tagRegexString, tagValueRegex, tagValueRegexString, tagWordCharsRegex, tagWordRegexString, tagWordStartCharsRegex, trailingTagsRegex;
	
	Item = __webpack_require__(23);
	
	tagWordStartCharsRegex = /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
	
	tagWordCharsRegex = /[\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]/;
	
	tagWordRegexString = "(?:" + tagWordStartCharsRegex.source + "|" + tagWordCharsRegex.source + ")*";
	
	tagValueRegex = /\(((?:\\\(|\\\)|[^()])*)\)/;
	
	tagValueRegexString = tagValueRegex.source;
	
	tagRegexString = "(^|\\s+)@(" + tagWordRegexString + ")(?:" + tagValueRegexString + ")?(?=\\s|$)";
	
	tagRegex = new RegExp(tagRegexString, 'g');
	
	trailingTagsRegex = new RegExp("(" + tagRegexString + ")+\\s*$", 'g');
	
	reservedTags = {
	  'data-id': true,
	  'data-text': true,
	  'data-type': true
	};
	
	tagRange = function(text, tag) {
	  var result;
	  result = void 0;
	  tag = 'data-' + tag;
	  parseTags(text, function(eachTag, eachValue, eachMatch) {
	    if (tag === eachTag) {
	      return result = {
	        location: eachMatch.index,
	        length: eachMatch[0].length
	      };
	    }
	  });
	  return result;
	};
	
	encodeTag = function(tag, value) {
	  if (value) {
	    value = Item.objectToAttributeValueString(value);
	    value = value.replace(/\)/g, '\\)');
	    value = value.replace(/\(/g, '\\(');
	    return "@" + tag + "(" + value + ")";
	  } else {
	    return "@" + tag;
	  }
	};
	
	addTag = function(item, tag, value) {
	  var range, tagString;
	  tagString = encodeTag(tag, value);
	  range = tagRange(item.bodyString, tag);
	  if (!range) {
	    range = {
	      location: item.bodyString.length,
	      length: 0
	    };
	  }
	  if (range.location > 0 && !/\s+$/.test(item.bodyString)) {
	    tagString = ' ' + tagString;
	  }
	  return item.replaceBodyRange(range.location, range.length, tagString);
	};
	
	removeTag = function(item, tag) {
	  var range;
	  if (range = tagRange(item.bodyString, tag)) {
	    return item.replaceBodyRange(range.location, range.length, '');
	  }
	};
	
	parseTags = function(text, callback) {
	  var foundTag, leadingSpace, match, ref, tag, tags, trailingMatch, value;
	  tags = {};
	  if (text.indexOf('@') !== -1) {
	    foundTag = false;
	    while (match = tagRegex.exec(text)) {
	      foundTag = true;
	      leadingSpace = match[1];
	      tag = 'data-' + match[2];
	      value = (ref = match[3]) != null ? ref : '';
	      if ((tags[tag] == null) && encodesAttributeName(tag)) {
	        value = value.replace(/\\\)/g, ')');
	        value = value.replace(/\\\(/g, '(');
	        tags[tag] = value;
	        if (callback) {
	          callback(tag, value, match);
	        }
	      }
	    }
	    if (foundTag) {
	      trailingMatch = text.match(trailingTagsRegex);
	    }
	  }
	  return {
	    tags: tags,
	    trailingMatch: trailingMatch
	  };
	};
	
	syncTagAttributeToItemBody = function(item, attributeName, value) {
	  var tagName;
	  if (tagName = encodeNameForAttributeName(attributeName)) {
	    if (value != null) {
	      return addTag(item, tagName, value);
	    } else {
	      return removeTag(item, tagName);
	    }
	  }
	};
	
	encodesAttributeName = function(attributeName) {
	  return !reservedTags[attributeName] && (attributeName.indexOf('data-') === 0);
	};
	
	encodeNameForAttributeName = function(attributeName) {
	  if (encodesAttributeName(attributeName)) {
	    return attributeName.substr(5);
	  } else {
	    return null;
	  }
	};
	
	module.exports = {
	  syncTagAttributeToItemBody: syncTagAttributeToItemBody,
	  encodeNameForAttributeName: encodeNameForAttributeName,
	  encodesAttributeName: encodesAttributeName,
	  tagRegex: tagRegex,
	  tagRange: tagRange,
	  encodeTag: encodeTag,
	  parseTags: parseTags
	};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var highlightItemBody, processItemDidChangeAttribute, processItemDidChangeBody, smartLinks, tagsHelper, typesHelper;
	
	smartLinks = __webpack_require__(223);
	
	typesHelper = __webpack_require__(224);
	
	tagsHelper = __webpack_require__(221);
	
	processItemDidChangeAttribute = function(item, attribute, value, oldValue) {
	  var startBodyString;
	  startBodyString = item.bodyString;
	  if (attribute === 'data-type') {
	    typesHelper.syncTypeAttributeToItemBody(item, value, oldValue);
	  } else if (tagsHelper.encodesAttributeName(attribute)) {
	    tagsHelper.syncTagAttributeToItemBody(item, attribute, value);
	  }
	  if (startBodyString !== item.bodyString) {
	    return highlightItemBody(item);
	  }
	};
	
	processItemDidChangeBody = function(item, oldBody) {
	  var bodyString, contentString, newTagMatches, newTags, oldTags, parseResults, results, tag, type;
	  oldTags = tagsHelper.parseTags(oldBody).tags;
	  newTagMatches = [];
	  parseResults = tagsHelper.parseTags(item.bodyString, function(tag, value, match) {
	    return newTagMatches.push({
	      tag: tag,
	      value: value,
	      match: match
	    });
	  });
	  newTags = parseResults.tags;
	  bodyString = item.bodyString;
	  if (parseResults.trailingMatch) {
	    contentString = bodyString.substr(0, bodyString.length - parseResults.trailingMatch[0].length);
	  } else {
	    contentString = bodyString;
	  }
	  type = typesHelper.parseType(contentString);
	  item.setAttribute('data-type', type);
	  highlightItemBody(item, type, newTags, newTagMatches, contentString);
	  for (tag in oldTags) {
	    if (newTags[tag] == null) {
	      item.removeAttribute(tag);
	    }
	  }
	  results = [];
	  for (tag in newTags) {
	    if (newTags[tag] !== oldTags[tag]) {
	      results.push(item.setAttribute(tag, newTags[tag]));
	    } else {
	      results.push(void 0);
	    }
	  }
	  return results;
	};
	
	highlightItemBody = function(item, type, tags, tagMatches, contentString) {
	  var attributes, bodyString, each, eachTagQuotedValue, eachTagValue, encodedTagName, i, j, leadingSpace, len, len1, length, match, parseResults, ref, start, tag, tagValueItemOffset, value;
	  bodyString = item.bodyString;
	  if (!tags) {
	    tagMatches = [];
	    parseResults = tagsHelper.parseTags(bodyString, function(tag, value, match) {
	      return tagMatches.push({
	        tag: tag,
	        value: value,
	        match: match
	      });
	    });
	    tags = parseResults.tags;
	    if (parseResults.trailingMatch) {
	      contentString = bodyString.substr(0, bodyString.length - parseResults.trailingMatch[0].length);
	    } else {
	      contentString = bodyString;
	    }
	  }
	  for (i = 0, len = tagMatches.length; i < len; i++) {
	    each = tagMatches[i];
	    tag = each.tag;
	    value = each.value;
	    match = each.match;
	    leadingSpace = match[1];
	    start = match.index + leadingSpace.length;
	    length = match[0].length - leadingSpace.length;
	    item.addBodyHighlightAttributeInRange('tag', tag, start, length);
	    encodedTagName = tagsHelper.encodeNameForAttributeName(tag);
	    attributes = {
	      tagname: tag,
	      link: "filter://@" + encodedTagName
	    };
	    item.addBodyHighlightAttributesInRange(attributes, start, match[2].length + 1);
	    if (value != null ? value.length : void 0) {
	      if (value.indexOf(',') !== -1) {
	        tagValueItemOffset = 0;
	        ref = value.split(',');
	        for (j = 0, len1 = ref.length; j < len1; j++) {
	          eachTagValue = ref[j];
	          if (eachTagValue.length > 0) {
	            eachTagQuotedValue = "\"" + (eachTagValue.trim()) + "\"";
	            attributes = {
	              tagvalue: eachTagValue,
	              link: "filter://@" + encodedTagName + " contains[l] " + eachTagQuotedValue
	            };
	            item.addBodyHighlightAttributesInRange(attributes, start + 1 + match[2].length + 1 + tagValueItemOffset, eachTagValue.length);
	          }
	          tagValueItemOffset += eachTagValue.length + 1;
	        }
	      } else {
	        attributes = {
	          tagvalue: value,
	          link: "filter://@" + encodedTagName + " = \"" + value + "\""
	        };
	        item.addBodyHighlightAttributesInRange(attributes, start + 1 + match[2].length + 1, value.length);
	      }
	    }
	  }
	  if (type == null) {
	    type = typesHelper.parseType(contentString);
	  }
	  if (type === 'task') {
	    item.addBodyHighlightAttributesInRange({
	      link: 'button://toggledone',
	      lead: ''
	    }, 0, 1);
	    if (contentString.length > 2) {
	      item.addBodyHighlightAttributeInRange('content', "", 2, contentString.length - 2);
	    }
	  } else if (type === 'project') {
	    if (contentString.length > 1) {
	      item.addBodyHighlightAttributeInRange('content', "", 0, contentString.length - 1);
	    }
	  } else {
	    if (contentString) {
	      item.addBodyHighlightAttributeInRange('content', "", 0, contentString.length);
	    }
	  }
	  return smartLinks.highlightLinks(item);
	};
	
	module.exports = {
	  processItemDidChangeBody: processItemDidChangeBody,
	  processItemDidChangeAttribute: processItemDidChangeAttribute
	};


/***/ }),
/* 223 */
/***/ (function(module, exports) {

	var emailRegex, highlightLinks, pathRegex, webRegex;
	
	emailRegex = /\b[A-Z0-9\._%+\-]+@[A-Z0-9\.\-]+\.[A-Z]{2,8}\b/gi;
	
	pathRegex = /(?:^|\s)(\~?\.?\/(?:\\\s|[^\0 ])+)/gi;
	
	webRegex = /\b(?:([a-z][\w\-]+:(?:\/{1,3}|[a-z0-9%.])|www\d{0,3}[.])(?:[^\s()<>]+|\([^\s()<>]+\))+(?:\([^\s()<>]+\)|[^`!()\[\]{};:'".,<>?«»“”‘’\s]))/gi;
	
	highlightLinks = function(item) {
	  var bodyString, linkIndex, linkTarget, linkText, match, results;
	  bodyString = item.bodyString;
	  if (bodyString.indexOf('@') !== -1) {
	    while (match = emailRegex.exec(bodyString)) {
	      linkIndex = match.index;
	      linkText = bodyString.substring(linkIndex, linkIndex + match[0].length);
	      if (bodyString[linkIndex - 1] !== ':') {
	        item.addBodyHighlightAttributesInRange({
	          link: 'mailto:' + linkText
	        }, linkIndex, linkText.length);
	      }
	    }
	  }
	  if (bodyString.indexOf('/') !== -1) {
	    while (match = pathRegex.exec(bodyString)) {
	      linkIndex = match.index;
	      linkText = match[1];
	      linkIndex += match[0].length - match[1].length;
	      item.addBodyHighlightAttributesInRange({
	        link: 'path:' + linkText.replace(/\\ /g, ' ')
	      }, linkIndex, linkText.length);
	    }
	  }
	  results = [];
	  while (match = webRegex.exec(bodyString)) {
	    linkIndex = match.index;
	    linkText = bodyString.substring(linkIndex, linkIndex + match[0].length);
	    linkTarget = linkText;
	    if (linkText.indexOf('www') === 0) {
	      linkTarget = 'http://' + linkText;
	    }
	    results.push(item.addBodyHighlightAttributesInRange({
	      link: linkTarget
	    }, linkIndex, linkText.length));
	  }
	  return results;
	};
	
	module.exports = {
	  highlightLinks: highlightLinks
	};


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	var parseType, projectRegex, syncTypeAttributeToItemBody, tagsHelper, taskRegex;
	
	tagsHelper = __webpack_require__(221);
	
	taskRegex = /^\-\s/;
	
	projectRegex = /:$/;
	
	parseType = function(contentString) {
	  if (contentString.match(taskRegex)) {
	    return 'task';
	  } else if (contentString.match(projectRegex)) {
	    return 'project';
	  } else {
	    return 'note';
	  }
	};
	
	syncTypeAttributeToItemBody = function(item, newType, oldType) {
	  var ref, ref1, ref2, ref3, trailingTagsLength;
	  switch (oldType) {
	    case 'project':
	      trailingTagsLength = (ref = (ref1 = tagsHelper.parseTags(item.bodyString).trailingMatch) != null ? ref1[0].length : void 0) != null ? ref : 0;
	      item.replaceBodyRange(item.bodyString.length - (1 + trailingTagsLength), 1, '');
	      break;
	    case 'task':
	      item.replaceBodyRange(0, 2, '');
	  }
	  switch (newType) {
	    case 'project':
	      trailingTagsLength = (ref2 = (ref3 = tagsHelper.parseTags(item.bodyString).trailingMatch) != null ? ref3[0].length : void 0) != null ? ref2 : 0;
	      return item.replaceBodyRange(item.bodyString.length - trailingTagsLength, 0, ':');
	    case 'task':
	      return item.replaceBodyRange(0, 0, '- ');
	  }
	};
	
	module.exports = {
	  taskRegex: taskRegex,
	  projectRegex: projectRegex,
	  parseType: parseType,
	  syncTypeAttributeToItemBody: syncTypeAttributeToItemBody
	};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var Item, _parseLinesAndNormalizeIndentation, beginSerialization, beginSerializeItem, deserializeItem, deserializeItemBody, deserializeItems, emptyEncodeLastItem, endSerialization, endSerializeItem, repeat, serializeItemBody;
	
	repeat = __webpack_require__(10).repeat;
	
	Item = __webpack_require__(23);
	
	
	/*
	Serialization
	 */
	
	beginSerialization = function(items, options, context) {
	  return context.lines = [];
	};
	
	beginSerializeItem = function(item, options, context) {};
	
	serializeItemBody = function(item, bodyAttributedString, options, context) {
	  return context.lines.push(repeat('\t', item.depth - options.baseDepth) + bodyAttributedString.string);
	};
	
	endSerializeItem = function(item, options, context) {};
	
	emptyEncodeLastItem = function(options, context) {
	  return context.lines.push('');
	};
	
	endSerialization = function(options, context) {
	  return context.lines.join('\n');
	};
	
	
	/*
	Deserialization
	 */
	
	deserializeItemBody = function(item) {};
	
	deserializeItem = function(text, outline) {
	  var body, indent, item;
	  item = outline.createItem();
	  indent = text.match(/^\t*/)[0].length + 1;
	  body = text.substring(indent - 1);
	  item.indent = indent;
	  item.bodyString = body;
	  return item;
	};
	
	_parseLinesAndNormalizeIndentation = function(text) {
	  var char, count, each, i, j, leadingSpacesRegex, len, length, lines, spacesPerTab;
	  lines = text.split('\n');
	  if (lines.length > 1) {
	    spacesPerTab = Number.MAX_VALUE;
	    for (j = 0, len = lines.length; j < len; j++) {
	      each = lines[j];
	      length = each.length;
	      count = 0;
	      i = 0;
	      while (i < length) {
	        char = each[i];
	        if (char === ' ') {
	          count++;
	        } else if (char === '\t') {
	          if (count > 0) {
	            spacesPerTab = Math.min(spacesPerTab, count);
	          }
	          count = 0;
	        } else {
	          break;
	        }
	        i++;
	      }
	      if (count > 0) {
	        spacesPerTab = Math.min(spacesPerTab, count);
	      }
	    }
	    if (spacesPerTab !== Number.MAX_VALUE) {
	      text = lines.join('\n');
	      leadingSpacesRegex = new RegExp('^( {' + spacesPerTab + '})+', 'gm');
	      text = text.replace(leadingSpacesRegex, function(matchText) {
	        return Array(1 + (matchText.length / spacesPerTab)).join('\t');
	      });
	      text = text.replace(/^\s+/gm, function(matchText) {
	        var index;
	        index = matchText.indexOf(' ');
	        if (index !== -1) {
	          return matchText.substr(0, index);
	        } else {
	          return matchText;
	        }
	      });
	      lines = text.split('\n');
	    }
	  }
	  return lines;
	};
	
	deserializeItems = function(text, outline, options, deserializeItemCallback) {
	  var eachEmpty, eachItem, eachItemIndent, eachLine, emptyLines, flatItems, j, k, l, len, len1, len2, lines, roots;
	  if (options == null) {
	    options = {};
	  }
	  if (deserializeItemCallback == null) {
	    deserializeItemCallback = deserializeItem;
	  }
	  lines = _parseLinesAndNormalizeIndentation(text);
	  flatItems = [];
	  emptyLines = [];
	  for (j = 0, len = lines.length; j < len; j++) {
	    eachLine = lines[j];
	    eachItem = deserializeItemCallback(eachLine, outline);
	    flatItems.push(eachItem);
	    if (/^\s*$/.test(eachLine)) {
	      emptyLines.push(eachItem);
	    } else {
	      if (emptyLines.length) {
	        eachItemIndent = eachItem.indent;
	        for (k = 0, len1 = emptyLines.length; k < len1; k++) {
	          eachEmpty = emptyLines[k];
	          if (eachEmpty.indent < eachItemIndent) {
	            eachEmpty.indent = eachItemIndent;
	          }
	        }
	        emptyLines = [];
	      }
	    }
	  }
	  if (emptyLines.length) {
	    for (l = 0, len2 = emptyLines.length; l < len2; l++) {
	      eachEmpty = emptyLines[l];
	      eachEmpty.indent = 1;
	    }
	  }
	  roots = Item.buildItemHiearchy(flatItems);
	  return roots;
	};
	
	module.exports = {
	  beginSerialization: beginSerialization,
	  beginSerializeItem: beginSerializeItem,
	  serializeItemBody: serializeItemBody,
	  endSerializeItem: endSerializeItem,
	  endSerialization: endSerialization,
	  emptyEncodeLastItem: emptyEncodeLastItem,
	  deserializeItems: deserializeItems
	};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var deserializeItem, deserializeItems, repeat, serializeItemBody, text;
	
	repeat = __webpack_require__(10).repeat;
	
	text = __webpack_require__(225);
	
	serializeItemBody = function(item, bodyAttributedString, options, context) {
	  var bodyString;
	  bodyString = bodyAttributedString.string;
	  return context.lines.push(repeat('\t', item.depth - options.baseDepth) + bodyString);
	};
	
	deserializeItem = function(itemString, outline) {
	  var body, indent, item;
	  item = outline.createItem();
	  indent = itemString.match(/^\t*/)[0].length + 1;
	  body = itemString.substring(indent - 1);
	  item.indent = indent;
	  item.bodyString = body;
	  return item;
	};
	
	deserializeItems = function(itemsString, outline, options) {
	  if (options == null) {
	    options = {};
	  }
	  return text.deserializeItems(itemsString, outline, options, deserializeItem);
	};
	
	module.exports = {
	  beginSerialization: text.beginSerialization,
	  beginSerializeItem: text.beginSerializeItem,
	  serializeItemBody: text.serializeItemBody,
	  endSerializeItem: text.endSerializeItem,
	  endSerialization: text.endSerialization,
	  emptyEncodeLastItem: text.emptyEncodeLastItem,
	  deserializeItems: text.deserializeItems,
	  itemPathTypes: {}
	};


/***/ }),
/* 227 */
/***/ (function(module, exports) {

	var deserializeItems;
	
	deserializeItems = function(pathList, outline, options) {
	  var each, filenames, i, item, items, len;
	  filenames = pathList.split('\n');
	  if (options.type === 'public.file-url') {
	    filenames = filenames.map(function(each) {
	      return each.replace('file://', '');
	    });
	  }
	  items = [];
	  for (i = 0, len = filenames.length; i < len; i++) {
	    each = filenames[i];
	    item = outline.createItem();
	    item.bodyString = decodeURI(each).trim().replace(/[ ]/g, '\\ ');
	    items.push(item);
	  }
	  return items;
	};
	
	module.exports = {
	  deserializeItems: deserializeItems
	};


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, ElementType, _, bmlTags, buildFragmentFromNodeRanges, calculateInitialNodeRanges, compareNodeRanges, dom, seekTagRangeEnd;
	
	AttributedString = __webpack_require__(8);
	
	bmlTags = __webpack_require__(20);
	
	ElementType = __webpack_require__(174);
	
	_ = __webpack_require__(15);
	
	dom = __webpack_require__(175);
	
	AttributedString.prototype.toInlineBMLString = function() {
	  var p;
	  p = dom.createElement('p');
	  this.toInlineBMLInContainer(p);
	  return dom.getInnerHTML(p, {
	    decodeEntities: true,
	    lowerCaseTags: true,
	    xmlMode: true
	  });
	};
	
	AttributedString.prototype.toInlineBMLInContainer = function(container) {
	  var nodeRangeStack, nodeRanges;
	  nodeRanges = calculateInitialNodeRanges(this);
	  nodeRangeStack = [
	    {
	      start: 0,
	      end: this.getLength(),
	      node: container
	    }
	  ];
	  return buildFragmentFromNodeRanges(nodeRanges, nodeRangeStack);
	};
	
	calculateInitialNodeRanges = function(attributedString) {
	  var attrName, attrValue, attributeName, attributeValue, element, k, len, nodeRange, nodeRanges, ref, ref1, run, runBuffer, runLocation, string, tagsToRanges, text;
	  nodeRanges = [];
	  if (attributedString.runBuffer) {
	    tagsToRanges = {};
	    runLocation = 0;
	    runBuffer = 0;
	    ref = attributedString.getRuns();
	    for (k = 0, len = ref.length; k < len; k++) {
	      run = ref[k];
	      ref1 = run.attributes;
	      for (attributeName in ref1) {
	        attributeValue = ref1[attributeName];
	        nodeRange = tagsToRanges[attributeName];
	        if (!nodeRange || nodeRange.end <= runLocation) {
	          if (bmlTags[attributeName]) {
	            element = dom.createElement(attributeName);
	            if (typeof attributeValue === 'string') {
	              element.attribs['value'] = attributeValue;
	            } else if (_.isObject(attributeValue)) {
	              for (attrName in attributeValue) {
	                attrValue = attributeValue[attrName];
	                element.attribs[attrName] = attrValue.toString();
	              }
	            }
	          } else {
	            element = dom.createElement('span');
	            element.attribs[attributeName] = attributeValue.toString();
	          }
	          nodeRange = {
	            node: element,
	            start: runLocation,
	            end: seekTagRangeEnd(attributeName, attributeValue, runBuffer, runLocation, attributedString)
	          };
	          tagsToRanges[attributeName] = nodeRange;
	          nodeRanges.push(nodeRange);
	        }
	      }
	      text = run.getString();
	      if (text !== AttributedString.ObjectReplacementCharacter && text !== AttributedString.LineSeparatorCharacter) {
	        nodeRanges.push({
	          start: runLocation,
	          end: runLocation + run.getLength(),
	          node: dom.createTextNode(text)
	        });
	      }
	      runLocation += run.getLength();
	      runBuffer++;
	    }
	    nodeRanges.sort(compareNodeRanges);
	  } else {
	    string = attributedString.getString();
	    nodeRanges = [
	      {
	        start: 0,
	        end: string.length,
	        node: dom.createTextNode(string)
	      }
	    ];
	  }
	  return nodeRanges;
	};
	
	seekTagRangeEnd = function(tagName, seekTagAttributes, runBuffer, runLocation, attributedString) {
	  var attributeRuns, end, equalAttributes, run, runTagAttributes;
	  attributeRuns = attributedString.getRuns();
	  end = attributeRuns.length;
	  while (true) {
	    run = attributeRuns[runBuffer++];
	    runTagAttributes = run.attributes[tagName];
	    equalAttributes = runTagAttributes === seekTagAttributes || _.isEqual(runTagAttributes, seekTagAttributes);
	    if (!equalAttributes) {
	      return runLocation;
	    } else if (runBuffer === end) {
	      return runLocation + run.getLength();
	    }
	    runLocation += run.getLength();
	  }
	};
	
	compareNodeRanges = function(a, b) {
	  var aNodeType, aTagName, bNodeType, bTagName;
	  if (a.start < b.start) {
	    return -1;
	  } else if (a.start > b.start) {
	    return 1;
	  } else if (a.end !== b.end) {
	    return b.end - a.end;
	  } else {
	    aNodeType = a.node.type;
	    bNodeType = b.node.type;
	    if (aNodeType !== bNodeType) {
	      if (aNodeType === ElementType.Text) {
	        return 1;
	      } else if (bNodeType === ElementType.Text) {
	        return -1;
	      } else {
	        aTagName = a.node.name;
	        bTagName = b.node.name;
	        if (aTagName < bTagName) {
	          return -1;
	        } else if (aTagName > bTagName) {
	          return 1;
	        } else {
	          return 0;
	        }
	      }
	    } else {
	      return 0;
	    }
	  }
	};
	
	buildFragmentFromNodeRanges = function(nodeRanges, nodeRangeStack) {
	  var i, j, parentRange, range, splitEnd, splitStart;
	  i = 0;
	  while (i < nodeRanges.length) {
	    range = nodeRanges[i++];
	    parentRange = nodeRangeStack.pop();
	    while (nodeRangeStack.length && parentRange.end <= range.start) {
	      parentRange = nodeRangeStack.pop();
	    }
	    if (range.end > parentRange.end) {
	      splitStart = range;
	      splitEnd = {
	        end: splitStart.end,
	        start: parentRange.end,
	        node: dom.cloneNode(splitStart.node)
	      };
	      splitStart.end = parentRange.end;
	      j = nodeRanges.indexOf(parentRange);
	      while (compareNodeRanges(nodeRanges[j], splitEnd) < 0) {
	        j++;
	      }
	      nodeRanges.splice(j, 0, splitEnd);
	    }
	    dom.appendChild(parentRange.node, range.node);
	    nodeRangeStack.push(parentRange);
	    nodeRangeStack.push(range);
	  }
	  return nodeRangeStack[0].node;
	};
	
	module.exports = AttributedString;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	var Emitter, UndoManager, assert;
	
	Emitter = __webpack_require__(4).Emitter;
	
	assert = __webpack_require__(10).assert;
	
	module.exports = UndoManager = (function() {
	  function UndoManager() {
	    this.groupingLevel = 0;
	    this.disabledLevel = 0;
	    this.isRedoing = false;
	    this.isUndoing = false;
	    this.undoStack = [];
	    this.redoStack = [];
	    this.currentGroup = null;
	    this.emitter = new Emitter();
	    this.removeAllActions();
	  }
	
	
	  /*
	  Section: Event Subscription
	   */
	
	  UndoManager.prototype.onWillUndo = function(callback) {
	    return this.emitter.on('will-undo', callback);
	  };
	
	  UndoManager.prototype.onDidUndo = function(callback) {
	    return this.emitter.on('did-undo', callback);
	  };
	
	  UndoManager.prototype.onWillRedo = function(callback) {
	    return this.emitter.on('will-redo', callback);
	  };
	
	  UndoManager.prototype.onDidRedo = function(callback) {
	    return this.emitter.on('did-redo', callback);
	  };
	
	  UndoManager.prototype.onDidOpenUndoGroup = function(callback) {
	    return this.emitter.on('did-open-undo-group', callback);
	  };
	
	  UndoManager.prototype.onDidCloseUndoGroup = function(callback) {
	    return this.emitter.on('did-close-undo-group', callback);
	  };
	
	
	  /*
	  Section: Undo Grouping
	   */
	
	  UndoManager.prototype.beginUndoGrouping = function(metadata) {
	    this.groupingLevel++;
	    if (this.groupingLevel === 1) {
	      this.currentGroup = [];
	      this.currentGroup.metadata = metadata || {};
	      return this.emitter.emit('did-open-undo-group', this.currentGroup);
	    }
	  };
	
	  UndoManager.prototype.endUndoGrouping = function() {
	    if (this.groupingLevel > 0) {
	      this.groupingLevel--;
	      if (this.groupingLevel === 0) {
	        if (this.currentGroup.length > 0) {
	          if (this.isUndoing) {
	            this.redoStack.push(this.currentGroup);
	          } else if (this.isRedoing) {
	            this.undoStack.push(this.currentGroup);
	          } else {
	            this.undoStack.push(this.currentGroup);
	            this.redoStack = [];
	          }
	        }
	        this.emitter.emit('did-close-undo-group', this.currentGroup);
	        return this.currentGroup = null;
	      }
	    }
	  };
	
	
	  /*
	  Section: Undo Registration
	   */
	
	  UndoManager.prototype.isUndoRegistrationEnabled = function() {
	    return this.disabledLevel === 0;
	  };
	
	  UndoManager.prototype.disableUndoRegistration = function() {
	    return this.disabledLevel++;
	  };
	
	  UndoManager.prototype.enableUndoRegistration = function() {
	    return this.disabledLevel--;
	  };
	
	  UndoManager.prototype.registerUndoOperation = function(operation) {
	    if (!this.isUndoRegistrationEnabled()) {
	      return;
	    }
	    this.beginUndoGrouping();
	    this.currentGroup.unshift(operation);
	    return this.endUndoGrouping();
	  };
	
	  UndoManager.prototype.setActionName = function(actionName) {
	    return this.setUndoGroupMetadata('actionName', actionName.toLocaleString());
	  };
	
	  UndoManager.prototype.setUndoGroupMetadata = function(key, value) {
	    var lastOrCurrentGoup, undoStack;
	    undoStack = this.undoStack;
	    lastOrCurrentGoup = this.currentGroup || undoStack[undoStack.length - 1];
	    return lastOrCurrentGoup != null ? lastOrCurrentGoup.metadata[key] = value : void 0;
	  };
	
	
	  /*
	  Section: Undo / Redo
	   */
	
	  UndoManager.prototype.canUndo = function() {
	    return !this.isUndoing && !this.isRedoing && this.undoStack.length > 0;
	  };
	
	  UndoManager.prototype.canRedo = function() {
	    return !this.isUndoing && !this.isRedoing && this.redoStack.length > 0;
	  };
	
	  UndoManager.prototype.undo = function(context) {
	    assert(this.groupingLevel === 0, 'Unclosed grouping');
	    assert(this.disabledLevel === 0, 'Unclosed disable');
	    if (!this.canUndo()) {
	      return;
	    }
	    this.endUndoGrouping();
	    this.emitter.emit('will-undo');
	    this.isUndoing = true;
	    this.beginUndoGrouping(this.getUndoGroupMetadata());
	    this.undoStack.pop().forEach(function(each) {
	      if (each.performUndoOperation) {
	        return each.performUndoOperation(context);
	      } else {
	        return each(context);
	      }
	    });
	    this.endUndoGrouping();
	    this.isUndoing = false;
	    return this.emitter.emit('did-undo', this.getRedoGroupMetadata());
	  };
	
	  UndoManager.prototype.redo = function(context) {
	    assert(this.groupingLevel === 0, 'Unclosed grouping');
	    assert(this.disabledLevel === 0, 'Unclosed disable');
	    if (!this.canRedo()) {
	      return;
	    }
	    this.emitter.emit('will-redo');
	    this.isRedoing = true;
	    this.beginUndoGrouping(this.getRedoGroupMetadata());
	    this.redoStack.pop().forEach(function(each) {
	      if (each.performUndoOperation) {
	        return each.performUndoOperation(context);
	      } else {
	        return each(context);
	      }
	    });
	    this.endUndoGrouping();
	    this.isRedoing = false;
	    return this.emitter.emit('did-redo', this.getUndoGroupMetadata());
	  };
	
	  UndoManager.prototype.getUndoGroupMetadata = function() {
	    var ref;
	    return (ref = this.undoStack[this.undoStack.length - 1]) != null ? ref.metadata : void 0;
	  };
	
	  UndoManager.prototype.getRedoGroupMetadata = function() {
	    var ref;
	    return (ref = this.redoStack[this.redoStack.length - 1]) != null ? ref.metadata : void 0;
	  };
	
	  UndoManager.prototype.removeAllActions = function() {
	    assert(this.groupingLevel === 0, 'Unclosed grouping');
	    assert(this.disabledLevel === 0, 'Unclosed disable');
	    this.undoStack = [];
	    return this.redoStack = [];
	  };
	
	  return UndoManager;
	
	})();


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(231);

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
	 * Short Id
	 * by Dylan Greene
	 */
	
	var alphabet = __webpack_require__(232),
	    encode = __webpack_require__(234);
	
	// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
	// This number should be updated every year or so to keep the generated id short.
	// To regenerate `new Date() - 0` and bump the version. Always bump the version!
	var REDUCE_TIME = 1415358116771;
	
	// don't change unless we change the algos or REDUCE_TIME
	// must be an integer and less than 16
	var version = 4;
	
	// if you are using cluster or multiple servers use this to make each instance
	// has a unique value for worker
	var clusterWorkerId = parseInt(process.env.NODE_UNIQUE_ID || 0, 10);
	
	// Counter is used when shortId is called multiple times in one second.
	var counter;
	
	// Remember the last time shortId was called in case counter is needed.
	var previousSeconds;
	
	/**
	 * Generate unique id
	 * Returns string id
	 */
	function generate() {
	
	    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);
	
	    if (seconds === previousSeconds) {
	        counter++;
	    } else {
	        counter = 0;
	        previousSeconds = seconds;
	    }
	
	    var str = encode(alphabet.lookup, version),
	        code = str.charCodeAt(0);
	    while (!((code >= 65) && (code <= 90)) && !((code >= 97) && (code <= 122))) {
	        str = encode(alphabet.lookup, version);
	        code = str.charCodeAt(0);
	    }
	
	    str = str + encode(alphabet.lookup, clusterWorkerId);
	    if (counter > 0) {
	        str = str + encode(alphabet.lookup, counter);
	    }
	    str = str + encode(alphabet.lookup, seconds);
	
	    return str;
	}
	
	
	/**
	 * Set the seed.
	 * Highly recommended if you don't want people to try to figure out your id schema.
	 * exposed as ShortId.seed(int)
	 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
	 */
	function seed(seedValue) {
	    alphabet.seed(seedValue);
	    return module.exports;
	}
	
	/**
	 * Set the cluster worker or machine id
	 * exposed as ShortId.worker(int)
	 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
	 * returns ShortId module so it can be chained.
	 */
	function worker(workerId) {
	    clusterWorkerId = workerId;
	    return module.exports;
	}
	
	/**
	 *
	 * returns the shuffled alphabet
	 */
	function characters(newCharacters) {
	    if (newCharacters !== undefined) {
	        alphabet.characters(newCharacters);
	    }
	    return alphabet.shuffled();
	}
	
	/**
	 * Decode the id to get the version and worker
	 * Mainly for debugging and testing.
	 * @param id - the ShortId-generated id.
	 */
	function decode(id) {
	    var alphabet = characters();
	    return {
	        version: alphabet.indexOf(id.substr(0, 1)) & 0x0f,
	        worker: alphabet.indexOf(id.substr(1, 1)) & 0x0f
	    };
	}
	
	module.exports = generate;
	module.exports.generate = generate;
	module.exports.seed     = seed;
	module.exports.worker   = worker;
	module.exports.characters = characters;
	module.exports.decode   = decode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	var random = __webpack_require__(233);
	
	var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
	var alphabet;
	var previousSeed;
	
	var shuffled;
	
	function reset() {
	    shuffled = false;
	}
	
	function setCharacters(_alphabet_) {
	
	    if (!_alphabet_) {
	        if (alphabet !== ORIGINAL) {
	            alphabet = ORIGINAL;
	            reset();
	        }
	        return;
	    }
	
	    if (_alphabet_ === alphabet) {
	        return;
	    }
	
	
	    if (_alphabet_.length !== ORIGINAL.length) {
	        throw new Error('Custom alphabet for shortId must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
	    }
	
	    var unique = _alphabet_.split('').filter(function(item, ind, arr){
	       return ind !== arr.lastIndexOf(item);
	    });
	
	    if (unique.length) {
	        throw new Error('Custom alphabet for shortId must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
	    }
	
	    alphabet = _alphabet_;
	    reset();
	}
	
	function setSeed(seed) {
	    random.seed(seed);
	    if (previousSeed !== seed) {
	        reset();
	        previousSeed = seed;
	    }
	}
	
	function shuffle() {
	    if (!alphabet) {
	        setCharacters(ORIGINAL);
	    }
	
	    var sourceArray = alphabet.split('');
	    var targetArray = [];
	    var r = random();
	    var characterIndex;
	    while (sourceArray.length > 0) {
	        r = random();
	        characterIndex = Math.floor(r * sourceArray.length);
	        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
	    }
	    return targetArray.join('');
	}
	
	function getShuffled() {
	    if (shuffled) {
	        return shuffled;
	    }
	    shuffled = shuffle();
	    return shuffled;
	}
	
	/**
	 * lookup shuffled letter
	 * @param index
	 * @returns {string}
	 */
	function lookup(index) {
	    var alphabetShuffled = getShuffled();
	    return alphabetShuffled[index];
	}
	
	module.exports = {
	    characters: setCharacters,
	    seed:       setSeed,
	    lookup:     lookup,
	    shuffled:   getShuffled
	};


/***/ }),
/* 233 */
/***/ (function(module, exports) {

	
	// Found this seed-based random generator somewhere
	// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)
	
	/**
	 * return a random number based on a seed
	 * @param seed
	 * @returns {number}
	 */
	
	var seed = 1;
	
	module.exports = function random() {
	    seed = (seed * 9301 + 49297) % 233280;
	    return seed/(233280.0);
	};
	
	module.exports.seed = function (_seed_) {
	    seed = _seed_;
	};

/***/ }),
/* 234 */
/***/ (function(module, exports) {

	function encode(lookup, number) {
	    var loopCounter = 0;
	    var done;
	
	    var str = '';
	
	    while (!done) {
	        str = str + lookup( ( (number >> (4 * loopCounter)) & 0x0f ) | (Math.floor((Math.random() * 256)) & 0x30)  );
	        done = number < (Math.pow(16, loopCounter + 1 )  );
	        loopCounter++;
	    }
	    return str;
	}
	
	module.exports = encode;

/***/ }),
/* 235 */
/***/ (function(module, exports) {

	var Extensions;
	
	module.exports = Extensions = (function() {
	  Extensions.PRIORITY_NORMAL = 0;
	
	  Extensions.PRIORITY_FIRST = -1;
	
	  Extensions.PRIORITY_LAST = 1;
	
	  function Extensions() {
	    this.extensionPointsToExtensions = new Map;
	  }
	
	  Extensions.prototype.add = function(extensionPoint, extension, priority) {
	    var extensions;
	    if (priority == null) {
	      priority = Extensions.PRIORITY_NORMAL;
	    }
	    extensions = this.extensionPointsToExtensions.get(extensionPoint);
	    if (!extensions) {
	      extensions = [];
	      this.extensionPointsToExtensions.set(extensionPoint, extensions);
	    }
	    extensions.needsSort = true;
	    return extensions.push({
	      extension: extension,
	      priority: priority
	    });
	  };
	
	  Extensions.prototype.remove = function(extensionPoint, extension) {
	    var ref, result;
	    return result = (ref = this.extensionPointsToExtensions.get(extensionPoint)) != null ? ref.filter : void 0;
	  };
	
	  Extensions.prototype.processExtensions = function(extensionPoint, callback, returnFirst) {
	    var each, extensions, i, len, result;
	    extensions = this.extensionPointsToExtensions.get(extensionPoint);
	    if (extensions) {
	      if (extensions.needsSort) {
	        extensions.sort(function(a, b) {
	          return a.priority - b.priority;
	        });
	      }
	      for (i = 0, len = extensions.length; i < len; i++) {
	        each = extensions[i];
	        result = callback(each);
	        if (result !== void 0 && returnFirst) {
	          return result;
	        }
	      }
	    }
	  };
	
	  return Extensions;
	
	})();


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	var CompositeDisposable, Emitter, ItemPathQuery, _, ref, util;
	
	ref = __webpack_require__(4), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;
	
	util = __webpack_require__(10);
	
	_ = __webpack_require__(15);
	
	module.exports = ItemPathQuery = (function() {
	  ItemPathQuery.prototype.outline = null;
	
	  ItemPathQuery.prototype.outlineSubscription = null;
	
	  ItemPathQuery.prototype.outlineDestroyedSubscription = null;
	
	  ItemPathQuery.prototype.debouncedRun = null;
	
	  function ItemPathQuery(outline1, itemPath1) {
	    this.outline = outline1;
	    this.itemPath = itemPath1;
	    this.emitter = new Emitter();
	    this.debouncedRun = this.run.bind(this);
	    this.outlineDestroyedSubscription = this.outline.onDidDestroy((function(_this) {
	      return function() {
	        return _this.destroy();
	      };
	    })(this));
	    this.queryFunction = function(outline, contextItem, itemPath, options) {
	      return outline.evaluateItemPath(itemPath, contextItem, options);
	    };
	  }
	
	  ItemPathQuery.prototype.destroy = function() {
	    if (!this.destroyed) {
	      this.stop();
	      this.outlineDestroyedSubscription.dispose();
	      this.emitter.emit('did-destroy');
	      this.outline = null;
	      return this.destroyed = true;
	    }
	  };
	
	
	  /*
	  Section: Events
	   */
	
	  ItemPathQuery.prototype.onDidChange = function(callback) {
	    return this.emitter.on('did-change', callback);
	  };
	
	  ItemPathQuery.prototype.onDidDestroy = function(callback) {
	    return this.emitter.on('did-destroy', callback);
	  };
	
	
	  /*
	  Section: Configuring Queries
	   */
	
	  ItemPathQuery.prototype.contextItem = null;
	
	  Object.defineProperty(ItemPathQuery.prototype, 'contextItem', {
	    get: function() {
	      return this._contextItem;
	    },
	    set: function(_contextItem) {
	      this._contextItem = _contextItem;
	      return this.scheduleRun();
	    }
	  });
	
	  ItemPathQuery.prototype.itemPath = null;
	
	  Object.defineProperty(ItemPathQuery.prototype, 'itemPath', {
	    get: function() {
	      return this._itemPath;
	    },
	    set: function(_itemPath) {
	      this._itemPath = _itemPath;
	      return this.scheduleRun();
	    }
	  });
	
	  ItemPathQuery.prototype.options = null;
	
	  Object.defineProperty(ItemPathQuery.prototype, 'options', {
	    get: function() {
	      return this._options;
	    },
	    set: function(_options) {
	      var ref1;
	      this._options = _options;
	      if ((ref1 = this._options) != null ? ref1.debounce : void 0) {
	        this.debouncedRun = _.debounce(this.run.bind(this), this._options.debounce);
	      } else {
	        this.debouncedRun = this.run.bind(this);
	      }
	      return this.scheduleRun();
	    }
	  });
	
	  ItemPathQuery.prototype.queryFunction = null;
	
	  Object.defineProperty(ItemPathQuery.prototype, 'queryFunction', {
	    get: function() {
	      return this._queryFunction;
	    },
	    set: function(_queryFunction) {
	      this._queryFunction = _queryFunction;
	      return this.scheduleRun();
	    }
	  });
	
	
	  /*
	  Section: Running Queries
	   */
	
	  ItemPathQuery.prototype.started = false;
	
	  ItemPathQuery.prototype.start = function() {
	    if (this.started) {
	      return;
	    }
	    this.started = true;
	    this.outlineSubscription = this.outline.onDidEndChanges((function(_this) {
	      return function(changes) {
	        if (changes.length > 0) {
	          return _this.scheduleRun();
	        }
	      };
	    })(this));
	    return this.run();
	  };
	
	  ItemPathQuery.prototype.stop = function() {
	    if (!this.started) {
	      return;
	    }
	    this.started = false;
	    return this.outlineSubscription.dispose();
	  };
	
	  ItemPathQuery.prototype.scheduleRun = function() {
	    if (this.started) {
	      return this.debouncedRun();
	    }
	  };
	
	  ItemPathQuery.prototype.run = function() {
	    var nextResults;
	    if (this.started) {
	      nextResults = this.queryFunction(this.outline, this.contextItem, this.itemPath, this.options);
	      if (!util.shallowArrayEqual(this.results, nextResults)) {
	        this.results = nextResults;
	        return this.emitter.emit('did-change', this.results);
	      }
	    }
	  };
	
	
	  /*
	  Section: Getting Query Results
	   */
	
	  ItemPathQuery.prototype.results = [];
	
	  return ItemPathQuery;
	
	})();


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	var ItemSerializer, Outline, ref;
	
	ref = __webpack_require__(1), Outline = ref.Outline, ItemSerializer = ref.ItemSerializer;
	
	module.exports = {
	  searches: new Outline(ItemSerializer.TaskPaperType),
	  tags: new Outline(ItemSerializer.TaskPaperType)
	};


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var Birch, CompositeDisposable, Emitter, ItemPath, ItemPathQuery, Mutation, OutlineSidebar, OutlineSidebarItem, configurationOutlines, fuzzaldrinPlus, ref, ref1, util;
	
	ref = __webpack_require__(1), Mutation = ref.Mutation, ItemPath = ref.ItemPath, ItemPathQuery = ref.ItemPathQuery, util = ref.util;
	
	configurationOutlines = __webpack_require__(237);
	
	OutlineSidebarItem = __webpack_require__(239);
	
	ref1 = __webpack_require__(242), Emitter = ref1.Emitter, CompositeDisposable = ref1.CompositeDisposable;
	
	fuzzaldrinPlus = __webpack_require__(246);
	
	Birch = __webpack_require__(252);
	
	module.exports = OutlineSidebar = (function() {
	  function OutlineSidebar(outlineEditor) {
	    this.outlineEditor = outlineEditor;
	    this.emitter = new Emitter();
	    this.idsToSidebarItemsMap = new Map();
	    this.query = new ItemPathQuery(this.outlineEditor.outline);
	    this.query.options = {
	      debounce: 300
	    };
	    this.query.queryFunction = (function(_this) {
	      return function(outline, contextItem) {
	        var eachEntry, eachItemPathFilter, eachProject, eachSearchItem, eachTagLabel, eachTagRepresentedObject, eachTagSidebarItem, eachTagValue, embeddedSearches, gatherProjectDescendants, i, j, k, l, len, len1, len2, len3, parentProject, projectAncestorStack, projects, ref2, root, searches, searchesOutline, sharedSearches, tagValues;
	        root = _this.vendSidebarItem('root');
	        _this.homeItem = _this.vendSidebarItem(outline.root.id, 'home', 'Home', outline.root.id);
	        root.appendChild(_this.homeItem);
	        _this.projectsGroup = _this.vendSidebarItem('projects', 'group', 'Projects');
	        root.appendChild(_this.projectsGroup);
	        gatherProjectDescendants = function(item, projects) {
	          var child;
	          if (projects == null) {
	            projects = [];
	          }
	          child = item.firstChild;
	          while (child) {
	            if (child.getAttribute('data-type') === 'project') {
	              projects.push(child);
	              gatherProjectDescendants(child, projects);
	            }
	            child = child.nextSibling;
	          }
	          return projects;
	        };
	        projects = gatherProjectDescendants(outline.root).map(function(each) {
	          var projectSidebarItem;
	          projectSidebarItem = _this.vendSidebarItem(each.id, 'project', each.bodyContentString, each.id);
	          projectSidebarItem.depth = each.depth;
	          return projectSidebarItem;
	        });
	        if (projects.length > 0) {
	          _this.projectsGroup.depth = -1;
	          projectAncestorStack = [_this.projectsGroup];
	          for (i = 0, len = projects.length; i < len; i++) {
	            eachProject = projects[i];
	            while ((parentProject = projectAncestorStack[projectAncestorStack.length - 1]) && (eachProject.depth <= parentProject.depth)) {
	              projectAncestorStack.pop();
	            }
	            parentProject.appendChild(eachProject);
	            projectAncestorStack.push(eachProject);
	          }
	        }
	        _this.searchesGroup = _this.vendSidebarItem('searches', 'group', 'Searches');
	        root.appendChild(_this.searchesGroup);
	        embeddedSearches = outline.evaluateItemPath('//@search');
	        searchesOutline = configurationOutlines.searches;
	        sharedSearches = searchesOutline.evaluateItemPath('//@search');
	        searches = embeddedSearches.concat(sharedSearches);
	        if (searches.length > 0) {
	          for (j = 0, len1 = searches.length; j < len1; j++) {
	            eachSearchItem = searches[j];
	            eachItemPathFilter = eachSearchItem.getAttribute('data-search');
	            if (eachItemPathFilter) {
	              _this.searchesGroup.appendChild(_this.vendSidebarItem("search-" + eachSearchItem.id, 'search', eachSearchItem.bodyContentString, eachItemPathFilter));
	            }
	          }
	        }
	        _this.tagsGroup = _this.vendSidebarItem('tags', 'group', 'Tags');
	        root.appendChild(_this.tagsGroup);
	        ref2 = _this.getTagAttributeNamesToValues();
	        for (k = 0, len2 = ref2.length; k < len2; k++) {
	          eachEntry = ref2[k];
	          eachTagLabel = "@" + (eachEntry[0].substring(5));
	          eachTagSidebarItem = _this.vendSidebarItem("tag-" + eachEntry[0], 'tag', eachTagLabel, eachTagLabel);
	          _this.tagsGroup.appendChild(eachTagSidebarItem);
	          tagValues = Array.from(eachEntry[1]);
	          tagValues.sort(function(a, b) {
	            return a.localeCompare(b);
	          });
	          for (l = 0, len3 = tagValues.length; l < len3; l++) {
	            eachTagValue = tagValues[l];
	            if (eachTagValue) {
	              eachTagRepresentedObject = eachTagLabel + " contains[l] \"" + eachTagValue + "\"";
	              eachTagSidebarItem.appendChild(_this.vendSidebarItem("tag-" + eachEntry[0] + "+" + eachTagValue, 'tag-value', eachTagValue, eachTagRepresentedObject));
	            }
	          }
	        }
	        return [root, root.branchHash];
	      };
	    })(this);
	    this.query.start();
	    this._selectedItem = this.homeItem;
	    this.subscriptions = new CompositeDisposable;
	    this.subscriptions.add(this.outlineEditor.onDidChangeHoistedItem((function(_this) {
	      return function() {
	        return _this.updateSelectionIfNeeded();
	      };
	    })(this)));
	    this.subscriptions.add(this.outlineEditor.onDidChangeFocusedItem((function(_this) {
	      return function() {
	        return _this.updateSelectionIfNeeded();
	      };
	    })(this)));
	    this.subscriptions.add(this.outlineEditor.onDidChangeItemPathFilter((function(_this) {
	      return function() {
	        return _this.updateSelectionIfNeeded();
	      };
	    })(this)));
	    this.subscriptions.add(this.outlineEditor.onDidDestroy((function(_this) {
	      return function() {
	        return _this.destroy();
	      };
	    })(this)));
	    this.subscriptions.add(configurationOutlines.searches.onDidChange((function(_this) {
	      return function() {
	        return _this.query.run();
	      };
	    })(this)));
	    this.subscriptions.add(configurationOutlines.tags.onDidChange((function(_this) {
	      return function() {
	        return _this.query.run();
	      };
	    })(this)));
	    this.subscriptions.add(this.query.onDidDestroy((function(_this) {
	      return function() {
	        return _this.destroy();
	      };
	    })(this)));
	    this.subscriptions.add(this.query.onDidChange((function(_this) {
	      return function() {
	        _this._selectedItem = _this.validatedSelectedItem;
	        return _this.emitter.emit('did-change-items');
	      };
	    })(this)));
	  }
	
	  OutlineSidebar.prototype.destroy = function() {
	    if (!this.destroyed) {
	      this.subscriptions.dispose();
	      this.emitter.emit('did-destroy');
	      this.query.destroy();
	      return this.destroyed = true;
	    }
	  };
	
	
	  /*
	  Section: Events
	   */
	
	  OutlineSidebar.prototype.onDidChangeItems = function(callback) {
	    return this.emitter.on('did-change-items', callback);
	  };
	
	  OutlineSidebar.prototype.onDidChangeSelection = function(callback) {
	    return this.emitter.on('did-change-selection', callback);
	  };
	
	  OutlineSidebar.prototype.onDidDestroy = function(callback) {
	    return this.emitter.on('did-destroy', callback);
	  };
	
	
	  /*
	  Section: Selection
	   */
	
	  OutlineSidebar.prototype.shouldSelectItem = function(item) {
	    return item.isSelectable;
	  };
	
	  Object.defineProperty(OutlineSidebar.prototype, 'selectedItem', {
	    get: function() {
	      return this._selectedItem;
	    },
	    set: function(sidebarItem) {
	      if (typeof sidebarItem === 'string') {
	        sidebarItem = this.idsToSidebarItemsMap.get(sidebarItem);
	      }
	      if (this._selectedItem !== sidebarItem) {
	        this._selectedItem = sidebarItem;
	        this.emitter.emit('did-change-selection', this.selectedItem);
	      }
	      if (this._selectedItem.type === 'home' || this._selectedItem.type === 'project') {
	        return this.outlineEditor.focusedItem = this.outlineEditor.outline.getItemForID(this._selectedItem.representedObject);
	      } else {
	        switch (this._selectedItem.type) {
	          case 'search':
	          case 'tag':
	          case 'tag-value':
	            return this.outlineEditor.itemPathFilter = this._selectedItem.representedObject;
	        }
	      }
	    }
	  });
	
	  Object.defineProperty(OutlineSidebar.prototype, 'validatedSelectedItem', {
	    get: function() {
	      var focusedItem, hoistedItem, itemPathFilter, maintainHoistedItemWhenFilter, maintainItemPathWhenHoisting, ref2, searchItem, selectedItem;
	      hoistedItem = this.outlineEditor.hoistedItem;
	      focusedItem = this.outlineEditor.focusedItem;
	      itemPathFilter = this.outlineEditor.itemPathFilter;
	      maintainHoistedItemWhenFilter = Birch.preferences.get('BMaintainHoistedItemWhenFiltering');
	      maintainItemPathWhenHoisting = Birch.preferences.get('BMaintainItemPathFilterWhenHoisting');
	      if (selectedItem = this.attachedSidebarItemForID((ref2 = this.selectedItem) != null ? ref2.id : void 0)) {
	        if (selectedItem.representedObject === (focusedItem != null ? focusedItem.id : void 0)) {
	          return selectedItem;
	        }
	        if (selectedItem.representedObject === itemPathFilter) {
	          return selectedItem;
	        }
	      }
	      if (focusedItem) {
	        while (focusedItem && !this.attachedSidebarItemForID(focusedItem.id)) {
	          focusedItem = focusedItem.parent;
	        }
	        if (focusedItem) {
	          return this.idsToSidebarItemsMap.get(focusedItem.id);
	        }
	      }
	      if (itemPathFilter) {
	        if (searchItem = this.rootItem.find(null, null, null, itemPathFilter)) {
	          return this.idsToSidebarItemsMap.get(searchItem.id);
	        }
	      }
	      while (hoistedItem && !this.attachedSidebarItemForID(hoistedItem.id)) {
	        hoistedItem = hoistedItem.parent;
	      }
	      return this.idsToSidebarItemsMap.get(hoistedItem.id);
	    }
	  });
	
	  OutlineSidebar.prototype.singleAction = function() {};
	
	  OutlineSidebar.prototype.doubleAction = function() {
	    var item;
	    if (this.selectedItem) {
	      if (this.selectedItem.type === 'project') {
	        item = this.outlineEditor.outline.getItemForID(this.selectedItem.representedObject);
	        if (this.outlineEditor.focusedItem) {
	          return this.outlineEditor.hoistedItem = item;
	        } else {
	          return this.outlineEditor.focusedItem = item;
	        }
	      } else {
	        switch (this.selectedItem.type) {
	          case 'search':
	          case 'tag':
	          case 'tag-value':
	            return this.outlineEditor.itemPathFilter = this._selectedItem.representedObject;
	        }
	      }
	    }
	  };
	
	  OutlineSidebar.prototype.updateSelectionIfNeeded = function() {
	    var validatedSelectedItem;
	    validatedSelectedItem = this.validatedSelectedItem;
	    if (this.selectedItem !== validatedSelectedItem) {
	      this._selectedItem = validatedSelectedItem;
	      return this.emitter.emit('did-change-selection', this.selectedItem);
	    }
	  };
	
	
	  /*
	  Section: Items
	   */
	
	  Object.defineProperty(OutlineSidebar.prototype, 'rootItem', {
	    get: function() {
	      return this.query.results[0];
	    }
	  });
	
	  OutlineSidebar.prototype.persistentIDForItemID = function(id) {
	    var item;
	    if (id == null) {
	      return;
	    }
	    if (item = this.outlineEditor.outline.getItemForID(id)) {
	      return item.branchContentID;
	    } else {
	      return id;
	    }
	  };
	
	  OutlineSidebar.prototype.itemIDForPersistentID = function(id) {
	    var item;
	    if (item = this.outlineEditor.outline.getItemForBranchContentID(id)) {
	      return item.id;
	    } else {
	      return id;
	    }
	  };
	
	  OutlineSidebar.prototype.reloadImmediate = function() {
	    return this.query.run();
	  };
	
	  OutlineSidebar.prototype.matchItemFromIDs = function(itemIDs, searchString) {
	    var each, eachID, eachScore, i, len, matchItem, matchScore;
	    matchScore = 0;
	    matchItem = null;
	    for (i = 0, len = itemIDs.length; i < len; i++) {
	      eachID = itemIDs[i];
	      each = this.idsToSidebarItemsMap.get(eachID);
	      eachScore = fuzzaldrinPlus.score(each.title, searchString);
	      if (eachScore > matchScore) {
	        matchScore = eachScore;
	        matchItem = each;
	      }
	    }
	    return matchItem;
	  };
	
	  OutlineSidebar.prototype.attachedSidebarItemForID = function(id) {
	    var item;
	    if (!id) {
	      return null;
	    } else {
	      item = this.idsToSidebarItemsMap.get(id);
	      if ((item != null ? item.root : void 0) === this.rootItem) {
	        return item;
	      } else {
	        return null;
	      }
	    }
	  };
	
	  OutlineSidebar.prototype.vendSidebarItem = function(id, type, title, representedObject) {
	    var item;
	    if (item = this.idsToSidebarItemsMap.get(id)) {
	      util.assert(item.type === type, 'type for id should never change');
	      item.reInit(title, representedObject);
	    } else {
	      item = new OutlineSidebarItem(id, type, title, representedObject);
	      this.idsToSidebarItemsMap.set(id, item);
	    }
	    return item;
	  };
	
	
	  /*
	  Section: Search Items
	   */
	
	  OutlineSidebar.prototype.searchItemForID = function(id) {
	    var itemID, ref2;
	    itemID = id.substring(7);
	    return (ref2 = this.outlineEditor.outline.getItemForID(itemID)) != null ? ref2 : configurationOutlines.searches.getItemForID(itemID);
	  };
	
	  OutlineSidebar.prototype.updateSearchItem = function(id, label, search, embedded) {
	    var documentOutline, item, itemID, outline, ref2;
	    documentOutline = this.outlineEditor.outline;
	    itemID = id.substring(7);
	    item = (ref2 = documentOutline.getItemForID(itemID)) != null ? ref2 : configurationOutlines.searches.getItemForID(itemID);
	    item.outline.groupUndoAndChanges(function() {
	      item.bodyContentString = label;
	      item.setAttribute('data-search', search);
	      if (embedded && item.outline !== documentOutline) {
	        return item.removeFromParent();
	      } else if (!embedded && item.outline !== configurationOutlines.searches) {
	        return item.removeFromParent();
	      }
	    });
	    if (!item.parent) {
	      outline = embedded ? documentOutline : configurationOutlines.searches;
	      item = outline.importItem(item, true);
	      return this.insertSearchItem(outline, item);
	    }
	  };
	
	  OutlineSidebar.prototype.createSearchItem = function(label, search, embedded, referenceID) {
	    var item, outline, referenceItemID;
	    if (referenceID == null) {
	      referenceID = '';
	    }
	    outline = embedded ? this.outlineEditor.outline : configurationOutlines.searches;
	    item = outline.createItem(label);
	    item.setAttribute('data-search', search);
	    referenceItemID = referenceID.substring(7);
	    return this.insertSearchItem(outline, item, outline.getItemForID(referenceItemID));
	  };
	
	  OutlineSidebar.prototype.insertSearchItem = function(outline, item, referenceItem) {
	    var embeddedSearches, last, searchesProject;
	    if (referenceItem) {
	      return referenceItem.parent.insertChildrenBefore(item, referenceItem);
	    } else {
	      embeddedSearches = outline.evaluateItemPath('//@search');
	      if (last = embeddedSearches.pop()) {
	        return last.parent.insertChildrenBefore(item, last.nextSibling);
	      } else {
	        searchesProject = outline.createItem('Searches:');
	        searchesProject.appendChildren(item);
	        return outline.root.appendChildren(searchesProject);
	      }
	    }
	  };
	
	
	  /*
	  Section: Tag Items
	   */
	
	  OutlineSidebar.prototype.getTagAttributeNamesToValues = function() {
	    var excludeTags, includeTags, ref2, ref3, ref4, ref5, tagsOutline, tagsToValues;
	    tagsOutline = configurationOutlines.tags;
	    includeTags = (ref2 = (ref3 = tagsOutline.evaluateItemPath('/project Include Tags')[0]) != null ? ref3.attributeNames : void 0) != null ? ref2 : [];
	    excludeTags = (ref4 = (ref5 = tagsOutline.evaluateItemPath('/project Exclude Tags')[0]) != null ? ref5.attributeNames : void 0) != null ? ref4 : [];
	    tagsToValues = this.outlineEditor.outline.getTagAttributeNamesToValues(includeTags, excludeTags);
	    return tagsToValues.filter(function(entry) {
	      return entry[0] !== 'data-type';
	    });
	  };
	
	  return OutlineSidebar;
	
	})();


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	var ChoicePaletteItem, OutlineSidebarItem, stringHash,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	stringHash = __webpack_require__(240);
	
	ChoicePaletteItem = __webpack_require__(241);
	
	module.exports = OutlineSidebarItem = (function(superClass) {
	  extend(OutlineSidebarItem, superClass);
	
	  function OutlineSidebarItem(id1, type1, title1, representedObject1) {
	    this.id = id1;
	    this.type = type1;
	    this.title = title1;
	    this.representedObject = representedObject1;
	    OutlineSidebarItem.__super__.constructor.call(this, this.type, this.title, this.representedObject);
	    this._idHash = stringHash(this.id);
	    this.reInit(this.title, this.representedObject);
	  }
	
	  OutlineSidebarItem.prototype.reInit = function(title1, representedObject1) {
	    var each, i, len, ref;
	    this.title = title1 != null ? title1 : '';
	    this.representedObject = representedObject1;
	    this._attributesHash = null;
	    this._childrenHash = null;
	    this._branchHash = null;
	    this.parent = null;
	    ref = this.children;
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      each.parent = null;
	    }
	    return this.children = [];
	  };
	
	  Object.defineProperty(OutlineSidebarItem.prototype, 'attributesHash', {
	    get: function() {
	      var ref;
	      if (!this._attributesHash) {
	        this._attributesHash = this._idHash;
	        this._attributesHash ^= stringHash(this.title);
	        this._attributesHash ^= stringHash((ref = this.representedObject) != null ? ref : '');
	      }
	      return this._attributesHash;
	    }
	  });
	
	  Object.defineProperty(OutlineSidebarItem.prototype, 'childrenHash', {
	    get: function() {
	      var childrenIDs, each;
	      if (!this._childrenHash) {
	        childrenIDs = (function() {
	          var i, len, ref, results;
	          ref = this.children;
	          results = [];
	          for (i = 0, len = ref.length; i < len; i++) {
	            each = ref[i];
	            results.push(each.id);
	          }
	          return results;
	        }).call(this);
	        childrenIDs.push(this.id);
	        this._childrenHash = stringHash(childrenIDs.join(''));
	      }
	      return this._childrenHash;
	    }
	  });
	
	  Object.defineProperty(OutlineSidebarItem.prototype, 'branchHash', {
	    get: function() {
	      var each, i, len, ref;
	      if (!this._branchHash) {
	        this._branchHash = this.attributesHash;
	        this._branchHash ^= this.childrenHash;
	        ref = this.children;
	        for (i = 0, len = ref.length; i < len; i++) {
	          each = ref[i];
	          this._branchHash ^= each.branchHash;
	        }
	      }
	      return this._branchHash;
	    }
	  });
	
	  OutlineSidebarItem.prototype.find = function(id, type, title, representedObject) {
	    var each, i, len, match, ref;
	    if ((!id || id === this.id) && (!type || type === this.type) && (!title || title === this.title) && (!representedObject || representedObject === this.representedObject)) {
	      return this;
	    }
	    ref = this.children;
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      if (match = each.find(id, type, title, representedObject)) {
	        return match;
	      }
	    }
	    return null;
	  };
	
	  return OutlineSidebarItem;
	
	})(ChoicePaletteItem);


/***/ }),
/* 240 */
/***/ (function(module, exports) {

	"use strict";
	
	function hash(str) {
	  var hash = 5381,
	      i    = str.length;
	
	  while(i) {
	    hash = (hash * 33) ^ str.charCodeAt(--i);
	  }
	
	  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
	   * integers. Since we want the results to be always positive, convert the
	   * signed int to an unsigned by doing an unsigned bitshift. */
	  return hash >>> 0;
	}
	
	module.exports = hash;


/***/ }),
/* 241 */
/***/ (function(module, exports) {

	var ChoicePaletteItem;
	
	module.exports = ChoicePaletteItem = (function() {
	  function ChoicePaletteItem(type, title, representedObject) {
	    this.type = type;
	    this.title = title;
	    this.representedObject = representedObject;
	    this.parent = null;
	    this.children = [];
	  }
	
	  Object.defineProperty(ChoicePaletteItem.prototype, 'root', {
	    get: function() {
	      var each;
	      each = this;
	      while (each.parent) {
	        if (each.parent.children.indexOf(each) !== -1) {
	          each = each.parent;
	        } else {
	          return each;
	        }
	      }
	      return each;
	    }
	  });
	
	  Object.defineProperty(ChoicePaletteItem.prototype, 'isGroup', {
	    get: function() {
	      return this.type === 'group';
	    }
	  });
	
	  Object.defineProperty(ChoicePaletteItem.prototype, 'isSelectable', {
	    get: function() {
	      return this.type !== 'group' && this.type !== 'label';
	    }
	  });
	
	  ChoicePaletteItem.prototype.appendChild = function(child) {
	    child.parent = this;
	    return this.children.push(child);
	  };
	
	  return ChoicePaletteItem;
	
	})();


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.Emitter = __webpack_require__(243);
	exports.Disposable = __webpack_require__(244);
	exports.CompositeDisposable = __webpack_require__(245);

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	var Disposable = __webpack_require__(244);
	
	var CompositeDisposable = __webpack_require__(245); // Essential: Utility class to be used when implementing event-based APIs that
	// allows for handlers registered via `::on` to be invoked with calls to
	// `::emit`. Instances of this class are intended to be used internally by
	// classes that expose an event-based API.
	//
	// For example:
	//
	// ```js
	// class User {
	//   constructor() {
	//     this.emitter = new Emitter()
	//   }
	//
	//   onDidChangeName(callback) {
	//     this.emitter.on('did-change-name', callback)
	//   }
	//
	//   setName(name) {
	//     if (name !== this.name) {
	//       this.name = name
	//       this.emitter.emit('did-change-name', name)
	//     }
	//
	//     return this.name
	//   }
	// }
	// ```
	
	
	var Emitter =
	/*#__PURE__*/
	function () {
	  _createClass(Emitter, null, [{
	    key: "onEventHandlerException",
	    value: function onEventHandlerException(exceptionHandler) {
	      var _this = this;
	
	      if (this.exceptionHandlers.length === 0) {
	        this.dispatch = this.exceptionHandlingDispatch;
	      }
	
	      this.exceptionHandlers.push(exceptionHandler);
	      return new Disposable(function () {
	        _this.exceptionHandlers.splice(_this.exceptionHandlers.indexOf(exceptionHandler), 1);
	
	        if (_this.exceptionHandlers.length === 0) {
	          return _this.dispatch = _this.simpleDispatch;
	        }
	      });
	    }
	  }, {
	    key: "simpleDispatch",
	    value: function simpleDispatch(handler, value) {
	      return handler(value);
	    }
	  }, {
	    key: "exceptionHandlingDispatch",
	    value: function exceptionHandlingDispatch(handler, value) {
	      try {
	        return handler(value);
	      } catch (exception) {
	        return this.exceptionHandlers.map(function (exceptionHandler) {
	          return exceptionHandler(exception);
	        });
	      }
	    }
	    /*
	    Section: Construction and Destruction
	    */
	    // Public: Construct an emitter.
	    //
	    // ```js
	    // this.emitter = new Emitter()
	    // ```
	
	  }]);
	
	  function Emitter() {
	    _classCallCheck(this, Emitter);
	
	    this.disposed = false;
	    this.clear();
	  } // Public: Clear out any existing subscribers.
	
	
	  _createClass(Emitter, [{
	    key: "clear",
	    value: function clear() {
	      if (this.subscriptions != null) {
	        this.subscriptions.dispose();
	      }
	
	      this.subscriptions = new CompositeDisposable();
	      this.handlersByEventName = {};
	    } // Public: Unsubscribe all handlers.
	
	  }, {
	    key: "dispose",
	    value: function dispose() {
	      this.subscriptions.dispose();
	      this.handlersByEventName = null;
	      this.disposed = true;
	    }
	    /*
	    Section: Event Subscription
	    */
	    // Public: Register the given handler function to be invoked whenever events by
	    // the given name are emitted via {::emit}.
	    //
	    // * `eventName` {String} naming the event that you want to invoke the handler
	    //   when emitted.
	    // * `handler` {Function} to invoke when {::emit} is called with the given
	    //   event name.
	    //
	    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
	
	  }, {
	    key: "on",
	    value: function on(eventName, handler, unshift) {
	      var _this2 = this;
	
	      if (unshift == null) {
	        unshift = false;
	      }
	
	      if (this.disposed) {
	        throw new Error("Emitter has been disposed");
	      }
	
	      if (typeof handler !== "function") {
	        throw new Error("Handler must be a function");
	      }
	
	      var currentHandlers = this.handlersByEventName[eventName];
	
	      if (currentHandlers) {
	        if (unshift) {
	          this.handlersByEventName[eventName].unshift(handler);
	        } else {
	          this.handlersByEventName[eventName].push(handler);
	        }
	      } else {
	        this.handlersByEventName[eventName] = [handler];
	      } // When the emitter is disposed, we want to dispose of all subscriptions.
	      // However, we also need to stop tracking disposables when they're disposed
	      // from outside, otherwise this class will hold references to all the
	      // disposables it created (instead of just the active ones).
	
	
	      var cleanup = new Disposable(function () {
	        _this2.subscriptions.remove(cleanup);
	
	        return _this2.off(eventName, handler);
	      });
	      this.subscriptions.add(cleanup);
	      return cleanup;
	    } // Public: Register the given handler function to be invoked the next time an
	    // events with the given name is emitted via {::emit}.
	    //
	    // * `eventName` {String} naming the event that you want to invoke the handler
	    //   when emitted.
	    // * `handler` {Function} to invoke when {::emit} is called with the given
	    //   event name.
	    //
	    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
	
	  }, {
	    key: "once",
	    value: function once(eventName, handler, unshift) {
	      if (unshift == null) {
	        unshift = false;
	      }
	
	      var wrapped = function wrapped(value) {
	        disposable.dispose();
	        return handler(value);
	      };
	
	      var disposable = this.on(eventName, wrapped, unshift);
	      return disposable;
	    } // Public: Register the given handler function to be invoked *before* all
	    // other handlers existing at the time of subscription whenever events by the
	    // given name are emitted via {::emit}.
	    //
	    // Use this method when you need to be the first to handle a given event. This
	    // could be required when a data structure in a parent object needs to be
	    // updated before third-party event handlers registered on a child object via a
	    // public API are invoked. Your handler could itself be preempted via
	    // subsequent calls to this method, but this can be controlled by keeping
	    // methods based on `::preempt` private.
	    //
	    // * `eventName` {String} naming the event that you want to invoke the handler
	    //   when emitted.
	    // * `handler` {Function} to invoke when {::emit} is called with the given
	    //   event name.
	    //
	    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
	
	  }, {
	    key: "preempt",
	    value: function preempt(eventName, handler) {
	      return this.on(eventName, handler, true);
	    } // Private: Used by the disposable.
	
	  }, {
	    key: "off",
	    value: function off(eventName, handlerToRemove) {
	      if (this.disposed) {
	        return;
	      }
	
	      var handlers = this.handlersByEventName[eventName];
	
	      if (handlers) {
	        var handlerIndex = handlers.indexOf(handlerToRemove);
	
	        if (handlerIndex >= 0) {
	          handlers.splice(handlerIndex, 1);
	        }
	
	        if (handlers.length === 0) {
	          delete this.handlersByEventName[eventName];
	        }
	      }
	    }
	    /*
	    Section: Event Emission
	    */
	    // Public: Invoke handlers registered via {::on} for the given event name.
	    //
	    // * `eventName` The name of the event to emit. Handlers registered with {::on}
	    //   for the same name will be invoked.
	    // * `value` Callbacks will be invoked with this value as an argument.
	
	  }, {
	    key: "emit",
	    value: function emit(eventName, value) {
	      var handlers = this.handlersByEventName && this.handlersByEventName[eventName];
	
	      if (handlers) {
	        // create a copy of `handlers` so that if any handler mutates `handlers`
	        // (e.g. by calling `on` on this same emitter), this does not result in
	        // changing the handlers being called during this same `emit`.
	        var handlersCopy = handlers.slice();
	
	        for (var i = 0; i < handlersCopy.length; i++) {
	          this.constructor.dispatch(handlersCopy[i], value);
	        }
	      }
	    }
	  }, {
	    key: "emitAsync",
	    value: function emitAsync(eventName, value) {
	      var _this3 = this;
	
	      var handlers = this.handlersByEventName && this.handlersByEventName[eventName];
	
	      if (handlers) {
	        var promises = handlers.map(function (handler) {
	          return _this3.constructor.dispatch(handler, value);
	        });
	        return Promise.all(promises).then(function () {});
	      }
	
	      return Promise.resolve();
	    }
	  }, {
	    key: "getEventNames",
	    value: function getEventNames() {
	      return Object.keys(this.handlersByEventName);
	    }
	  }, {
	    key: "listenerCountForEventName",
	    value: function listenerCountForEventName(eventName) {
	      var handlers = this.handlersByEventName[eventName];
	      return handlers == null ? 0 : handlers.length;
	    }
	  }, {
	    key: "getTotalListenerCount",
	    value: function getTotalListenerCount() {
	      var result = 0;
	
	      var _arr = Object.keys(this.handlersByEventName);
	
	      for (var _i = 0; _i < _arr.length; _i++) {
	        var eventName = _arr[_i];
	        result += this.handlersByEventName[eventName].length;
	      }
	
	      return result;
	    }
	  }]);
	
	  return Emitter;
	}();
	
	Emitter.dispatch = Emitter.simpleDispatch;
	Emitter.exceptionHandlers = [];
	module.exports = Emitter;

/***/ }),
/* 244 */
/***/ (function(module, exports) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	// Essential: A handle to a resource that can be disposed. For example,
	// {Emitter::on} returns disposables representing subscriptions.
	module.exports =
	/*#__PURE__*/
	function () {
	  _createClass(Disposable, null, [{
	    key: "isDisposable",
	    // Public: Ensure that `object` correctly implements the `Disposable`
	    // contract.
	    //
	    // * `object` An {Object} you want to perform the check against.
	    //
	    // Returns a {Boolean} indicating whether `object` is a valid `Disposable`.
	    value: function isDisposable(object) {
	      return typeof (object != null ? object.dispose : undefined) === "function";
	    }
	    /*
	    Section: Construction and Destruction
	    */
	    // Public: Construct a Disposable
	    //
	    // * `disposalAction` A {Function} to call when {::dispose} is called for the
	    //   first time.
	
	  }]);
	
	  function Disposable(disposalAction) {
	    _classCallCheck(this, Disposable);
	
	    this.disposed = false;
	    this.disposalAction = disposalAction;
	  } // Public: Perform the disposal action, indicating that the resource associated
	  // with this disposable is no longer needed.
	  //
	  // You can call this method more than once, but the disposal action will only
	  // be performed the first time.
	
	
	  _createClass(Disposable, [{
	    key: "dispose",
	    value: function dispose() {
	      if (!this.disposed) {
	        this.disposed = true;
	
	        if (typeof this.disposalAction === "function") {
	          this.disposalAction();
	        }
	
	        this.disposalAction = null;
	      }
	    }
	  }]);
	
	  return Disposable;
	}();

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	var CompositeDisposable;
	var Disposable; // Essential: An object that aggregates multiple {Disposable} instances together
	// into a single disposable, so they can all be disposed as a group.
	//
	// These are very useful when subscribing to multiple events.
	//
	// ## Examples
	//
	// ```js
	// const {CompositeDisposable} = require('atom')
	//
	// class Something {
	//   constructor() {
	//     this.disposables = new CompositeDisposable()
	//     const editor = atom.workspace.getActiveTextEditor()
	//     this.disposables.add(editor.onDidChange(() => {})
	//     this.disposables.add(editor.onDidChangePath(() => {})
	//   }
	//
	//   destroy() {
	//     this.disposables.dispose();
	//   }
	// }
	// ```
	
	module.exports =
	/*#__PURE__*/
	function () {
	  /*
	  Section: Construction and Destruction
	  */
	  // Public: Construct an instance, optionally with one or more disposables
	  function CompositeDisposable() {
	    _classCallCheck(this, CompositeDisposable);
	
	    this.disposed = false;
	    this.disposables = new Set();
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	      for (var _iterator = arguments[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var disposable = _step.value;
	        this.add(disposable);
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return != null) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }
	  } // Public: Dispose all disposables added to this composite disposable.
	  //
	  // If this object has already been disposed, this method has no effect.
	
	
	  _createClass(CompositeDisposable, [{
	    key: "dispose",
	    value: function dispose() {
	      if (!this.disposed) {
	        this.disposed = true;
	        this.disposables.forEach(function (disposable) {
	          return disposable.dispose();
	        });
	        this.disposables = null;
	      }
	    }
	    /*
	    Section: Managing Disposables
	    */
	    // Public: Add disposables to be disposed when the composite is disposed.
	    //
	    // If this object has already been disposed, this method has no effect.
	    //
	    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
	    //   methods.
	
	  }, {
	    key: "add",
	    value: function add() {
	      if (!this.disposed) {
	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;
	
	        try {
	          for (var _iterator2 = arguments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	            var disposable = _step2.value;
	            assertDisposable(disposable);
	            this.disposables.add(disposable);
	          }
	        } catch (err) {
	          _didIteratorError2 = true;
	          _iteratorError2 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
	              _iterator2.return();
	            }
	          } finally {
	            if (_didIteratorError2) {
	              throw _iteratorError2;
	            }
	          }
	        }
	      }
	    } // Public: Remove a previously added disposable.
	    //
	    // * `disposable` {Disposable} instance or any object with a `.dispose()`
	    //   method.
	
	  }, {
	    key: "remove",
	    value: function remove(disposable) {
	      if (!this.disposed) {
	        this.disposables.delete(disposable);
	      }
	    } // Public: Alias to {CompositeDisposable::remove}
	
	  }, {
	    key: "delete",
	    value: function _delete(disposable) {
	      this.remove(disposable);
	    } // Public: Clear all disposables. They will not be disposed by the next call
	    // to dispose.
	
	  }, {
	    key: "clear",
	    value: function clear() {
	      if (!this.disposed) {
	        this.disposables.clear();
	      }
	    }
	  }]);
	
	  return CompositeDisposable;
	}();
	
	function assertDisposable(disposable) {
	  if (Disposable == null) {
	    Disposable = __webpack_require__(244);
	  }
	
	  if (!Disposable.isDisposable(disposable)) {
	    throw new TypeError("Arguments to CompositeDisposable.add must have a .dispose() method");
	  }
	}

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  var PathSeparator, filter, legacy_scorer, matcher, prepQueryCache, scorer;
	
	  scorer = __webpack_require__(247);
	
	  legacy_scorer = __webpack_require__(249);
	
	  filter = __webpack_require__(250);
	
	  matcher = __webpack_require__(251);
	
	  PathSeparator = __webpack_require__(248).sep;
	
	  prepQueryCache = null;
	
	  module.exports = {
	    filter: function(candidates, query, options) {
	      if (!((query != null ? query.length : void 0) && (candidates != null ? candidates.length : void 0))) {
	        return [];
	      }
	      return filter(candidates, query, options);
	    },
	    prepQuery: function(query) {
	      return scorer.prepQuery(query);
	    },
	    score: function(string, query, prepQuery, _arg) {
	      var allowErrors, coreQuery, legacy, queryHasSlashes, score, _ref;
	      _ref = _arg != null ? _arg : {}, allowErrors = _ref.allowErrors, legacy = _ref.legacy;
	      if (!((string != null ? string.length : void 0) && (query != null ? query.length : void 0))) {
	        return 0;
	      }
	      if (prepQuery == null) {
	        prepQuery = prepQueryCache && prepQueryCache.query === query ? prepQueryCache : (prepQueryCache = scorer.prepQuery(query));
	      }
	      if (!legacy) {
	        score = scorer.score(string, query, prepQuery, !!allowErrors);
	      } else {
	        queryHasSlashes = prepQuery.depth > 0;
	        coreQuery = prepQuery.core;
	        score = legacy_scorer.score(string, coreQuery, queryHasSlashes);
	        if (!queryHasSlashes) {
	          score = legacy_scorer.basenameScore(string, coreQuery, score);
	        }
	      }
	      return score;
	    },
	    match: function(string, query, prepQuery, _arg) {
	      var allowErrors, baseMatches, matches, query_lw, string_lw, _i, _ref, _results;
	      allowErrors = (_arg != null ? _arg : {}).allowErrors;
	      if (!string) {
	        return [];
	      }
	      if (!query) {
	        return [];
	      }
	      if (string === query) {
	        return (function() {
	          _results = [];
	          for (var _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
	          return _results;
	        }).apply(this);
	      }
	      if (prepQuery == null) {
	        prepQuery = prepQueryCache && prepQueryCache.query === query ? prepQueryCache : (prepQueryCache = scorer.prepQuery(query));
	      }
	      if (!(allowErrors || scorer.isMatch(string, prepQuery.core_lw, prepQuery.core_up))) {
	        return [];
	      }
	      string_lw = string.toLowerCase();
	      query_lw = prepQuery.query_lw;
	      matches = matcher.match(string, string_lw, prepQuery);
	      if (matches.length === 0) {
	        return matches;
	      }
	      if (string.indexOf(PathSeparator) > -1) {
	        baseMatches = matcher.basenameMatch(string, string_lw, prepQuery);
	        matches = matcher.mergeMatches(matches, baseMatches);
	      }
	      return matches;
	    }
	  };
	
	}).call(this);


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  var AcronymResult, PathSeparator, Query, basenameScore, coreChars, countDir, doScore, emptyAcronymResult, file_coeff, isMatch, isSeparator, isWordEnd, isWordStart, miss_coeff, opt_char_re, pos_bonus, scoreAcronyms, scoreCharacter, scoreConsecutives, scoreExact, scoreExactMatch, scorePattern, scorePosition, scoreSize, tau_depth, tau_size, truncatedUpperCase, wm;
	
	  PathSeparator = __webpack_require__(248).sep;
	
	  wm = 150;
	
	  pos_bonus = 20;
	
	  tau_depth = 13;
	
	  tau_size = 85;
	
	  file_coeff = 1.2;
	
	  miss_coeff = 0.75;
	
	  opt_char_re = /[ _\-:\/\\]/g;
	
	  exports.coreChars = coreChars = function(query) {
	    return query.replace(opt_char_re, '');
	  };
	
	  exports.score = function(string, query, prepQuery, allowErrors) {
	    var score, string_lw;
	    if (prepQuery == null) {
	      prepQuery = new Query(query);
	    }
	    if (allowErrors == null) {
	      allowErrors = false;
	    }
	    if (!(allowErrors || isMatch(string, prepQuery.core_lw, prepQuery.core_up))) {
	      return 0;
	    }
	    string_lw = string.toLowerCase();
	    score = doScore(string, string_lw, prepQuery);
	    return Math.ceil(basenameScore(string, string_lw, prepQuery, score));
	  };
	
	  Query = (function() {
	    function Query(query) {
	      if (!(query != null ? query.length : void 0)) {
	        return null;
	      }
	      this.query = query;
	      this.query_lw = query.toLowerCase();
	      this.core = coreChars(query);
	      this.core_lw = this.core.toLowerCase();
	      this.core_up = truncatedUpperCase(this.core);
	      this.depth = countDir(query, query.length);
	    }
	
	    return Query;
	
	  })();
	
	  exports.prepQuery = function(query) {
	    return new Query(query);
	  };
	
	  exports.isMatch = isMatch = function(subject, query_lw, query_up) {
	    var i, j, m, n, qj_lw, qj_up, si;
	    m = subject.length;
	    n = query_lw.length;
	    if (!m || n > m) {
	      return false;
	    }
	    i = -1;
	    j = -1;
	    while (++j < n) {
	      qj_lw = query_lw[j];
	      qj_up = query_up[j];
	      while (++i < m) {
	        si = subject[i];
	        if (si === qj_lw || si === qj_up) {
	          break;
	        }
	      }
	      if (i === m) {
	        return false;
	      }
	    }
	    return true;
	  };
	
	  doScore = function(subject, subject_lw, prepQuery) {
	    var acro, acro_score, align, csc_diag, csc_row, csc_score, i, j, m, miss_budget, miss_left, mm, n, pos, query, query_lw, record_miss, score, score_diag, score_row, score_up, si_lw, start, sz;
	    query = prepQuery.query;
	    query_lw = prepQuery.query_lw;
	    m = subject.length;
	    n = query.length;
	    acro = scoreAcronyms(subject, subject_lw, query, query_lw);
	    acro_score = acro.score;
	    if (acro.count === n) {
	      return scoreExact(n, m, acro_score, acro.pos);
	    }
	    pos = subject_lw.indexOf(query_lw);
	    if (pos > -1) {
	      return scoreExactMatch(subject, subject_lw, query, query_lw, pos, n, m);
	    }
	    score_row = new Array(n);
	    csc_row = new Array(n);
	    sz = scoreSize(n, m);
	    miss_budget = Math.ceil(miss_coeff * n) + 5;
	    miss_left = miss_budget;
	    j = -1;
	    while (++j < n) {
	      score_row[j] = 0;
	      csc_row[j] = 0;
	    }
	    i = subject_lw.indexOf(query_lw[0]);
	    if (i > -1) {
	      i--;
	    }
	    mm = subject_lw.lastIndexOf(query_lw[n - 1], m);
	    if (mm > i) {
	      m = mm + 1;
	    }
	    while (++i < m) {
	      score = 0;
	      score_diag = 0;
	      csc_diag = 0;
	      si_lw = subject_lw[i];
	      record_miss = true;
	      j = -1;
	      while (++j < n) {
	        score_up = score_row[j];
	        if (score_up > score) {
	          score = score_up;
	        }
	        csc_score = 0;
	        if (query_lw[j] === si_lw) {
	          start = isWordStart(i, subject, subject_lw);
	          csc_score = csc_diag > 0 ? csc_diag : scoreConsecutives(subject, subject_lw, query, query_lw, i, j, start);
	          align = score_diag + scoreCharacter(i, j, start, acro_score, csc_score);
	          if (align > score) {
	            score = align;
	            miss_left = miss_budget;
	          } else {
	            if (record_miss && --miss_left <= 0) {
	              return score_row[n - 1] * sz;
	            }
	            record_miss = false;
	          }
	        }
	        score_diag = score_up;
	        csc_diag = csc_row[j];
	        csc_row[j] = csc_score;
	        score_row[j] = score;
	      }
	    }
	    return score * sz;
	  };
	
	  exports.isWordStart = isWordStart = function(pos, subject, subject_lw) {
	    var curr_s, prev_s;
	    if (pos === 0) {
	      return true;
	    }
	    curr_s = subject[pos];
	    prev_s = subject[pos - 1];
	    return isSeparator(curr_s) || isSeparator(prev_s) || (curr_s !== subject_lw[pos] && prev_s === subject_lw[pos - 1]);
	  };
	
	  exports.isWordEnd = isWordEnd = function(pos, subject, subject_lw, len) {
	    var curr_s, next_s;
	    if (pos === len - 1) {
	      return true;
	    }
	    curr_s = subject[pos];
	    next_s = subject[pos + 1];
	    return isSeparator(curr_s) || isSeparator(next_s) || (curr_s === subject_lw[pos] && next_s !== subject_lw[pos + 1]);
	  };
	
	  isSeparator = function(c) {
	    return c === ' ' || c === '.' || c === '-' || c === '_' || c === '/' || c === '\\';
	  };
	
	  scorePosition = function(pos) {
	    var sc;
	    if (pos < pos_bonus) {
	      sc = pos_bonus - pos;
	      return 100 + sc * sc;
	    } else {
	      return Math.max(100 + pos_bonus - pos, 0);
	    }
	  };
	
	  scoreSize = function(n, m) {
	    return tau_size / (tau_size + Math.abs(m - n));
	  };
	
	  scoreExact = function(n, m, quality, pos) {
	    return 2 * n * (wm * quality + scorePosition(pos)) * scoreSize(n, m);
	  };
	
	  exports.scorePattern = scorePattern = function(count, len, sameCase, start, end) {
	    var bonus, sz;
	    sz = count;
	    bonus = 6;
	    if (sameCase === count) {
	      bonus += 2;
	    }
	    if (start) {
	      bonus += 3;
	    }
	    if (end) {
	      bonus += 1;
	    }
	    if (count === len) {
	      if (start) {
	        if (sameCase === len) {
	          sz += 2;
	        } else {
	          sz += 1;
	        }
	      }
	      if (end) {
	        bonus += 1;
	      }
	    }
	    return sameCase + sz * (sz + bonus);
	  };
	
	  exports.scoreCharacter = scoreCharacter = function(i, j, start, acro_score, csc_score) {
	    var posBonus;
	    posBonus = scorePosition(i);
	    if (start) {
	      return posBonus + wm * ((acro_score > csc_score ? acro_score : csc_score) + 10);
	    }
	    return posBonus + wm * csc_score;
	  };
	
	  exports.scoreConsecutives = scoreConsecutives = function(subject, subject_lw, query, query_lw, i, j, start) {
	    var k, m, mi, n, nj, sameCase, startPos, sz;
	    m = subject.length;
	    n = query.length;
	    mi = m - i;
	    nj = n - j;
	    k = mi < nj ? mi : nj;
	    startPos = i;
	    sameCase = 0;
	    sz = 0;
	    if (query[j] === subject[i]) {
	      sameCase++;
	    }
	    while (++sz < k && query_lw[++j] === subject_lw[++i]) {
	      if (query[j] === subject[i]) {
	        sameCase++;
	      }
	    }
	    if (sz === 1) {
	      return 1 + 2 * sameCase;
	    }
	    return scorePattern(sz, n, sameCase, start, isWordEnd(i, subject, subject_lw, m));
	  };
	
	  exports.scoreExactMatch = scoreExactMatch = function(subject, subject_lw, query, query_lw, pos, n, m) {
	    var end, i, pos2, sameCase, start;
	    start = isWordStart(pos, subject, subject_lw);
	    if (!start) {
	      pos2 = subject_lw.indexOf(query_lw, pos + 1);
	      if (pos2 > -1) {
	        start = isWordStart(pos2, subject, subject_lw);
	        if (start) {
	          pos = pos2;
	        }
	      }
	    }
	    i = -1;
	    sameCase = 0;
	    while (++i < n) {
	      if (query[pos + i] === subject[i]) {
	        sameCase++;
	      }
	    }
	    end = isWordEnd(pos + n - 1, subject, subject_lw, m);
	    return scoreExact(n, m, scorePattern(n, n, sameCase, start, end), pos);
	  };
	
	  AcronymResult = (function() {
	    function AcronymResult(score, pos, count) {
	      this.score = score;
	      this.pos = pos;
	      this.count = count;
	    }
	
	    return AcronymResult;
	
	  })();
	
	  emptyAcronymResult = new AcronymResult(0, 0.1, 0);
	
	  exports.scoreAcronyms = scoreAcronyms = function(subject, subject_lw, query, query_lw) {
	    var count, i, j, m, n, pos, qj_lw, sameCase, score;
	    m = subject.length;
	    n = query.length;
	    if (!(m > 1 && n > 1)) {
	      return emptyAcronymResult;
	    }
	    count = 0;
	    pos = 0;
	    sameCase = 0;
	    i = -1;
	    j = -1;
	    while (++j < n) {
	      qj_lw = query_lw[j];
	      while (++i < m) {
	        if (qj_lw === subject_lw[i] && isWordStart(i, subject, subject_lw)) {
	          if (query[j] === subject[i]) {
	            sameCase++;
	          }
	          pos += i;
	          count++;
	          break;
	        }
	      }
	      if (i === m) {
	        break;
	      }
	    }
	    if (count < 2) {
	      return emptyAcronymResult;
	    }
	    score = scorePattern(count, n, sameCase, true, false);
	    return new AcronymResult(score, pos / count, count);
	  };
	
	  basenameScore = function(subject, subject_lw, prepQuery, fullPathScore) {
	    var alpha, basePathScore, basePos, depth, end;
	    if (fullPathScore === 0) {
	      return 0;
	    }
	    end = subject.length - 1;
	    while (subject[end] === PathSeparator) {
	      end--;
	    }
	    basePos = subject.lastIndexOf(PathSeparator, end);
	    if (basePos === -1) {
	      return fullPathScore;
	    }
	    depth = prepQuery.depth;
	    while (depth-- > 0) {
	      basePos = subject.lastIndexOf(PathSeparator, basePos - 1);
	      if (basePos === -1) {
	        return fullPathScore;
	      }
	    }
	    basePos++;
	    end++;
	    basePathScore = doScore(subject.slice(basePos, end), subject_lw.slice(basePos, end), prepQuery);
	    alpha = 0.5 * tau_depth / (tau_depth + countDir(subject, end + 1));
	    return alpha * basePathScore + (1 - alpha) * fullPathScore * scoreSize(0, file_coeff * (end - basePos));
	  };
	
	  exports.countDir = countDir = function(path, end) {
	    var count, i;
	    if (end < 1) {
	      return 0;
	    }
	    count = 0;
	    i = -1;
	    while (++i < end && path[i] === PathSeparator) {
	      continue;
	    }
	    while (++i < end) {
	      if (path[i] === PathSeparator) {
	        count++;
	        while (++i < end && path[i] === PathSeparator) {
	          continue;
	        }
	      }
	    }
	    return count;
	  };
	
	  truncatedUpperCase = function(str) {
	    var char, upper, _i, _len;
	    upper = "";
	    for (_i = 0, _len = str.length; _i < _len; _i++) {
	      char = str[_i];
	      upper += char.toUpperCase()[0];
	    }
	    return upper;
	  };
	
	}).call(this);


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  var PathSeparator, queryIsLastPathSegment;
	
	  PathSeparator = __webpack_require__(248).sep;
	
	  exports.basenameScore = function(string, query, score) {
	    var base, depth, index, lastCharacter, segmentCount, slashCount;
	    index = string.length - 1;
	    while (string[index] === PathSeparator) {
	      index--;
	    }
	    slashCount = 0;
	    lastCharacter = index;
	    base = null;
	    while (index >= 0) {
	      if (string[index] === PathSeparator) {
	        slashCount++;
	        if (base == null) {
	          base = string.substring(index + 1, lastCharacter + 1);
	        }
	      } else if (index === 0) {
	        if (lastCharacter < string.length - 1) {
	          if (base == null) {
	            base = string.substring(0, lastCharacter + 1);
	          }
	        } else {
	          if (base == null) {
	            base = string;
	          }
	        }
	      }
	      index--;
	    }
	    if (base === string) {
	      score *= 2;
	    } else if (base) {
	      score += exports.score(base, query);
	    }
	    segmentCount = slashCount + 1;
	    depth = Math.max(1, 10 - segmentCount);
	    score *= depth * 0.01;
	    return score;
	  };
	
	  exports.score = function(string, query) {
	    var character, characterScore, indexInQuery, indexInString, lowerCaseIndex, minIndex, queryLength, queryScore, stringLength, totalCharacterScore, upperCaseIndex, _ref;
	    if (string === query) {
	      return 1;
	    }
	    if (queryIsLastPathSegment(string, query)) {
	      return 1;
	    }
	    totalCharacterScore = 0;
	    queryLength = query.length;
	    stringLength = string.length;
	    indexInQuery = 0;
	    indexInString = 0;
	    while (indexInQuery < queryLength) {
	      character = query[indexInQuery++];
	      lowerCaseIndex = string.indexOf(character.toLowerCase());
	      upperCaseIndex = string.indexOf(character.toUpperCase());
	      minIndex = Math.min(lowerCaseIndex, upperCaseIndex);
	      if (minIndex === -1) {
	        minIndex = Math.max(lowerCaseIndex, upperCaseIndex);
	      }
	      indexInString = minIndex;
	      if (indexInString === -1) {
	        return 0;
	      }
	      characterScore = 0.1;
	      if (string[indexInString] === character) {
	        characterScore += 0.1;
	      }
	      if (indexInString === 0 || string[indexInString - 1] === PathSeparator) {
	        characterScore += 0.8;
	      } else if ((_ref = string[indexInString - 1]) === '-' || _ref === '_' || _ref === ' ') {
	        characterScore += 0.7;
	      }
	      string = string.substring(indexInString + 1, stringLength);
	      totalCharacterScore += characterScore;
	    }
	    queryScore = totalCharacterScore / queryLength;
	    return ((queryScore * (queryLength / stringLength)) + queryScore) / 2;
	  };
	
	  queryIsLastPathSegment = function(string, query) {
	    if (string[string.length - query.length - 1] === PathSeparator) {
	      return string.lastIndexOf(query) === string.length - query.length;
	    }
	  };
	
	  exports.match = function(string, query, stringOffset) {
	    var character, indexInQuery, indexInString, lowerCaseIndex, matches, minIndex, queryLength, stringLength, upperCaseIndex, _i, _ref, _results;
	    if (stringOffset == null) {
	      stringOffset = 0;
	    }
	    if (string === query) {
	      return (function() {
	        _results = [];
	        for (var _i = stringOffset, _ref = stringOffset + string.length; stringOffset <= _ref ? _i < _ref : _i > _ref; stringOffset <= _ref ? _i++ : _i--){ _results.push(_i); }
	        return _results;
	      }).apply(this);
	    }
	    queryLength = query.length;
	    stringLength = string.length;
	    indexInQuery = 0;
	    indexInString = 0;
	    matches = [];
	    while (indexInQuery < queryLength) {
	      character = query[indexInQuery++];
	      lowerCaseIndex = string.indexOf(character.toLowerCase());
	      upperCaseIndex = string.indexOf(character.toUpperCase());
	      minIndex = Math.min(lowerCaseIndex, upperCaseIndex);
	      if (minIndex === -1) {
	        minIndex = Math.max(lowerCaseIndex, upperCaseIndex);
	      }
	      indexInString = minIndex;
	      if (indexInString === -1) {
	        return [];
	      }
	      matches.push(stringOffset + indexInString);
	      stringOffset += indexInString + 1;
	      string = string.substring(indexInString + 1, stringLength);
	    }
	    return matches;
	  };
	
	}).call(this);


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  var PathSeparator, legacy_scorer, pluckCandidates, scorer, sortCandidates;
	
	  scorer = __webpack_require__(247);
	
	  legacy_scorer = __webpack_require__(249);
	
	  pluckCandidates = function(a) {
	    return a.candidate;
	  };
	
	  sortCandidates = function(a, b) {
	    return b.score - a.score;
	  };
	
	  PathSeparator = __webpack_require__(248).sep;
	
	  module.exports = function(candidates, query, _arg) {
	    var allowErrors, bAllowErrors, bKey, candidate, coreQuery, key, legacy, maxInners, maxResults, prepQuery, queryHasSlashes, score, scoredCandidates, spotLeft, string, _i, _j, _len, _len1, _ref;
	    _ref = _arg != null ? _arg : {}, key = _ref.key, maxResults = _ref.maxResults, maxInners = _ref.maxInners, allowErrors = _ref.allowErrors, legacy = _ref.legacy;
	    scoredCandidates = [];
	    spotLeft = (maxInners != null) && maxInners > 0 ? maxInners : candidates.length;
	    bAllowErrors = !!allowErrors;
	    bKey = key != null;
	    prepQuery = scorer.prepQuery(query);
	    if (!legacy) {
	      for (_i = 0, _len = candidates.length; _i < _len; _i++) {
	        candidate = candidates[_i];
	        string = bKey ? candidate[key] : candidate;
	        if (!string) {
	          continue;
	        }
	        score = scorer.score(string, query, prepQuery, bAllowErrors);
	        if (score > 0) {
	          scoredCandidates.push({
	            candidate: candidate,
	            score: score
	          });
	          if (!--spotLeft) {
	            break;
	          }
	        }
	      }
	    } else {
	      queryHasSlashes = prepQuery.depth > 0;
	      coreQuery = prepQuery.core;
	      for (_j = 0, _len1 = candidates.length; _j < _len1; _j++) {
	        candidate = candidates[_j];
	        string = key != null ? candidate[key] : candidate;
	        if (!string) {
	          continue;
	        }
	        score = legacy_scorer.score(string, coreQuery, queryHasSlashes);
	        if (!queryHasSlashes) {
	          score = legacy_scorer.basenameScore(string, coreQuery, score);
	        }
	        if (score > 0) {
	          scoredCandidates.push({
	            candidate: candidate,
	            score: score
	          });
	        }
	      }
	    }
	    scoredCandidates.sort(sortCandidates);
	    candidates = scoredCandidates.map(pluckCandidates);
	    if (maxResults != null) {
	      candidates = candidates.slice(0, maxResults);
	    }
	    return candidates;
	  };
	
	}).call(this);


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  var PathSeparator, scorer;
	
	  PathSeparator = __webpack_require__(248).sep;
	
	  scorer = __webpack_require__(247);
	
	  exports.basenameMatch = function(subject, subject_lw, prepQuery) {
	    var basePos, depth, end;
	    end = subject.length - 1;
	    while (subject[end] === PathSeparator) {
	      end--;
	    }
	    basePos = subject.lastIndexOf(PathSeparator, end);
	    if (basePos === -1) {
	      return [];
	    }
	    depth = prepQuery.depth;
	    while (depth-- > 0) {
	      basePos = subject.lastIndexOf(PathSeparator, basePos - 1);
	      if (basePos === -1) {
	        return [];
	      }
	    }
	    basePos++;
	    end++;
	    return exports.match(subject.slice(basePos, end), subject_lw.slice(basePos, end), prepQuery, basePos);
	  };
	
	  exports.mergeMatches = function(a, b) {
	    var ai, bj, i, j, m, n, out;
	    m = a.length;
	    n = b.length;
	    if (n === 0) {
	      return a.slice();
	    }
	    if (m === 0) {
	      return b.slice();
	    }
	    i = -1;
	    j = 0;
	    bj = b[j];
	    out = [];
	    while (++i < m) {
	      ai = a[i];
	      while (bj <= ai && ++j < n) {
	        if (bj < ai) {
	          out.push(bj);
	        }
	        bj = b[j];
	      }
	      out.push(ai);
	    }
	    while (j < n) {
	      out.push(b[j++]);
	    }
	    return out;
	  };
	
	  exports.match = function(subject, subject_lw, prepQuery, offset) {
	    var DIAGONAL, LEFT, STOP, UP, acro_score, align, backtrack, csc_diag, csc_row, csc_score, i, j, m, matches, move, n, pos, query, query_lw, score, score_diag, score_row, score_up, si_lw, start, trace;
	    if (offset == null) {
	      offset = 0;
	    }
	    query = prepQuery.query;
	    query_lw = prepQuery.query_lw;
	    m = subject.length;
	    n = query.length;
	    acro_score = scorer.scoreAcronyms(subject, subject_lw, query, query_lw).score;
	    score_row = new Array(n);
	    csc_row = new Array(n);
	    STOP = 0;
	    UP = 1;
	    LEFT = 2;
	    DIAGONAL = 3;
	    trace = new Array(m * n);
	    pos = -1;
	    j = -1;
	    while (++j < n) {
	      score_row[j] = 0;
	      csc_row[j] = 0;
	    }
	    i = -1;
	    while (++i < m) {
	      score = 0;
	      score_up = 0;
	      csc_diag = 0;
	      si_lw = subject_lw[i];
	      j = -1;
	      while (++j < n) {
	        csc_score = 0;
	        align = 0;
	        score_diag = score_up;
	        if (query_lw[j] === si_lw) {
	          start = scorer.isWordStart(i, subject, subject_lw);
	          csc_score = csc_diag > 0 ? csc_diag : scorer.scoreConsecutives(subject, subject_lw, query, query_lw, i, j, start);
	          align = score_diag + scorer.scoreCharacter(i, j, start, acro_score, csc_score);
	        }
	        score_up = score_row[j];
	        csc_diag = csc_row[j];
	        if (score > score_up) {
	          move = LEFT;
	        } else {
	          score = score_up;
	          move = UP;
	        }
	        if (align > score) {
	          score = align;
	          move = DIAGONAL;
	        } else {
	          csc_score = 0;
	        }
	        score_row[j] = score;
	        csc_row[j] = csc_score;
	        trace[++pos] = score > 0 ? move : STOP;
	      }
	    }
	    i = m - 1;
	    j = n - 1;
	    pos = i * n + j;
	    backtrack = true;
	    matches = [];
	    while (backtrack && i >= 0 && j >= 0) {
	      switch (trace[pos]) {
	        case UP:
	          i--;
	          pos -= n;
	          break;
	        case LEFT:
	          j--;
	          pos--;
	          break;
	        case DIAGONAL:
	          matches.push(i + offset);
	          j--;
	          i--;
	          pos -= n + 1;
	          break;
	        default:
	          backtrack = false;
	      }
	    }
	    matches.reverse();
	    return matches;
	  };
	
	}).call(this);


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	var BirchOutline, Commands, Preferences;
	
	BirchOutline = __webpack_require__(1);
	
	Preferences = __webpack_require__(253);
	
	Commands = __webpack_require__(254);
	
	BirchOutline.preferences = new Preferences;
	
	BirchOutline.commands = new Commands;
	
	module.exports = BirchOutline;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	var CompositeDisposable, Emitter, Preferences, ref;
	
	ref = __webpack_require__(242), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;
	
	module.exports = Preferences = (function() {
	  Preferences.nativePreferences = null;
	
	  function Preferences() {
	    this.emitter = new Emitter;
	    this.map = new Map();
	  }
	
	  Preferences.prototype.onDidChange = function(callback) {
	    return this.emitter.on("did-change", callback);
	  };
	
	  Preferences.prototype.onDidChangeKey = function(key, callback) {
	    return this.emitter.on("did-change-" + key, callback);
	  };
	
	  Preferences.prototype.get = function(key) {
	    if (this.nativePreferences) {
	      return this.nativePreferences.getPreference(key);
	    } else {
	      return this.map.get(key);
	    }
	  };
	
	  Preferences.prototype.set = function(key, value) {
	    if (this.nativePreferences) {
	      this.nativePreferences.storePreference(key, value);
	    } else {
	      this.map.set(key, value);
	    }
	    this.emitter.emit("did-change-" + key);
	    return this.emitter.emit("did-change");
	  };
	
	  return Preferences;
	
	})();


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	var Commands, CompositeDisposable, Disposable, _, assert, ref, util;
	
	ref = __webpack_require__(242), CompositeDisposable = ref.CompositeDisposable, Disposable = ref.Disposable;
	
	util = __webpack_require__(1).util;
	
	_ = __webpack_require__(255);
	
	assert = util.assert;
	
	module.exports = Commands = (function() {
	  function Commands() {
	    this.commands = new Map();
	  }
	
	  Commands.prototype.add = function(target, commandName, callback, override) {
	    var commands, disposable;
	    if (typeof commandName === 'object') {
	      commands = commandName;
	      disposable = new CompositeDisposable;
	      for (commandName in commands) {
	        callback = commands[commandName];
	        disposable.add(this.add(target, commandName, callback));
	      }
	      return disposable;
	    }
	    if (override) {
	      assert(this.commands.get(commandName) != null);
	    } else {
	      assert(!this.commands.get(commandName));
	    }
	    this.commands.set(commandName, callback);
	    return new Disposable((function(_this) {
	      return function() {
	        return _this.commands["delete"](commandName);
	      };
	    })(this));
	  };
	
	  Commands.prototype.override = function(target, commandName, callback) {
	    var commands, disposable;
	    if (typeof commandName === 'object') {
	      commands = commandName;
	      disposable = new CompositeDisposable;
	      for (commandName in commands) {
	        callback = commands[commandName];
	        disposable.add(this.add(target, commandName, callback, true));
	      }
	      return disposable;
	    }
	    return this.add(target, commandName, callback, true);
	  };
	
	  Commands.prototype.hasCommand = function(target, commandName) {
	    return this.commands.get(commandName) != null;
	  };
	
	  Commands.prototype.findCommands = function(target) {
	    var results;
	    results = [];
	    this.commands.forEach(function(callback, commandName) {
	      return results.push({
	        command: commandName,
	        displayName: _.humanizeEventName(commandName)
	      });
	    });
	    results.sort(function(a, b) {
	      return a.displayName.localeCompare(b.displayName);
	    });
	    return results;
	  };
	
	  Commands.prototype.dispatch = function(target, commandName, detail, completedCallback) {
	    var callback;
	    if (callback = this.commands.get(commandName)) {
	      if (callback.length > 1) {
	        return callback.call(target, detail, completedCallback);
	      } else {
	        callback.call(target, detail);
	        return typeof completedCallback === "function" ? completedCallback(true) : void 0;
	      }
	    } else {
	      return typeof completedCallback === "function" ? completedCallback(false) : void 0;
	    }
	  };
	
	  return Commands;
	
	})();


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {(function() {
	  var isEqual, isPlainObject, macModifierKeyMap, nonMacModifierKeyMap, plus, shiftKeyMap, splitKeyPath, _,
	    __slice = [].slice;
	
	  _ = __webpack_require__(256);
	
	  macModifierKeyMap = {
	    cmd: '\u2318',
	    ctrl: '\u2303',
	    alt: '\u2325',
	    option: '\u2325',
	    shift: '\u21e7',
	    enter: '\u23ce',
	    left: '\u2190',
	    right: '\u2192',
	    up: '\u2191',
	    down: '\u2193'
	  };
	
	  nonMacModifierKeyMap = {
	    cmd: 'Cmd',
	    ctrl: 'Ctrl',
	    alt: 'Alt',
	    option: 'Alt',
	    shift: 'Shift',
	    enter: 'Enter',
	    left: 'Left',
	    right: 'Right',
	    up: 'Up',
	    down: 'Down'
	  };
	
	  shiftKeyMap = {
	    '~': '`',
	    '_': '-',
	    '+': '=',
	    '|': '\\',
	    '{': '[',
	    '}': ']',
	    ':': ';',
	    '"': '\'',
	    '<': ',',
	    '>': '.',
	    '?': '/'
	  };
	
	  splitKeyPath = function(keyPath) {
	    var char, i, keyPathArray, startIndex, _i, _len;
	    startIndex = 0;
	    keyPathArray = [];
	    if (keyPath == null) {
	      return keyPathArray;
	    }
	    for (i = _i = 0, _len = keyPath.length; _i < _len; i = ++_i) {
	      char = keyPath[i];
	      if (char === '.' && (i === 0 || keyPath[i - 1] !== '\\')) {
	        keyPathArray.push(keyPath.substring(startIndex, i));
	        startIndex = i + 1;
	      }
	    }
	    keyPathArray.push(keyPath.substr(startIndex, keyPath.length));
	    return keyPathArray;
	  };
	
	  isPlainObject = function(value) {
	    return _.isObject(value) && !_.isArray(value);
	  };
	
	  plus = {
	    adviseBefore: function(object, methodName, advice) {
	      var original;
	      original = object[methodName];
	      return object[methodName] = function() {
	        var args;
	        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
	        if (advice.apply(this, args) !== false) {
	          return original.apply(this, args);
	        }
	      };
	    },
	    camelize: function(string) {
	      if (string) {
	        return string.replace(/[_-]+(\w)/g, function(m) {
	          return m[1].toUpperCase();
	        });
	      } else {
	        return '';
	      }
	    },
	    capitalize: function(word) {
	      if (!word) {
	        return '';
	      }
	      if (word.toLowerCase() === 'github') {
	        return 'GitHub';
	      } else {
	        return word[0].toUpperCase() + word.slice(1);
	      }
	    },
	    compactObject: function(object) {
	      var key, newObject, value;
	      newObject = {};
	      for (key in object) {
	        value = object[key];
	        if (value != null) {
	          newObject[key] = value;
	        }
	      }
	      return newObject;
	    },
	    dasherize: function(string) {
	      if (!string) {
	        return '';
	      }
	      string = string[0].toLowerCase() + string.slice(1);
	      return string.replace(/([A-Z])|(_)/g, function(m, letter) {
	        if (letter) {
	          return "-" + letter.toLowerCase();
	        } else {
	          return "-";
	        }
	      });
	    },
	    deepClone: function(object) {
	      if (_.isArray(object)) {
	        return object.map(function(value) {
	          return plus.deepClone(value);
	        });
	      } else if (_.isObject(object) && !_.isFunction(object)) {
	        return plus.mapObject(object, (function(_this) {
	          return function(key, value) {
	            return [key, plus.deepClone(value)];
	          };
	        })(this));
	      } else {
	        return object;
	      }
	    },
	    deepExtend: function(target) {
	      var i, key, object, result, _i, _len, _ref;
	      result = target;
	      i = 0;
	      while (++i < arguments.length) {
	        object = arguments[i];
	        if (isPlainObject(result) && isPlainObject(object)) {
	          _ref = Object.keys(object);
	          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	            key = _ref[_i];
	            result[key] = plus.deepExtend(result[key], object[key]);
	          }
	        } else {
	          result = plus.deepClone(object);
	        }
	      }
	      return result;
	    },
	    deepContains: function(array, target) {
	      var object, _i, _len;
	      if (array == null) {
	        return false;
	      }
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        object = array[_i];
	        if (_.isEqual(object, target)) {
	          return true;
	        }
	      }
	      return false;
	    },
	    endsWith: function(string, suffix) {
	      if (suffix == null) {
	        suffix = '';
	      }
	      if (string) {
	        return string.indexOf(suffix, string.length - suffix.length) !== -1;
	      } else {
	        return false;
	      }
	    },
	    escapeAttribute: function(string) {
	      if (string) {
	        return string.replace(/"/g, '&quot;').replace(/\n/g, '').replace(/\\/g, '-');
	      } else {
	        return '';
	      }
	    },
	    escapeRegExp: function(string) {
	      if (string) {
	        return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	      } else {
	        return '';
	      }
	    },
	    humanizeEventName: function(eventName, eventDoc) {
	      var event, namespace, namespaceDoc, _ref;
	      _ref = eventName.split(':'), namespace = _ref[0], event = _ref[1];
	      if (event == null) {
	        return plus.undasherize(namespace);
	      }
	      namespaceDoc = plus.undasherize(namespace);
	      if (eventDoc == null) {
	        eventDoc = plus.undasherize(event);
	      }
	      return "" + namespaceDoc + ": " + eventDoc;
	    },
	    humanizeKey: function(key, platform) {
	      var modifierKeyMap;
	      if (platform == null) {
	        platform = process.platform;
	      }
	      if (!key) {
	        return key;
	      }
	      modifierKeyMap = platform === 'darwin' ? macModifierKeyMap : nonMacModifierKeyMap;
	      if (modifierKeyMap[key]) {
	        return modifierKeyMap[key];
	      } else if (key.length === 1 && (shiftKeyMap[key] != null)) {
	        return [modifierKeyMap.shift, shiftKeyMap[key]];
	      } else if (key.length === 1 && key === key.toUpperCase() && key.toUpperCase() !== key.toLowerCase()) {
	        return [modifierKeyMap.shift, key.toUpperCase()];
	      } else if (key.length === 1 || /f[0-9]{1,2}/.test(key)) {
	        return key.toUpperCase();
	      } else {
	        if (platform === 'darwin') {
	          return key;
	        } else {
	          return plus.capitalize(key);
	        }
	      }
	    },
	    humanizeKeystroke: function(keystroke, platform) {
	      var humanizedKeystrokes, index, key, keys, keystrokes, splitKeystroke, _i, _j, _len, _len1;
	      if (platform == null) {
	        platform = process.platform;
	      }
	      if (!keystroke) {
	        return keystroke;
	      }
	      keystrokes = keystroke.split(' ');
	      humanizedKeystrokes = [];
	      for (_i = 0, _len = keystrokes.length; _i < _len; _i++) {
	        keystroke = keystrokes[_i];
	        keys = [];
	        splitKeystroke = keystroke.split('-');
	        for (index = _j = 0, _len1 = splitKeystroke.length; _j < _len1; index = ++_j) {
	          key = splitKeystroke[index];
	          if (key === '' && splitKeystroke[index - 1] === '') {
	            key = '-';
	          }
	          if (key) {
	            keys.push(plus.humanizeKey(key, platform));
	          }
	        }
	        keys = _.uniq(_.flatten(keys));
	        if (platform === 'darwin') {
	          keys = keys.join('');
	        } else {
	          keys = keys.join('+');
	        }
	        humanizedKeystrokes.push(keys);
	      }
	      return humanizedKeystrokes.join(' ');
	    },
	    isSubset: function(potentialSubset, potentialSuperset) {
	      return _.every(potentialSubset, function(element) {
	        return _.include(potentialSuperset, element);
	      });
	    },
	    losslessInvert: function(hash) {
	      var inverted, key, value;
	      inverted = {};
	      for (key in hash) {
	        value = hash[key];
	        if (inverted[value] == null) {
	          inverted[value] = [];
	        }
	        inverted[value].push(key);
	      }
	      return inverted;
	    },
	    mapObject: function(object, iterator) {
	      var key, newObject, value, _i, _len, _ref, _ref1;
	      newObject = {};
	      _ref = Object.keys(object);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        key = _ref[_i];
	        _ref1 = iterator(key, object[key]), key = _ref1[0], value = _ref1[1];
	        newObject[key] = value;
	      }
	      return newObject;
	    },
	    multiplyString: function(string, n) {
	      var finalString, i;
	      finalString = "";
	      i = 0;
	      while (i < n) {
	        finalString += string;
	        i++;
	      }
	      return finalString;
	    },
	    pluralize: function(count, singular, plural) {
	      if (count == null) {
	        count = 0;
	      }
	      if (plural == null) {
	        plural = singular + 's';
	      }
	      if (count === 1) {
	        return "" + count + " " + singular;
	      } else {
	        return "" + count + " " + plural;
	      }
	    },
	    remove: function(array, element) {
	      var index;
	      index = array.indexOf(element);
	      if (index >= 0) {
	        array.splice(index, 1);
	      }
	      return array;
	    },
	    setValueForKeyPath: function(object, keyPath, value) {
	      var key, keys;
	      keys = splitKeyPath(keyPath);
	      while (keys.length > 1) {
	        key = keys.shift();
	        if (object[key] == null) {
	          object[key] = {};
	        }
	        object = object[key];
	      }
	      if (value != null) {
	        return object[keys.shift()] = value;
	      } else {
	        return delete object[keys.shift()];
	      }
	    },
	    hasKeyPath: function(object, keyPath) {
	      var key, keys, _i, _len;
	      keys = splitKeyPath(keyPath);
	      for (_i = 0, _len = keys.length; _i < _len; _i++) {
	        key = keys[_i];
	        if (!object.hasOwnProperty(key)) {
	          return false;
	        }
	        object = object[key];
	      }
	      return true;
	    },
	    spliceWithArray: function(originalArray, start, length, insertedArray, chunkSize) {
	      var chunkStart, _i, _ref, _results;
	      if (chunkSize == null) {
	        chunkSize = 100000;
	      }
	      if (insertedArray.length < chunkSize) {
	        return originalArray.splice.apply(originalArray, [start, length].concat(__slice.call(insertedArray)));
	      } else {
	        originalArray.splice(start, length);
	        _results = [];
	        for (chunkStart = _i = 0, _ref = insertedArray.length; chunkSize > 0 ? _i <= _ref : _i >= _ref; chunkStart = _i += chunkSize) {
	          _results.push(originalArray.splice.apply(originalArray, [start + chunkStart, 0].concat(__slice.call(insertedArray.slice(chunkStart, chunkStart + chunkSize)))));
	        }
	        return _results;
	      }
	    },
	    sum: function(array) {
	      var elt, sum, _i, _len;
	      sum = 0;
	      for (_i = 0, _len = array.length; _i < _len; _i++) {
	        elt = array[_i];
	        sum += elt;
	      }
	      return sum;
	    },
	    uncamelcase: function(string) {
	      var result;
	      if (!string) {
	        return '';
	      }
	      result = string.replace(/([A-Z])|_+/g, function(match, letter) {
	        if (letter == null) {
	          letter = '';
	        }
	        return " " + letter;
	      });
	      return plus.capitalize(result.trim());
	    },
	    undasherize: function(string) {
	      if (string) {
	        return string.split('-').map(plus.capitalize).join(' ');
	      } else {
	        return '';
	      }
	    },
	    underscore: function(string) {
	      if (!string) {
	        return '';
	      }
	      string = string[0].toLowerCase() + string.slice(1);
	      return string.replace(/([A-Z])|-+/g, function(match, letter) {
	        if (letter == null) {
	          letter = '';
	        }
	        return "_" + (letter.toLowerCase());
	      });
	    },
	    valueForKeyPath: function(object, keyPath) {
	      var key, keys, _i, _len;
	      keys = splitKeyPath(keyPath);
	      for (_i = 0, _len = keys.length; _i < _len; _i++) {
	        key = keys[_i];
	        object = object[key];
	        if (object == null) {
	          return;
	        }
	      }
	      return object;
	    },
	    isEqual: function(a, b, aStack, bStack) {
	      if (_.isArray(aStack) && _.isArray(bStack)) {
	        return isEqual(a, b, aStack, bStack);
	      } else {
	        return isEqual(a, b);
	      }
	    },
	    isEqualForProperties: function() {
	      var a, b, properties, property, _i, _len;
	      a = arguments[0], b = arguments[1], properties = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
	      for (_i = 0, _len = properties.length; _i < _len; _i++) {
	        property = properties[_i];
	        if (!_.isEqual(a[property], b[property])) {
	          return false;
	        }
	      }
	      return true;
	    }
	  };
	
	  isEqual = function(a, b, aStack, bStack) {
	    var aCtor, aCtorValid, aElement, aKeyCount, aValue, bCtor, bCtorValid, bKeyCount, bValue, equal, i, key, stackIndex, _i, _len;
	    if (aStack == null) {
	      aStack = [];
	    }
	    if (bStack == null) {
	      bStack = [];
	    }
	    if (a === b) {
	      return _.isEqual(a, b);
	    }
	    if (_.isFunction(a) || _.isFunction(b)) {
	      return _.isEqual(a, b);
	    }
	    stackIndex = aStack.length;
	    while (stackIndex--) {
	      if (aStack[stackIndex] === a) {
	        return bStack[stackIndex] === b;
	      }
	    }
	    aStack.push(a);
	    bStack.push(b);
	    equal = false;
	    if (_.isFunction(a != null ? a.isEqual : void 0)) {
	      equal = a.isEqual(b, aStack, bStack);
	    } else if (_.isFunction(b != null ? b.isEqual : void 0)) {
	      equal = b.isEqual(a, bStack, aStack);
	    } else if (_.isArray(a) && _.isArray(b) && a.length === b.length) {
	      equal = true;
	      for (i = _i = 0, _len = a.length; _i < _len; i = ++_i) {
	        aElement = a[i];
	        if (!isEqual(aElement, b[i], aStack, bStack)) {
	          equal = false;
	          break;
	        }
	      }
	    } else if (_.isRegExp(a) && _.isRegExp(b)) {
	      equal = _.isEqual(a, b);
	    } else if (_.isElement(a) && _.isElement(b)) {
	      equal = a === b;
	    } else if (_.isObject(a) && _.isObject(b)) {
	      aCtor = a.constructor;
	      bCtor = b.constructor;
	      aCtorValid = _.isFunction(aCtor) && aCtor instanceof aCtor;
	      bCtorValid = _.isFunction(bCtor) && bCtor instanceof bCtor;
	      if (aCtor !== bCtor && !(aCtorValid && bCtorValid)) {
	        equal = false;
	      } else {
	        aKeyCount = 0;
	        equal = true;
	        for (key in a) {
	          aValue = a[key];
	          if (!_.has(a, key)) {
	            continue;
	          }
	          aKeyCount++;
	          if (!(_.has(b, key) && isEqual(aValue, b[key], aStack, bStack))) {
	            equal = false;
	            break;
	          }
	        }
	        if (equal) {
	          bKeyCount = 0;
	          for (key in b) {
	            bValue = b[key];
	            if (_.has(b, key)) {
	              bKeyCount++;
	            }
	          }
	          equal = aKeyCount === bKeyCount;
	        }
	      }
	    } else {
	      equal = _.isEqual(a, b);
	    }
	    aStack.pop();
	    bStack.pop();
	    return equal;
	  };
	
	  module.exports = _.extend({}, _, plus);
	
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define('underscore', factory) :
	  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {
	    var current = global._;
	    var exports = global._ = factory();
	    exports.noConflict = function () { global._ = current; return exports; };
	  }()));
	}(this, (function () {
	  //     Underscore.js 1.13.4
	  //     https://underscorejs.org
	  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors
	  //     Underscore may be freely distributed under the MIT license.
	
	  // Current version.
	  var VERSION = '1.13.4';
	
	  // Establish the root object, `window` (`self`) in the browser, `global`
	  // on the server, or `this` in some virtual machines. We use `self`
	  // instead of `window` for `WebWorker` support.
	  var root = (typeof self == 'object' && self.self === self && self) ||
	            (typeof global == 'object' && global.global === global && global) ||
	            Function('return this')() ||
	            {};
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
	  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var push = ArrayProto.push,
	      slice = ArrayProto.slice,
	      toString = ObjProto.toString,
	      hasOwnProperty = ObjProto.hasOwnProperty;
	
	  // Modern feature detection.
	  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
	      supportsDataView = typeof DataView !== 'undefined';
	
	  // All **ECMAScript 5+** native function implementations that we hope to use
	  // are declared here.
	  var nativeIsArray = Array.isArray,
	      nativeKeys = Object.keys,
	      nativeCreate = Object.create,
	      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;
	
	  // Create references to these builtin functions because we override them.
	  var _isNaN = isNaN,
	      _isFinite = isFinite;
	
	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
	
	  // The largest integer that can be represented exactly.
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	
	  // Some functions take a variable number of arguments, or a few expected
	  // arguments at the beginning and then a variable number of values to operate
	  // on. This helper accumulates all remaining arguments past the function’s
	  // argument length (or an explicit `startIndex`), into an array that becomes
	  // the last argument. Similar to ES6’s "rest parameter".
	  function restArguments(func, startIndex) {
	    startIndex = startIndex == null ? func.length - 1 : +startIndex;
	    return function() {
	      var length = Math.max(arguments.length - startIndex, 0),
	          rest = Array(length),
	          index = 0;
	      for (; index < length; index++) {
	        rest[index] = arguments[index + startIndex];
	      }
	      switch (startIndex) {
	        case 0: return func.call(this, rest);
	        case 1: return func.call(this, arguments[0], rest);
	        case 2: return func.call(this, arguments[0], arguments[1], rest);
	      }
	      var args = Array(startIndex + 1);
	      for (index = 0; index < startIndex; index++) {
	        args[index] = arguments[index];
	      }
	      args[startIndex] = rest;
	      return func.apply(this, args);
	    };
	  }
	
	  // Is a given variable an object?
	  function isObject(obj) {
	    var type = typeof obj;
	    return type === 'function' || (type === 'object' && !!obj);
	  }
	
	  // Is a given value equal to null?
	  function isNull(obj) {
	    return obj === null;
	  }
	
	  // Is a given variable undefined?
	  function isUndefined(obj) {
	    return obj === void 0;
	  }
	
	  // Is a given value a boolean?
	  function isBoolean(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  }
	
	  // Is a given value a DOM element?
	  function isElement(obj) {
	    return !!(obj && obj.nodeType === 1);
	  }
	
	  // Internal function for creating a `toString`-based type tester.
	  function tagTester(name) {
	    var tag = '[object ' + name + ']';
	    return function(obj) {
	      return toString.call(obj) === tag;
	    };
	  }
	
	  var isString = tagTester('String');
	
	  var isNumber = tagTester('Number');
	
	  var isDate = tagTester('Date');
	
	  var isRegExp = tagTester('RegExp');
	
	  var isError = tagTester('Error');
	
	  var isSymbol = tagTester('Symbol');
	
	  var isArrayBuffer = tagTester('ArrayBuffer');
	
	  var isFunction = tagTester('Function');
	
	  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
	  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	  var nodelist = root.document && root.document.childNodes;
	  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
	    isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  var isFunction$1 = isFunction;
	
	  var hasObjectTag = tagTester('Object');
	
	  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
	  // In IE 11, the most common among them, this problem also applies to
	  // `Map`, `WeakMap` and `Set`.
	  var hasStringTagBug = (
	        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
	      ),
	      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));
	
	  var isDataView = tagTester('DataView');
	
	  // In IE 10 - Edge 13, we need a different heuristic
	  // to determine whether an object is a `DataView`.
	  function ie10IsDataView(obj) {
	    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
	  }
	
	  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native `Array.isArray`.
	  var isArray = nativeIsArray || tagTester('Array');
	
	  // Internal function to check whether `key` is an own property name of `obj`.
	  function has$1(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  }
	
	  var isArguments = tagTester('Arguments');
	
	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  (function() {
	    if (!isArguments(arguments)) {
	      isArguments = function(obj) {
	        return has$1(obj, 'callee');
	      };
	    }
	  }());
	
	  var isArguments$1 = isArguments;
	
	  // Is a given object a finite number?
	  function isFinite$1(obj) {
	    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
	  }
	
	  // Is the given value `NaN`?
	  function isNaN$1(obj) {
	    return isNumber(obj) && _isNaN(obj);
	  }
	
	  // Predicate-generating function. Often useful outside of Underscore.
	  function constant(value) {
	    return function() {
	      return value;
	    };
	  }
	
	  // Common internal logic for `isArrayLike` and `isBufferLike`.
	  function createSizePropertyCheck(getSizeProperty) {
	    return function(collection) {
	      var sizeProperty = getSizeProperty(collection);
	      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
	    }
	  }
	
	  // Internal helper to generate a function to obtain property `key` from `obj`.
	  function shallowProperty(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  }
	
	  // Internal helper to obtain the `byteLength` property of an object.
	  var getByteLength = shallowProperty('byteLength');
	
	  // Internal helper to determine whether we should spend extensive checks against
	  // `ArrayBuffer` et al.
	  var isBufferLike = createSizePropertyCheck(getByteLength);
	
	  // Is a given value a typed array?
	  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
	  function isTypedArray(obj) {
	    // `ArrayBuffer.isView` is the most future-proof, so use it when available.
	    // Otherwise, fall back on the above regular expression.
	    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
	                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
	  }
	
	  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);
	
	  // Internal helper to obtain the `length` property of an object.
	  var getLength = shallowProperty('length');
	
	  // Internal helper to create a simple lookup structure.
	  // `collectNonEnumProps` used to depend on `_.contains`, but this led to
	  // circular imports. `emulatedSet` is a one-off solution that only works for
	  // arrays of strings.
	  function emulatedSet(keys) {
	    var hash = {};
	    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
	    return {
	      contains: function(key) { return hash[key] === true; },
	      push: function(key) {
	        hash[key] = true;
	        return keys.push(key);
	      }
	    };
	  }
	
	  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
	  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if
	  // needed.
	  function collectNonEnumProps(obj, keys) {
	    keys = emulatedSet(keys);
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;
	
	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);
	
	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
	        keys.push(prop);
	      }
	    }
	  }
	
	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`.
	  function keys(obj) {
	    if (!isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (has$1(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  }
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  function isEmpty(obj) {
	    if (obj == null) return true;
	    // Skip the more expensive `toString`-based type checks if `obj` has no
	    // `.length`.
	    var length = getLength(obj);
	    if (typeof length == 'number' && (
	      isArray(obj) || isString(obj) || isArguments$1(obj)
	    )) return length === 0;
	    return getLength(keys(obj)) === 0;
	  }
	
	  // Returns whether an object has a given set of `key:value` pairs.
	  function isMatch(object, attrs) {
	    var _keys = keys(attrs), length = _keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = _keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  }
	
	  // If Underscore is called as a function, it returns a wrapped object that can
	  // be used OO-style. This wrapper holds altered versions of all functions added
	  // through `_.mixin`. Wrapped objects may be chained.
	  function _$1(obj) {
	    if (obj instanceof _$1) return obj;
	    if (!(this instanceof _$1)) return new _$1(obj);
	    this._wrapped = obj;
	  }
	
	  _$1.VERSION = VERSION;
	
	  // Extracts the result from a wrapped and chained object.
	  _$1.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // Provide unwrapping proxies for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;
	
	  _$1.prototype.toString = function() {
	    return String(this._wrapped);
	  };
	
	  // Internal function to wrap or shallow-copy an ArrayBuffer,
	  // typed array or DataView to a new view, reusing the buffer.
	  function toBufferView(bufferSource) {
	    return new Uint8Array(
	      bufferSource.buffer || bufferSource,
	      bufferSource.byteOffset || 0,
	      getByteLength(bufferSource)
	    );
	  }
	
	  // We use this string twice, so give it a name for minification.
	  var tagDataView = '[object DataView]';
	
	  // Internal recursive comparison function for `_.isEqual`.
	  function eq(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null) return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a) return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
	    return deepEq(a, b, aStack, bStack);
	  }
	
	  // Internal recursive comparison function for `_.isEqual`.
	  function deepEq(a, b, aStack, bStack) {
	    // Unwrap any wrapped objects.
	    if (a instanceof _$1) a = a._wrapped;
	    if (b instanceof _$1) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    // Work around a bug in IE 10 - Edge 13.
	    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
	      if (!isDataView$1(b)) return false;
	      className = tagDataView;
	    }
	    switch (className) {
	      // These types are compared by value.
	      case '[object RegExp]':
	        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN.
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	      case '[object Symbol]':
	        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	      case '[object ArrayBuffer]':
	      case tagDataView:
	        // Coerce to typed array so we can fall through.
	        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
	    }
	
	    var areArrays = className === '[object Array]';
	    if (!areArrays && isTypedArray$1(a)) {
	        var byteLength = getByteLength(a);
	        if (byteLength !== getByteLength(b)) return false;
	        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
	        areArrays = true;
	    }
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;
	
	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
	                               isFunction$1(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var _keys = keys(a), key;
	      length = _keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = _keys[length];
	        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  }
	
	  // Perform a deep comparison to check if two objects are equal.
	  function isEqual(a, b) {
	    return eq(a, b);
	  }
	
	  // Retrieve all the enumerable property names of an object.
	  function allKeys(obj) {
	    if (!isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  }
	
	  // Since the regular `Object.prototype.toString` type tests don't work for
	  // some types in IE 11, we use a fingerprinting heuristic instead, based
	  // on the methods. It's not great, but it's the best we got.
	  // The fingerprint method lists are defined below.
	  function ie11fingerprint(methods) {
	    var length = getLength(methods);
	    return function(obj) {
	      if (obj == null) return false;
	      // `Map`, `WeakMap` and `Set` have no enumerable keys.
	      var keys = allKeys(obj);
	      if (getLength(keys)) return false;
	      for (var i = 0; i < length; i++) {
	        if (!isFunction$1(obj[methods[i]])) return false;
	      }
	      // If we are testing against `WeakMap`, we need to ensure that
	      // `obj` doesn't have a `forEach` method in order to distinguish
	      // it from a regular `Map`.
	      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
	    };
	  }
	
	  // In the interest of compact minification, we write
	  // each string in the fingerprints only once.
	  var forEachName = 'forEach',
	      hasName = 'has',
	      commonInit = ['clear', 'delete'],
	      mapTail = ['get', hasName, 'set'];
	
	  // `Map`, `WeakMap` and `Set` each have slightly different
	  // combinations of the above sublists.
	  var mapMethods = commonInit.concat(forEachName, mapTail),
	      weakMapMethods = commonInit.concat(mapTail),
	      setMethods = ['add'].concat(commonInit, forEachName, hasName);
	
	  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');
	
	  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');
	
	  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');
	
	  var isWeakSet = tagTester('WeakSet');
	
	  // Retrieve the values of an object's properties.
	  function values(obj) {
	    var _keys = keys(obj);
	    var length = _keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[_keys[i]];
	    }
	    return values;
	  }
	
	  // Convert an object into a list of `[key, value]` pairs.
	  // The opposite of `_.object` with one argument.
	  function pairs(obj) {
	    var _keys = keys(obj);
	    var length = _keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [_keys[i], obj[_keys[i]]];
	    }
	    return pairs;
	  }
	
	  // Invert the keys and values of an object. The values must be serializable.
	  function invert(obj) {
	    var result = {};
	    var _keys = keys(obj);
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      result[obj[_keys[i]]] = _keys[i];
	    }
	    return result;
	  }
	
	  // Return a sorted list of the function names available on the object.
	  function functions(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (isFunction$1(obj[key])) names.push(key);
	    }
	    return names.sort();
	  }
	
	  // An internal function for creating assigner functions.
	  function createAssigner(keysFunc, defaults) {
	    return function(obj) {
	      var length = arguments.length;
	      if (defaults) obj = Object(obj);
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!defaults || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  }
	
	  // Extend a given object with all the properties in passed-in object(s).
	  var extend = createAssigner(allKeys);
	
	  // Assigns a given object with all the own properties in the passed-in
	  // object(s).
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  var extendOwn = createAssigner(keys);
	
	  // Fill in a given object with default properties.
	  var defaults = createAssigner(allKeys, true);
	
	  // Create a naked function reference for surrogate-prototype-swapping.
	  function ctor() {
	    return function(){};
	  }
	
	  // An internal function for creating a new object that inherits from another.
	  function baseCreate(prototype) {
	    if (!isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    var Ctor = ctor();
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  }
	
	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  function create(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) extendOwn(result, props);
	    return result;
	  }
	
	  // Create a (shallow-cloned) duplicate of an object.
	  function clone(obj) {
	    if (!isObject(obj)) return obj;
	    return isArray(obj) ? obj.slice() : extend({}, obj);
	  }
	
	  // Invokes `interceptor` with the `obj` and then returns `obj`.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  function tap(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  }
	
	  // Normalize a (deep) property `path` to array.
	  // Like `_.iteratee`, this function can be customized.
	  function toPath$1(path) {
	    return isArray(path) ? path : [path];
	  }
	  _$1.toPath = toPath$1;
	
	  // Internal wrapper for `_.toPath` to enable minification.
	  // Similar to `cb` for `_.iteratee`.
	  function toPath(path) {
	    return _$1.toPath(path);
	  }
	
	  // Internal function to obtain a nested property in `obj` along `path`.
	  function deepGet(obj, path) {
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      if (obj == null) return void 0;
	      obj = obj[path[i]];
	    }
	    return length ? obj : void 0;
	  }
	
	  // Get the value of the (deep) property on `path` from `object`.
	  // If any property in `path` does not exist or if the value is
	  // `undefined`, return `defaultValue` instead.
	  // The `path` is normalized through `_.toPath`.
	  function get(object, path, defaultValue) {
	    var value = deepGet(object, toPath(path));
	    return isUndefined(value) ? defaultValue : value;
	  }
	
	  // Shortcut function for checking if an object has a given property directly on
	  // itself (in other words, not on a prototype). Unlike the internal `has`
	  // function, this public version can also traverse nested properties.
	  function has(obj, path) {
	    path = toPath(path);
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      var key = path[i];
	      if (!has$1(obj, key)) return false;
	      obj = obj[key];
	    }
	    return !!length;
	  }
	
	  // Keep the identity function around for default iteratees.
	  function identity(value) {
	    return value;
	  }
	
	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  function matcher(attrs) {
	    attrs = extendOwn({}, attrs);
	    return function(obj) {
	      return isMatch(obj, attrs);
	    };
	  }
	
	  // Creates a function that, when passed an object, will traverse that object’s
	  // properties down the given `path`, specified as an array of keys or indices.
	  function property(path) {
	    path = toPath(path);
	    return function(obj) {
	      return deepGet(obj, path);
	    };
	  }
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  function optimizeCb(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      // The 2-argument case is omitted because we’re not using it.
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  }
	
	  // An internal function to generate callbacks that can be applied to each
	  // element in a collection, returning the desired result — either `_.identity`,
	  // an arbitrary callback, a property matcher, or a property accessor.
	  function baseIteratee(value, context, argCount) {
	    if (value == null) return identity;
	    if (isFunction$1(value)) return optimizeCb(value, context, argCount);
	    if (isObject(value) && !isArray(value)) return matcher(value);
	    return property(value);
	  }
	
	  // External wrapper for our callback generator. Users may customize
	  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	  // This abstraction hides the internal-only `argCount` argument.
	  function iteratee(value, context) {
	    return baseIteratee(value, context, Infinity);
	  }
	  _$1.iteratee = iteratee;
	
	  // The function we call internally to generate a callback. It invokes
	  // `_.iteratee` if overridden, otherwise `baseIteratee`.
	  function cb(value, context, argCount) {
	    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
	    return baseIteratee(value, context, argCount);
	  }
	
	  // Returns the results of applying the `iteratee` to each element of `obj`.
	  // In contrast to `_.map` it returns an object.
	  function mapObject(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var _keys = keys(obj),
	        length = _keys.length,
	        results = {};
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys[index];
	      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  }
	
	  // Predicate-generating function. Often useful outside of Underscore.
	  function noop(){}
	
	  // Generates a function for a given object that returns a given property.
	  function propertyOf(obj) {
	    if (obj == null) return noop;
	    return function(path) {
	      return get(obj, path);
	    };
	  }
	
	  // Run a function **n** times.
	  function times(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  }
	
	  // Return a random integer between `min` and `max` (inclusive).
	  function random(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  }
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  var now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	  // Internal helper to generate functions for escaping and unescaping strings
	  // to/from HTML interpolation.
	  function createEscaper(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped.
	    var source = '(?:' + keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  }
	
	  // Internal list of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	
	  // Function for escaping strings to HTML interpolation.
	  var _escape = createEscaper(escapeMap);
	
	  // Internal list of HTML entities for unescaping.
	  var unescapeMap = invert(escapeMap);
	
	  // Function for unescaping strings from HTML interpolation.
	  var _unescape = createEscaper(unescapeMap);
	
	  // By default, Underscore uses ERB-style template delimiters. Change the
	  // following template settings to use alternative delimiters.
	  var templateSettings = _$1.templateSettings = {
	    evaluate: /<%([\s\S]+?)%>/g,
	    interpolate: /<%=([\s\S]+?)%>/g,
	    escape: /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `_.templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'": "'",
	    '\\': '\\',
	    '\r': 'r',
	    '\n': 'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  function escapeChar(match) {
	    return '\\' + escapes[match];
	  }
	
	  // In order to prevent third-party code injection through
	  // `_.templateSettings.variable`, we test it against the following regular
	  // expression. It is intentionally a bit more liberal than just matching valid
	  // identifiers, but still prevents possible loopholes through defaults or
	  // destructuring assignment.
	  var bareIdentifier = /^\s*(\w|\$)+\s*$/;
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  function template(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = defaults({}, settings, _$1.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offset.
	      return match;
	    });
	    source += "';\n";
	
	    var argument = settings.variable;
	    if (argument) {
	      // Insure against third-party code injection. (CVE-2021-23358)
	      if (!bareIdentifier.test(argument)) throw new Error(
	        'variable is not a bare identifier: ' + argument
	      );
	    } else {
	      // If a variable is not specified, place data values in local scope.
	      source = 'with(obj||{}){\n' + source + '}\n';
	      argument = 'obj';
	    }
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    var render;
	    try {
	      render = new Function(argument, '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _$1);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  }
	
	  // Traverses the children of `obj` along `path`. If a child is a function, it
	  // is invoked with its parent as context. Returns the value of the final
	  // child, or `fallback` if any child is undefined.
	  function result(obj, path, fallback) {
	    path = toPath(path);
	    var length = path.length;
	    if (!length) {
	      return isFunction$1(fallback) ? fallback.call(obj) : fallback;
	    }
	    for (var i = 0; i < length; i++) {
	      var prop = obj == null ? void 0 : obj[path[i]];
	      if (prop === void 0) {
	        prop = fallback;
	        i = length; // Ensure we don't continue iterating.
	      }
	      obj = isFunction$1(prop) ? prop.call(obj) : prop;
	    }
	    return obj;
	  }
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  function uniqueId(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  }
	
	  // Start chaining a wrapped Underscore object.
	  function chain(obj) {
	    var instance = _$1(obj);
	    instance._chain = true;
	    return instance;
	  }
	
	  // Internal function to execute `sourceFunc` bound to `context` with optional
	  // `args`. Determines whether to execute a function as a constructor or as a
	  // normal function.
	  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (isObject(result)) return result;
	    return self;
	  }
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. `_` acts
	  // as a placeholder by default, allowing any combination of arguments to be
	  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
	  var partial = restArguments(function(func, boundArgs) {
	    var placeholder = partial.placeholder;
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  });
	
	  partial.placeholder = _$1;
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally).
	  var bind = restArguments(function(func, context, args) {
	    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
	    var bound = restArguments(function(callArgs) {
	      return executeBound(func, bound, context, this, args.concat(callArgs));
	    });
	    return bound;
	  });
	
	  // Internal helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object.
	  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var isArrayLike = createSizePropertyCheck(getLength);
	
	  // Internal implementation of a recursive `flatten` function.
	  function flatten$1(input, depth, strict, output) {
	    output = output || [];
	    if (!depth && depth !== 0) {
	      depth = Infinity;
	    } else if (depth <= 0) {
	      return output.concat(input);
	    }
	    var idx = output.length;
	    for (var i = 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
	        // Flatten current level of array or arguments object.
	        if (depth > 1) {
	          flatten$1(value, depth - 1, strict, output);
	          idx = output.length;
	        } else {
	          var j = 0, len = value.length;
	          while (j < len) output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  }
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  var bindAll = restArguments(function(obj, keys) {
	    keys = flatten$1(keys, false, false);
	    var index = keys.length;
	    if (index < 1) throw new Error('bindAll must be passed function names');
	    while (index--) {
	      var key = keys[index];
	      obj[key] = bind(obj[key], obj);
	    }
	    return obj;
	  });
	
	  // Memoize an expensive function by storing its results.
	  function memoize(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  }
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  var delay = restArguments(function(func, wait, args) {
	    return setTimeout(function() {
	      return func.apply(null, args);
	    }, wait);
	  });
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  var defer = partial(delay, _$1, 1);
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  function throttle(func, wait, options) {
	    var timeout, context, args, result;
	    var previous = 0;
	    if (!options) options = {};
	
	    var later = function() {
	      previous = options.leading === false ? 0 : now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	
	    var throttled = function() {
	      var _now = now();
	      if (!previous && options.leading === false) previous = _now;
	      var remaining = wait - (_now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = _now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	
	    throttled.cancel = function() {
	      clearTimeout(timeout);
	      previous = 0;
	      timeout = context = args = null;
	    };
	
	    return throttled;
	  }
	
	  // When a sequence of calls of the returned function ends, the argument
	  // function is triggered. The end of a sequence is defined by the `wait`
	  // parameter. If `immediate` is passed, the argument function will be
	  // triggered at the beginning of the sequence instead of at the end.
	  function debounce(func, wait, immediate) {
	    var timeout, previous, args, result, context;
	
	    var later = function() {
	      var passed = now() - previous;
	      if (wait > passed) {
	        timeout = setTimeout(later, wait - passed);
	      } else {
	        timeout = null;
	        if (!immediate) result = func.apply(context, args);
	        // This check is needed because `func` can recursively invoke `debounced`.
	        if (!timeout) args = context = null;
	      }
	    };
	
	    var debounced = restArguments(function(_args) {
	      context = this;
	      args = _args;
	      previous = now();
	      if (!timeout) {
	        timeout = setTimeout(later, wait);
	        if (immediate) result = func.apply(context, args);
	      }
	      return result;
	    });
	
	    debounced.cancel = function() {
	      clearTimeout(timeout);
	      timeout = args = context = null;
	    };
	
	    return debounced;
	  }
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  function wrap(func, wrapper) {
	    return partial(wrapper, func);
	  }
	
	  // Returns a negated version of the passed-in predicate.
	  function negate(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  }
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  function compose() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  }
	
	  // Returns a function that will only be executed on and after the Nth call.
	  function after(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  }
	
	  // Returns a function that will only be executed up to (but not including) the
	  // Nth call.
	  function before(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  }
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  var once = partial(before, 2);
	
	  // Returns the first key on an object that passes a truth test.
	  function findKey(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = keys(obj), key;
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      key = _keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  }
	
	  // Internal function to generate `_.findIndex` and `_.findLastIndex`.
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }
	
	  // Returns the first index on an array-like that passes a truth test.
	  var findIndex = createPredicateIndexFinder(1);
	
	  // Returns the last index on an array-like that passes a truth test.
	  var findLastIndex = createPredicateIndexFinder(-1);
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  function sortedIndex(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  }
	
	  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	          i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), isNaN$1);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  var indexOf = createIndexFinder(1, findIndex, sortedIndex);
	
	  // Return the position of the last occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  var lastIndexOf = createIndexFinder(-1, findLastIndex);
	
	  // Return the first value which passes a truth test.
	  function find(obj, predicate, context) {
	    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
	    var key = keyFinder(obj, predicate, context);
	    if (key !== void 0 && key !== -1) return obj[key];
	  }
	
	  // Convenience version of a common use case of `_.find`: getting the first
	  // object containing specific `key:value` pairs.
	  function findWhere(obj, attrs) {
	    return find(obj, matcher(attrs));
	  }
	
	  // The cornerstone for collection functions, an `each`
	  // implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  function each(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var _keys = keys(obj);
	      for (i = 0, length = _keys.length; i < length; i++) {
	        iteratee(obj[_keys[i]], _keys[i], obj);
	      }
	    }
	    return obj;
	  }
	
	  // Return the results of applying the iteratee to each element.
	  function map(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  }
	
	  // Internal helper to create a reducing function, iterating left or right.
	  function createReduce(dir) {
	    // Wrap code that reassigns argument variables in a separate function than
	    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	    var reducer = function(obj, iteratee, memo, initial) {
	      var _keys = !isArrayLike(obj) && keys(obj),
	          length = (_keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      if (!initial) {
	        memo = obj[_keys ? _keys[index] : index];
	        index += dir;
	      }
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = _keys ? _keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    };
	
	    return function(obj, iteratee, memo, context) {
	      var initial = arguments.length >= 3;
	      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	    };
	  }
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  var reduce = createReduce(1);
	
	  // The right-associative version of reduce, also known as `foldr`.
	  var reduceRight = createReduce(-1);
	
	  // Return all the elements that pass a truth test.
	  function filter(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  }
	
	  // Return all the elements for which a truth test fails.
	  function reject(obj, predicate, context) {
	    return filter(obj, negate(cb(predicate)), context);
	  }
	
	  // Determine whether all of the elements pass a truth test.
	  function every(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  }
	
	  // Determine if at least one element in the object passes a truth test.
	  function some(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  }
	
	  // Determine if the array or object contains a given item (using `===`).
	  function contains(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return indexOf(obj, item, fromIndex) >= 0;
	  }
	
	  // Invoke a method (with arguments) on every item in a collection.
	  var invoke = restArguments(function(obj, path, args) {
	    var contextPath, func;
	    if (isFunction$1(path)) {
	      func = path;
	    } else {
	      path = toPath(path);
	      contextPath = path.slice(0, -1);
	      path = path[path.length - 1];
	    }
	    return map(obj, function(context) {
	      var method = func;
	      if (!method) {
	        if (contextPath && contextPath.length) {
	          context = deepGet(context, contextPath);
	        }
	        if (context == null) return void 0;
	        method = context[path];
	      }
	      return method == null ? method : method.apply(context, args);
	    });
	  });
	
	  // Convenience version of a common use case of `_.map`: fetching a property.
	  function pluck(obj, key) {
	    return map(obj, property(key));
	  }
	
	  // Convenience version of a common use case of `_.filter`: selecting only
	  // objects containing specific `key:value` pairs.
	  function where(obj, attrs) {
	    return filter(obj, matcher(attrs));
	  }
	
	  // Return the maximum element (or element-based computation).
	  function max(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
	      obj = isArrayLike(obj) ? obj : values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  }
	
	  // Return the minimum element (or element-based computation).
	  function min(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
	      obj = isArrayLike(obj) ? obj : values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  }
	
	  // Safely create a real, live array from anything iterable.
	  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	  function toArray(obj) {
	    if (!obj) return [];
	    if (isArray(obj)) return slice.call(obj);
	    if (isString(obj)) {
	      // Keep surrogate pair characters together.
	      return obj.match(reStrSymbol);
	    }
	    if (isArrayLike(obj)) return map(obj, identity);
	    return values(obj);
	  }
	
	  // Sample **n** random values from a collection using the modern version of the
	  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `_.map`.
	  function sample(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = values(obj);
	      return obj[random(obj.length - 1)];
	    }
	    var sample = toArray(obj);
	    var length = getLength(sample);
	    n = Math.max(Math.min(n, length), 0);
	    var last = length - 1;
	    for (var index = 0; index < n; index++) {
	      var rand = random(index, last);
	      var temp = sample[index];
	      sample[index] = sample[rand];
	      sample[rand] = temp;
	    }
	    return sample.slice(0, n);
	  }
	
	  // Shuffle a collection.
	  function shuffle(obj) {
	    return sample(obj, Infinity);
	  }
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  function sortBy(obj, iteratee, context) {
	    var index = 0;
	    iteratee = cb(iteratee, context);
	    return pluck(map(obj, function(value, key, list) {
	      return {
	        value: value,
	        index: index++,
	        criteria: iteratee(value, key, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  }
	
	  // An internal function used for aggregate "group by" operations.
	  function group(behavior, partition) {
	    return function(obj, iteratee, context) {
	      var result = partition ? [[], []] : {};
	      iteratee = cb(iteratee, context);
	      each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  }
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  var groupBy = group(function(result, value, key) {
	    if (has$1(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for
	  // when you know that your index values will be unique.
	  var indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  var countBy = group(function(result, value, key) {
	    if (has$1(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Split a collection into two arrays: one whose elements all pass the given
	  // truth test, and one whose elements all do not pass the truth test.
	  var partition = group(function(result, value, pass) {
	    result[pass ? 0 : 1].push(value);
	  }, true);
	
	  // Return the number of elements in a collection.
	  function size(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : keys(obj).length;
	  }
	
	  // Internal `_.pick` helper function to determine whether `key` is an enumerable
	  // property name of `obj`.
	  function keyInObj(value, key, obj) {
	    return key in obj;
	  }
	
	  // Return a copy of the object only containing the allowed properties.
	  var pick = restArguments(function(obj, keys) {
	    var result = {}, iteratee = keys[0];
	    if (obj == null) return result;
	    if (isFunction$1(iteratee)) {
	      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
	      keys = allKeys(obj);
	    } else {
	      iteratee = keyInObj;
	      keys = flatten$1(keys, false, false);
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  });
	
	  // Return a copy of the object without the disallowed properties.
	  var omit = restArguments(function(obj, keys) {
	    var iteratee = keys[0], context;
	    if (isFunction$1(iteratee)) {
	      iteratee = negate(iteratee);
	      if (keys.length > 1) context = keys[1];
	    } else {
	      keys = map(flatten$1(keys, false, false), String);
	      iteratee = function(value, key) {
	        return !contains(keys, key);
	      };
	    }
	    return pick(obj, iteratee, context);
	  });
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  function initial(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  }
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. The **guard** check allows it to work with `_.map`.
	  function first(array, n, guard) {
	    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
	    if (n == null || guard) return array[0];
	    return initial(array, array.length - n);
	  }
	
	  // Returns everything but the first entry of the `array`. Especially useful on
	  // the `arguments` object. Passing an **n** will return the rest N values in the
	  // `array`.
	  function rest(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  }
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  function last(array, n, guard) {
	    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
	    if (n == null || guard) return array[array.length - 1];
	    return rest(array, Math.max(0, array.length - n));
	  }
	
	  // Trim out all falsy values from an array.
	  function compact(array) {
	    return filter(array, Boolean);
	  }
	
	  // Flatten out an array, either recursively (by default), or up to `depth`.
	  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
	  function flatten(array, depth) {
	    return flatten$1(array, depth, false);
	  }
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  var difference = restArguments(function(array, rest) {
	    rest = flatten$1(rest, true, true);
	    return filter(array, function(value){
	      return !contains(rest, value);
	    });
	  });
	
	  // Return a version of the array that does not contain the specified value(s).
	  var without = restArguments(function(array, otherArrays) {
	    return difference(array, otherArrays);
	  });
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // The faster algorithm will not work with an iteratee if the iteratee
	  // is not a one-to-one function, so providing an iteratee will disable
	  // the faster algorithm.
	  function uniq(array, isSorted, iteratee, context) {
	    if (!isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted && !iteratee) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  }
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  var union = restArguments(function(arrays) {
	    return uniq(flatten$1(arrays, true, true));
	  });
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  function intersection(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (contains(result, item)) continue;
	      var j;
	      for (j = 1; j < argsLength; j++) {
	        if (!contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  }
	
	  // Complement of zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices.
	  function unzip(array) {
	    var length = (array && max(array, getLength).length) || 0;
	    var result = Array(length);
	
	    for (var index = 0; index < length; index++) {
	      result[index] = pluck(array, index);
	    }
	    return result;
	  }
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  var zip = restArguments(unzip);
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.
	  function object(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  }
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](https://docs.python.org/library/functions.html#range).
	  function range(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    if (!step) {
	      step = stop < start ? -1 : 1;
	    }
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  }
	
	  // Chunk a single array into multiple arrays, each containing `count` or fewer
	  // items.
	  function chunk(array, count) {
	    if (count == null || count < 1) return [];
	    var result = [];
	    var i = 0, length = array.length;
	    while (i < length) {
	      result.push(slice.call(array, i, i += count));
	    }
	    return result;
	  }
	
	  // Helper function to continue chaining intermediate results.
	  function chainResult(instance, obj) {
	    return instance._chain ? _$1(obj).chain() : obj;
	  }
	
	  // Add your own custom functions to the Underscore object.
	  function mixin(obj) {
	    each(functions(obj), function(name) {
	      var func = _$1[name] = obj[name];
	      _$1.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return chainResult(this, func.apply(_$1, args));
	      };
	    });
	    return _$1;
	  }
	
	  // Add all mutator `Array` functions to the wrapper.
	  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _$1.prototype[name] = function() {
	      var obj = this._wrapped;
	      if (obj != null) {
	        method.apply(obj, arguments);
	        if ((name === 'shift' || name === 'splice') && obj.length === 0) {
	          delete obj[0];
	        }
	      }
	      return chainResult(this, obj);
	    };
	  });
	
	  // Add all accessor `Array` functions to the wrapper.
	  each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _$1.prototype[name] = function() {
	      var obj = this._wrapped;
	      if (obj != null) obj = method.apply(obj, arguments);
	      return chainResult(this, obj);
	    };
	  });
	
	  // Named Exports
	
	  var allExports = {
	    __proto__: null,
	    VERSION: VERSION,
	    restArguments: restArguments,
	    isObject: isObject,
	    isNull: isNull,
	    isUndefined: isUndefined,
	    isBoolean: isBoolean,
	    isElement: isElement,
	    isString: isString,
	    isNumber: isNumber,
	    isDate: isDate,
	    isRegExp: isRegExp,
	    isError: isError,
	    isSymbol: isSymbol,
	    isArrayBuffer: isArrayBuffer,
	    isDataView: isDataView$1,
	    isArray: isArray,
	    isFunction: isFunction$1,
	    isArguments: isArguments$1,
	    isFinite: isFinite$1,
	    isNaN: isNaN$1,
	    isTypedArray: isTypedArray$1,
	    isEmpty: isEmpty,
	    isMatch: isMatch,
	    isEqual: isEqual,
	    isMap: isMap,
	    isWeakMap: isWeakMap,
	    isSet: isSet,
	    isWeakSet: isWeakSet,
	    keys: keys,
	    allKeys: allKeys,
	    values: values,
	    pairs: pairs,
	    invert: invert,
	    functions: functions,
	    methods: functions,
	    extend: extend,
	    extendOwn: extendOwn,
	    assign: extendOwn,
	    defaults: defaults,
	    create: create,
	    clone: clone,
	    tap: tap,
	    get: get,
	    has: has,
	    mapObject: mapObject,
	    identity: identity,
	    constant: constant,
	    noop: noop,
	    toPath: toPath$1,
	    property: property,
	    propertyOf: propertyOf,
	    matcher: matcher,
	    matches: matcher,
	    times: times,
	    random: random,
	    now: now,
	    escape: _escape,
	    unescape: _unescape,
	    templateSettings: templateSettings,
	    template: template,
	    result: result,
	    uniqueId: uniqueId,
	    chain: chain,
	    iteratee: iteratee,
	    partial: partial,
	    bind: bind,
	    bindAll: bindAll,
	    memoize: memoize,
	    delay: delay,
	    defer: defer,
	    throttle: throttle,
	    debounce: debounce,
	    wrap: wrap,
	    negate: negate,
	    compose: compose,
	    after: after,
	    before: before,
	    once: once,
	    findKey: findKey,
	    findIndex: findIndex,
	    findLastIndex: findLastIndex,
	    sortedIndex: sortedIndex,
	    indexOf: indexOf,
	    lastIndexOf: lastIndexOf,
	    find: find,
	    detect: find,
	    findWhere: findWhere,
	    each: each,
	    forEach: each,
	    map: map,
	    collect: map,
	    reduce: reduce,
	    foldl: reduce,
	    inject: reduce,
	    reduceRight: reduceRight,
	    foldr: reduceRight,
	    filter: filter,
	    select: filter,
	    reject: reject,
	    every: every,
	    all: every,
	    some: some,
	    any: some,
	    contains: contains,
	    includes: contains,
	    include: contains,
	    invoke: invoke,
	    pluck: pluck,
	    where: where,
	    max: max,
	    min: min,
	    shuffle: shuffle,
	    sample: sample,
	    sortBy: sortBy,
	    groupBy: groupBy,
	    indexBy: indexBy,
	    countBy: countBy,
	    partition: partition,
	    toArray: toArray,
	    size: size,
	    pick: pick,
	    omit: omit,
	    first: first,
	    head: first,
	    take: first,
	    initial: initial,
	    last: last,
	    rest: rest,
	    tail: rest,
	    drop: rest,
	    compact: compact,
	    flatten: flatten,
	    without: without,
	    uniq: uniq,
	    unique: uniq,
	    union: union,
	    intersection: intersection,
	    difference: difference,
	    unzip: unzip,
	    transpose: unzip,
	    zip: zip,
	    object: object,
	    range: range,
	    chunk: chunk,
	    mixin: mixin,
	    'default': _$1
	  };
	
	  // Default Export
	
	  // Add all of the Underscore functions to the wrapper object.
	  var _ = mixin(allExports);
	  // Legacy Node.js API.
	  _._ = _;
	
	  return _;
	
	})));
	//# sourceMappingURL=underscore-umd.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, Birch, CompositeDisposable, DateTime, Disposable, Emitter, Item, ItemBuffer, ItemPath, ItemSerializer, Mutation, Outline, OutlineEditor, OutlineEditorNative, Selection, StyleSheet, _, assert, flatten, moment, ref, ref1, shortid, stringHash, util,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	ref = __webpack_require__(1), Outline = ref.Outline, Item = ref.Item, AttributedString = ref.AttributedString, Mutation = ref.Mutation, ItemSerializer = ref.ItemSerializer, ItemPath = ref.ItemPath, DateTime = ref.DateTime, shortid = ref.shortid, util = ref.util;
	
	ref1 = __webpack_require__(242), Emitter = ref1.Emitter, CompositeDisposable = ref1.CompositeDisposable, Disposable = ref1.Disposable;
	
	OutlineEditorNative = __webpack_require__(258);
	
	StyleSheet = __webpack_require__(259);
	
	ItemBuffer = __webpack_require__(356);
	
	stringHash = __webpack_require__(240);
	
	flatten = __webpack_require__(361);
	
	Selection = __webpack_require__(359);
	
	_ = __webpack_require__(255);
	
	moment = __webpack_require__(362);
	
	Birch = __webpack_require__(252);
	
	assert = util.assert;
	
	__webpack_require__(499);
	
	OutlineEditor = (function() {
	
	  /*
	  Section: Construction
	   */
	  function OutlineEditor(outline, styleSheet, nativeEditor) {
	    var undoManager;
	    this.styleSheet = styleSheet != null ? styleSheet : new StyleSheet();
	    this.nativeEditor = nativeEditor;
	    this.id = shortid();
	    this.emitter = new Emitter;
	    this.isUpdatingNativeBuffer = 0;
	    this.isUpdatingItemBuffer = 0;
	    this.subscriptions = new CompositeDisposable;
	    this.itemBuffer = new ItemBuffer(outline, this);
	    if (this.nativeEditor == null) {
	      this.nativeEditor = new OutlineEditorNative(this);
	    }
	    this.styleSheetComputedStyleCache = {};
	    this.maintainScrollPointCount = 0;
	    this.subscriptions.add(this.itemBuffer.onDidBeginChanges((function(_this) {
	      return function() {
	        return _this.nativeEditor.beginEditing();
	      };
	    })(this)));
	    this.subscriptions.add(this.itemBuffer.onDidChange((function(_this) {
	      return function(e) {
	        var nsrange;
	        if (!_this.isUpdatingItemBuffer) {
	          _this.isUpdatingNativeBuffer++;
	          nsrange = {
	            location: e.location,
	            length: e.replacedLength
	          };
	          _this.nativeEditor.replaceCharactersInRangeWithString(nsrange, e.insertedString);
	          return _this.isUpdatingNativeBuffer--;
	        }
	      };
	    })(this)));
	    this.subscriptions.add(this.itemBuffer.onDidEndChanges((function(_this) {
	      return function() {
	        return _this.nativeEditor.endEditing();
	      };
	    })(this)));
	    this.subscriptions.add(this.outline.onWillReload(this._outlineWillReload.bind(this)));
	    this.subscriptions.add(this.outline.onDidReload(this._outlineDidReload.bind(this)));
	    this.subscriptions.add(this.itemBuffer.onDidDestroy((function(_this) {
	      return function() {
	        return _this.destroy();
	      };
	    })(this)));
	    undoManager = this.outline.undoManager;
	    this.subscriptions.add(undoManager.onDidOpenUndoGroup((function(_this) {
	      return function() {
	        if (!undoManager.isUndoing && !undoManager.isRedoing) {
	          return undoManager.setUndoGroupMetadata(_this.id + "undoSelection", _this.selection);
	        }
	      };
	    })(this)));
	    this.subscriptions.add(undoManager.onWillUndo((function(_this) {
	      return function(undoGroupMetadata) {
	        undoManager.setUndoGroupMetadata(_this.id + "redoSelection", _this.selection);
	        return _this._beginMaintainScrollPoint();
	      };
	    })(this)));
	    this.subscriptions.add(undoManager.onDidUndo((function(_this) {
	      return function(undoGroupMetadata) {
	        _this.forceSelectionDisplayed(undoGroupMetadata != null ? undoGroupMetadata[_this.id + "undoSelection"] : void 0);
	        _this._endMaintainScrollPoint();
	        return _this.scrollRangeToVisible();
	      };
	    })(this)));
	    this.subscriptions.add(undoManager.onDidOpenUndoGroup((function(_this) {
	      return function() {
	        if (!undoManager.isUndoing && !undoManager.isRedoing) {
	          return undoManager.setUndoGroupMetadata(_this.id + "undoSelection", _this.selection);
	        }
	      };
	    })(this)));
	    this.subscriptions.add(undoManager.onWillRedo((function(_this) {
	      return function(undoGroupMetadata) {
	        return _this._beginMaintainScrollPoint();
	      };
	    })(this)));
	    this.subscriptions.add(undoManager.onDidRedo((function(_this) {
	      return function(undoGroupMetadata) {
	        _this.forceSelectionDisplayed(undoGroupMetadata != null ? undoGroupMetadata[_this.id + "redoSelection"] : void 0);
	        _this._endMaintainScrollPoint();
	        return _this.scrollRangeToVisible();
	      };
	    })(this)));
	    this.editorStyleElement = {
	      parentNode: null,
	      computedStyleKeyPath: null,
	      tagName: 'editor',
	      attributes: {}
	    };
	    this.itemStyleElement = {
	      parentNode: this.editorStyleElement,
	      computedStyleKeyPath: null,
	      tagName: 'item',
	      attributes: {},
	      item: null
	    };
	    this.runStyleElement = {
	      parentNode: this.itemStyleElement,
	      computedStyleKeyPath: null,
	      tagName: 'run',
	      attributes: {}
	    };
	    this.hoistedItem = this.outline.root;
	  }
	
	  OutlineEditor.prototype.destroy = function() {
	    if (!this.destroyed) {
	      this.itemBuffer.destroy();
	      this.subscriptions.dispose();
	      this.emitter.emit('did-destroy');
	      return this.destroyed = true;
	    }
	  };
	
	
	  /*
	  Section: Finding Outline Editors
	   */
	
	  OutlineEditor.outlineEditors = [];
	
	  OutlineEditor.getOutlineEditors = function() {
	    return this.outlineEditors.slice();
	  };
	
	  OutlineEditor.getOutlineEditorForOutline = function(outline) {
	    var each, i, len, outlineEditors, ref2;
	    outlineEditors = [];
	    ref2 = this.outlineEditors;
	    for (i = 0, len = ref2.length; i < len; i++) {
	      each = ref2[i];
	      if (each.outline === outline) {
	        outlineEditors.push(each);
	      }
	    }
	    return outlineEditors;
	  };
	
	  OutlineEditor.getOutlineEditorsForOutline = function(outline) {
	    var each, i, len, outlineEditors, ref2;
	    outlineEditors = [];
	    ref2 = this.outlineEditors;
	    for (i = 0, len = ref2.length; i < len; i++) {
	      each = ref2[i];
	      if (each.outline === outline) {
	        outlineEditors.push(each);
	      }
	    }
	    return outlineEditors;
	  };
	
	  OutlineEditor.addOutlineEditor = function(outlineEditor, options) {
	    if (options == null) {
	      options = {};
	    }
	    return this.addOutlineEditorAtIndex(outlineEditor, this.outlineEditors.length, options);
	  };
	
	  OutlineEditor.addOutlineEditorAtIndex = function(outlineEditor, index, options) {
	    if (options == null) {
	      options = {};
	    }
	    this.outlineEditors.splice(index, 0, outlineEditor);
	    outlineEditor.onDidDestroy((function(_this) {
	      return function() {
	        return _this.removeOutlineEditor(outlineEditor);
	      };
	    })(this));
	    return outlineEditor;
	  };
	
	  OutlineEditor.removeOutlineEditor = function(outlineEditor) {
	    var index;
	    index = this.outlineEditors.indexOf(outlineEditor);
	    if (index !== -1) {
	      return this.removeOutlineEditorAtIndex(index);
	    }
	  };
	
	  OutlineEditor.removeOutlineEditorAtIndex = function(index, options) {
	    var outlineEditor;
	    if (options == null) {
	      options = {};
	    }
	    outlineEditor = this.outlineEditors.splice(index, 1)[0];
	    return outlineEditor != null ? outlineEditor.destroy() : void 0;
	  };
	
	
	  /*
	  Section: Events
	   */
	
	  OutlineEditor.prototype.onDidChangeSelection = function(callback) {
	    return this.emitter.on('did-change-selection', callback);
	  };
	
	  OutlineEditor.prototype.onDidChangeHoistedItem = function(callback) {
	    return this.itemBuffer.onDidChangeHoistedItem(callback);
	  };
	
	  OutlineEditor.prototype.onDidChangeFocusedItem = function(callback) {
	    return this.itemBuffer.onDidChangeFocusedItem(callback);
	  };
	
	  OutlineEditor.prototype.onDidChangeItemPathFilter = function(callback) {
	    return this.itemBuffer.onDidChangeItemPathFilter(callback);
	  };
	
	  OutlineEditor.prototype.onDidDestroy = function(callback) {
	    return this.emitter.on('did-destroy', callback);
	  };
	
	
	  /*
	  Section: Outline
	   */
	
	  OutlineEditor.prototype.outline = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'outline', {
	    get: function() {
	      return this.itemBuffer.outline;
	    }
	  });
	
	
	  /*
	  Section: State
	   */
	
	  OutlineEditor.prototype.hoist = function(item) {
	    return this.hoistedItem = item != null ? item : this.selection.startItem;
	  };
	
	  OutlineEditor.prototype.unhoist = function() {
	    return this.hoistedItem = this.outline.root;
	  };
	
	  OutlineEditor.prototype.focusIn = function(item) {
	    item = item != null ? item : this.selection.startItem;
	    if (this.focusedItem === item && item.hasChildren) {
	      return this.hoistedItem = item;
	    } else {
	      return this.focusedItem = item != null ? item : this.selection.startItem;
	    }
	  };
	
	  OutlineEditor.prototype.focusOut = function() {
	    var focusedItem, newFocusItem, newSelectedWindowY, scrollDocumentY, selectedDocumentY, selectedWindowY, selection, startItem;
	    selection = this.selection;
	    focusedItem = this.focusedItem;
	    startItem = selection.startItem;
	    scrollDocumentY = this.scrollPoint.y;
	    selectedDocumentY = this.getRectForRange(selection.location, 1).y;
	    selectedWindowY = selectedDocumentY - scrollDocumentY;
	    if (focusedItem) {
	      newFocusItem = focusedItem.parent;
	    } else {
	      newFocusItem = this.hoistedItem;
	    }
	    if (newFocusItem.isOutlineRoot) {
	      this.hoistedItem = newFocusItem;
	    } else {
	      this.focusedItem = newFocusItem;
	    }
	    startItem = this.getDisplayedSelfOrAncestor(startItem);
	    this.moveSelectionToItems(startItem);
	    scrollDocumentY = this.scrollPoint.y;
	    selectedDocumentY = this.getRectForRange(this.selection.location, 1).y;
	    newSelectedWindowY = selectedDocumentY - scrollDocumentY;
	    return this.scrollBy(0, newSelectedWindowY - selectedWindowY);
	  };
	
	  OutlineEditor.prototype.hoistedItem = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'hoistedItem', {
	    get: function() {
	      return this.itemBuffer.hoistedItem;
	    },
	    set: function(item) {
	      return this.editorState = {
	        hoistedItem: item
	      };
	    }
	  });
	
	  OutlineEditor.prototype.focusedItem = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'focusedItem', {
	    get: function() {
	      return this.itemBuffer.focusedItem;
	    },
	    set: function(item) {
	      return this.editorState = {
	        focusedItem: item
	      };
	    }
	  });
	
	  OutlineEditor.prototype.itemPathFilter = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'itemPathFilter', {
	    get: function() {
	      return this.itemBuffer.itemPathFilter;
	    },
	    set: function(itemPathFilter) {
	      return this.editorState = {
	        itemPathFilter: itemPathFilter
	      };
	    }
	  });
	
	  Object.defineProperty(OutlineEditor.prototype, 'editorState', {
	    get: function() {
	      return this.itemBuffer.bufferState;
	    },
	    set: function(editorState) {
	      if (this.itemPathFilter) {
	        this.editorStyleElement.attributes['searching'] = null;
	      } else {
	        this.editorStyleElement.attributes['searching'] = 'true';
	      }
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          return _this.itemBuffer.bufferState = editorState;
	        };
	      })(this));
	      this.moveSelectionToRange(0, 0);
	      return this.scrollRangeToVisible();
	    }
	  });
	
	  OutlineEditor.prototype.refreshFilter = function() {
	    var selection;
	    selection = this.selection;
	    selection.prepareForMove();
	    this.maintainScrollPoint((function(_this) {
	      return function() {
	        return _this.itemBuffer.bufferState = _this.itemBuffer.bufferState;
	      };
	    })(this));
	    selection.restoreAfterMove();
	    this.moveSelectionToItems(selection);
	    return this.scrollRangeToVisible();
	  };
	
	  OutlineEditor.prototype.revealItem = function() {
	    var selectedItems, selection;
	    selection = this.selection;
	    selectedItems = selection.displayedSelectedItems;
	    selection.prepareForMove();
	    this.editorState = {
	      hoistedItem: null,
	      itemPathFilter: ''
	    };
	    this.forceDisplayed(selectedItems, true);
	    selection.restoreAfterMove();
	    this.moveSelectionToItems(selection);
	    return this.scrollRangeToVisible();
	  };
	
	
	  /*
	  Section: Folding Items
	   */
	
	  OutlineEditor.prototype.fold = function(items, completely, allowCollapseAncestor) {
	    var branches, each, expandedParentBranches, parentBranches;
	    if (completely == null) {
	      completely = false;
	    }
	    if (allowCollapseAncestor == null) {
	      allowCollapseAncestor = true;
	    }
	    if (items == null) {
	      items = this.selection.displayedSelectedItems;
	    }
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    branches = Item.getCommonAncestors(items);
	    parentBranches = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = branches.length; i < len; i++) {
	        each = branches[i];
	        if (each.hasChildren) {
	          results.push(each);
	        }
	      }
	      return results;
	    })();
	    if (parentBranches.length) {
	      expandedParentBranches = (function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = parentBranches.length; i < len; i++) {
	          each = parentBranches[i];
	          if (this.isExpanded(each)) {
	            results.push(each);
	          }
	        }
	        return results;
	      }).call(this);
	      if (parentBranches.length === expandedParentBranches.length) {
	        return this.collapse(parentBranches, completely, allowCollapseAncestor);
	      } else {
	        return this.expand(parentBranches, completely, allowCollapseAncestor);
	      }
	    } else if (allowCollapseAncestor) {
	      return this.collapse(items, completely);
	    }
	  };
	
	  OutlineEditor.prototype.expand = function(items, completely, allowExpandAncestor) {
	    var ancestor, branches, each, expandableParentBranches, parentBranches;
	    if (completely == null) {
	      completely = false;
	    }
	    if (allowExpandAncestor == null) {
	      allowExpandAncestor = true;
	    }
	    if (items == null) {
	      items = this.selection.displayedSelectedItems;
	    }
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    branches = Item.getCommonAncestors(items);
	    parentBranches = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = branches.length; i < len; i++) {
	        each = branches[i];
	        if (each.hasChildren) {
	          results.push(each);
	        }
	      }
	      return results;
	    })();
	    if (!parentBranches.length) {
	      if (ancestor = this.getDisplayedAncestor(items[0])) {
	        parentBranches = [ancestor];
	      }
	    }
	    if (completely) {
	      return this.setExpandedState(parentBranches, true, true);
	    } else {
	      expandableParentBranches = (function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = parentBranches.length; i < len; i++) {
	          each = parentBranches[i];
	          if (!this.isExpanded(each)) {
	            results.push(each);
	          }
	        }
	        return results;
	      }).call(this);
	      if (expandableParentBranches.length) {
	        return this.setExpandedState(expandableParentBranches, true);
	      }
	    }
	  };
	
	  OutlineEditor.prototype.collapse = function(items, completely, allowCollapseAncestor) {
	    var ancestor, branches, collapsableParentBranches, each, parentBranches, selection;
	    if (completely == null) {
	      completely = false;
	    }
	    if (allowCollapseAncestor == null) {
	      allowCollapseAncestor = true;
	    }
	    if (items == null) {
	      items = this.selection.displayedSelectedItems;
	    }
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    branches = Item.getCommonAncestors(items);
	    parentBranches = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = branches.length; i < len; i++) {
	        each = branches[i];
	        if (each.hasChildren) {
	          results.push(each);
	        }
	      }
	      return results;
	    })();
	    if (!parentBranches.length) {
	      if (ancestor = this.getDisplayedAncestor(items[0])) {
	        selection = this.selection;
	        this.moveSelectionToItems(ancestor, ancestor.bodyString.length);
	        this.collapse(null, completely);
	        return;
	      }
	    }
	    if (completely) {
	      return this.setExpandedState(parentBranches, false, true);
	    } else {
	      collapsableParentBranches = (function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = parentBranches.length; i < len; i++) {
	          each = parentBranches[i];
	          if (!this.isCollapsed(each)) {
	            results.push(each);
	          }
	        }
	        return results;
	      }).call(this);
	      if (collapsableParentBranches.length) {
	        return this.setExpandedState(collapsableParentBranches, false);
	      }
	    }
	  };
	
	  OutlineEditor.prototype.increaseExpansionLevel = function() {
	    return this.setExpansionLevel(this.getExpansionLevel() + 1);
	  };
	
	  OutlineEditor.prototype.decreaseExpansionLevel = function() {
	    return this.setExpansionLevel(this.getExpansionLevel() - 1);
	  };
	
	  OutlineEditor.prototype.getExpansionLevel = function() {
	    var maxCollapsedDepth, maxItemDepth;
	    maxCollapsedDepth = Number.MAX_VALUE;
	    maxItemDepth = 0;
	    this.itemBuffer.iterateLines(0, this.itemBuffer.getLineCount(), (function(_this) {
	      return function(line) {
	        var depth, item;
	        item = line.item;
	        depth = item.depth;
	        maxItemDepth = Math.max(depth, maxItemDepth);
	        if (item.hasChildren && !_this.isExpanded(item)) {
	          return maxCollapsedDepth = Math.max(depth, maxCollapsedDepth);
	        }
	      };
	    })(this));
	    if (maxCollapsedDepth === Number.MAX_VALUE) {
	      return maxItemDepth;
	    } else {
	      return maxCollapsedDepth;
	    }
	  };
	
	  OutlineEditor.prototype.setExpansionLevel = function(level) {
	    var items;
	    items = this.hoistedItem.descendants;
	    return this.maintainScrollPoint((function(_this) {
	      return function() {
	        return _this.itemBuffer.updateIndex(function() {
	          var item;
	          _this.setCollapsed((function() {
	            var i, len, results;
	            results = [];
	            for (i = 0, len = items.length; i < len; i++) {
	              item = items[i];
	              if (item.depth >= level) {
	                results.push(item);
	              }
	            }
	            return results;
	          })());
	          return _this.setExpanded((function() {
	            var i, len, results;
	            results = [];
	            for (i = 0, len = items.length; i < len; i++) {
	              item = items[i];
	              if (item.depth < level) {
	                results.push(item);
	              }
	            }
	            return results;
	          })());
	        });
	      };
	    })(this));
	  };
	
	  OutlineEditor.prototype.isExpanded = function(item) {
	    return this.itemBuffer.isExpanded(item);
	  };
	
	  OutlineEditor.prototype.isFiltered = function(item) {
	    return this.itemBuffer.isFiltered(item);
	  };
	
	  OutlineEditor.prototype.isCollapsed = function(item) {
	    return this.itemBuffer.isCollapsed(item);
	  };
	
	  OutlineEditor.prototype.isExplicitlyCollapsed = function(item) {
	    return this.itemBuffer.isExplicitlyCollapsed(item);
	  };
	
	  OutlineEditor.prototype.getItemExpandedState = function(item) {
	    return this.itemBuffer.getItemExpandedState(item);
	  };
	
	  OutlineEditor.prototype.setExpanded = function(items) {
	    return this.setExpandedState(items, true);
	  };
	
	  OutlineEditor.prototype.setCollapsed = function(items) {
	    return this.setExpandedState(items, false);
	  };
	
	  OutlineEditor.prototype.setExpandedState = function(items, expand, completely) {
	    var selection;
	    if (completely == null) {
	      completely = false;
	    }
	    selection = this.selection;
	    if (items == null) {
	      items = selection.displayedSelectedItems;
	    }
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    if (completely) {
	      items = Item.getCommonAncestors(items).map(function(each) {
	        return each.branchItems;
	      });
	      items = items.reduce(flatten, []);
	    }
	    this.maintainScrollPoint((function(_this) {
	      return function() {
	        return _this.itemBuffer.setExpandedState(items, expand, completely);
	      };
	    })(this));
	    if (!this.itemBuffer.isChanging) {
	      return this.moveSelectionToItems(selection);
	    }
	  };
	
	
	  /*
	  Section: Displayed Items
	   */
	
	  OutlineEditor.prototype.isDisplayed = function(item) {
	    return this.itemBuffer.isDisplayed(item);
	  };
	
	  OutlineEditor.prototype.forceDisplayed = function(item, showAncestors) {
	    if (showAncestors == null) {
	      showAncestors = false;
	    }
	    return this.itemBuffer.forceDisplayed(item, showAncestors);
	  };
	
	  OutlineEditor.prototype.forceHidden = function(items, hideDescendants) {
	    if (hideDescendants == null) {
	      hideDescendants = false;
	    }
	    return this.itemBuffer.forceHidden(items, hideDescendants);
	  };
	
	  OutlineEditor.prototype.forceSelectionDisplayed = function(selection) {
	    if (selection != null ? selection.startItem : void 0) {
	      this.forceDisplayed(selection.startItem);
	      this.forceDisplayed(selection.endItem);
	      return this.moveSelectionToItems(selection.startItem, selection.startOffset, selection.endItem, selection.endOffset);
	    } else {
	      return this.moveSelectionToRange(0, 0);
	    }
	  };
	
	  OutlineEditor.prototype.displayedItems = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'displayedItems', {
	    get: function() {
	      return this.itemBuffer.displayedItems;
	    }
	  });
	
	  OutlineEditor.prototype.firstDisplayedItem = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'firstDisplayedItem', {
	    get: function() {
	      return this.itemBuffer.firstDisplayedItem;
	    }
	  });
	
	  OutlineEditor.prototype.lastDisplayedItem = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'lastDisplayedItem', {
	    get: function() {
	      return this.itemBuffer.lastDisplayedItem;
	    }
	  });
	
	  OutlineEditor.prototype.numberOfDisplayedItems = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'numberOfDisplayedItems', {
	    get: function() {
	      return this.itemBuffer.getLineCount();
	    }
	  });
	
	  OutlineEditor.prototype.heightOfDisplayedItems = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'heightOfDisplayedItems', {
	    get: function() {
	      return this.itemBuffer.getHeight();
	    }
	  });
	
	  OutlineEditor.prototype.getDisplayedItemAtIndex = function(index) {
	    return this.itemBuffer.getLine(index).item;
	  };
	
	  OutlineEditor.prototype.getDisplayedItemYOffsetAtIndex = function(index) {
	    return this.itemBuffer.getLine(index).getYOffset();
	  };
	
	  OutlineEditor.prototype.getDisplayedItemIndexAtYOffset = function(yOffset) {
	    return this.itemBuffer.getSpanInfoAtYOffset(yOffset).spanIndex;
	  };
	
	  OutlineEditor.prototype.setDisplayedItemHeightAtIndex = function(height, index) {
	    return this.itemBuffer.getLine(index).setHeight(height);
	  };
	
	  OutlineEditor.prototype.getNextDisplayedItem = function(item) {
	    return this.itemBuffer.getNextDisplayedItem(item);
	  };
	
	  OutlineEditor.prototype.getPreviousDisplayedItem = function(item) {
	    return this.itemBuffer.getPreviousDisplayedItem(item);
	  };
	
	  OutlineEditor.prototype.getDisplayedAncestor = function(item) {
	    return this.itemBuffer.getDisplayedAncestor(item);
	  };
	
	  OutlineEditor.prototype.getDisplayedSelfOrAncestor = function(item) {
	    return this.itemBuffer.getDisplayedSelfOrAncestor(item);
	  };
	
	  OutlineEditor.prototype.getPreviousDisplayedSibling = function(item) {
	    return this.itemBuffer.getPreviousDisplayedSibling(item);
	  };
	
	  OutlineEditor.prototype.getNextDisplayedSibling = function(item) {
	    return this.itemBuffer.getNextDisplayedSibling(item);
	  };
	
	  OutlineEditor.prototype.getFirstDisplayedDescendant = function(item) {
	    return this.itemBuffer.getFirstDisplayedDescendant(item);
	  };
	
	  OutlineEditor.prototype.getLastDisplayedDescendant = function(item) {
	    return this.itemBuffer.getLastDisplayedDescendant(item);
	  };
	
	  OutlineEditor.prototype.getFirstDisplayedDescendantOrSelf = function(item) {
	    return this.itemBuffer.getFirstDisplayedDescendantOrSelf(item);
	  };
	
	  OutlineEditor.prototype.getLastDisplayedDescendantOrSelf = function(item) {
	    return this.itemBuffer.getLastDisplayedDescendantOrSelf(item);
	  };
	
	  OutlineEditor.prototype.getDisplayedBodyCharacterRange = function(item) {
	    return this.itemBuffer.getDisplayedBodyCharacterRange(item);
	  };
	
	  OutlineEditor.prototype.getDisplayedBranchCharacterRange = function(item) {
	    return this.itemBuffer.getDisplayedBranchCharacterRange(item);
	  };
	
	  OutlineEditor.prototype.invalidateItem = function(item, range) {
	    if (!range) {
	      range = this.getDisplayedBodyCharacterRange(item);
	      if (range) {
	        range.length += 1;
	        return this.invalidateRange(range);
	      }
	    }
	  };
	
	  OutlineEditor.prototype.invalidateRange = function(range) {
	    var ref2;
	    return (ref2 = this.nativeEditor) != null ? ref2.invalidateRange(range) : void 0;
	  };
	
	
	  /*
	  Section: Computed Styles
	   */
	
	  OutlineEditor.prototype.getComputedStyle = function() {
	    return this.styleSheet.getComputedStyleForElement(this.editorStyleElement, this.styleSheetComputedStyleCache);
	  };
	
	  OutlineEditor.prototype.getComputedStyleKeyPathForItem = function(item) {
	    var attributes, ref2;
	    attributes = Object.assign({}, (ref2 = item.attributes) != null ? ref2 : {});
	    attributes['depth'] = item.depth;
	    attributes['bodyContent'] = item.bodyContentString;
	    if (item === this.focusedItem) {
	      attributes['focused'] = 'true';
	    }
	    if (item === this.mouseOverItem) {
	      attributes['mouseOver'] = 'true';
	    }
	    if (item === this.mouseOverItemHandle) {
	      attributes['mouseOverHandle'] = 'true';
	    }
	    attributes[this.getItemExpandedState(item)] = 'true';
	    if (attributes['leaf'] && item.bodyString.length === 0) {
	      attributes['empty'] = 'true';
	    }
	    this.itemStyleElement.attributes = attributes;
	    this.itemStyleElement.item = item;
	    this.itemStyleElement.computedStyleKeyPath = null;
	    return this.styleSheet.getComputedStyleKeyPathForElement(this.itemStyleElement, this.styleSheetComputedStyleCache);
	  };
	
	  OutlineEditor.prototype.getComputedStyleKeyPathForItemRun = function(item, run) {
	    var ref2;
	    assert(this.itemStyleElement.item === item);
	    this.runStyleElement.attributes = (ref2 = run.attributes) != null ? ref2 : {};
	    this.runStyleElement.computedStyleKeyPath = null;
	    return this.styleSheet.getComputedStyleKeyPathForElement(this.runStyleElement, this.styleSheetComputedStyleCache);
	  };
	
	  OutlineEditor.prototype.getComputedStyleMetadataForItemIDs = function(ids) {
	    var each, hoistedDepth, i, j, len, len1, ref2, ref3, ref4, run, runs, styles;
	    hoistedDepth = this.hoistedItem.depth;
	    styles = [];
	    ref2 = this.outline.getItemsForIDs(ids);
	    for (i = 0, len = ref2.length; i < len; i++) {
	      each = ref2[i];
	      styles.push(each.id);
	      styles.push((ref3 = each.getAttribute('data-type')) != null ? ref3 : 'notype');
	      styles.push(each.depth - hoistedDepth);
	      styles.push(this.getComputedStyleKeyPathForItem(each));
	      runs = each.bodyHighlightedAttributedString.getRuns();
	      styles.push(runs.length);
	      for (j = 0, len1 = runs.length; j < len1; j++) {
	        run = runs[j];
	        styles.push(this.getComputedStyleKeyPathForItemRun(each, run));
	        styles.push((ref4 = run.attributes.link) != null ? ref4 : '');
	        styles.push(run.getLength());
	      }
	    }
	    return styles;
	  };
	
	  Object.defineProperty(OutlineEditor.prototype, 'mouseOverItem', {
	    get: function() {
	      return this._mouseOverItem;
	    },
	    set: function(newItem) {
	      var oldItem, ref2, ref3;
	      oldItem = this._mouseOverItem;
	      if (newItem === oldItem) {
	        return;
	      } else {
	        this._mouseOverItem = newItem;
	      }
	      if ((ref2 = this.nativeEditor) != null) {
	        ref2.beginEditing();
	      }
	      if (oldItem) {
	        this.invalidateItem(oldItem);
	      }
	      if (newItem) {
	        this.invalidateItem(newItem);
	      }
	      return (ref3 = this.nativeEditor) != null ? ref3.endEditing() : void 0;
	    }
	  });
	
	  Object.defineProperty(OutlineEditor.prototype, 'mouseOverItemHandle', {
	    get: function() {
	      return this._mouseOverItemHandle;
	    },
	    set: function(newItem) {
	      var oldItem, ref2, ref3;
	      oldItem = this._mouseOverItemHandle;
	      if (newItem === oldItem) {
	        return;
	      } else {
	        this._mouseOverItemHandle = newItem;
	      }
	      if ((ref2 = this.nativeEditor) != null) {
	        ref2.beginEditing();
	      }
	      if (oldItem) {
	        this.invalidateItem(oldItem);
	      }
	      if (newItem) {
	        this.invalidateItem(newItem);
	      }
	      return (ref3 = this.nativeEditor) != null ? ref3.endEditing() : void 0;
	    }
	  });
	
	  OutlineEditor.prototype.styleSheet = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'styleSheet', {
	    get: function() {
	      return this._styleSheet;
	    },
	    set: function(newStyleSheet) {
	      var ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
	      if (this._styleSheet !== newStyleSheet) {
	        this._styleSheet = newStyleSheet != null ? newStyleSheet : new StyleSheet;
	        this.styleSheetComputedStyleCache = {};
	        if ((ref2 = this.editorStyleElement) != null) {
	          ref2.computedStyle = null;
	        }
	        if ((ref3 = this.editorStyleElement) != null) {
	          ref3.computedStyleKeyPath = null;
	        }
	        if ((ref4 = this.itemStyleElement) != null) {
	          ref4.computedStyle = null;
	        }
	        if ((ref5 = this.itemStyleElement) != null) {
	          ref5.computedStyleKeyPath = null;
	        }
	        if ((ref6 = this.runStyleElement) != null) {
	          ref6.computedStyle = null;
	        }
	        if ((ref7 = this.runStyleElement) != null) {
	          ref7.computedStyleKeyPath = null;
	        }
	        if ((ref8 = this.nativeEditor) != null) {
	          ref8.beginEditing();
	        }
	        this.invalidateRange({
	          location: 0,
	          length: this.textLength
	        });
	        return (ref9 = this.nativeEditor) != null ? ref9.endEditing() : void 0;
	      }
	    }
	  });
	
	
	  /*
	  Section: Text Buffer
	   */
	
	  OutlineEditor.prototype.textLength = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'textLength', {
	    get: function() {
	      var ref2, ref3;
	      return (ref2 = (ref3 = this.itemBuffer) != null ? ref3.getLength() : void 0) != null ? ref2 : 0;
	    }
	  });
	
	  OutlineEditor.prototype.getItemOffsetForLocation = function(location) {
	    return this.itemBuffer.getItemOffsetForLocation(location);
	  };
	
	  OutlineEditor.prototype.getLocationForItemOffset = function(item, offset) {
	    return this.itemBuffer.getLocationForItemOffset(item, offset);
	  };
	
	  OutlineEditor.prototype.getItemIDsInRange = function(location, length) {
	    var each, i, ids, len, spans;
	    ids = [];
	    spans = this.itemBuffer.getSpansInRange(location, length, true);
	    for (i = 0, len = spans.length; i < len; i++) {
	      each = spans[i];
	      ids.push(each.item.id);
	    }
	    return ids;
	  };
	
	  OutlineEditor.prototype.getTextInRange = function(location, length) {
	    return this.itemBuffer.substr(location, length);
	  };
	
	  OutlineEditor.prototype.insertText = function(string) {
	    var selection;
	    selection = this.selection;
	    return this.replaceRangeWithString(selection.location, selection.length, string);
	  };
	
	
	  /*
	  insertText: (insertedText) ->
	      selectionRange = @selection
	      undoManager = @outline.undoManager
	  
	      if selectionRange.isTextMode
	        if not (insertedText instanceof AttributedString)
	          insertedText = new AttributedString(insertedText)
	          insertedText.addAttributesInRange(@getTypingFormattingTags(), 0, -1)
	  
	        focusItem = selectionRange.focusItem
	        startOffset = selectionRange.startOffset
	        endOffset = selectionRange.endOffset
	  
	        focusItem.replaceBodyTextInRange(insertedText, startOffset, endOffset - startOffset)
	        @moveSelectionRange(focusItem, startOffset + insertedText.length)
	      else
	        @moveSelectionRange(@insertItem(insertedText))
	   */
	
	  OutlineEditor.prototype.replaceRangeWithString = function(location, length, string, fromNativeEditorHack) {
	    var outline;
	    if (!this.isUpdatingNativeBuffer) {
	      outline = this.outline;
	      if (fromNativeEditorHack) {
	        this.isUpdatingItemBuffer++;
	      } else {
	        this._beginMaintainScrollPoint();
	      }
	      this.itemBuffer.updateOutline((function(_this) {
	        return function() {
	          return outline.groupUndoAndChanges(function() {
	            return _this.itemBuffer.replaceRange(location, length, string);
	          });
	        };
	      })(this));
	      if (fromNativeEditorHack) {
	        return this.isUpdatingItemBuffer--;
	      } else {
	        this._endMaintainScrollPoint();
	        this.moveSelectionToRange(location + string.length);
	        return this.scrollRangeToVisible();
	      }
	    }
	  };
	
	  OutlineEditor.prototype.replaceRangeWithItems = function(location, length, items) {
	    var each, insertAtItem, insertAtItemOffset, itemSpans, itemsString, outline, undoManager;
	    outline = this.outline;
	    undoManager = outline.undoManager;
	    insertAtItemOffset = this.getItemOffsetForLocation(location);
	    insertAtItem = insertAtItemOffset != null ? insertAtItemOffset.item : void 0;
	    items = Item.flattenItemHiearchy(items);
	    itemsString = ((function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = items.length; i < len; i++) {
	        each = items[i];
	        results.push(each.bodyString);
	      }
	      return results;
	    })()).join('\n');
	    itemSpans = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = items.length; i < len; i++) {
	        each = items[i];
	        results.push(this.itemBuffer.createSpanForItem(each));
	      }
	      return results;
	    }).call(this);
	    this.maintainScrollPoint((function(_this) {
	      return function() {
	        return _this.itemBuffer.updateOutline(function() {
	          return outline.groupUndoAndChanges(function() {
	            var i, len;
	            if (insertAtItem) {
	              for (i = 0, len = items.length; i < len; i++) {
	                each = items[i];
	                each.indent += insertAtItem.depth - 1;
	              }
	            }
	            return _this.itemBuffer.replaceRange(location, length, itemsString, itemSpans);
	          });
	        });
	      };
	    })(this));
	    this.moveSelectionToRange(location + itemsString.length);
	    return this.scrollRangeToVisible();
	  };
	
	
	  /*
	  Section: Selection
	   */
	
	  OutlineEditor.prototype.selection = null;
	
	  Object.defineProperty(OutlineEditor.prototype, 'selection', {
	    get: function() {
	      var end, endItemOffset, nsRange, start, startItemOffset;
	      nsRange = this.nativeEditor.selectedRange;
	      start = nsRange.location;
	      end = nsRange.location + nsRange.length;
	      startItemOffset = this.getItemOffsetForLocation(start);
	      if (start === end) {
	        endItemOffset = startItemOffset;
	      } else {
	        endItemOffset = this.getItemOffsetForLocation(end);
	      }
	      return new Selection(this, start, end, startItemOffset.item, startItemOffset.offset, endItemOffset.item, endItemOffset.offset);
	    }
	  });
	
	  OutlineEditor.prototype.moveSelectionToRange = function(headLocation, anchorLocation, selectionAffinity) {
	    var length, location, nsRange;
	    this.typingAttributes = null;
	    if (anchorLocation == null) {
	      anchorLocation = headLocation;
	    }
	    headLocation = Math.max(0, headLocation);
	    headLocation = Math.min(headLocation, this.textLength);
	    anchorLocation = Math.max(0, anchorLocation);
	    anchorLocation = Math.min(anchorLocation, this.textLength);
	    if (anchorLocation > 0 && anchorLocation === headLocation && anchorLocation === this.itemBuffer.getLength()) {
	      anchorLocation--;
	      headLocation--;
	    }
	    location = Math.min(headLocation, anchorLocation);
	    length = Math.abs(anchorLocation - headLocation);
	    nsRange = this.nativeEditor.selectedRange;
	    if (location !== nsRange.location || length !== nsRange.length) {
	      return this.nativeEditor.selectedRange = {
	        location: location,
	        length: length
	      };
	    }
	  };
	
	  OutlineEditor.prototype.moveSelectionToItems = function(headItem, headOffset, anchorItem, anchorOffset, selectionAffinity) {
	    var anchorLocation, end, focusLocation, ref2, ref3, selection, start;
	    if (((headItem != null ? headItem.startItem : void 0) != null) || ((headItem != null ? headItem.start : void 0) != null)) {
	      selection = headItem;
	      headItem = selection.headItem;
	      headOffset = selection.headOffset;
	      anchorItem = selection.anchorItem;
	      anchorOffset = selection.anchorOffset;
	      if (headItem == null) {
	        headItem = selection.startItem;
	      }
	      if (headOffset == null) {
	        headOffset = selection.startOffset;
	      }
	      if (anchorItem == null) {
	        anchorItem = selection.endItem;
	      }
	      if (anchorOffset == null) {
	        anchorOffset = selection.endOffset;
	      }
	      start = selection.start;
	      end = selection.end;
	    }
	    if (!headItem) {
	      this.moveSelectionToRange(start != null ? start : 0, end != null ? end : 0);
	      return;
	    }
	    if (headOffset == null) {
	      headOffset = 0;
	    }
	    if (headOffset === -1) {
	      headOffset = headItem.bodyString.length;
	    }
	    if (anchorItem) {
	      if (anchorOffset == null) {
	        anchorOffset = 0;
	      }
	      if (anchorOffset === -1) {
	        anchorOffset = anchorItem.bodyString.length;
	      }
	    } else {
	      anchorItem = headItem;
	      anchorOffset = headOffset;
	    }
	    headOffset = Math.min(headOffset, headItem.bodyString.length + 1);
	    anchorOffset = Math.min(anchorOffset, anchorItem.bodyString.length + 1);
	    focusLocation = (ref2 = this.getLocationForItemOffset(headItem, headOffset)) != null ? ref2 : 0;
	    anchorLocation = (ref3 = this.getLocationForItemOffset(anchorItem, anchorOffset)) != null ? ref3 : focusLocation;
	    return this.moveSelectionToRange(focusLocation, anchorLocation);
	  };
	
	  OutlineEditor.prototype.selectWord = function() {
	    return this.nativeEditor.selectWord();
	  };
	
	  OutlineEditor.prototype.selectSentence = function() {
	    return this.nativeEditor.selectSentence();
	  };
	
	  OutlineEditor.prototype.selectItem = function() {
	    return this.moveSelectionToItems(this.selection.selectionByExtendingToItem());
	  };
	
	  OutlineEditor.prototype.selectBranch = function() {
	    return this.moveSelectionToItems(this.selection.selectionByExtendingToBranch());
	  };
	
	  OutlineEditor.prototype.selectAll = function() {
	    return this.moveSelectionToRange(0, this.textLength);
	  };
	
	  OutlineEditor.prototype.expandSelection = function() {
	    return this.nativeEditor.expandSelection();
	  };
	
	  OutlineEditor.prototype.contractSelection = function() {
	    return this.nativeEditor.contractSelection();
	  };
	
	  OutlineEditor.prototype.focus = function() {
	    var ref2;
	    return (ref2 = this.nativeEditor) != null ? ref2.focus() : void 0;
	  };
	
	
	  /*
	  Section: Scrolling
	   */
	
	  Object.defineProperty(OutlineEditor.prototype, 'scrollPoint', {
	    get: function() {
	      return this.nativeEditor.scrollPoint;
	    },
	    set: function(scrollPoint) {
	      if (!this.maintainScrollPointCount) {
	        return this.nativeEditor.scrollPoint = scrollPoint;
	      }
	    }
	  });
	
	  OutlineEditor.prototype.maintainScrollPoint = function(callback) {
	    this._beginMaintainScrollPoint();
	    callback();
	    return this._endMaintainScrollPoint();
	  };
	
	  OutlineEditor.prototype._beginMaintainScrollPoint = function() {
	    var characterIndex, rect, scrollPoint;
	    if (this.maintainScrollPointCount === 0) {
	      scrollPoint = this.scrollPoint;
	      characterIndex = this.getCharacterIndexForPoint(0, scrollPoint.y);
	      rect = this.getRectForRange(characterIndex, 1);
	      this.maintainScrollPointData = {
	        scrollPoint: scrollPoint,
	        characterIndex: characterIndex,
	        characterIndexOffset: scrollPoint.y - rect.y
	      };
	    }
	    return this.maintainScrollPointCount++;
	  };
	
	  OutlineEditor.prototype._endMaintainScrollPoint = function() {
	    var characterIndexOffset, data, rect;
	    this.maintainScrollPointCount--;
	    if (this.maintainScrollPointCount === 0) {
	      data = this.maintainScrollPointData;
	      rect = this.getRectForRange(Math.min(data.characterIndex, this.textLength), 1);
	      characterIndexOffset = data.characterIndexOffset;
	      this.maintainScrollPointData = null;
	      return this.scrollPoint = {
	        x: rect.x,
	        y: rect.y + characterIndexOffset
	      };
	    }
	  };
	
	  OutlineEditor.prototype.scrollBy = function(xDelta, yDelta) {
	    var p;
	    p = this.scrollPoint;
	    p.x += xDelta;
	    p.y += yDelta;
	    return this.scrollPoint = p;
	  };
	
	  OutlineEditor.prototype.scrollRangeToVisible = function(location, length) {
	    var selection;
	    if (this.maintainScrollPointCount) {
	      return;
	    }
	    if (location == null) {
	      selection = this.selection;
	      location = selection.location;
	      length = selection.length;
	    }
	    return this.nativeEditor.scrollRangeToVisible({
	      location: location,
	      length: length
	    });
	  };
	
	  OutlineEditor.prototype.getRectForRange = function(location, length) {
	    var textLength;
	    textLength = this.textLength;
	    location = Math.min(location, textLength);
	    length = Math.min(length, textLength - location);
	    return this.nativeEditor.getRectForRange({
	      location: location,
	      length: length
	    });
	  };
	
	  OutlineEditor.prototype.getCharacterIndexForPoint = function(x, y) {
	    return this.nativeEditor.getCharacterIndexForPoint({
	      x: x,
	      y: y
	    });
	  };
	
	
	  /*
	  Section: Insert
	   */
	
	  OutlineEditor.prototype.insertNewline = function(e, autoIndent, autoFormat) {
	    var outline, selection;
	    if (autoIndent == null) {
	      autoIndent = true;
	    }
	    if (autoFormat == null) {
	      autoFormat = true;
	    }
	    outline = this.outline;
	    selection = this.selection;
	    this.maintainScrollPoint((function(_this) {
	      return function() {
	        return outline.groupUndo(function() {
	          var content, insertedItem, lead, match, prefix, ref2, ref3, splitText, startItem, startItemSpan, startOffset;
	          if (!selection.isCollapsed) {
	            _this.itemBuffer.updateOutline(function() {
	              return _this.itemBuffer.replaceRange(selection.location, selection.length, '');
	            });
	            _this.moveSelectionToRange(selection.location);
	            selection = _this.selection;
	          }
	          startItem = selection.startItem;
	          if (!startItem) {
	            _this.insertItem();
	            return;
	          }
	          startItemSpan = _this.itemBuffer.getItemSpanForItem(startItem);
	          startOffset = selection.startOffset;
	          if (autoFormat && Birch.preferences.get('BAutoformatListsAsYouType')) {
	            match = startItem.bodyString.match(/(^- )(.*)/);
	          }
	          prefix = (ref2 = match != null ? match[1] : void 0) != null ? ref2 : '';
	          content = (ref3 = match != null ? match[2] : void 0) != null ? ref3 : startItem.bodyString;
	          lead = prefix.length;
	          if (startOffset <= lead && (!prefix || content)) {
	            _this.insertItem('', true, autoIndent);
	            return _this.moveSelectionToItems(startItem, startOffset);
	          } else if (startOffset === lead && (prefix && !content)) {
	            return startItem.bodyString = '';
	          } else {
	            splitText = startItem.bodyAttributedSubstringFromRange(startOffset, -1);
	            startItem.replaceBodyRange(startOffset, -1, '');
	            _this.moveSelectionToItems(startItem, -1);
	            if (prefix && splitText.string.indexOf(prefix) !== 0) {
	              splitText.insertText(0, prefix);
	              insertedItem = _this.insertItem(splitText, false, autoIndent);
	              return _this.moveSelectionToItems(insertedItem, prefix.length);
	            } else {
	              return _this.insertItem(splitText, false, autoIndent);
	            }
	          }
	        });
	      };
	    })(this));
	    return this.scrollRangeToVisible();
	  };
	
	  OutlineEditor.prototype.insertNewlineWithoutIndent = function(e) {
	    return this.insertNewline(e, false, false);
	  };
	
	  OutlineEditor.prototype.insertNewlineAbove = function() {
	    return this.insertItem('', true);
	  };
	
	  OutlineEditor.prototype.insertNewlineBelow = function() {
	    return this.insertItem('');
	  };
	
	  OutlineEditor.prototype.insertItem = function(text, above, autoIndent) {
	    var firstSelected, insertBefore, insertItem, insetItemDepth, lastSelected, outline, ref2, ref3, ref4, ref5, selectedItems;
	    if (text == null) {
	      text = '';
	    }
	    if (above == null) {
	      above = false;
	    }
	    if (autoIndent == null) {
	      autoIndent = true;
	    }
	    outline = this.outline;
	    selectedItems = this.selection.selectedItems;
	    firstSelected = selectedItems[0];
	    lastSelected = selectedItems[selectedItems.length - 1];
	    insertItem = outline.createItem(text);
	    insetItemDepth = null;
	    if (above) {
	      if (!firstSelected) {
	        insertBefore = this.firstDisplayedItem;
	      } else {
	        insertBefore = firstSelected;
	      }
	    } else {
	      if (!lastSelected) {
	        insertBefore = (ref2 = this.glastDisplayedItem) != null ? ref2.nextBranch : void 0;
	      } else {
	        insertBefore = this.getNextDisplayedItem(lastSelected);
	        if (!lastSelected.contains(insertBefore)) {
	          insertBefore = lastSelected.nextBranch;
	        }
	      }
	    }
	    if (!insertBefore) {
	      insertBefore = (ref3 = lastSelected != null ? lastSelected.nextBranch : void 0) != null ? ref3 : this.hoistedItem.nextBranch;
	    }
	    if (autoIndent) {
	      insertItem.indent = Math.max((ref4 = lastSelected != null ? lastSelected.depth : void 0) != null ? ref4 : 0, (ref5 = insertBefore != null ? insertBefore.depth : void 0) != null ? ref5 : 0, this.hoistedItem.depth + 1);
	    } else {
	      insertItem.indent = this.hoistedItem.depth + 1;
	    }
	    this.maintainScrollPoint((function(_this) {
	      return function() {
	        outline.groupUndoAndChanges(function() {
	          return outline.insertItemsBefore(insertItem, insertBefore);
	        });
	        _this.forceDisplayed(insertItem);
	        return _this.moveSelectionToItems(insertItem);
	      };
	    })(this));
	    this.scrollRangeToVisible();
	    this.focus();
	    return insertItem;
	  };
	
	  OutlineEditor.prototype._getInsertBeforeItemFromInsertAfterItemAtDepth = function(insertAfterItem, depth) {
	    var each;
	    each = insertAfterItem != null ? insertAfterItem.nextItem : void 0;
	    while (each && !this.isDisplayed(each) && each.depth > depth) {
	      each = each.nextItem;
	    }
	    return each;
	  };
	
	
	  /*
	  Section: Move Lines
	   */
	
	  OutlineEditor.prototype.moveLinesUp = function() {
	    return this._moveLinesInDirection('up');
	  };
	
	  OutlineEditor.prototype.moveLinesDown = function() {
	    return this._moveLinesInDirection('down');
	  };
	
	  OutlineEditor.prototype.moveLinesLeft = function() {
	    return this._moveLinesInDirection('left');
	  };
	
	  OutlineEditor.prototype.moveLinesRight = function() {
	    return this._moveLinesInDirection('right');
	  };
	
	  OutlineEditor.prototype._moveLinesInDirection = function(direction) {
	    var ancestor, displayedItems, dontShiftItems, each, firstItem, i, indentDelta, insertAfterItem, insertBeforeItem, items, j, lastItem, lastMoveItem, len, len1, minDepth, minMovedItemDepth, moveItems, outline, selection, undoManager;
	    selection = this.selection;
	    moveItems = selection.displayedAncestorSelectedItems;
	    lastMoveItem = moveItems[moveItems.length - 1];
	    if (moveItems.length) {
	      outline = this.outline;
	      undoManager = outline.undoManager;
	      minDepth = this.hoistedItem.depth + 1;
	      minMovedItemDepth = Number.MAX_VALUE;
	      for (i = 0, len = moveItems.length; i < len; i++) {
	        each = moveItems[i];
	        minMovedItemDepth = Math.min(each.depth, minMovedItemDepth);
	      }
	      displayedItems = (function() {
	        var j, len1, ref2, results;
	        ref2 = this.itemBuffer.getSpans(0, this.itemBuffer.getSpanCount());
	        results = [];
	        for (j = 0, len1 = ref2.length; j < len1; j++) {
	          each = ref2[j];
	          results.push(each.item);
	        }
	        return results;
	      }).call(this);
	      items = moveItems.concat(selection.trailingHiddenDescendentItems);
	      firstItem = items[0];
	      lastItem = items[items.length - 1];
	      dontShiftItems = new Set;
	      insertBeforeItem = null;
	      indentDelta = 0;
	      switch (direction) {
	        case 'up':
	          if (!(insertBeforeItem = this.getPreviousDisplayedItem(firstItem))) {
	            return;
	          }
	          if (insertAfterItem = this.getPreviousDisplayedItem(insertBeforeItem)) {
	            insertBeforeItem = this._getInsertBeforeItemFromInsertAfterItemAtDepth(insertAfterItem, minMovedItemDepth);
	          }
	          break;
	        case 'down':
	          if (insertAfterItem = this.getNextDisplayedItem(lastItem)) {
	            insertBeforeItem = this._getInsertBeforeItemFromInsertAfterItemAtDepth(insertAfterItem, minMovedItemDepth);
	          } else {
	            return;
	          }
	          break;
	        case 'left':
	          indentDelta = -1;
	          for (j = 0, len1 = items.length; j < len1; j++) {
	            each = items[j];
	            if (!this.isDisplayed(each)) {
	              ancestor = this.getDisplayedAncestor(each);
	              if ((ancestor != null) && ancestor.depth === minDepth) {
	                dontShiftItems.add(each);
	              }
	            }
	          }
	          break;
	        case 'right':
	          indentDelta = 1;
	      }
	      if (indentDelta !== 0) {
	        minMovedItemDepth = Math.max(minDepth, minMovedItemDepth + indentDelta);
	        insertBeforeItem = this._getInsertBeforeItemFromInsertAfterItemAtDepth(lastItem, minMovedItemDepth);
	      }
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          selection.prepareForMove();
	          _this.itemBuffer.ignoreItemsAddedToOutline++;
	          outline.groupUndoAndChanges(function() {
	            var k, len2;
	            outline.removeItems(items);
	            if (indentDelta) {
	              for (k = 0, len2 = items.length; k < len2; k++) {
	                each = items[k];
	                if (!dontShiftItems.has(each)) {
	                  each.indent = Math.max(minDepth, each.indent + indentDelta);
	                }
	              }
	            }
	            return outline.insertItemsBefore(items, insertBeforeItem);
	          });
	          _this.itemBuffer.ignoreItemsAddedToOutline--;
	          _this.forceDisplayed(displayedItems);
	          selection.restoreAfterMove();
	          return _this.moveSelectionToItems(selection);
	        };
	      })(this));
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.groupLines = function() {
	    var first, group, items, outline, selection;
	    selection = this.selection;
	    items = selection.displayedAncestorSelectedItems.concat(selection.trailingHiddenDescendentItems);
	    if (items.length > 0) {
	      outline = this.outline;
	      first = items[0];
	      group = outline.createItem('');
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          return outline.groupUndo(function() {
	            first.parent.insertChildrenBefore(group, first);
	            outline.removeItems(items);
	            items = Item.buildItemHiearchy(items);
	            return _this.moveBranches(items, group, null, {
	              scrollRangeToVisible: false
	            });
	          });
	        };
	      })(this));
	      this.moveSelectionToItems(group);
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.duplicateLines = function() {
	    var clonedItems, collapsedClones, each, i, insertBefore, items, last, len, outline, selection;
	    selection = this.selection;
	    items = selection.displayedAncestorSelectedItems.concat(selection.trailingHiddenDescendentItems);
	    if (items.length > 0) {
	      outline = this.outline;
	      collapsedClones = [];
	      clonedItems = [];
	      for (i = 0, len = items.length; i < len; i++) {
	        each = items[i];
	        clonedItems.push(each.clone(false, (function(_this) {
	          return function(oldID, cloneID, clonedItem) {
	            var oldItem;
	            oldItem = outline.getItemForID(oldID);
	            if (oldItem === selection.startItem) {
	              selection.startItem = clonedItem;
	            }
	            if (oldItem === selection.endItem) {
	              selection.endItem = clonedItem;
	            }
	            if (_this.isCollapsed(oldItem)) {
	              return collapsedClones.push(clonedItem);
	            }
	          };
	        })(this)));
	      }
	      last = items[items.length - 1];
	      insertBefore = last.nextItem;
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          return outline.groupUndoAndChanges(function() {
	            outline.insertItemsBefore(clonedItems, insertBefore);
	            return _this.setCollapsed(collapsedClones);
	          });
	        };
	      })(this));
	      this.moveSelectionToItems(selection);
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.deleteLines = function() {
	    var displayedItems, each, items, nextSelectedItem, outline, ref2, ref3, selection, spanIndex;
	    selection = this.selection;
	    items = selection.displayedAncestorSelectedItems.concat(selection.trailingHiddenDescendentItems);
	    if (items.length) {
	      displayedItems = (function() {
	        var i, len, ref2, results;
	        ref2 = this.itemBuffer.getSpans(0, this.itemBuffer.getSpanCount());
	        results = [];
	        for (i = 0, len = ref2.length; i < len; i++) {
	          each = ref2[i];
	          results.push(each.item);
	        }
	        return results;
	      }).call(this);
	      spanIndex = this.itemBuffer.getItemSpanForItem(items[0]).getSpanIndex();
	      outline = this.outline;
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          return outline.groupUndo(function() {
	            outline.beginChanges();
	            outline.removeItems(items);
	            return outline.endChanges(function() {
	              return _this.forceDisplayed(_.difference(displayedItems, items));
	            });
	          });
	        };
	      })(this));
	      nextSelectedItem = (ref2 = this.itemBuffer.getSpan(spanIndex)) != null ? ref2.item : void 0;
	      if (nextSelectedItem == null) {
	        nextSelectedItem = (ref3 = this.itemBuffer.getSpan(spanIndex - 1)) != null ? ref3.item : void 0;
	      }
	      if (nextSelectedItem) {
	        this.moveSelectionToItems(nextSelectedItem);
	      }
	      return this.scrollRangeToVisible();
	    }
	  };
	
	
	  /*
	  Section: Move Branches
	   */
	
	  OutlineEditor.prototype.moveBranchesUp = function() {
	    return this._moveBranchesInDirection('up');
	  };
	
	  OutlineEditor.prototype.moveBranchesDown = function() {
	    return this._moveBranchesInDirection('down');
	  };
	
	  OutlineEditor.prototype.moveBranchesLeft = function() {
	    return this._moveBranchesInDirection('left');
	  };
	
	  OutlineEditor.prototype.moveBranchesRight = function() {
	    return this._moveBranchesInDirection('right');
	  };
	
	  OutlineEditor.prototype._moveBranchesInDirection = function(direction) {
	    var endItem, items, newNextSibling, newParent, newPreviouseItem, startItem, startItemParent;
	    items = Item.getCommonAncestors(this.selection.displayedAncestorSelectedItems);
	    if (items.length > 0) {
	      startItem = items[0];
	      newNextSibling;
	      newParent;
	      if (direction === 'up') {
	        newNextSibling = this.getPreviousDisplayedItem(startItem);
	        if (newNextSibling) {
	          newParent = newNextSibling.parent;
	        }
	      } else if (direction === 'down') {
	        endItem = items[items.length - 1].lastBranchItem;
	        newPreviouseItem = this.getNextDisplayedItem(endItem);
	        if (newPreviouseItem) {
	          newNextSibling = this.getNextDisplayedItem(newPreviouseItem);
	          if (newNextSibling) {
	            newParent = newNextSibling.parent;
	          } else {
	            newParent = newPreviouseItem.parent;
	          }
	        }
	      } else if (direction === 'left') {
	        startItemParent = startItem.parent;
	        if (startItemParent !== this.hoistedItem) {
	          newParent = startItemParent.parent;
	          newNextSibling = this.getNextDisplayedSibling(startItemParent);
	          while (newNextSibling && indexOf.call(items, newNextSibling) >= 0) {
	            newNextSibling = this.getNextDisplayedSibling(newNextSibling);
	          }
	        }
	      } else if (direction === 'right') {
	        newParent = this.getPreviousDisplayedSibling(startItem);
	      }
	      if (newParent) {
	        return this.moveBranches(items, newParent, newNextSibling);
	      }
	    }
	  };
	
	  OutlineEditor.prototype.groupBranches = function() {
	    var first, items, outline;
	    items = Item.getCommonAncestors(this.selection.displayedAncestorSelectedItems);
	    if (items.length > 0) {
	      outline = this.outline;
	      first = items[0];
	      outline.groupUndo((function(_this) {
	        return function() {
	          var group;
	          group = outline.createItem('');
	          _this.maintainScrollPoint(function() {
	            first.parent.insertChildrenBefore(group, first);
	            return _this.moveBranches(items, group);
	          });
	          return _this.moveSelectionToItems(group);
	        };
	      })(this));
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.duplicateBranches = function() {
	    var clonedItems, each, expandedClones, i, insertBefore, items, last, len, outline, parent, ref2, selection;
	    selection = this.selection;
	    items = Item.getCommonAncestors(selection.displayedAncestorSelectedItems);
	    if (items.length > 0) {
	      outline = this.outline;
	      expandedClones = [];
	      clonedItems = [];
	      for (i = 0, len = items.length; i < len; i++) {
	        each = items[i];
	        clonedItems.push(each.clone(true, (function(_this) {
	          return function(oldID, cloneID, clonedItem) {
	            var oldItem;
	            oldItem = outline.getItemForID(oldID);
	            if (oldItem === selection.startItem) {
	              selection.startItem = clonedItem;
	            }
	            if (oldItem === selection.endItem) {
	              selection.endItem = clonedItem;
	            }
	            if (_this.isExpanded(oldItem)) {
	              return expandedClones.push(clonedItem);
	            }
	          };
	        })(this)));
	      }
	      last = items[items.length - 1];
	      insertBefore = last.nextSibling;
	      parent = (ref2 = insertBefore != null ? insertBefore.parent : void 0) != null ? ref2 : items[0].parent;
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          _this.setExpanded(expandedClones);
	          return parent.insertChildrenBefore(clonedItems, insertBefore);
	        };
	      })(this));
	      this.moveSelectionToItems(selection);
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.promoteChildBranches = function() {
	    var item;
	    item = this.selection.startItem;
	    if (item) {
	      this.moveBranches(item.children, item.parent, item.nextSibling);
	      return this.outline.undoManager.setActionName('Promote Children');
	    }
	  };
	
	  OutlineEditor.prototype.demoteTrailingSiblingBranches = function() {
	    var each, item, trailingSiblings;
	    item = this.selection.startItem;
	    if (item) {
	      trailingSiblings = [];
	      each = item.nextSibling;
	      while (each) {
	        trailingSiblings.push(each);
	        each = each.nextSibling;
	      }
	      if (trailingSiblings.length > 0) {
	        this.moveBranches(trailingSiblings, item, null);
	        return this.outline.undoManager.setActionName('Demote Siblings');
	      }
	    }
	  };
	
	  OutlineEditor.prototype.moveBranchesToParent = function(items, newParent) {
	    var each, i, len, nextSelection, selectedCommonAncestors, selectedItems;
	    selectedCommonAncestors = Item.getCommonAncestors(items != null ? items : this.selection.displayedAncestorSelectedItems);
	    for (i = 0, len = selectedCommonAncestors.length; i < len; i++) {
	      each = selectedCommonAncestors[i];
	      if (each === newParent || each.contains(newParent)) {
	        return;
	      }
	    }
	    selectedItems = this.selection.selectedItems;
	    nextSelection = this.getPreviousDisplayedItem(selectedItems[0]);
	    if (!nextSelection) {
	      nextSelection = this.getNextDisplayedItem(selectedItems[selectedItems.length - 1]);
	    }
	    this.maintainScrollPoint(function() {
	      return newParent.insertChildrenBefore(selectedCommonAncestors, newParent.firstChild);
	    });
	    if (nextSelection) {
	      this.moveSelectionToItems(nextSelection);
	    }
	    return this.scrollRangeToVisible();
	  };
	
	  OutlineEditor.prototype.moveBranches = function(items, newParent, newNextSibling, options) {
	    var each, endItem, forceDisplayItems, i, importedItems, itemsOutline, j, k, l, len, len1, len2, len3, len4, len5, len6, m, moveSelectionAwayFromItems, n, newStartItem, o, outline, ref2, ref3, selection, startItem;
	    if (options == null) {
	      options = {};
	    }
	    if (options.moveSelectionWithItems == null) {
	      options.moveSelectionWithItems = true;
	    }
	    if (options.scrollRangeToVisible == null) {
	      options.scrollRangeToVisible = true;
	    }
	    items = Item.getCommonAncestors(items != null ? items : this.selection.displayedAncestorSelectedItems);
	    for (i = 0, len = items.length; i < len; i++) {
	      each = items[i];
	      if (each === newParent || each.contains(newParent)) {
	        return;
	      }
	    }
	    if (items.length === 0) {
	      return;
	    }
	    if (items[0] === newNextSibling) {
	      return;
	    }
	    outline = this.outline;
	    selection = this.selection;
	    itemsOutline = items[0].outline;
	    assert(newParent.outline === outline, 'newParent must be in editor outline');
	    assert(!newNextSibling || newNextSibling.outline === outline, 'newNextSibling must be in editor outline');
	    for (j = 0, len1 = items.length; j < len1; j++) {
	      each = items[j];
	      assert(each.outline === itemsOutline, 'items must all be part of same outline');
	    }
	    if (outline !== itemsOutline) {
	      itemsOutline.groupUndoAndChanges(function() {
	        return Item.removeItemsFromParents(items);
	      });
	      importedItems = [];
	      for (k = 0, len2 = items.length; k < len2; k++) {
	        each = items[k];
	        importedItems.push(outline.importItem(each));
	      }
	      items = importedItems;
	    }
	    forceDisplayItems = [];
	    if (this.isDisplayed(newParent)) {
	      for (l = 0, len3 = items.length; l < len3; l++) {
	        each = items[l];
	        if (this.isDisplayed(each)) {
	          forceDisplayItems.push(each);
	        }
	        ref2 = each.descendants;
	        for (m = 0, len4 = ref2.length; m < len4; m++) {
	          each = ref2[m];
	          if (this.isDisplayed(each)) {
	            forceDisplayItems.push(each);
	          }
	        }
	      }
	    }
	    if (!options.moveSelectionWithItems) {
	      moveSelectionAwayFromItems = false;
	      if (startItem = selection.startItem) {
	        for (n = 0, len5 = items.length; n < len5; n++) {
	          each = items[n];
	          if (each === startItem || each.contains(startItem)) {
	            moveSelectionAwayFromItems = true;
	          }
	        }
	      }
	      if (endItem = selection.endItem) {
	        for (o = 0, len6 = items.length; o < len6; o++) {
	          each = items[o];
	          if (each === endItem || each.contains(endItem)) {
	            moveSelectionAwayFromItems = true;
	          }
	        }
	      }
	      if (moveSelectionAwayFromItems) {
	        if (newStartItem = (ref3 = this.getNextDisplayedItem(items[items.length - 1].lastBranchItem)) != null ? ref3 : this.getPreviousDisplayedItem(items[0])) {
	          selection = {
	            startItem: newStartItem
	          };
	        } else {
	          selection = {
	            start: 0
	          };
	        }
	      }
	    }
	    if (typeof selection.prepareForMove === "function") {
	      selection.prepareForMove();
	    }
	    this.maintainScrollPoint((function(_this) {
	      return function() {
	        outline.groupUndoAndChanges(function() {
	          Item.removeItemsFromParents(items);
	          return newParent.insertChildrenBefore(items, newNextSibling);
	        });
	        return _this.forceDisplayed(forceDisplayItems);
	      };
	    })(this));
	    if (typeof selection.restoreAfterMove === "function") {
	      selection.restoreAfterMove();
	    }
	    this.moveSelectionToItems(selection);
	    if (options.scrollRangeToVisible) {
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.deleteBranches = function(items) {
	    var nextSelection, ref2, ref3, spanIndex;
	    items = Item.getCommonAncestors(items != null ? items : this.selection.displayedAncestorSelectedItems);
	    if (items.length) {
	      spanIndex = this.itemBuffer.getItemSpanForItem(items[0]).getSpanIndex();
	      this.maintainScrollPoint((function(_this) {
	        return function() {
	          return _this.outline.groupUndoAndChanges(function() {
	            return Item.removeItemsFromParents(items);
	          });
	        };
	      })(this));
	      nextSelection = (ref2 = this.itemBuffer.getSpan(spanIndex)) != null ? ref2.item : void 0;
	      if (nextSelection == null) {
	        nextSelection = (ref3 = this.itemBuffer.getSpan(spanIndex - 1)) != null ? ref3.item : void 0;
	      }
	      if (nextSelection) {
	        this.moveSelectionToItems(nextSelection);
	      }
	      return this.scrollRangeToVisible();
	    }
	  };
	
	
	  /*
	  Section: Formatting
	   */
	
	  Object.defineProperty(OutlineEditor.prototype, 'typingAttributes', {
	    get: function() {
	      var formattingOffset, selection, startItem;
	      if (!this._typingAttributes) {
	        selection = this.selection;
	        startItem = selection.startItem;
	        formattingOffset = selection.startOffset;
	        if (!selection.isCollapsed) {
	          formattingOffset += 1;
	        }
	        if (formattingOffset > 0) {
	          this._typingAttributes = startItem.getBodyAttributesAtIndex(formattingOffset - 1);
	        } else {
	          this._typingAttributes = startItem.getBodyAttributesAtIndex(formattingOffset);
	        }
	      }
	      return this._typingAttributes;
	    },
	    set: function(typingAttributes) {
	      if (typingAttributes != null) {
	        return this._typingAttributes = Object.assign({}, typingAttributes);
	      } else {
	        return this._typingAttributes = null;
	      }
	    }
	  });
	
	  OutlineEditor.prototype.toggleTypingAttribute = function(name, value) {
	    var typingAttributes;
	    typingAttributes = this.typingAttributes;
	    if (typingAttributes[name] !== void 0) {
	      delete typingAttributes[name];
	    } else {
	      typingAttributes[name] = value || null;
	    }
	    return this.typingAttributes = typingAttributes;
	  };
	
	  OutlineEditor.prototype.toggleTextAttribute = function(name, attributes) {
	    var addingTag, selection, startItem, tagAttributes;
	    if (attributes == null) {
	      attributes = {};
	    }
	    startItem = this.selection.startItem;
	    selection = this.selection;
	    if (selection.length === 0) {
	      return this.toggleTypingAttribute(name, attributes);
	    } else if (startItem) {
	      tagAttributes = startItem.getBodyAttributeAtIndex(name, selection.startOffset || 0);
	      addingTag = tagAttributes === void 0;
	      return this._transformSelectedText(function(eachItem, start, end) {
	        if (addingTag) {
	          return eachItem.addBodyAttributeInRange(name, attributes, start, end - start);
	        } else {
	          return eachItem.removeBodyAttributeInRange(name, start, end - start);
	        }
	      });
	    }
	  };
	
	  OutlineEditor.prototype.clearFormatting = function() {
	    var attributes, longestRange, selection, startItem, startOffset, startTextLength;
	    selection = this.selection;
	    if (selection.length === 0) {
	      longestRange = {};
	      startItem = selection.startItem;
	      startOffset = selection.startOffset;
	      startTextLength = startItem.bodyString.length;
	      if (startTextLength === 0) {
	        return;
	      }
	      if (startOffset === startTextLength) {
	        startOffset--;
	      }
	      attributes = startItem.getBodyAttributesAtIndex(startOffset, null, longestRange);
	      if (!Object.keys(attributes).length) {
	        return;
	      }
	      this.moveSelectionToItems(startItem, longestRange.location, startItem, longestRange.end);
	    }
	    return this._transformSelectedText(function(eachItem, start, end) {
	      var attributedString;
	      attributedString = new AttributedString(eachItem.bodyString.substring(start, end));
	      return eachItem.replaceBodyRange(start, end - start, attributedString);
	    });
	  };
	
	  OutlineEditor.prototype.upperCase = function() {
	    return this._transformSelectedText(function(item, start, end) {
	      return item.replaceBodyRange(start, end - start, item.bodyString.substring(start, end).toUpperCase());
	    });
	  };
	
	  OutlineEditor.prototype.lowerCase = function() {
	    return this._transformSelectedText(function(item, start, end) {
	      return item.replaceBodyRange(start, end - start, item.bodyString.substring(start, end).toLowerCase());
	    });
	  };
	
	  OutlineEditor.prototype._transformSelectedText = function(transform) {
	    var outline, selection;
	    if (this.selection.isCollapsed) {
	      this.selectWord();
	    }
	    selection = this.selection;
	    outline = this.outline;
	    this.maintainScrollPoint(function() {
	      return outline.groupUndoAndChanges(function() {
	        var each, endItem, endOffset, i, len, ref2, results, startItem, startOffset;
	        startItem = selection.startItem;
	        startOffset = selection.startOffset;
	        endItem = selection.endItem;
	        endOffset = selection.endOffset;
	        ref2 = selection.displayedAncestorSelectedItems;
	        results = [];
	        for (i = 0, len = ref2.length; i < len; i++) {
	          each = ref2[i];
	          if (each === startItem && each === endItem) {
	            results.push(transform(each, startOffset, endOffset));
	          } else if (each === startItem) {
	            results.push(transform(each, startOffset, each.bodyString.length));
	          } else if (each === endItem) {
	            results.push(transform(each, 0, endOffset));
	          } else {
	            results.push(transform(each, 0, each.bodyString.length));
	          }
	        }
	        return results;
	      });
	    });
	    return this.moveSelectionToItems(selection);
	  };
	
	  OutlineEditor.prototype.insertDate = function(completedCallback) {
	    return this.getDateFromUser('Insert Date', '%@', (function(_this) {
	      return function(date) {
	        if (date) {
	          _this.insertText(DateTime.format(date, false, false));
	          return typeof completedCallback === "function" ? completedCallback(true) : void 0;
	        } else {
	          return typeof completedCallback === "function" ? completedCallback(false) : void 0;
	        }
	      };
	    })(this));
	  };
	
	
	  /*
	  Section: Util
	   */
	
	  OutlineEditor.prototype.getItemAttributesFromUser = function(placeholder, callback) {
	    return this.nativeEditor.getItemAttributesFromUserCallback(placeholder, callback);
	  };
	
	  OutlineEditor.prototype.getDateFromUser = function(placeholder, stringTemplate, callback) {
	    return this.nativeEditor.getDateFromUserDateStringTemplateCallback(placeholder, stringTemplate, callback);
	  };
	
	  OutlineEditor.prototype.setAttribute = function(items, name, value, scrollRangeToVisible) {
	    var attributes;
	    if (scrollRangeToVisible == null) {
	      scrollRangeToVisible = true;
	    }
	    attributes = {};
	    attributes[name] = value;
	    return this.setAllAttributes(items, attributes, scrollRangeToVisible);
	  };
	
	  OutlineEditor.prototype.setAllAttributes = function(items, attributes, scrollRangeToVisible) {
	    var outline, selection;
	    if (scrollRangeToVisible == null) {
	      scrollRangeToVisible = true;
	    }
	    outline = this.outline;
	    selection = this.selection;
	    if (items == null) {
	      items = selection.displayedSelectedItems;
	    }
	    this.maintainScrollPoint(function() {
	      return outline.groupUndoAndChanges(function() {
	        var attributeNames, each, eachName, i, len, results;
	        attributeNames = Object.keys(attributes);
	        results = [];
	        for (i = 0, len = items.length; i < len; i++) {
	          each = items[i];
	          results.push((function() {
	            var j, len1, results1;
	            results1 = [];
	            for (j = 0, len1 = attributeNames.length; j < len1; j++) {
	              eachName = attributeNames[j];
	              results1.push(each.setAttribute(eachName, attributes[eachName]));
	            }
	            return results1;
	          })());
	        }
	        return results;
	      });
	    });
	    this.moveSelectionToItems(selection);
	    if (scrollRangeToVisible) {
	      return this.scrollRangeToVisible();
	    }
	  };
	
	  OutlineEditor.prototype.hasAttribute = function(name, items) {
	    return this.hasAllAttributes([name], items);
	  };
	
	  OutlineEditor.prototype.hasAllAttributes = function(attributes, items) {
	    var eachAttribute, eachItem, i, j, len, len1;
	    if (items == null) {
	      items = this.selection.displayedSelectedItems;
	    }
	    if (items) {
	      for (i = 0, len = items.length; i < len; i++) {
	        eachItem = items[i];
	        for (j = 0, len1 = attributes.length; j < len1; j++) {
	          eachAttribute = attributes[j];
	          if (!eachItem.hasAttribute(eachAttribute)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	  OutlineEditor.prototype.toggleAttribute = function(name, value, items, scrollRangeToVisible) {
	    if (value == null) {
	      value = '';
	    }
	    if (scrollRangeToVisible == null) {
	      scrollRangeToVisible = true;
	    }
	    if (items == null) {
	      items = this.selection.displayedSelectedItems;
	    }
	    if (this.hasAttribute(name, items)) {
	      value = null;
	    }
	    return this.setAttribute(items, name, value, scrollRangeToVisible);
	  };
	
	  OutlineEditor.prototype.toggleUserSelectedAttribute = function(items, scrollRangeToVisible, completedCallback) {
	    if (scrollRangeToVisible == null) {
	      scrollRangeToVisible = true;
	    }
	    if (items == null) {
	      items = this.selection.displayedSelectedItems;
	    }
	    return this.getItemAttributesFromUser('Tag With', (function(_this) {
	      return function(attributeNames) {
	        var attributes, commandName, commandSetAttributes, directSetAttributes, each, i, j, k, len, len1, len2, newCompletedCallback, oldCompletedCallback, outline;
	        if (attributeNames) {
	          if (_this.hasAllAttributes(attributeNames, items)) {
	            attributes = {};
	            for (i = 0, len = attributeNames.length; i < len; i++) {
	              each = attributeNames[i];
	              attributes[each] = null;
	            }
	            _this.setAllAttributes(items, attributes, scrollRangeToVisible);
	            return typeof completedCallback === "function" ? completedCallback(true) : void 0;
	          } else {
	            outline = _this.outline;
	            outline.beginUndoGrouping();
	            oldCompletedCallback = completedCallback;
	            newCompletedCallback = function(result) {
	              outline.endUndoGrouping();
	              return typeof oldCompletedCallback === "function" ? oldCompletedCallback(result) : void 0;
	            };
	            directSetAttributes = [];
	            commandSetAttributes = [];
	            for (j = 0, len1 = attributeNames.length; j < len1; j++) {
	              each = attributeNames[j];
	              commandName = "outline-editor:toggle-" + (each.substring(5));
	              if (Birch.commands.hasCommand(_this, commandName)) {
	                commandSetAttributes.push({
	                  name: commandName
	                });
	              } else {
	                directSetAttributes.push(each);
	              }
	            }
	            if (directSetAttributes.length > 0) {
	              attributes = {};
	              for (k = 0, len2 = directSetAttributes.length; k < len2; k++) {
	                each = directSetAttributes[k];
	                attributes[each] = '';
	              }
	              _this.setAllAttributes(items, attributes, scrollRangeToVisible);
	            }
	            if (commandSetAttributes.length > 0) {
	              return _this.performCommands(commandSetAttributes, newCompletedCallback);
	            } else {
	              return newCompletedCallback(true);
	            }
	          }
	        } else {
	          return typeof completedCallback === "function" ? completedCallback(false) : void 0;
	        }
	      };
	    })(this));
	  };
	
	
	  /*
	  Section: Item Serialization
	   */
	
	  OutlineEditor.prototype.serializeRange = function(location, length, options) {
	    if (options == null) {
	      options = {};
	    }
	    return this.itemBuffer.serializeRange(location, length, options);
	  };
	
	  OutlineEditor.prototype.serializeItems = function(items, options) {
	    if (options == null) {
	      options = {};
	    }
	    return this.itemBuffer.serializeItems(items, options);
	  };
	
	  OutlineEditor.prototype.deserializeItems = function(serializedItems, options) {
	    if (options == null) {
	      options = {};
	    }
	    return this.itemBuffer.deserializeItems(serializedItems, options);
	  };
	
	  OutlineEditor.prototype.getSerializedItemsInRange = OutlineEditor.prototype.serializeRange;
	
	
	  /*
	  Section: Editor State Serialization
	   */
	
	  OutlineEditor.prototype.invalidateRestorableState = function() {
	    var ref2;
	    return (ref2 = this.nativeEditor) != null ? ref2.invalidateRestorableState() : void 0;
	  };
	
	  Object.defineProperty(OutlineEditor.prototype, 'restorableState', {
	    get: function() {
	      var collapsedItems, each;
	      collapsedItems = [];
	      each = this.outline.root.firstChild;
	      while (each) {
	        if (this.isExplicitlyCollapsed(each)) {
	          collapsedItems.push(each);
	        }
	        each = each.nextItem;
	      }
	      return {
	        hoistedItem: this.hoistedItem,
	        focusedItem: this.focusedItem,
	        itemPathFilter: this.itemPathFilter,
	        collapsedItems: collapsedItems,
	        displayedItems: this.displayedItems
	      };
	    },
	    set: function(state) {
	      return this.maintainScrollPoint((function(_this) {
	        return function() {
	          var ref2, ref3;
	          if (state.collapsedItems) {
	            _this.itemBuffer.updateIndex(function() {
	              return _this.setCollapsed(state.collapsedItems);
	            });
	          }
	          return _this.editorState = {
	            hoistedItem: (ref2 = state.hoistedItem) != null ? ref2 : _this.outline.root,
	            focusedItem: state.focusedItem,
	            itemPathFilter: (ref3 = state.itemPathFilter) != null ? ref3 : '',
	            displayedItems: state.displayedItems
	          };
	        };
	      })(this));
	    }
	  });
	
	  Object.defineProperty(OutlineEditor.prototype, 'serializedRestorableState', {
	    get: function() {
	      var collapsedItemIDs, each, ref2, state;
	      collapsedItemIDs = [];
	      each = this.outline.root.firstChild;
	      while (each) {
	        if (this.isExplicitlyCollapsed(each)) {
	          collapsedItemIDs.push(each.branchContentID);
	        }
	        each = each.nextItem;
	      }
	      state = {
	        hoistedID: this.hoistedItem.branchContentID,
	        focusedID: (ref2 = this.focusedItem) != null ? ref2.branchContentID : void 0,
	        collapsedItemIDs: collapsedItemIDs,
	        itemPathFilter: this.itemPathFilter
	      };
	      return JSON.stringify(state);
	    },
	    set: function(jsonState) {
	      var collapsedItemIDs, collapsedItems, eachID, eachItem, i, len, outline, state;
	      if (this._reloadingSerializedRestorableState) {
	        return;
	      }
	      if (state = JSON.parse(jsonState)) {
	        outline = this.outline;
	        collapsedItems = [];
	        if (collapsedItemIDs = state.collapsedItemIDs) {
	          for (i = 0, len = collapsedItemIDs.length; i < len; i++) {
	            eachID = collapsedItemIDs[i];
	            if (eachItem = outline.getItemForBranchContentID(eachID)) {
	              collapsedItems.push(eachItem);
	            }
	          }
	        }
	        return this.restorableState = {
	          hoistedItem: outline.getItemForBranchContentID(state.hoistedID),
	          focusedItem: outline.getItemForBranchContentID(state.focusedID),
	          collapsedItems: collapsedItems,
	          itemPathFilter: state.itemPathFilter
	        };
	      }
	    }
	  });
	
	  OutlineEditor.prototype._outlineWillReload = function() {
	    return this._reloadingSerializedRestorableState = this.serializedRestorableState;
	  };
	
	  OutlineEditor.prototype._outlineDidReload = function() {
	    var state;
	    state = this._reloadingSerializedRestorableState;
	    this._reloadingSerializedRestorableState = null;
	    return this.serializedRestorableState = state;
	  };
	
	
	  /*
	  Section: Scripting
	   */
	
	  OutlineEditor.prototype.evaluateScript = function(script, options) {
	    var API_VERSION, e, func, r, result;
	    result = {
	      '_wrappedValue': null
	    };
	    try {
	      if (options) {
	        options = JSON.parse(options)._wrappedValue;
	      }
	      func = eval("(" + script + ")");
	      API_VERSION = {
	        major: 0,
	        minor: 9,
	        patch: 0
	      };
	      r = func(this, options);
	      if (r === void 0) {
	        r = null;
	      }
	      result._wrappedValue = r;
	    } catch (error) {
	      e = error;
	      result._wrappedValue = (e.toString()) + "\n\n" + e.stack + "\n\n\tUse the Help > SDKRunner to debug";
	    }
	    return JSON.stringify(result);
	  };
	
	
	  /*
	  Section: Commands
	   */
	
	  OutlineEditor.prototype.performCommand = function(commandName, details, completedCallback) {
	    return Birch.commands.dispatch(this, commandName, details, completedCallback);
	  };
	
	  OutlineEditor.prototype.performCommands = function(commands, completedCallback) {
	    var next;
	    next = commands.shift();
	    if (next) {
	      return this.performCommand(next.name, next.details, (function(_this) {
	        return function() {
	          return _this.performCommands(commands, completedCallback);
	        };
	      })(this));
	    } else {
	      return typeof completedCallback === "function" ? completedCallback() : void 0;
	    }
	  };
	
	  OutlineEditor.prototype.validateCommandMenuItem = function(commandName, menuItem) {
	    switch (commandName) {
	      case 'outline-editor:undo':
	        return this.outline.undoManager.canUndo();
	      case 'outline-editor:redo':
	        return this.outline.undoManager.canRedo();
	    }
	  };
	
	  OutlineEditor.prototype.insertTab = function(e) {
	    var selection;
	    selection = this.selection;
	    return this.replaceRangeWithString(selection.location, selection.length, '\t');
	  };
	
	  OutlineEditor.prototype.insertBacktab = function(e) {};
	
	  OutlineEditor.prototype.backspace = function(e) {
	    var deleteRange, selection;
	    selection = this.selection;
	    deleteRange = {
	      location: selection.location,
	      length: selection.length
	    };
	    if (deleteRange.length === 0 && deleteRange.location > 0) {
	      deleteRange.location--;
	      deleteRange.length = 1;
	    }
	    return this.replaceRangeWithString(deleteRange.location, deleteRange.length, '');
	  };
	
	  OutlineEditor.prototype.undo = function() {
	    return this.outline.undoManager.undo();
	  };
	
	  OutlineEditor.prototype.redo = function() {
	    return this.outline.undoManager.redo();
	  };
	
	
	  /*
	  Section: Delegate
	   */
	
	  OutlineEditor.prototype.clickedOnItemLink = function(item, link) {
	    var value;
	    if (link === 'button://toggledone') {
	      if (Birch.preferences.get('BIncludeDateWhenTaggingDone')) {
	        value = moment().format('YYYY-MM-DD');
	      }
	      this.toggleAttribute('data-done', value, [item], false);
	      return true;
	    } else if (link.indexOf('filter://') === 0) {
	      this.itemPathFilter = link.substring(9);
	      return true;
	    } else {
	      return false;
	    }
	  };
	
	
	  /*
	  Section: Guides and Gaps (Helpers for Drawing)
	   */
	
	  OutlineEditor.prototype.getGuideRangesForVisibleRange = function(location, length) {
	    var ancestor, ancestorSpan, ancestors, eachSpan, end, guideRanges, hoistedItem, i, item, itemSpansInRange, lastDisplayedSpan, len;
	    itemSpansInRange = this.itemBuffer.getSpansInRange(location, length, true);
	    hoistedItem = this.hoistedItem;
	    ancestors = new Set();
	    ancestors.add(hoistedItem);
	    guideRanges = [];
	    for (i = 0, len = itemSpansInRange.length; i < len; i++) {
	      eachSpan = itemSpansInRange[i];
	      item = eachSpan.item;
	      ancestor = item;
	      while (!ancestors.has(ancestor)) {
	        ancestorSpan = this.itemBuffer.getItemSpanForItem(ancestor);
	        lastDisplayedSpan = this.itemBuffer.getItemSpanForItem(this.getLastDisplayedDescendantOrSelf(ancestor));
	        if (ancestorSpan && ancestorSpan !== lastDisplayedSpan) {
	          location = ancestorSpan.getLocation();
	          end = lastDisplayedSpan.getEnd();
	          guideRanges.push(location);
	          guideRanges.push(end - location);
	        }
	        ancestors.add(ancestor);
	        ancestor = ancestor.parent;
	      }
	    }
	    return guideRanges;
	  };
	
	  OutlineEditor.prototype.getGapLocationsForVisibleRange = function(location, length) {
	    var eachGapItem, eachItem, eachSpan, gapItemEnd, gapItemLocation, gapLocations, gapSelected, i, index, itemSpansInRange, len, nextItem, nextItemInBuffer, ref2, selectedItems, selection, selectionEnd, selectionStart;
	    itemSpansInRange = this.itemBuffer.getSpansInRange(location, length, true);
	    selection = this.selection;
	    selectedItems = selection.selectedItems;
	    selectionStart = selection.start;
	    selectionEnd = selection.end;
	    gapLocations = [];
	    for (index = i = 0, len = itemSpansInRange.length; i < len; index = ++i) {
	      eachSpan = itemSpansInRange[index];
	      eachItem = eachSpan.item;
	      nextItemInBuffer = (ref2 = itemSpansInRange[index + 1]) != null ? ref2.item : void 0;
	      if (nextItemInBuffer || eachItem.firstChild) {
	        if ((nextItem = eachItem.nextItem) && (nextItem !== nextItemInBuffer)) {
	          if (this.getDisplayedAncestor(nextItem) != null) {
	            eachGapItem = eachItem.nextItem;
	            gapItemLocation = eachSpan.getLocation();
	            gapItemEnd = gapItemLocation + eachItem.bodyString.length;
	            gapSelected = 0;
	            if (gapItemEnd >= selectionStart && gapItemEnd < selectionEnd) {
	              if (selectedItems.includes(nextItem)) {
	                gapSelected = 1;
	              }
	            }
	            gapLocations.push(gapItemLocation, gapSelected);
	          }
	        }
	      }
	    }
	    return gapLocations;
	  };
	
	  return OutlineEditor;
	
	})();
	
	module.exports = OutlineEditor;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var OutlineEditorNative, assert, util;
	
	util = __webpack_require__(1).util;
	
	assert = util.assert;
	
	module.exports = OutlineEditorNative = (function() {
	  function OutlineEditorNative(editor, text1) {
	    this.editor = editor;
	    this.text = text1 != null ? text1 : '';
	    this.editing = 0;
	    this.selectedRange = {
	      location: 0,
	      length: 0
	    };
	  }
	
	  Object.defineProperty(OutlineEditorNative.prototype, 'isEditing', {
	    get: function() {
	      return this.editing > 0;
	    }
	  });
	
	  Object.defineProperty(OutlineEditorNative.prototype, 'visibleRect', {
	    get: function() {
	      return {
	        x: 0,
	        y: beforeY,
	        width: 100,
	        height: 0
	      };
	    }
	  });
	
	  Object.defineProperty(OutlineEditorNative.prototype, 'scrollPoint', {
	    get: function() {
	      return {
	        x: 0,
	        y: 0
	      };
	    },
	    set: function(scrollPoint) {
	      return this._setScrollPoint(scrollPoint);
	    }
	  });
	
	  OutlineEditorNative.prototype._setScrollPoint = function(scrollPoint) {
	    return assert(this.editing === 0, 'cant be editing when set scrollPoint');
	  };
	
	  Object.defineProperty(OutlineEditorNative.prototype, 'selectedRange', {
	    get: function() {
	      this._selectedRange.location = Math.min(this._selectedRange.location, this.text.length);
	      this._selectedRange.length = Math.min(this._selectedRange.length, this.text.length - this._selectedRange.location);
	      return this._selectedRange;
	    },
	    set: function(selectedRange) {
	      return this._setSelectedRange(selectedRange);
	    }
	  });
	
	  OutlineEditorNative.prototype._setSelectedRange = function(_selectedRange) {
	    this._selectedRange = _selectedRange;
	    this.validateRange(this._selectedRange);
	    assert(this.editing === 0, 'cant be editing when set selectedRange');
	    return this.editor.emitter.emit('did-change-selection');
	  };
	
	  OutlineEditorNative.prototype.getRectForRange = function(range) {
	    var beforeRange, beforeY, inHeight, inRange;
	    this.validateRange(range);
	    assert(this.editing === 0, 'cant be editing when getRectForRange');
	    beforeRange = this.text.substr(0, range.location);
	    beforeY = (beforeRange.split('\n').length - 1) * 10;
	    inRange = this.text.substr(range.location, range.length);
	    inHeight = inRange.split('\n').length * 10;
	    return {
	      x: 0,
	      y: beforeY,
	      width: 100,
	      height: inHeight
	    };
	  };
	
	  OutlineEditorNative.prototype.getCharacterIndexForPoint = function(point) {
	    return Math.floor(Math.random() * this.text.length);
	  };
	
	  OutlineEditorNative.prototype.scrollRangeToVisible = function(range) {
	    var rect;
	    assert(this.editing === 0, 'cant be editing when scrollRangeToVisible');
	    this.validateRange(range);
	    rect = this.getRectForRange(range);
	    return this.scrollPoint = {
	      x: rect.x,
	      y: rect.y
	    };
	  };
	
	  OutlineEditorNative.prototype.invalidateRestorableState = function() {};
	
	  OutlineEditorNative.prototype.beginEditing = function() {
	    return this.editing++;
	  };
	
	  OutlineEditorNative.prototype.setHoistedItem = function(item) {};
	
	  OutlineEditorNative.prototype.invalidateRange = function(range) {
	    assert(this.editing > 0, 'must be editing when invalidateItem');
	    return this.validateRange(range);
	  };
	
	  OutlineEditorNative.prototype.replaceCharactersInRangeWithString = function(range, text) {
	    this.validateRange(range);
	    assert(this.editing > 0, 'must be editing when replaceCharactersInRangeWithString');
	    return this.text = this.text.substring(0, range.location) + text + this.text.substring(range.location + range.length);
	  };
	
	  OutlineEditorNative.prototype.endEditing = function() {
	    this.editing--;
	    if (this.editing === 0) {
	      return this._didEndEditing();
	    }
	  };
	
	  OutlineEditorNative.prototype._didEndEditing = function() {};
	
	  OutlineEditorNative.prototype.focus = function() {};
	
	  OutlineEditorNative.prototype.validateRange = function(range) {
	    assert(range.location <= this.text.length);
	    return assert(range.location + range.length <= this.text.length);
	  };
	
	  OutlineEditorNative.prototype.getDateFromUserDateStringTemplateCallback = function(placeholder, stringTemplate, callback) {
	    return '1976-11-27';
	  };
	
	  OutlineEditorNative.prototype.getItemAttributesFromUserCallback = function(placeholder, callback) {
	    return typeof callback === "function" ? callback(['data-done']) : void 0;
	  };
	
	  OutlineEditorNative.prototype.importRemindersWithCallback = function(callback) {
	    return typeof callback === "function" ? callback(true) : void 0;
	  };
	
	  OutlineEditorNative.prototype.exportToRemindersWithCallback = function(callback) {
	    return typeof callback === "function" ? callback(true) : void 0;
	  };
	
	  OutlineEditorNative.prototype.exportCopyToRemindersWithCallback = function(callback) {
	    return typeof callback === "function" ? callback(true) : void 0;
	  };
	
	  return OutlineEditorNative;
	
	})();


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	var CssSelectorParser, Item, StyleSheet, cssParse, less, parseBool, parseColor, parseColorLib, parsePropertyValue, parseString, parseStringList, propertyParserLookup, selectorParser, specificity;
	
	CssSelectorParser = __webpack_require__(260).CssSelectorParser;
	
	parseColorLib = __webpack_require__(264);
	
	specificity = __webpack_require__(267);
	
	Item = __webpack_require__(1).Item;
	
	cssParse = __webpack_require__(268);
	
	less = __webpack_require__(269);
	
	selectorParser = new CssSelectorParser();
	
	selectorParser.registerNestingOperators('>');
	
	selectorParser.registerAttrEqualityMods('^', '$', '*');
	
	selectorParser.enableSubstitutes();
	
	parseStringList = function(string) {
	  var each, i, len, ref, results;
	  results = [];
	  ref = string.split(',');
	  for (i = 0, len = ref.length; i < len; i++) {
	    each = ref[i];
	    results.push(parseString(each));
	  }
	  return results;
	};
	
	parseString = function(string) {
	  var end;
	  end = string.length - 1;
	  if ((string[0] === "'" && string[end] === "'") || (string[0] === '"' && string[end] === '"')) {
	    string = string.substring(1, end);
	    string = string.replace(/\\/g, '');
	  }
	  return string;
	};
	
	parseColor = function(string) {
	  var parsedColor, ref;
	  parsedColor = parseColorLib(string);
	  return (ref = parsedColor.rgba) != null ? ref : parsedColor.rgb;
	};
	
	parseBool = function(string) {
	  return string === 'true' || string === '';
	};
	
	propertyParserLookup = {
	  'tint-color': parseColor,
	  'backdrop-color': parseColor,
	  'color': parseColor,
	  'font-family': parseStringList,
	  'font-style': null,
	  'font-weight': null,
	  'font-size': parseFloat,
	  'line-height-multiple': parseFloat,
	  'paragraph-spacing-before': parseFloat,
	  'paragraph-spacing-after': parseFloat,
	  'secondary-text-color': parseColor,
	  'error-text-color': parseColor,
	  'placeholder-color': parseColor,
	  'ui-scale': parseFloat,
	  'background-color': parseColor,
	  'invisibles-color': parseColor,
	  'drop-indicator-color': parseColor,
	  'selection-background-color': parseColor,
	  'guide-line-color': parseColor,
	  'guide-line-width': parseFloat,
	  'fold-color': parseColor,
	  'caret-color': parseColor,
	  'caret-width': parseFloat,
	  'item-indent': parseFloat,
	  'editor-wrap-to-column': parseFloat,
	  'item-wrap-to-column': parseFloat,
	  'top-padding-percent': parseFloat,
	  'bottom-padding-percent': parseFloat,
	  'typewriter-scroll-percent': parseFloat,
	  'handle-size': parseFloat,
	  'handle-color': parseColor,
	  'handle-border-color': parseColor,
	  'handle-border-width': parseFloat,
	  'cursor': null,
	  'text-decoration': null,
	  'text-underline': null,
	  'text-underline-color': parseColor,
	  'text-strikethrough': null,
	  'text-strikethrough-color': parseColor,
	  'text-baseline-offset': parseFloat,
	  'text-expansion': parseFloat
	};
	
	parsePropertyValue = function(property, value) {
	  var parser;
	  if (value) {
	    parser = propertyParserLookup[property];
	    if (parser) {
	      return parser(value);
	    } else {
	      return value;
	    }
	  } else {
	    return void 0;
	  }
	};
	
	module.exports = StyleSheet = (function() {
	  function StyleSheet(lessRules) {
	    var declarationOrder, eachRule, eachSelector, i, j, len, len1, nextID, ref, rulesList;
	    if (lessRules == null) {
	      lessRules = '';
	    }
	    this.idsToRules = new Map();
	    this.sortedSelectors = [];
	    this.computedStylesToKeys = new Map();
	    nextID = 0;
	    rulesList = [];
	    less.render(lessRules, {}, (function(_this) {
	      return function(error, cssResult) {
	        var eachDeclaration, eachParsedRule, eachRule, eachSelector, i, j, k, len, len1, len2, parsedrules, ref, ref1, results1, selector;
	        if (error) {
	          console.log("Error parsing lessRules: " + error);
	          return typeof errorCallback === "function" ? errorCallback(error) : void 0;
	        } else {
	          try {
	            parsedrules = cssParse(cssResult.css).stylesheet.rules;
	          } catch (error1) {
	            error = error1;
	            console.log("Error parsing cssRules: " + cssResult.css);
	            parsedrules = [];
	          }
	          results1 = [];
	          for (i = 0, len = parsedrules.length; i < len; i++) {
	            eachParsedRule = parsedrules[i];
	            if (eachParsedRule.type === 'rule') {
	              eachRule = {
	                id: "id-" + (nextID++),
	                selectors: [],
	                declarations: {}
	              };
	              ref = eachParsedRule.selectors;
	              for (j = 0, len1 = ref.length; j < len1; j++) {
	                eachSelector = ref[j];
	                try {
	                  selector = specificity.calculate(eachSelector)[0];
	                  selector.selectorAST = selectorParser.parse(eachSelector);
	                  eachRule.selectors.push(selector);
	                  selector.rule = eachRule;
	                } catch (error1) {
	                  error = error1;
	                  console.log("Error parsing selector: " + eachSelector);
	                }
	              }
	              ref1 = eachParsedRule.declarations;
	              for (k = 0, len2 = ref1.length; k < len2; k++) {
	                eachDeclaration = ref1[k];
	                try {
	                  eachRule.declarations[eachDeclaration.property] = parsePropertyValue(eachDeclaration.property, eachDeclaration.value);
	                } catch (error1) {
	                  error = error1;
	                  console.log("Error parsing property: " + eachDeclaration.property + " value: " + eachDeclaration.value);
	                }
	              }
	              _this.idsToRules.set(eachRule.id, eachRule);
	              results1.push(rulesList.push(eachRule));
	            } else {
	              results1.push(void 0);
	            }
	          }
	          return results1;
	        }
	      };
	    })(this));
	    declarationOrder = 0;
	    for (i = 0, len = rulesList.length; i < len; i++) {
	      eachRule = rulesList[i];
	      ref = eachRule.selectors;
	      for (j = 0, len1 = ref.length; j < len1; j++) {
	        eachSelector = ref[j];
	        eachSelector.declarationOrder = declarationOrder++;
	        this.sortedSelectors.push(eachSelector);
	      }
	    }
	    this.sortedSelectors.sort(function(a, b) {
	      var sort;
	      sort = a.specificity.localeCompare(b.specificity);
	      if (a.specificity === b.specificity) {
	        return a.declarationOrder - b.declarationOrder;
	      } else if (a.specificity < b.specificity) {
	        return -1;
	      } else {
	        return 1;
	      }
	    });
	  }
	
	
	  /*
	  Section: Styles
	   */
	
	  StyleSheet.prototype.getStyleForElement = function(element) {
	    return this.getStyleForKey(this.getStyleKeyForElement(element));
	  };
	
	  StyleSheet.prototype.getStyleKeyForElement = function(element) {
	    var eachSelector, error, i, len, matches, ref;
	    matches = [];
	    try {
	      ref = this.sortedSelectors;
	      for (i = 0, len = ref.length; i < len; i++) {
	        eachSelector = ref[i];
	        if (StyleSheet.matchesSelector(eachSelector.selectorAST, element)) {
	          matches.push(eachSelector.rule.id);
	        }
	      }
	    } catch (error1) {
	      error = error1;
	      console.log("Exception matching StyleSheet selector: " + error);
	    }
	    if (matches.length) {
	      return matches.join(',');
	    } else {
	      return null;
	    }
	  };
	
	  StyleSheet.prototype.getStyleForKey = function(key) {
	    var declarations, eachRuleID, i, len, ref, ref1, style;
	    if (!(style = this.computedStylesToKeys.get(key))) {
	      style = {};
	      if (key) {
	        ref = key.split(',');
	        for (i = 0, len = ref.length; i < len; i++) {
	          eachRuleID = ref[i];
	          if (declarations = (ref1 = this.idsToRules.get(eachRuleID)) != null ? ref1.declarations : void 0) {
	            Object.assign(style, declarations);
	          }
	        }
	      }
	      this.computedStylesToKeys.set(key, style);
	    }
	    return style;
	  };
	
	
	  /*
	  Section: Computed Styles
	   */
	
	  StyleSheet.prototype.getComputedStyleForElement = function(element, cache) {
	    return this.getComputedStyleForKeyPath(this.getComputedStyleKeyPathForElement(element, cache), cache);
	  };
	
	  StyleSheet.prototype.getComputedStyleKeyPathForElement = function(element, cache) {
	    var key, ref;
	    if (!element) {
	      return null;
	    }
	    if (typeof element === 'string') {
	      element = {
	        tagName: element,
	        attributes: {}
	      };
	    }
	    if (element.computedStyleKeyPath) {
	      return element.computedStyleKeyPath;
	    }
	    key = (ref = this.getStyleKeyForElement(element)) != null ? ref : '*';
	    if (element.parentNode) {
	      element.computedStyleKeyPath = (this.getComputedStyleKeyPathForElement(element.parentNode, cache)) + ">" + key;
	    } else {
	      element.computedStyleKeyPath = key;
	    }
	    return element.computedStyleKeyPath;
	  };
	
	  StyleSheet.prototype.getComputedStyleForKeyPath = function(keyPath, cache) {
	    var ancestorsComputedStyle, computedStyle, keyPathItems;
	    computedStyle = cache != null ? cache[keyPath] : void 0;
	    if (!computedStyle) {
	      keyPathItems = keyPath.split('>');
	      computedStyle = Object.assign({}, this.getStyleForKey(keyPathItems.pop()));
	      if (keyPathItems.length) {
	        ancestorsComputedStyle = this.getComputedStyleForKeyPath(keyPathItems.join('>'));
	        if (ancestorsComputedStyle) {
	          if (computedStyle['color'] == null) {
	            computedStyle['color'] = ancestorsComputedStyle['color'];
	          }
	          if (computedStyle['font-family'] == null) {
	            computedStyle['font-family'] = ancestorsComputedStyle['font-family'];
	          }
	          if (computedStyle['font-style'] == null) {
	            computedStyle['font-style'] = ancestorsComputedStyle['font-style'];
	          }
	          if (computedStyle['font-weight'] == null) {
	            computedStyle['font-weight'] = ancestorsComputedStyle['font-weight'];
	          }
	          if (computedStyle['font-size'] == null) {
	            computedStyle['font-size'] = ancestorsComputedStyle['font-size'];
	          }
	          if (computedStyle['line-height-multiple'] == null) {
	            computedStyle['line-height-multiple'] = ancestorsComputedStyle['line-height-multiple'];
	          }
	        }
	        if (cache != null) {
	          cache[keyPath] = computedStyle;
	        }
	      }
	    }
	    return computedStyle;
	  };
	
	
	  /*
	  Section: Private
	   */
	
	  StyleSheet.matchesSelector = function(selector, element) {
	    var each, error, i, nesting, rule, rule1, rule2, rules;
	    if (typeof selector === 'string') {
	      try {
	        selector = selectorParser.parse(selector);
	      } catch (error1) {
	        error = error1;
	        console.log("Error parsing selector: " + error);
	        return false;
	      }
	    }
	    if (typeof element === 'string') {
	      element = {
	        tagName: element,
	        attributes: {}
	      };
	    }
	    rule1 = selector.rule;
	    rule2 = rule1.rule;
	    if (rule2) {
	      rules = [rule1, rule2];
	      each = rule2.rule;
	      while (each) {
	        rules.push(each);
	        each = each.rule;
	      }
	      for (i = rules.length - 1; i >= 0; i += -1) {
	        rule = rules[i];
	        nesting = rule.nestingOperator;
	        if (!(nesting === void 0 || nesting === '>')) {
	          throw Error('Invalid nesting operator: #{nestingOperator}. Only ">" nesting is allowed.');
	        }
	        if (!element) {
	          return false;
	        }
	        if (!this.matchesRule(rule, element)) {
	          return false;
	        }
	        element = element.parentNode;
	      }
	      return true;
	    } else {
	      return this.matchesRule(rule1, element);
	    }
	  };
	
	  StyleSheet.matchesRule = function(rule, element) {
	    var attr, i, len, ref, ref1, ref2, value;
	    if (rule.tagName && rule.tagName !== '*' && rule.tagName !== element.tagName) {
	      return false;
	    }
	    if (rule.attrs) {
	      ref = rule.attrs;
	      for (i = 0, len = ref.length; i < len; i++) {
	        attr = ref[i];
	        value = (ref1 = (ref2 = element.attributes) != null ? ref2[attr.name] : void 0) != null ? ref1 : element[attr.name];
	        if (value == null) {
	          return false;
	        }
	        switch (attr.operator) {
	          case void 0:
	            break;
	          case '=':
	            value = Item.objectToAttributeValueString(value);
	            if (value !== attr.value) {
	              return false;
	            }
	            break;
	          case '^=':
	            value = Item.objectToAttributeValueString(value);
	            if (value.slice(0, attr.value.length) !== attr.value) {
	              return false;
	            }
	            break;
	          case '*=':
	            value = Item.objectToAttributeValueString(value);
	            if (value.indexOf(attr.value) === -1) {
	              return false;
	            }
	            break;
	          case '$=':
	            value = Item.objectToAttributeValueString(value);
	            if (value.slice(-attr.value.length) !== attr.value) {
	              return false;
	            }
	            break;
	          default:
	            throw Error('Undefined attribute operator: #{attr.operator}');
	        }
	      }
	    }
	    return true;
	  };
	
	  return StyleSheet;
	
	})();


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var parser_context_1 = __webpack_require__(261);
	var render_1 = __webpack_require__(263);
	var CssSelectorParser = /** @class */ (function () {
	    function CssSelectorParser() {
	        this.pseudos = {};
	        this.attrEqualityMods = {};
	        this.ruleNestingOperators = {};
	        this.substitutesEnabled = false;
	    }
	    CssSelectorParser.prototype.registerSelectorPseudos = function () {
	        var pseudos = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            pseudos[_i] = arguments[_i];
	        }
	        for (var _a = 0, pseudos_1 = pseudos; _a < pseudos_1.length; _a++) {
	            var pseudo = pseudos_1[_a];
	            this.pseudos[pseudo] = 'selector';
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.unregisterSelectorPseudos = function () {
	        var pseudos = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            pseudos[_i] = arguments[_i];
	        }
	        for (var _a = 0, pseudos_2 = pseudos; _a < pseudos_2.length; _a++) {
	            var pseudo = pseudos_2[_a];
	            delete this.pseudos[pseudo];
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.registerNumericPseudos = function () {
	        var pseudos = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            pseudos[_i] = arguments[_i];
	        }
	        for (var _a = 0, pseudos_3 = pseudos; _a < pseudos_3.length; _a++) {
	            var pseudo = pseudos_3[_a];
	            this.pseudos[pseudo] = 'numeric';
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.unregisterNumericPseudos = function () {
	        var pseudos = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            pseudos[_i] = arguments[_i];
	        }
	        for (var _a = 0, pseudos_4 = pseudos; _a < pseudos_4.length; _a++) {
	            var pseudo = pseudos_4[_a];
	            delete this.pseudos[pseudo];
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.registerNestingOperators = function () {
	        var operators = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operators[_i] = arguments[_i];
	        }
	        for (var _a = 0, operators_1 = operators; _a < operators_1.length; _a++) {
	            var operator = operators_1[_a];
	            this.ruleNestingOperators[operator] = true;
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.unregisterNestingOperators = function () {
	        var operators = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operators[_i] = arguments[_i];
	        }
	        for (var _a = 0, operators_2 = operators; _a < operators_2.length; _a++) {
	            var operator = operators_2[_a];
	            delete this.ruleNestingOperators[operator];
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.registerAttrEqualityMods = function () {
	        var mods = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            mods[_i] = arguments[_i];
	        }
	        for (var _a = 0, mods_1 = mods; _a < mods_1.length; _a++) {
	            var mod = mods_1[_a];
	            this.attrEqualityMods[mod] = true;
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.unregisterAttrEqualityMods = function () {
	        var mods = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            mods[_i] = arguments[_i];
	        }
	        for (var _a = 0, mods_2 = mods; _a < mods_2.length; _a++) {
	            var mod = mods_2[_a];
	            delete this.attrEqualityMods[mod];
	        }
	        return this;
	    };
	    CssSelectorParser.prototype.enableSubstitutes = function () {
	        this.substitutesEnabled = true;
	        return this;
	    };
	    CssSelectorParser.prototype.disableSubstitutes = function () {
	        this.substitutesEnabled = false;
	        return this;
	    };
	    CssSelectorParser.prototype.parse = function (str) {
	        return parser_context_1.parseCssSelector(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);
	    };
	    CssSelectorParser.prototype.render = function (path) {
	        return render_1.renderEntity(path).trim();
	    };
	    return CssSelectorParser;
	}());
	exports.CssSelectorParser = CssSelectorParser;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(262);
	function parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {
	    var l = str.length;
	    var chr = '';
	    function getStr(quote, escapeTable) {
	        var result = '';
	        pos++;
	        chr = str.charAt(pos);
	        while (pos < l) {
	            if (chr === quote) {
	                pos++;
	                return result;
	            }
	            else if (chr === '\\') {
	                pos++;
	                chr = str.charAt(pos);
	                var esc = void 0;
	                if (chr === quote) {
	                    result += quote;
	                }
	                else if ((esc = escapeTable[chr]) !== undefined) {
	                    result += esc;
	                }
	                else if (utils_1.isHex(chr)) {
	                    var hex = chr;
	                    pos++;
	                    chr = str.charAt(pos);
	                    while (utils_1.isHex(chr)) {
	                        hex += chr;
	                        pos++;
	                        chr = str.charAt(pos);
	                    }
	                    if (chr === ' ') {
	                        pos++;
	                        chr = str.charAt(pos);
	                    }
	                    result += String.fromCharCode(parseInt(hex, 16));
	                    continue;
	                }
	                else {
	                    result += chr;
	                }
	            }
	            else {
	                result += chr;
	            }
	            pos++;
	            chr = str.charAt(pos);
	        }
	        return result;
	    }
	    function getIdent() {
	        var result = '';
	        chr = str.charAt(pos);
	        while (pos < l) {
	            if (utils_1.isIdent(chr)) {
	                result += chr;
	            }
	            else if (chr === '\\') {
	                pos++;
	                if (pos >= l) {
	                    throw Error('Expected symbol but end of file reached.');
	                }
	                chr = str.charAt(pos);
	                if (utils_1.identSpecialChars[chr]) {
	                    result += chr;
	                }
	                else if (utils_1.isHex(chr)) {
	                    var hex = chr;
	                    pos++;
	                    chr = str.charAt(pos);
	                    while (utils_1.isHex(chr)) {
	                        hex += chr;
	                        pos++;
	                        chr = str.charAt(pos);
	                    }
	                    if (chr === ' ') {
	                        pos++;
	                        chr = str.charAt(pos);
	                    }
	                    result += String.fromCharCode(parseInt(hex, 16));
	                    continue;
	                }
	                else {
	                    result += chr;
	                }
	            }
	            else {
	                return result;
	            }
	            pos++;
	            chr = str.charAt(pos);
	        }
	        return result;
	    }
	    function skipWhitespace() {
	        chr = str.charAt(pos);
	        var result = false;
	        while (chr === ' ' || chr === "\t" || chr === "\n" || chr === "\r" || chr === "\f") {
	            result = true;
	            pos++;
	            chr = str.charAt(pos);
	        }
	        return result;
	    }
	    function parse() {
	        var res = parseSelector();
	        if (pos < l) {
	            throw Error('Rule expected but "' + str.charAt(pos) + '" found.');
	        }
	        return res;
	    }
	    function parseSelector() {
	        var selector = parseSingleSelector();
	        if (!selector) {
	            return null;
	        }
	        var res = selector;
	        chr = str.charAt(pos);
	        while (chr === ',') {
	            pos++;
	            skipWhitespace();
	            if (res.type !== 'selectors') {
	                res = {
	                    type: 'selectors',
	                    selectors: [selector]
	                };
	            }
	            selector = parseSingleSelector();
	            if (!selector) {
	                throw Error('Rule expected after ",".');
	            }
	            res.selectors.push(selector);
	        }
	        return res;
	    }
	    function parseSingleSelector() {
	        skipWhitespace();
	        var selector = {
	            type: 'ruleSet'
	        };
	        var rule = parseRule();
	        if (!rule) {
	            return null;
	        }
	        var currentRule = selector;
	        while (rule) {
	            rule.type = 'rule';
	            currentRule.rule = rule;
	            currentRule = rule;
	            skipWhitespace();
	            chr = str.charAt(pos);
	            if (pos >= l || chr === ',' || chr === ')') {
	                break;
	            }
	            if (ruleNestingOperators[chr]) {
	                var op = chr;
	                pos++;
	                skipWhitespace();
	                rule = parseRule();
	                if (!rule) {
	                    throw Error('Rule expected after "' + op + '".');
	                }
	                rule.nestingOperator = op;
	            }
	            else {
	                rule = parseRule();
	                if (rule) {
	                    rule.nestingOperator = null;
	                }
	            }
	        }
	        return selector;
	    }
	    // @ts-ignore no-overlap
	    function parseRule() {
	        var rule = null;
	        while (pos < l) {
	            chr = str.charAt(pos);
	            if (chr === '*') {
	                pos++;
	                (rule = rule || {}).tagName = '*';
	            }
	            else if (utils_1.isIdentStart(chr) || chr === '\\') {
	                (rule = rule || {}).tagName = getIdent();
	            }
	            else if (chr === '.') {
	                pos++;
	                rule = rule || {};
	                (rule.classNames = rule.classNames || []).push(getIdent());
	            }
	            else if (chr === '#') {
	                pos++;
	                (rule = rule || {}).id = getIdent();
	            }
	            else if (chr === '[') {
	                pos++;
	                skipWhitespace();
	                var attr = {
	                    name: getIdent()
	                };
	                skipWhitespace();
	                // @ts-ignore
	                if (chr === ']') {
	                    pos++;
	                }
	                else {
	                    var operator = '';
	                    if (attrEqualityMods[chr]) {
	                        operator = chr;
	                        pos++;
	                        chr = str.charAt(pos);
	                    }
	                    if (pos >= l) {
	                        throw Error('Expected "=" but end of file reached.');
	                    }
	                    if (chr !== '=') {
	                        throw Error('Expected "=" but "' + chr + '" found.');
	                    }
	                    attr.operator = operator + '=';
	                    pos++;
	                    skipWhitespace();
	                    var attrValue = '';
	                    attr.valueType = 'string';
	                    // @ts-ignore
	                    if (chr === '"') {
	                        attrValue = getStr('"', utils_1.doubleQuotesEscapeChars);
	                        // @ts-ignore
	                    }
	                    else if (chr === '\'') {
	                        attrValue = getStr('\'', utils_1.singleQuoteEscapeChars);
	                        // @ts-ignore
	                    }
	                    else if (substitutesEnabled && chr === '$') {
	                        pos++;
	                        attrValue = getIdent();
	                        attr.valueType = 'substitute';
	                    }
	                    else {
	                        while (pos < l) {
	                            if (chr === ']') {
	                                break;
	                            }
	                            attrValue += chr;
	                            pos++;
	                            chr = str.charAt(pos);
	                        }
	                        attrValue = attrValue.trim();
	                    }
	                    skipWhitespace();
	                    if (pos >= l) {
	                        throw Error('Expected "]" but end of file reached.');
	                    }
	                    if (chr !== ']') {
	                        throw Error('Expected "]" but "' + chr + '" found.');
	                    }
	                    pos++;
	                    attr.value = attrValue;
	                }
	                rule = rule || {};
	                (rule.attrs = rule.attrs || []).push(attr);
	            }
	            else if (chr === ':') {
	                pos++;
	                var pseudoName = getIdent();
	                var pseudo = {
	                    name: pseudoName
	                };
	                // @ts-ignore
	                if (chr === '(') {
	                    pos++;
	                    var value = '';
	                    skipWhitespace();
	                    if (pseudos[pseudoName] === 'selector') {
	                        pseudo.valueType = 'selector';
	                        value = parseSelector();
	                    }
	                    else {
	                        pseudo.valueType = pseudos[pseudoName] || 'string';
	                        // @ts-ignore
	                        if (chr === '"') {
	                            value = getStr('"', utils_1.doubleQuotesEscapeChars);
	                            // @ts-ignore
	                        }
	                        else if (chr === '\'') {
	                            value = getStr('\'', utils_1.singleQuoteEscapeChars);
	                            // @ts-ignore
	                        }
	                        else if (substitutesEnabled && chr === '$') {
	                            pos++;
	                            value = getIdent();
	                            pseudo.valueType = 'substitute';
	                        }
	                        else {
	                            while (pos < l) {
	                                if (chr === ')') {
	                                    break;
	                                }
	                                value += chr;
	                                pos++;
	                                chr = str.charAt(pos);
	                            }
	                            value = value.trim();
	                        }
	                        skipWhitespace();
	                    }
	                    if (pos >= l) {
	                        throw Error('Expected ")" but end of file reached.');
	                    }
	                    if (chr !== ')') {
	                        throw Error('Expected ")" but "' + chr + '" found.');
	                    }
	                    pos++;
	                    pseudo.value = value;
	                }
	                rule = rule || {};
	                (rule.pseudos = rule.pseudos || []).push(pseudo);
	            }
	            else {
	                break;
	            }
	        }
	        return rule;
	    }
	    return parse();
	}
	exports.parseCssSelector = parseCssSelector;


/***/ }),
/* 262 */
/***/ (function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function isIdentStart(c) {
	    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c === '-') || (c === '_');
	}
	exports.isIdentStart = isIdentStart;
	function isIdent(c) {
	    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c === '-' || c === '_';
	}
	exports.isIdent = isIdent;
	function isHex(c) {
	    return (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || (c >= '0' && c <= '9');
	}
	exports.isHex = isHex;
	function escapeIdentifier(s) {
	    var len = s.length;
	    var result = '';
	    var i = 0;
	    while (i < len) {
	        var chr = s.charAt(i);
	        if (exports.identSpecialChars[chr]) {
	            result += '\\' + chr;
	        }
	        else {
	            if (!(chr === '_' || chr === '-' ||
	                (chr >= 'A' && chr <= 'Z') ||
	                (chr >= 'a' && chr <= 'z') ||
	                (i !== 0 && chr >= '0' && chr <= '9'))) {
	                var charCode = chr.charCodeAt(0);
	                if ((charCode & 0xF800) === 0xD800) {
	                    var extraCharCode = s.charCodeAt(i++);
	                    if ((charCode & 0xFC00) !== 0xD800 || (extraCharCode & 0xFC00) !== 0xDC00) {
	                        throw Error('UCS-2(decode): illegal sequence');
	                    }
	                    charCode = ((charCode & 0x3FF) << 10) + (extraCharCode & 0x3FF) + 0x10000;
	                }
	                result += '\\' + charCode.toString(16) + ' ';
	            }
	            else {
	                result += chr;
	            }
	        }
	        i++;
	    }
	    return result;
	}
	exports.escapeIdentifier = escapeIdentifier;
	function escapeStr(s) {
	    var len = s.length;
	    var result = '';
	    var i = 0;
	    var replacement;
	    while (i < len) {
	        var chr = s.charAt(i);
	        if (chr === '"') {
	            chr = '\\"';
	        }
	        else if (chr === '\\') {
	            chr = '\\\\';
	        }
	        else if ((replacement = exports.strReplacementsRev[chr]) !== undefined) {
	            chr = replacement;
	        }
	        result += chr;
	        i++;
	    }
	    return "\"" + result + "\"";
	}
	exports.escapeStr = escapeStr;
	exports.identSpecialChars = {
	    '!': true,
	    '"': true,
	    '#': true,
	    '$': true,
	    '%': true,
	    '&': true,
	    '\'': true,
	    '(': true,
	    ')': true,
	    '*': true,
	    '+': true,
	    ',': true,
	    '.': true,
	    '/': true,
	    ';': true,
	    '<': true,
	    '=': true,
	    '>': true,
	    '?': true,
	    '@': true,
	    '[': true,
	    '\\': true,
	    ']': true,
	    '^': true,
	    '`': true,
	    '{': true,
	    '|': true,
	    '}': true,
	    '~': true
	};
	exports.strReplacementsRev = {
	    '\n': '\\n',
	    '\r': '\\r',
	    '\t': '\\t',
	    '\f': '\\f',
	    '\v': '\\v'
	};
	exports.singleQuoteEscapeChars = {
	    n: '\n',
	    r: '\r',
	    t: '\t',
	    f: '\f',
	    '\\': '\\',
	    '\'': '\''
	};
	exports.doubleQuotesEscapeChars = {
	    n: '\n',
	    r: '\r',
	    t: '\t',
	    f: '\f',
	    '\\': '\\',
	    '"': '"'
	};


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(262);
	function renderEntity(entity) {
	    var res = '';
	    switch (entity.type) {
	        case 'ruleSet':
	            var currentEntity = entity.rule;
	            var parts = [];
	            while (currentEntity) {
	                if (currentEntity.nestingOperator) {
	                    parts.push(currentEntity.nestingOperator);
	                }
	                parts.push(renderEntity(currentEntity));
	                currentEntity = currentEntity.rule;
	            }
	            res = parts.join(' ');
	            break;
	        case 'selectors':
	            res = entity.selectors.map(renderEntity).join(', ');
	            break;
	        case 'rule':
	            if (entity.tagName) {
	                if (entity.tagName === '*') {
	                    res = '*';
	                }
	                else {
	                    res = utils_1.escapeIdentifier(entity.tagName);
	                }
	            }
	            if (entity.id) {
	                res += "#" + utils_1.escapeIdentifier(entity.id);
	            }
	            if (entity.classNames) {
	                res += entity.classNames.map(function (cn) {
	                    return "." + (utils_1.escapeIdentifier(cn));
	                }).join('');
	            }
	            if (entity.attrs) {
	                res += entity.attrs.map(function (attr) {
	                    if ('operator' in attr) {
	                        if (attr.valueType === 'substitute') {
	                            return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + "$" + attr.value + "]";
	                        }
	                        else {
	                            return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + utils_1.escapeStr(attr.value) + "]";
	                        }
	                    }
	                    else {
	                        return "[" + utils_1.escapeIdentifier(attr.name) + "]";
	                    }
	                }).join('');
	            }
	            if (entity.pseudos) {
	                res += entity.pseudos.map(function (pseudo) {
	                    if (pseudo.valueType) {
	                        if (pseudo.valueType === 'selector') {
	                            return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + renderEntity(pseudo.value) + ")";
	                        }
	                        else if (pseudo.valueType === 'substitute') {
	                            return ":" + utils_1.escapeIdentifier(pseudo.name) + "($" + pseudo.value + ")";
	                        }
	                        else if (pseudo.valueType === 'numeric') {
	                            return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + pseudo.value + ")";
	                        }
	                        else {
	                            return (":" + utils_1.escapeIdentifier(pseudo.name) +
	                                "(" + utils_1.escapeIdentifier(pseudo.value) + ")");
	                        }
	                    }
	                    else {
	                        return ":" + utils_1.escapeIdentifier(pseudo.name);
	                    }
	                }).join('');
	            }
	            break;
	        default:
	            throw Error('Unknown entity type: "' + entity.type + '".');
	    }
	    return res;
	}
	exports.renderEntity = renderEntity;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	var convert = __webpack_require__(265);
	
	module.exports = function (cstr) {
	    var m, conv, parts, alpha;
	    if (m = /^((?:rgb|hs[lv]|cmyk|xyz|lab)a?)\s*\(([^\)]*)\)/.exec(cstr)) {
	        var name = m[1];
	        var base = name.replace(/a$/, '');
	        var size = base === 'cmyk' ? 4 : 3;
	        conv = convert[base];
	        
	        parts = m[2].replace(/^\s+|\s+$/g, '')
	            .split(/\s*,\s*/)
	            .map(function (x, i) {
	                if (/%$/.test(x) && i === size) {
	                    return parseFloat(x) / 100;
	                }
	                else if (/%$/.test(x)) {
	                    return parseFloat(x);
	                }
	                return parseFloat(x);
	            })
	        ;
	        if (name === base) parts.push(1);
	        alpha = parts[size] === undefined ? 1 : parts[size];
	        parts = parts.slice(0, size);
	        
	        conv[base] = function () { return parts };
	    }
	    else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {
	        var base = cstr.replace(/^#/,'');
	        var size = base.length;
	        conv = convert.rgb;
	        parts = base.split(size === 3 ? /(.)/ : /(..)/);
	        parts = parts.filter(Boolean)
	            .map(function (x) {
	                if (size === 3) {
	                    return parseInt(x + x, 16);
	                }
	                else {
	                    return parseInt(x, 16)
	                }
	            })
	        ;
	        alpha = 1;
	        conv.rgb = function () { return parts };
	        if (!parts[0]) parts[0] = 0;
	        if (!parts[1]) parts[1] = 0;
	        if (!parts[2]) parts[2] = 0;
	    }
	    else {
	        conv = convert.keyword;
	        conv.keyword = function () { return cstr };
	        parts = cstr;
	        alpha = 1;
	    }
	    
	    var res = {
	        rgb: undefined,
	        hsl: undefined,
	        hsv: undefined,
	        cmyk: undefined,
	        keyword: undefined,
	        hex: undefined
	    };
	    try { res.rgb = conv.rgb(parts) } catch (e) {}
	    try { res.hsl = conv.hsl(parts) } catch (e) {}
	    try { res.hsv = conv.hsv(parts) } catch (e) {}
	    try { res.cmyk = conv.cmyk(parts) } catch (e) {}
	    try { res.keyword = conv.keyword(parts) } catch (e) {}
	    
	    if (res.rgb) res.hex = '#' + res.rgb.map(function (x) {
	        var s = x.toString(16);
	        if (s.length === 1) return '0' + s;
	        return s;
	    }).join('');
	    
	    if (res.rgb) res.rgba = res.rgb.concat(alpha);
	    if (res.hsl) res.hsla = res.hsl.concat(alpha);
	    if (res.hsv) res.hsva = res.hsv.concat(alpha);
	    if (res.cmyk) res.cmyka = res.cmyk.concat(alpha);
	    
	    return res;
	};


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	var conversions = __webpack_require__(266);
	
	var convert = function() {
	   return new Converter();
	}
	
	for (var func in conversions) {
	  // export Raw versions
	  convert[func + "Raw"] =  (function(func) {
	    // accept array or plain args
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      return conversions[func](arg);
	    }
	  })(func);
	
	  var pair = /(\w+)2(\w+)/.exec(func),
	      from = pair[1],
	      to = pair[2];
	
	  // export rgb2hsl and ["rgb"]["hsl"]
	  convert[from] = convert[from] || {};
	
	  convert[from][to] = convert[func] = (function(func) { 
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      
	      var val = conversions[func](arg);
	      if (typeof val == "string" || val === undefined)
	        return val; // keyword
	
	      for (var i = 0; i < val.length; i++)
	        val[i] = Math.round(val[i]);
	      return val;
	    }
	  })(func);
	}
	
	
	/* Converter does lazy conversion and caching */
	var Converter = function() {
	   this.convs = {};
	};
	
	/* Either get the values for a space or
	  set the values for a space, depending on args */
	Converter.prototype.routeSpace = function(space, args) {
	   var values = args[0];
	   if (values === undefined) {
	      // color.rgb()
	      return this.getValues(space);
	   }
	   // color.rgb(10, 10, 10)
	   if (typeof values == "number") {
	      values = Array.prototype.slice.call(args);        
	   }
	
	   return this.setValues(space, values);
	};
	  
	/* Set the values for a space, invalidating cache */
	Converter.prototype.setValues = function(space, values) {
	   this.space = space;
	   this.convs = {};
	   this.convs[space] = values;
	   return this;
	};
	
	/* Get the values for a space. If there's already
	  a conversion for the space, fetch it, otherwise
	  compute it */
	Converter.prototype.getValues = function(space) {
	   var vals = this.convs[space];
	   if (!vals) {
	      var fspace = this.space,
	          from = this.convs[fspace];
	      vals = convert[fspace][space](from);
	
	      this.convs[space] = vals;
	   }
	  return vals;
	};
	
	["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
	   Converter.prototype[space] = function(vals) {
	      return this.routeSpace(space, arguments);
	   }
	});
	
	module.exports = convert;

/***/ }),
/* 266 */
/***/ (function(module, exports) {

	/* MIT license */
	
	module.exports = {
	  rgb2hsl: rgb2hsl,
	  rgb2hsv: rgb2hsv,
	  rgb2hwb: rgb2hwb,
	  rgb2cmyk: rgb2cmyk,
	  rgb2keyword: rgb2keyword,
	  rgb2xyz: rgb2xyz,
	  rgb2lab: rgb2lab,
	  rgb2lch: rgb2lch,
	
	  hsl2rgb: hsl2rgb,
	  hsl2hsv: hsl2hsv,
	  hsl2hwb: hsl2hwb,
	  hsl2cmyk: hsl2cmyk,
	  hsl2keyword: hsl2keyword,
	
	  hsv2rgb: hsv2rgb,
	  hsv2hsl: hsv2hsl,
	  hsv2hwb: hsv2hwb,
	  hsv2cmyk: hsv2cmyk,
	  hsv2keyword: hsv2keyword,
	
	  hwb2rgb: hwb2rgb,
	  hwb2hsl: hwb2hsl,
	  hwb2hsv: hwb2hsv,
	  hwb2cmyk: hwb2cmyk,
	  hwb2keyword: hwb2keyword,
	
	  cmyk2rgb: cmyk2rgb,
	  cmyk2hsl: cmyk2hsl,
	  cmyk2hsv: cmyk2hsv,
	  cmyk2hwb: cmyk2hwb,
	  cmyk2keyword: cmyk2keyword,
	
	  keyword2rgb: keyword2rgb,
	  keyword2hsl: keyword2hsl,
	  keyword2hsv: keyword2hsv,
	  keyword2hwb: keyword2hwb,
	  keyword2cmyk: keyword2cmyk,
	  keyword2lab: keyword2lab,
	  keyword2xyz: keyword2xyz,
	
	  xyz2rgb: xyz2rgb,
	  xyz2lab: xyz2lab,
	  xyz2lch: xyz2lch,
	
	  lab2xyz: lab2xyz,
	  lab2rgb: lab2rgb,
	  lab2lch: lab2lch,
	
	  lch2lab: lch2lab,
	  lch2xyz: lch2xyz,
	  lch2rgb: lch2rgb
	}
	
	
	function rgb2hsl(rgb) {
	  var r = rgb[0]/255,
	      g = rgb[1]/255,
	      b = rgb[2]/255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, l;
	
	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g)/ delta;
	
	  h = Math.min(h * 60, 360);
	
	  if (h < 0)
	    h += 360;
	
	  l = (min + max) / 2;
	
	  if (max == min)
	    s = 0;
	  else if (l <= 0.5)
	    s = delta / (max + min);
	  else
	    s = delta / (2 - max - min);
	
	  return [h, s * 100, l * 100];
	}
	
	function rgb2hsv(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, v;
	
	  if (max == 0)
	    s = 0;
	  else
	    s = (delta/max * 1000)/10;
	
	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g) / delta;
	
	  h = Math.min(h * 60, 360);
	
	  if (h < 0)
	    h += 360;
	
	  v = ((max / 255) * 1000) / 10;
	
	  return [h, s, v];
	}
	
	function rgb2hwb(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      h = rgb2hsl(rgb)[0],
	      w = 1/255 * Math.min(r, Math.min(g, b)),
	      b = 1 - 1/255 * Math.max(r, Math.max(g, b));
	
	  return [h, w * 100, b * 100];
	}
	
	function rgb2cmyk(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255,
	      c, m, y, k;
	
	  k = Math.min(1 - r, 1 - g, 1 - b);
	  c = (1 - r - k) / (1 - k) || 0;
	  m = (1 - g - k) / (1 - k) || 0;
	  y = (1 - b - k) / (1 - k) || 0;
	  return [c * 100, m * 100, y * 100, k * 100];
	}
	
	function rgb2keyword(rgb) {
	  return reverseKeywords[JSON.stringify(rgb)];
	}
	
	function rgb2xyz(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255;
	
	  // assume sRGB
	  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
	
	  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
	
	  return [x * 100, y *100, z * 100];
	}
	
	function rgb2lab(rgb) {
	  var xyz = rgb2xyz(rgb),
	        x = xyz[0],
	        y = xyz[1],
	        z = xyz[2],
	        l, a, b;
	
	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;
	
	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
	
	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);
	
	  return [l, a, b];
	}
	
	function rgb2lch(args) {
	  return lab2lch(rgb2lab(args));
	}
	
	function hsl2rgb(hsl) {
	  var h = hsl[0] / 360,
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      t1, t2, t3, rgb, val;
	
	  if (s == 0) {
	    val = l * 255;
	    return [val, val, val];
	  }
	
	  if (l < 0.5)
	    t2 = l * (1 + s);
	  else
	    t2 = l + s - l * s;
	  t1 = 2 * l - t2;
	
	  rgb = [0, 0, 0];
	  for (var i = 0; i < 3; i++) {
	    t3 = h + 1 / 3 * - (i - 1);
	    t3 < 0 && t3++;
	    t3 > 1 && t3--;
	
	    if (6 * t3 < 1)
	      val = t1 + (t2 - t1) * 6 * t3;
	    else if (2 * t3 < 1)
	      val = t2;
	    else if (3 * t3 < 2)
	      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
	    else
	      val = t1;
	
	    rgb[i] = val * 255;
	  }
	
	  return rgb;
	}
	
	function hsl2hsv(hsl) {
	  var h = hsl[0],
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      sv, v;
	
	  if(l === 0) {
	      // no need to do calc on black
	      // also avoids divide by 0 error
	      return [0, 0, 0];
	  }
	
	  l *= 2;
	  s *= (l <= 1) ? l : 2 - l;
	  v = (l + s) / 2;
	  sv = (2 * s) / (l + s);
	  return [h, sv * 100, v * 100];
	}
	
	function hsl2hwb(args) {
	  return rgb2hwb(hsl2rgb(args));
	}
	
	function hsl2cmyk(args) {
	  return rgb2cmyk(hsl2rgb(args));
	}
	
	function hsl2keyword(args) {
	  return rgb2keyword(hsl2rgb(args));
	}
	
	
	function hsv2rgb(hsv) {
	  var h = hsv[0] / 60,
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      hi = Math.floor(h) % 6;
	
	  var f = h - Math.floor(h),
	      p = 255 * v * (1 - s),
	      q = 255 * v * (1 - (s * f)),
	      t = 255 * v * (1 - (s * (1 - f))),
	      v = 255 * v;
	
	  switch(hi) {
	    case 0:
	      return [v, t, p];
	    case 1:
	      return [q, v, p];
	    case 2:
	      return [p, v, t];
	    case 3:
	      return [p, q, v];
	    case 4:
	      return [t, p, v];
	    case 5:
	      return [v, p, q];
	  }
	}
	
	function hsv2hsl(hsv) {
	  var h = hsv[0],
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      sl, l;
	
	  l = (2 - s) * v;
	  sl = s * v;
	  sl /= (l <= 1) ? l : 2 - l;
	  sl = sl || 0;
	  l /= 2;
	  return [h, sl * 100, l * 100];
	}
	
	function hsv2hwb(args) {
	  return rgb2hwb(hsv2rgb(args))
	}
	
	function hsv2cmyk(args) {
	  return rgb2cmyk(hsv2rgb(args));
	}
	
	function hsv2keyword(args) {
	  return rgb2keyword(hsv2rgb(args));
	}
	
	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	function hwb2rgb(hwb) {
	  var h = hwb[0] / 360,
	      wh = hwb[1] / 100,
	      bl = hwb[2] / 100,
	      ratio = wh + bl,
	      i, v, f, n;
	
	  // wh + bl cant be > 1
	  if (ratio > 1) {
	    wh /= ratio;
	    bl /= ratio;
	  }
	
	  i = Math.floor(6 * h);
	  v = 1 - bl;
	  f = 6 * h - i;
	  if ((i & 0x01) != 0) {
	    f = 1 - f;
	  }
	  n = wh + f * (v - wh);  // linear interpolation
	
	  switch (i) {
	    default:
	    case 6:
	    case 0: r = v; g = n; b = wh; break;
	    case 1: r = n; g = v; b = wh; break;
	    case 2: r = wh; g = v; b = n; break;
	    case 3: r = wh; g = n; b = v; break;
	    case 4: r = n; g = wh; b = v; break;
	    case 5: r = v; g = wh; b = n; break;
	  }
	
	  return [r * 255, g * 255, b * 255];
	}
	
	function hwb2hsl(args) {
	  return rgb2hsl(hwb2rgb(args));
	}
	
	function hwb2hsv(args) {
	  return rgb2hsv(hwb2rgb(args));
	}
	
	function hwb2cmyk(args) {
	  return rgb2cmyk(hwb2rgb(args));
	}
	
	function hwb2keyword(args) {
	  return rgb2keyword(hwb2rgb(args));
	}
	
	function cmyk2rgb(cmyk) {
	  var c = cmyk[0] / 100,
	      m = cmyk[1] / 100,
	      y = cmyk[2] / 100,
	      k = cmyk[3] / 100,
	      r, g, b;
	
	  r = 1 - Math.min(1, c * (1 - k) + k);
	  g = 1 - Math.min(1, m * (1 - k) + k);
	  b = 1 - Math.min(1, y * (1 - k) + k);
	  return [r * 255, g * 255, b * 255];
	}
	
	function cmyk2hsl(args) {
	  return rgb2hsl(cmyk2rgb(args));
	}
	
	function cmyk2hsv(args) {
	  return rgb2hsv(cmyk2rgb(args));
	}
	
	function cmyk2hwb(args) {
	  return rgb2hwb(cmyk2rgb(args));
	}
	
	function cmyk2keyword(args) {
	  return rgb2keyword(cmyk2rgb(args));
	}
	
	
	function xyz2rgb(xyz) {
	  var x = xyz[0] / 100,
	      y = xyz[1] / 100,
	      z = xyz[2] / 100,
	      r, g, b;
	
	  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
	
	  // assume sRGB
	  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
	    : r = (r * 12.92);
	
	  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
	    : g = (g * 12.92);
	
	  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
	    : b = (b * 12.92);
	
	  r = Math.min(Math.max(0, r), 1);
	  g = Math.min(Math.max(0, g), 1);
	  b = Math.min(Math.max(0, b), 1);
	
	  return [r * 255, g * 255, b * 255];
	}
	
	function xyz2lab(xyz) {
	  var x = xyz[0],
	      y = xyz[1],
	      z = xyz[2],
	      l, a, b;
	
	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;
	
	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);
	
	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);
	
	  return [l, a, b];
	}
	
	function xyz2lch(args) {
	  return lab2lch(xyz2lab(args));
	}
	
	function lab2xyz(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      x, y, z, y2;
	
	  if (l <= 8) {
	    y = (l * 100) / 903.3;
	    y2 = (7.787 * (y / 100)) + (16 / 116);
	  } else {
	    y = 100 * Math.pow((l + 16) / 116, 3);
	    y2 = Math.pow(y / 100, 1/3);
	  }
	
	  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);
	
	  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);
	
	  return [x, y, z];
	}
	
	function lab2lch(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      hr, h, c;
	
	  hr = Math.atan2(b, a);
	  h = hr * 360 / 2 / Math.PI;
	  if (h < 0) {
	    h += 360;
	  }
	  c = Math.sqrt(a * a + b * b);
	  return [l, c, h];
	}
	
	function lab2rgb(args) {
	  return xyz2rgb(lab2xyz(args));
	}
	
	function lch2lab(lch) {
	  var l = lch[0],
	      c = lch[1],
	      h = lch[2],
	      a, b, hr;
	
	  hr = h / 360 * 2 * Math.PI;
	  a = c * Math.cos(hr);
	  b = c * Math.sin(hr);
	  return [l, a, b];
	}
	
	function lch2xyz(args) {
	  return lab2xyz(lch2lab(args));
	}
	
	function lch2rgb(args) {
	  return lab2rgb(lch2lab(args));
	}
	
	function keyword2rgb(keyword) {
	  return cssKeywords[keyword];
	}
	
	function keyword2hsl(args) {
	  return rgb2hsl(keyword2rgb(args));
	}
	
	function keyword2hsv(args) {
	  return rgb2hsv(keyword2rgb(args));
	}
	
	function keyword2hwb(args) {
	  return rgb2hwb(keyword2rgb(args));
	}
	
	function keyword2cmyk(args) {
	  return rgb2cmyk(keyword2rgb(args));
	}
	
	function keyword2lab(args) {
	  return rgb2lab(keyword2rgb(args));
	}
	
	function keyword2xyz(args) {
	  return rgb2xyz(keyword2rgb(args));
	}
	
	var cssKeywords = {
	  aliceblue:  [240,248,255],
	  antiquewhite: [250,235,215],
	  aqua: [0,255,255],
	  aquamarine: [127,255,212],
	  azure:  [240,255,255],
	  beige:  [245,245,220],
	  bisque: [255,228,196],
	  black:  [0,0,0],
	  blanchedalmond: [255,235,205],
	  blue: [0,0,255],
	  blueviolet: [138,43,226],
	  brown:  [165,42,42],
	  burlywood:  [222,184,135],
	  cadetblue:  [95,158,160],
	  chartreuse: [127,255,0],
	  chocolate:  [210,105,30],
	  coral:  [255,127,80],
	  cornflowerblue: [100,149,237],
	  cornsilk: [255,248,220],
	  crimson:  [220,20,60],
	  cyan: [0,255,255],
	  darkblue: [0,0,139],
	  darkcyan: [0,139,139],
	  darkgoldenrod:  [184,134,11],
	  darkgray: [169,169,169],
	  darkgreen:  [0,100,0],
	  darkgrey: [169,169,169],
	  darkkhaki:  [189,183,107],
	  darkmagenta:  [139,0,139],
	  darkolivegreen: [85,107,47],
	  darkorange: [255,140,0],
	  darkorchid: [153,50,204],
	  darkred:  [139,0,0],
	  darksalmon: [233,150,122],
	  darkseagreen: [143,188,143],
	  darkslateblue:  [72,61,139],
	  darkslategray:  [47,79,79],
	  darkslategrey:  [47,79,79],
	  darkturquoise:  [0,206,209],
	  darkviolet: [148,0,211],
	  deeppink: [255,20,147],
	  deepskyblue:  [0,191,255],
	  dimgray:  [105,105,105],
	  dimgrey:  [105,105,105],
	  dodgerblue: [30,144,255],
	  firebrick:  [178,34,34],
	  floralwhite:  [255,250,240],
	  forestgreen:  [34,139,34],
	  fuchsia:  [255,0,255],
	  gainsboro:  [220,220,220],
	  ghostwhite: [248,248,255],
	  gold: [255,215,0],
	  goldenrod:  [218,165,32],
	  gray: [128,128,128],
	  green:  [0,128,0],
	  greenyellow:  [173,255,47],
	  grey: [128,128,128],
	  honeydew: [240,255,240],
	  hotpink:  [255,105,180],
	  indianred:  [205,92,92],
	  indigo: [75,0,130],
	  ivory:  [255,255,240],
	  khaki:  [240,230,140],
	  lavender: [230,230,250],
	  lavenderblush:  [255,240,245],
	  lawngreen:  [124,252,0],
	  lemonchiffon: [255,250,205],
	  lightblue:  [173,216,230],
	  lightcoral: [240,128,128],
	  lightcyan:  [224,255,255],
	  lightgoldenrodyellow: [250,250,210],
	  lightgray:  [211,211,211],
	  lightgreen: [144,238,144],
	  lightgrey:  [211,211,211],
	  lightpink:  [255,182,193],
	  lightsalmon:  [255,160,122],
	  lightseagreen:  [32,178,170],
	  lightskyblue: [135,206,250],
	  lightslategray: [119,136,153],
	  lightslategrey: [119,136,153],
	  lightsteelblue: [176,196,222],
	  lightyellow:  [255,255,224],
	  lime: [0,255,0],
	  limegreen:  [50,205,50],
	  linen:  [250,240,230],
	  magenta:  [255,0,255],
	  maroon: [128,0,0],
	  mediumaquamarine: [102,205,170],
	  mediumblue: [0,0,205],
	  mediumorchid: [186,85,211],
	  mediumpurple: [147,112,219],
	  mediumseagreen: [60,179,113],
	  mediumslateblue:  [123,104,238],
	  mediumspringgreen:  [0,250,154],
	  mediumturquoise:  [72,209,204],
	  mediumvioletred:  [199,21,133],
	  midnightblue: [25,25,112],
	  mintcream:  [245,255,250],
	  mistyrose:  [255,228,225],
	  moccasin: [255,228,181],
	  navajowhite:  [255,222,173],
	  navy: [0,0,128],
	  oldlace:  [253,245,230],
	  olive:  [128,128,0],
	  olivedrab:  [107,142,35],
	  orange: [255,165,0],
	  orangered:  [255,69,0],
	  orchid: [218,112,214],
	  palegoldenrod:  [238,232,170],
	  palegreen:  [152,251,152],
	  paleturquoise:  [175,238,238],
	  palevioletred:  [219,112,147],
	  papayawhip: [255,239,213],
	  peachpuff:  [255,218,185],
	  peru: [205,133,63],
	  pink: [255,192,203],
	  plum: [221,160,221],
	  powderblue: [176,224,230],
	  purple: [128,0,128],
	  rebeccapurple: [102, 51, 153],
	  red:  [255,0,0],
	  rosybrown:  [188,143,143],
	  royalblue:  [65,105,225],
	  saddlebrown:  [139,69,19],
	  salmon: [250,128,114],
	  sandybrown: [244,164,96],
	  seagreen: [46,139,87],
	  seashell: [255,245,238],
	  sienna: [160,82,45],
	  silver: [192,192,192],
	  skyblue:  [135,206,235],
	  slateblue:  [106,90,205],
	  slategray:  [112,128,144],
	  slategrey:  [112,128,144],
	  snow: [255,250,250],
	  springgreen:  [0,255,127],
	  steelblue:  [70,130,180],
	  tan:  [210,180,140],
	  teal: [0,128,128],
	  thistle:  [216,191,216],
	  tomato: [255,99,71],
	  turquoise:  [64,224,208],
	  violet: [238,130,238],
	  wheat:  [245,222,179],
	  white:  [255,255,255],
	  whitesmoke: [245,245,245],
	  yellow: [255,255,0],
	  yellowgreen:  [154,205,50]
	};
	
	var reverseKeywords = {};
	for (var key in cssKeywords) {
	  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
	}


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	var SPECIFICITY = (function() {
		var calculate,
			calculateSingle,
			compare;
	
		// Calculate the specificity for a selector by dividing it into simple selectors and counting them
		calculate = function(input) {
			var selectors,
				selector,
				i,
				len,
				results = [];
	
			// Separate input by commas
			selectors = input.split(',');
	
			for (i = 0, len = selectors.length; i < len; i += 1) {
				selector = selectors[i];
				if (selector.length > 0) {
					results.push(calculateSingle(selector));
				}
			}
	
			return results;
		};
	
		/**
		 * Calculates the specificity of CSS selectors
		 * http://www.w3.org/TR/css3-selectors/#specificity
		 *
		 * Returns an object with the following properties:
		 *  - selector: the input
		 *  - specificity: e.g. 0,1,0,0
		 *  - parts: array with details about each part of the selector that counts towards the specificity
		 *  - specificityArray: e.g. [0, 1, 0, 0]
		 */
		calculateSingle = function(input) {
			var selector = input,
				findMatch,
				typeCount = {
					'a': 0,
					'b': 0,
					'c': 0
				},
				parts = [],
				// The following regular expressions assume that selectors matching the preceding regular expressions have been removed
				attributeRegex = /(\[[^\]]+\])/g,
				idRegex = /(#[^\s\+>~\.\[:]+)/g,
				classRegex = /(\.[^\s\+>~\.\[:]+)/g,
				pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,
				// A regex for pseudo classes with brackets - :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-type(), :lang()
				pseudoClassWithBracketsRegex = /(:[\w-]+\([^\)]*\))/gi,
				// A regex for other pseudo classes, which don't have brackets
				pseudoClassRegex = /(:[^\s\+>~\.\[:]+)/g,
				elementRegex = /([^\s\+>~\.\[:]+)/g;
	
			// Find matches for a regular expression in a string and push their details to parts
			// Type is "a" for IDs, "b" for classes, attributes and pseudo-classes and "c" for elements and pseudo-elements
			findMatch = function(regex, type) {
				var matches, i, len, match, index, length;
				if (regex.test(selector)) {
					matches = selector.match(regex);
					for (i = 0, len = matches.length; i < len; i += 1) {
						typeCount[type] += 1;
						match = matches[i];
						index = selector.indexOf(match);
						length = match.length;
						parts.push({
							selector: input.substr(index, length),
							type: type,
							index: index,
							length: length
						});
						// Replace this simple selector with whitespace so it won't be counted in further simple selectors
						selector = selector.replace(match, Array(length + 1).join(' '));
					}
				}
			};
	
			// Replace escaped characters with plain text, using the "A" character
			// https://www.w3.org/TR/CSS21/syndata.html#characters
			(function() {
				var replaceWithPlainText = function(regex) {
						var matches, i, len, match;
						if (regex.test(selector)) {
							matches = selector.match(regex);
							for (i = 0, len = matches.length; i < len; i += 1) {
								match = matches[i];
								selector = selector.replace(match, Array(match.length + 1).join('A'));
							}
						}
					},
					// Matches a backslash followed by six hexadecimal digits followed by an optional single whitespace character
					escapeHexadecimalRegex = /\\[0-9A-Fa-f]{6}\s?/g,
					// Matches a backslash followed by fewer than six hexadecimal digits followed by a mandatory single whitespace character
					escapeHexadecimalRegex2 = /\\[0-9A-Fa-f]{1,5}\s/g,
					// Matches a backslash followed by any character
					escapeSpecialCharacter = /\\./g;
	
				replaceWithPlainText(escapeHexadecimalRegex);
				replaceWithPlainText(escapeHexadecimalRegex2);
				replaceWithPlainText(escapeSpecialCharacter);
			}());
	
			// Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument
			(function() {
				var regex = /:not\(([^\)]*)\)/g;
				if (regex.test(selector)) {
					selector = selector.replace(regex, '     $1 ');
				}
			}());
	
			// Remove anything after a left brace in case a user has pasted in a rule, not just a selector
			(function() {
				var regex = /{[^]*/gm,
					matches, i, len, match;
				if (regex.test(selector)) {
					matches = selector.match(regex);
					for (i = 0, len = matches.length; i < len; i += 1) {
						match = matches[i];
						selector = selector.replace(match, Array(match.length + 1).join(' '));
					}
				}
			}());
	
			// Add attribute selectors to parts collection (type b)
			findMatch(attributeRegex, 'b');
	
			// Add ID selectors to parts collection (type a)
			findMatch(idRegex, 'a');
	
			// Add class selectors to parts collection (type b)
			findMatch(classRegex, 'b');
	
			// Add pseudo-element selectors to parts collection (type c)
			findMatch(pseudoElementRegex, 'c');
	
			// Add pseudo-class selectors to parts collection (type b)
			findMatch(pseudoClassWithBracketsRegex, 'b');
			findMatch(pseudoClassRegex, 'b');
	
			// Remove universal selector and separator characters
			selector = selector.replace(/[\*\s\+>~]/g, ' ');
	
			// Remove any stray dots or hashes which aren't attached to words
			// These may be present if the user is live-editing this selector
			selector = selector.replace(/[#\.]/g, ' ');
	
			// The only things left should be element selectors (type c)
			findMatch(elementRegex, 'c');
	
			// Order the parts in the order they appear in the original selector
			// This is neater for external apps to deal with
			parts.sort(function(a, b) {
				return a.index - b.index;
			});
	
			return {
				selector: input,
				specificity: '0,' + typeCount.a.toString() + ',' + typeCount.b.toString() + ',' + typeCount.c.toString(),
				specificityArray: [0, typeCount.a, typeCount.b, typeCount.c],
				parts: parts
			};
		};
	
		/**
		 * Compares two CSS selectors for specificity
		 * Alternatively you can replace one of the CSS selectors with a specificity array
		 *
		 *  - it returns -1 if a has a lower specificity than b
		 *  - it returns 1 if a has a higher specificity than b
		 *  - it returns 0 if a has the same specificity than b
		 */
		compare = function(a, b) {
			var aSpecificity,
				bSpecificity,
				i;
	
			if (typeof a ==='string') {
				if (a.indexOf(',') !== -1) {
					throw 'Invalid CSS selector';
				} else {
					aSpecificity = calculateSingle(a)['specificityArray'];
				}
			} else if (Array.isArray(a)) {
				if (a.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {
					throw 'Invalid specificity array';
				} else {
					aSpecificity = a;
				}
			} else {
				throw 'Invalid CSS selector or specificity array';
			}
	
			if (typeof b ==='string') {
				if (b.indexOf(',') !== -1) {
					throw 'Invalid CSS selector';
				} else {
					bSpecificity = calculateSingle(b)['specificityArray'];
				}
			} else if (Array.isArray(b)) {
				if (b.filter(function(e) { return (typeof e === 'number'); }).length !== 4) {
					throw 'Invalid specificity array';
				} else {
					bSpecificity = b;
				}
			} else {
				throw 'Invalid CSS selector or specificity array';
			}
	
			for (i = 0; i < 4; i += 1) {
				if (aSpecificity[i] < bSpecificity[i]) {
					return -1;
				} else if (aSpecificity[i] > bSpecificity[i]) {
					return 1;
				}
			}
	
			return 0;
		};
	
		return {
			calculate: calculate,
			compare: compare
		};
	}());
	
	// Export for Node JS
	if (true) {
		exports.calculate = SPECIFICITY.calculate;
		exports.compare = SPECIFICITY.compare;
	}


/***/ }),
/* 268 */
/***/ (function(module, exports) {

	// http://www.w3.org/TR/CSS21/grammar.html
	// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027
	var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g
	
	module.exports = function(css, options){
	  options = options || {};
	
	  /**
	   * Positional.
	   */
	
	  var lineno = 1;
	  var column = 1;
	
	  /**
	   * Update lineno and column based on `str`.
	   */
	
	  function updatePosition(str) {
	    var lines = str.match(/\n/g);
	    if (lines) lineno += lines.length;
	    var i = str.lastIndexOf('\n');
	    column = ~i ? str.length - i : column + str.length;
	  }
	
	  /**
	   * Mark position and patch `node.position`.
	   */
	
	  function position() {
	    var start = { line: lineno, column: column };
	    return function(node){
	      node.position = new Position(start);
	      whitespace();
	      return node;
	    };
	  }
	
	  /**
	   * Store position information for a node
	   */
	
	  function Position(start) {
	    this.start = start;
	    this.end = { line: lineno, column: column };
	    this.source = options.source;
	  }
	
	  /**
	   * Non-enumerable source string
	   */
	
	  Position.prototype.content = css;
	
	  /**
	   * Error `msg`.
	   */
	
	  var errorsList = [];
	
	  function error(msg) {
	    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);
	    err.reason = msg;
	    err.filename = options.source;
	    err.line = lineno;
	    err.column = column;
	    err.source = css;
	
	    if (options.silent) {
	      errorsList.push(err);
	    } else {
	      throw err;
	    }
	  }
	
	  /**
	   * Parse stylesheet.
	   */
	
	  function stylesheet() {
	    var rulesList = rules();
	
	    return {
	      type: 'stylesheet',
	      stylesheet: {
	        source: options.source,
	        rules: rulesList,
	        parsingErrors: errorsList
	      }
	    };
	  }
	
	  /**
	   * Opening brace.
	   */
	
	  function open() {
	    return match(/^{\s*/);
	  }
	
	  /**
	   * Closing brace.
	   */
	
	  function close() {
	    return match(/^}/);
	  }
	
	  /**
	   * Parse ruleset.
	   */
	
	  function rules() {
	    var node;
	    var rules = [];
	    whitespace();
	    comments(rules);
	    while (css.length && css.charAt(0) != '}' && (node = atrule() || rule())) {
	      if (node !== false) {
	        rules.push(node);
	        comments(rules);
	      }
	    }
	    return rules;
	  }
	
	  /**
	   * Match `re` and return captures.
	   */
	
	  function match(re) {
	    var m = re.exec(css);
	    if (!m) return;
	    var str = m[0];
	    updatePosition(str);
	    css = css.slice(str.length);
	    return m;
	  }
	
	  /**
	   * Parse whitespace.
	   */
	
	  function whitespace() {
	    match(/^\s*/);
	  }
	
	  /**
	   * Parse comments;
	   */
	
	  function comments(rules) {
	    var c;
	    rules = rules || [];
	    while (c = comment()) {
	      if (c !== false) {
	        rules.push(c);
	      }
	    }
	    return rules;
	  }
	
	  /**
	   * Parse comment.
	   */
	
	  function comment() {
	    var pos = position();
	    if ('/' != css.charAt(0) || '*' != css.charAt(1)) return;
	
	    var i = 2;
	    while ("" != css.charAt(i) && ('*' != css.charAt(i) || '/' != css.charAt(i + 1))) ++i;
	    i += 2;
	
	    if ("" === css.charAt(i-1)) {
	      return error('End of comment missing');
	    }
	
	    var str = css.slice(2, i - 2);
	    column += 2;
	    updatePosition(str);
	    css = css.slice(i);
	    column += 2;
	
	    return pos({
	      type: 'comment',
	      comment: str
	    });
	  }
	
	  /**
	   * Parse selector.
	   */
	
	  function selector() {
	    var m = match(/^([^{]+)/);
	    if (!m) return;
	    /* @fix Remove all comments from selectors
	     * http://ostermiller.org/findcomment.html */
	    return trim(m[0])
	      .replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, '')
	      .replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
	        return m.replace(/,/g, '\u200C');
	      })
	      .split(/\s*(?![^(]*\)),\s*/)
	      .map(function(s) {
	        return s.replace(/\u200C/g, ',');
	      });
	  }
	
	  /**
	   * Parse declaration.
	   */
	
	  function declaration() {
	    var pos = position();
	
	    // prop
	    var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
	    if (!prop) return;
	    prop = trim(prop[0]);
	
	    // :
	    if (!match(/^:\s*/)) return error("property missing ':'");
	
	    // val
	    var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
	
	    var ret = pos({
	      type: 'declaration',
	      property: prop.replace(commentre, ''),
	      value: val ? trim(val[0]).replace(commentre, '') : ''
	    });
	
	    // ;
	    match(/^[;\s]*/);
	
	    return ret;
	  }
	
	  /**
	   * Parse declarations.
	   */
	
	  function declarations() {
	    var decls = [];
	
	    if (!open()) return error("missing '{'");
	    comments(decls);
	
	    // declarations
	    var decl;
	    while (decl = declaration()) {
	      if (decl !== false) {
	        decls.push(decl);
	        comments(decls);
	      }
	    }
	
	    if (!close()) return error("missing '}'");
	    return decls;
	  }
	
	  /**
	   * Parse keyframe.
	   */
	
	  function keyframe() {
	    var m;
	    var vals = [];
	    var pos = position();
	
	    while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
	      vals.push(m[1]);
	      match(/^,\s*/);
	    }
	
	    if (!vals.length) return;
	
	    return pos({
	      type: 'keyframe',
	      values: vals,
	      declarations: declarations()
	    });
	  }
	
	  /**
	   * Parse keyframes.
	   */
	
	  function atkeyframes() {
	    var pos = position();
	    var m = match(/^@([-\w]+)?keyframes\s*/);
	
	    if (!m) return;
	    var vendor = m[1];
	
	    // identifier
	    var m = match(/^([-\w]+)\s*/);
	    if (!m) return error("@keyframes missing name");
	    var name = m[1];
	
	    if (!open()) return error("@keyframes missing '{'");
	
	    var frame;
	    var frames = comments();
	    while (frame = keyframe()) {
	      frames.push(frame);
	      frames = frames.concat(comments());
	    }
	
	    if (!close()) return error("@keyframes missing '}'");
	
	    return pos({
	      type: 'keyframes',
	      name: name,
	      vendor: vendor,
	      keyframes: frames
	    });
	  }
	
	  /**
	   * Parse supports.
	   */
	
	  function atsupports() {
	    var pos = position();
	    var m = match(/^@supports *([^{]+)/);
	
	    if (!m) return;
	    var supports = trim(m[1]);
	
	    if (!open()) return error("@supports missing '{'");
	
	    var style = comments().concat(rules());
	
	    if (!close()) return error("@supports missing '}'");
	
	    return pos({
	      type: 'supports',
	      supports: supports,
	      rules: style
	    });
	  }
	
	  /**
	   * Parse host.
	   */
	
	  function athost() {
	    var pos = position();
	    var m = match(/^@host\s*/);
	
	    if (!m) return;
	
	    if (!open()) return error("@host missing '{'");
	
	    var style = comments().concat(rules());
	
	    if (!close()) return error("@host missing '}'");
	
	    return pos({
	      type: 'host',
	      rules: style
	    });
	  }
	
	  /**
	   * Parse media.
	   */
	
	  function atmedia() {
	    var pos = position();
	    var m = match(/^@media *([^{]+)/);
	
	    if (!m) return;
	    var media = trim(m[1]);
	
	    if (!open()) return error("@media missing '{'");
	
	    var style = comments().concat(rules());
	
	    if (!close()) return error("@media missing '}'");
	
	    return pos({
	      type: 'media',
	      media: media,
	      rules: style
	    });
	  }
	
	
	  /**
	   * Parse custom-media.
	   */
	
	  function atcustommedia() {
	    var pos = position();
	    var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
	    if (!m) return;
	
	    return pos({
	      type: 'custom-media',
	      name: trim(m[1]),
	      media: trim(m[2])
	    });
	  }
	
	  /**
	   * Parse paged media.
	   */
	
	  function atpage() {
	    var pos = position();
	    var m = match(/^@page */);
	    if (!m) return;
	
	    var sel = selector() || [];
	
	    if (!open()) return error("@page missing '{'");
	    var decls = comments();
	
	    // declarations
	    var decl;
	    while (decl = declaration()) {
	      decls.push(decl);
	      decls = decls.concat(comments());
	    }
	
	    if (!close()) return error("@page missing '}'");
	
	    return pos({
	      type: 'page',
	      selectors: sel,
	      declarations: decls
	    });
	  }
	
	  /**
	   * Parse document.
	   */
	
	  function atdocument() {
	    var pos = position();
	    var m = match(/^@([-\w]+)?document *([^{]+)/);
	    if (!m) return;
	
	    var vendor = trim(m[1]);
	    var doc = trim(m[2]);
	
	    if (!open()) return error("@document missing '{'");
	
	    var style = comments().concat(rules());
	
	    if (!close()) return error("@document missing '}'");
	
	    return pos({
	      type: 'document',
	      document: doc,
	      vendor: vendor,
	      rules: style
	    });
	  }
	
	  /**
	   * Parse font-face.
	   */
	
	  function atfontface() {
	    var pos = position();
	    var m = match(/^@font-face\s*/);
	    if (!m) return;
	
	    if (!open()) return error("@font-face missing '{'");
	    var decls = comments();
	
	    // declarations
	    var decl;
	    while (decl = declaration()) {
	      decls.push(decl);
	      decls = decls.concat(comments());
	    }
	
	    if (!close()) return error("@font-face missing '}'");
	
	    return pos({
	      type: 'font-face',
	      declarations: decls
	    });
	  }
	
	  /**
	   * Parse import
	   */
	
	  var atimport = _compileAtrule('import');
	
	  /**
	   * Parse charset
	   */
	
	  var atcharset = _compileAtrule('charset');
	
	  /**
	   * Parse namespace
	   */
	
	  var atnamespace = _compileAtrule('namespace');
	
	  /**
	   * Parse non-block at-rules
	   */
	
	
	  function _compileAtrule(name) {
	    var re = new RegExp('^@' + name + '\\s*([^;]+);');
	    return function() {
	      var pos = position();
	      var m = match(re);
	      if (!m) return;
	      var ret = { type: name };
	      ret[name] = m[1].trim();
	      return pos(ret);
	    }
	  }
	
	  /**
	   * Parse at rule.
	   */
	
	  function atrule() {
	    if (css[0] != '@') return;
	
	    return atkeyframes()
	      || atmedia()
	      || atcustommedia()
	      || atsupports()
	      || atimport()
	      || atcharset()
	      || atnamespace()
	      || atdocument()
	      || atpage()
	      || athost()
	      || atfontface();
	  }
	
	  /**
	   * Parse rule.
	   */
	
	  function rule() {
	    var pos = position();
	    var sel = selector();
	
	    if (!sel) return error('selector missing');
	    comments();
	
	    return pos({
	      type: 'rule',
	      selectors: sel,
	      declarations: declarations()
	    });
	  }
	
	  return addParent(stylesheet());
	};
	
	/**
	 * Trim `str`.
	 */
	
	function trim(str) {
	  return str ? str.replace(/^\s+|\s+$/g, '') : '';
	}
	
	/**
	 * Adds non-enumerable parent node reference to each node.
	 */
	
	function addParent(obj, parent) {
	  var isNode = obj && typeof obj.type === 'string';
	  var childParent = isNode ? obj : parent;
	
	  for (var k in obj) {
	    var value = obj[k];
	    if (Array.isArray(value)) {
	      value.forEach(function(v) { addParent(v, childParent); });
	    } else if (value && typeof value === 'object') {
	      addParent(value, childParent);
	    }
	  }
	
	  if (isNode) {
	    Object.defineProperty(obj, 'parent', {
	      configurable: true,
	      writable: true,
	      enumerable: false,
	      value: parent || null
	    });
	  }
	
	  return obj;
	}


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var Environment, ImportManager, ParseTree, SourceMapBuilder, environment, fileManagers;
	
	fileManagers = [];
	
	SourceMapBuilder = null;
	
	module.exports = {
	  version: [2, 7, 1],
	  Environment: (Environment = __webpack_require__(270)),
	  environment: (environment = new Environment(environment, fileManagers)),
	  functions: __webpack_require__(272)(environment),
	  ParseTree: (ParseTree = __webpack_require__(305)(SourceMapBuilder)),
	  ImportManager: (ImportManager = __webpack_require__(338)(environment)),
	  render: __webpack_require__(343)(environment, ParseTree, ImportManager),
	  parse: __webpack_require__(354)(environment, ParseTree, ImportManager)
	};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	var logger = __webpack_require__(271);
	var environment = function(externalEnvironment, fileManagers) {
	    this.fileManagers = fileManagers || [];
	    externalEnvironment = externalEnvironment || {};
	
	    var optionalFunctions = ["encodeBase64", "mimeLookup", "charsetLookup", "getSourceMapGenerator"],
	        requiredFunctions = [],
	        functions = requiredFunctions.concat(optionalFunctions);
	
	    for (var i = 0; i < functions.length; i++) {
	        var propName = functions[i],
	            environmentFunc = externalEnvironment[propName];
	        if (environmentFunc) {
	            this[propName] = environmentFunc.bind(externalEnvironment);
	        } else if (i < requiredFunctions.length) {
	            this.warn("missing required function in environment - " + propName);
	        }
	    }
	};
	
	environment.prototype.getFileManager = function (filename, currentDirectory, options, environment, isSync) {
	
	    if (!filename) {
	        logger.warn("getFileManager called with no filename.. Please report this issue. continuing.");
	    }
	    if (currentDirectory == null) {
	        logger.warn("getFileManager called with null directory.. Please report this issue. continuing.");
	    }
	
	    var fileManagers = this.fileManagers;
	    if (options.pluginManager) {
	        fileManagers = [].concat(fileManagers).concat(options.pluginManager.getFileManagers());
	    }
	    for (var i = fileManagers.length - 1; i >= 0 ; i--) {
	        var fileManager = fileManagers[i];
	        if (fileManager[isSync ? "supportsSync" : "supports"](filename, currentDirectory, options, environment)) {
	            return fileManager;
	        }
	    }
	    return null;
	};
	
	environment.prototype.addFileManager = function (fileManager) {
	    this.fileManagers.push(fileManager);
	};
	
	environment.prototype.clearFileManagers = function () {
	    this.fileManagers = [];
	};
	
	module.exports = environment;


/***/ }),
/* 271 */
/***/ (function(module, exports) {

	module.exports = {
	    error: function(msg) {
	        this._fireEvent("error", msg);
	    },
	    warn: function(msg) {
	        this._fireEvent("warn", msg);
	    },
	    info: function(msg) {
	        this._fireEvent("info", msg);
	    },
	    debug: function(msg) {
	        this._fireEvent("debug", msg);
	    },
	    addListener: function(listener) {
	        this._listeners.push(listener);
	    },
	    removeListener: function(listener) {
	        for (var i = 0; i < this._listeners.length; i++) {
	            if (this._listeners[i] === listener) {
	                this._listeners.splice(i, 1);
	                return;
	            }
	        }
	    },
	    _fireEvent: function(type, msg) {
	        for (var i = 0; i < this._listeners.length; i++) {
	            var logFunction = this._listeners[i][type];
	            if (logFunction) {
	                logFunction(msg);
	            }
	        }
	    },
	    _listeners: []
	};


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function(environment) {
	    var functions = {
	        functionRegistry: __webpack_require__(273),
	        functionCaller: __webpack_require__(274)
	    };
	
	    //register functions
	    __webpack_require__(280);
	    __webpack_require__(282);
	    __webpack_require__(292);
	    __webpack_require__(293)(environment);
	    __webpack_require__(295);
	    __webpack_require__(297);
	    __webpack_require__(298);
	    __webpack_require__(300)(environment);
	    __webpack_require__(301);
	
	    return functions;
	};


/***/ }),
/* 273 */
/***/ (function(module, exports) {

	function makeRegistry( base ) {
	    return {
	        _data: {},
	        add: function(name, func) {
	            // precautionary case conversion, as later querying of
	            // the registry by function-caller uses lower case as well.
	            name = name.toLowerCase();
	
	            if (this._data.hasOwnProperty(name)) {
	                //TODO warn
	            }
	            this._data[name] = func;
	        },
	        addMultiple: function(functions) {
	            Object.keys(functions).forEach(
	                function(name) {
	                    this.add(name, functions[name]);
	                }.bind(this));
	        },
	        get: function(name) {
	            return this._data[name] || ( base && base.get( name ));
	        },
	        inherit : function() {
	            return makeRegistry( this );
	        }
	    };
	}
	
	module.exports = makeRegistry( null );

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var Expression = __webpack_require__(275);
	
	var functionCaller = function(name, context, index, currentFileInfo) {
	    this.name = name.toLowerCase();
	    this.index = index;
	    this.context = context;
	    this.currentFileInfo = currentFileInfo;
	
	    this.func = context.frames[0].functionRegistry.get(this.name);
	};
	functionCaller.prototype.isValid = function() {
	    return Boolean(this.func);
	};
	functionCaller.prototype.call = function(args) {
	
	    // This code is terrible and should be replaced as per this issue...
	    // https://github.com/less/less.js/issues/2477
	    if (Array.isArray(args)) {
	        args = args.filter(function (item) {
	            if (item.type === "Comment") {
	                return false;
	            }
	            return true;
	        })
	        .map(function(item) {
	            if (item.type === "Expression") {
	                var subNodes = item.value.filter(function (item) {
	                    if (item.type === "Comment") {
	                        return false;
	                    }
	                    return true;
	                });
	                if (subNodes.length === 1) {
	                    return subNodes[0];
	                } else {
	                    return new Expression(subNodes);
	                }
	            }
	            return item;
	        });
	    }
	
	    return this.func.apply(this, args);
	};
	
	module.exports = functionCaller;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Paren = __webpack_require__(277),
	    Comment = __webpack_require__(278);
	
	var Expression = function (value) {
	    this.value = value;
	    if (!value) {
	        throw new Error("Expression requires an array parameter");
	    }
	};
	Expression.prototype = new Node();
	Expression.prototype.type = "Expression";
	Expression.prototype.accept = function (visitor) {
	    this.value = visitor.visitArray(this.value);
	};
	Expression.prototype.eval = function (context) {
	    var returnValue,
	        inParenthesis = this.parens && !this.parensInOp,
	        doubleParen = false;
	    if (inParenthesis) {
	        context.inParenthesis();
	    }
	    if (this.value.length > 1) {
	        returnValue = new Expression(this.value.map(function (e) {
	            return e.eval(context);
	        }));
	    } else if (this.value.length === 1) {
	        if (this.value[0].parens && !this.value[0].parensInOp) {
	            doubleParen = true;
	        }
	        returnValue = this.value[0].eval(context);
	    } else {
	        returnValue = this;
	    }
	    if (inParenthesis) {
	        context.outOfParenthesis();
	    }
	    if (this.parens && this.parensInOp && !(context.isMathOn()) && !doubleParen) {
	        returnValue = new Paren(returnValue);
	    }
	    return returnValue;
	};
	Expression.prototype.genCSS = function (context, output) {
	    for (var i = 0; i < this.value.length; i++) {
	        this.value[i].genCSS(context, output);
	        if (i + 1 < this.value.length) {
	            output.add(" ");
	        }
	    }
	};
	Expression.prototype.throwAwayComments = function () {
	    this.value = this.value.filter(function(v) {
	        return !(v instanceof Comment);
	    });
	};
	module.exports = Expression;


/***/ }),
/* 276 */
/***/ (function(module, exports) {

	var Node = function() {
	};
	Node.prototype.toCSS = function (context) {
	    var strs = [];
	    this.genCSS(context, {
	        add: function(chunk, fileInfo, index) {
	            strs.push(chunk);
	        },
	        isEmpty: function () {
	            return strs.length === 0;
	        }
	    });
	    return strs.join('');
	};
	Node.prototype.genCSS = function (context, output) {
	    output.add(this.value);
	};
	Node.prototype.accept = function (visitor) {
	    this.value = visitor.visit(this.value);
	};
	Node.prototype.eval = function () { return this; };
	Node.prototype._operate = function (context, op, a, b) {
	    switch (op) {
	        case '+': return a + b;
	        case '-': return a - b;
	        case '*': return a * b;
	        case '/': return a / b;
	    }
	};
	Node.prototype.fround = function(context, value) {
	    var precision = context && context.numPrecision;
	    //add "epsilon" to ensure numbers like 1.000000005 (represented as 1.000000004999....) are properly rounded...
	    return (precision == null) ? value : Number((value + 2e-16).toFixed(precision));
	};
	Node.compare = function (a, b) {
	    /* returns:
	     -1: a < b
	     0: a = b
	     1: a > b
	     and *any* other value for a != b (e.g. undefined, NaN, -2 etc.) */
	
	    if ((a.compare) &&
	        // for "symmetric results" force toCSS-based comparison
	        // of Quoted or Anonymous if either value is one of those
	        !(b.type === "Quoted" || b.type === "Anonymous")) {
	        return a.compare(b);
	    } else if (b.compare) {
	        return -b.compare(a);
	    } else if (a.type !== b.type) {
	        return undefined;
	    }
	
	    a = a.value;
	    b = b.value;
	    if (!Array.isArray(a)) {
	        return a === b ? 0 : undefined;
	    }
	    if (a.length !== b.length) {
	        return undefined;
	    }
	    for (var i = 0; i < a.length; i++) {
	        if (Node.compare(a[i], b[i]) !== 0) {
	            return undefined;
	        }
	    }
	    return 0;
	};
	
	Node.numericCompare = function (a, b) {
	    return a  <  b ? -1
	        : a === b ?  0
	        : a  >  b ?  1 : undefined;
	};
	// Returns true if this node represents root of ast imported by reference
	Node.prototype.blocksVisibility = function () {
	    if (this.visibilityBlocks == null) {
	        this.visibilityBlocks = 0;
	    }
	    return this.visibilityBlocks !== 0;
	};
	Node.prototype.addVisibilityBlock = function () {
	    if (this.visibilityBlocks == null) {
	        this.visibilityBlocks = 0;
	    }
	    this.visibilityBlocks = this.visibilityBlocks + 1;
	};
	Node.prototype.removeVisibilityBlock = function () {
	    if (this.visibilityBlocks == null) {
	        this.visibilityBlocks = 0;
	    }
	    this.visibilityBlocks = this.visibilityBlocks - 1;
	};
	//Turns on node visibility - if called node will be shown in output regardless
	//of whether it comes from import by reference or not
	Node.prototype.ensureVisibility = function () {
	    this.nodeVisible = true;
	};
	//Turns off node visibility - if called node will NOT be shown in output regardless
	//of whether it comes from import by reference or not
	Node.prototype.ensureInvisibility = function () {
	    this.nodeVisible = false;
	};
	// return values:
	// false - the node must not be visible
	// true - the node must be visible
	// undefined or null - the node has the same visibility as its parent
	Node.prototype.isVisible = function () {
	    return this.nodeVisible;
	};
	Node.prototype.visibilityInfo = function() {
	    return {
	        visibilityBlocks: this.visibilityBlocks,
	        nodeVisible: this.nodeVisible
	    };
	};
	Node.prototype.copyVisibilityInfo = function(info) {
	    if (!info) {
	        return;
	    }
	    this.visibilityBlocks = info.visibilityBlocks;
	    this.nodeVisible = info.nodeVisible;
	};
	module.exports = Node;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Paren = function (node) {
	    this.value = node;
	};
	Paren.prototype = new Node();
	Paren.prototype.type = "Paren";
	Paren.prototype.genCSS = function (context, output) {
	    output.add('(');
	    this.value.genCSS(context, output);
	    output.add(')');
	};
	Paren.prototype.eval = function (context) {
	    return new Paren(this.value.eval(context));
	};
	module.exports = Paren;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    getDebugInfo = __webpack_require__(279);
	
	var Comment = function (value, isLineComment, index, currentFileInfo) {
	    this.value = value;
	    this.isLineComment = isLineComment;
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	    this.allowRoot = true;
	};
	Comment.prototype = new Node();
	Comment.prototype.type = "Comment";
	Comment.prototype.genCSS = function (context, output) {
	    if (this.debugInfo) {
	        output.add(getDebugInfo(context, this), this.currentFileInfo, this.index);
	    }
	    output.add(this.value);
	};
	Comment.prototype.isSilent = function(context) {
	    var isCompressed = context.compress && this.value[2] !== "!";
	    return this.isLineComment || isCompressed;
	};
	module.exports = Comment;


/***/ }),
/* 279 */
/***/ (function(module, exports) {

	var debugInfo = function(context, ctx, lineSeparator) {
	    var result = "";
	    if (context.dumpLineNumbers && !context.compress) {
	        switch(context.dumpLineNumbers) {
	            case 'comments':
	                result = debugInfo.asComment(ctx);
	                break;
	            case 'mediaquery':
	                result = debugInfo.asMediaQuery(ctx);
	                break;
	            case 'all':
	                result = debugInfo.asComment(ctx) + (lineSeparator || "") + debugInfo.asMediaQuery(ctx);
	                break;
	        }
	    }
	    return result;
	};
	
	debugInfo.asComment = function(ctx) {
	    return '/* line ' + ctx.debugInfo.lineNumber + ', ' + ctx.debugInfo.fileName + ' */\n';
	};
	
	debugInfo.asMediaQuery = function(ctx) {
	    var filenameWithProtocol = ctx.debugInfo.fileName;
	    if (!/^[a-z]+:\/\//i.test(filenameWithProtocol)) {
	        filenameWithProtocol = 'file://' + filenameWithProtocol;
	    }
	    return '@media -sass-debug-info{filename{font-family:' +
	        filenameWithProtocol.replace(/([.:\/\\])/g, function (a) {
	            if (a == '\\') {
	                a = '\/';
	            }
	            return '\\' + a;
	        }) +
	        '}line{font-family:\\00003' + ctx.debugInfo.lineNumber + '}}\n';
	};
	
	module.exports = debugInfo;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	var Keyword = __webpack_require__(281),
	    functionRegistry = __webpack_require__(273);
	
	var defaultFunc = {
	    eval: function () {
	        var v = this.value_, e = this.error_;
	        if (e) {
	            throw e;
	        }
	        if (v != null) {
	            return v ? Keyword.True : Keyword.False;
	        }
	    },
	    value: function (v) {
	        this.value_ = v;
	    },
	    error: function (e) {
	        this.error_ = e;
	    },
	    reset: function () {
	        this.value_ = this.error_ = null;
	    }
	};
	
	functionRegistry.add("default", defaultFunc.eval.bind(defaultFunc));
	
	module.exports = defaultFunc;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Keyword = function (value) { this.value = value; };
	Keyword.prototype = new Node();
	Keyword.prototype.type = "Keyword";
	Keyword.prototype.genCSS = function (context, output) {
	    if (this.value === '%') { throw { type: "Syntax", message: "Invalid % without number" }; }
	    output.add(this.value);
	};
	
	Keyword.True = new Keyword('true');
	Keyword.False = new Keyword('false');
	
	module.exports = Keyword;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	var Dimension = __webpack_require__(283),
	    Color = __webpack_require__(286),
	    Quoted = __webpack_require__(288),
	    Anonymous = __webpack_require__(291),
	    functionRegistry = __webpack_require__(273),
	    colorFunctions;
	
	function clamp(val) {
	    return Math.min(1, Math.max(0, val));
	}
	function hsla(color) {
	    return colorFunctions.hsla(color.h, color.s, color.l, color.a);
	}
	function number(n) {
	    if (n instanceof Dimension) {
	        return parseFloat(n.unit.is('%') ? n.value / 100 : n.value);
	    } else if (typeof n === 'number') {
	        return n;
	    } else {
	        throw {
	            type: "Argument",
	            message: "color functions take numbers as parameters"
	        };
	    }
	}
	function scaled(n, size) {
	    if (n instanceof Dimension && n.unit.is('%')) {
	        return parseFloat(n.value * size / 100);
	    } else {
	        return number(n);
	    }
	}
	colorFunctions = {
	    rgb: function (r, g, b) {
	        return colorFunctions.rgba(r, g, b, 1.0);
	    },
	    rgba: function (r, g, b, a) {
	        var rgb = [r, g, b].map(function (c) { return scaled(c, 255); });
	        a = number(a);
	        return new Color(rgb, a);
	    },
	    hsl: function (h, s, l) {
	        return colorFunctions.hsla(h, s, l, 1.0);
	    },
	    hsla: function (h, s, l, a) {
	
	        var m1, m2;
	
	        function hue(h) {
	            h = h < 0 ? h + 1 : (h > 1 ? h - 1 : h);
	            if (h * 6 < 1) {
	                return m1 + (m2 - m1) * h * 6;
	            }
	            else if (h * 2 < 1) {
	                return m2;
	            }
	            else if (h * 3 < 2) {
	                return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	            }
	            else {
	                return m1;
	            }
	        }
	
	        h = (number(h) % 360) / 360;
	        s = clamp(number(s)); l = clamp(number(l)); a = clamp(number(a));
	
	        m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        m1 = l * 2 - m2;
	
	        return colorFunctions.rgba(hue(h + 1 / 3) * 255,
	            hue(h)       * 255,
	            hue(h - 1 / 3) * 255,
	            a);
	    },
	
	    hsv: function(h, s, v) {
	        return colorFunctions.hsva(h, s, v, 1.0);
	    },
	
	    hsva: function(h, s, v, a) {
	        h = ((number(h) % 360) / 360) * 360;
	        s = number(s); v = number(v); a = number(a);
	
	        var i, f;
	        i = Math.floor((h / 60) % 6);
	        f = (h / 60) - i;
	
	        var vs = [v,
	            v * (1 - s),
	            v * (1 - f * s),
	            v * (1 - (1 - f) * s)];
	        var perm = [[0, 3, 1],
	            [2, 0, 1],
	            [1, 0, 3],
	            [1, 2, 0],
	            [3, 1, 0],
	            [0, 1, 2]];
	
	        return colorFunctions.rgba(vs[perm[i][0]] * 255,
	            vs[perm[i][1]] * 255,
	            vs[perm[i][2]] * 255,
	            a);
	    },
	
	    hue: function (color) {
	        return new Dimension(color.toHSL().h);
	    },
	    saturation: function (color) {
	        return new Dimension(color.toHSL().s * 100, '%');
	    },
	    lightness: function (color) {
	        return new Dimension(color.toHSL().l * 100, '%');
	    },
	    hsvhue: function(color) {
	        return new Dimension(color.toHSV().h);
	    },
	    hsvsaturation: function (color) {
	        return new Dimension(color.toHSV().s * 100, '%');
	    },
	    hsvvalue: function (color) {
	        return new Dimension(color.toHSV().v * 100, '%');
	    },
	    red: function (color) {
	        return new Dimension(color.rgb[0]);
	    },
	    green: function (color) {
	        return new Dimension(color.rgb[1]);
	    },
	    blue: function (color) {
	        return new Dimension(color.rgb[2]);
	    },
	    alpha: function (color) {
	        return new Dimension(color.toHSL().a);
	    },
	    luma: function (color) {
	        return new Dimension(color.luma() * color.alpha * 100, '%');
	    },
	    luminance: function (color) {
	        var luminance =
	            (0.2126 * color.rgb[0] / 255) +
	                (0.7152 * color.rgb[1] / 255) +
	                (0.0722 * color.rgb[2] / 255);
	
	        return new Dimension(luminance * color.alpha * 100, '%');
	    },
	    saturate: function (color, amount, method) {
	        // filter: saturate(3.2);
	        // should be kept as is, so check for color
	        if (!color.rgb) {
	            return null;
	        }
	        var hsl = color.toHSL();
	
	        if (typeof method !== "undefined" && method.value === "relative") {
	            hsl.s +=  hsl.s * amount.value / 100;
	        }
	        else {
	            hsl.s += amount.value / 100;
	        }
	        hsl.s = clamp(hsl.s);
	        return hsla(hsl);
	    },
	    desaturate: function (color, amount, method) {
	        var hsl = color.toHSL();
	
	        if (typeof method !== "undefined" && method.value === "relative") {
	            hsl.s -=  hsl.s * amount.value / 100;
	        }
	        else {
	            hsl.s -= amount.value / 100;
	        }
	        hsl.s = clamp(hsl.s);
	        return hsla(hsl);
	    },
	    lighten: function (color, amount, method) {
	        var hsl = color.toHSL();
	
	        if (typeof method !== "undefined" && method.value === "relative") {
	            hsl.l +=  hsl.l * amount.value / 100;
	        }
	        else {
	            hsl.l += amount.value / 100;
	        }
	        hsl.l = clamp(hsl.l);
	        return hsla(hsl);
	    },
	    darken: function (color, amount, method) {
	        var hsl = color.toHSL();
	
	        if (typeof method !== "undefined" && method.value === "relative") {
	            hsl.l -=  hsl.l * amount.value / 100;
	        }
	        else {
	            hsl.l -= amount.value / 100;
	        }
	        hsl.l = clamp(hsl.l);
	        return hsla(hsl);
	    },
	    fadein: function (color, amount, method) {
	        var hsl = color.toHSL();
	
	        if (typeof method !== "undefined" && method.value === "relative") {
	            hsl.a +=  hsl.a * amount.value / 100;
	        }
	        else {
	            hsl.a += amount.value / 100;
	        }
	        hsl.a = clamp(hsl.a);
	        return hsla(hsl);
	    },
	    fadeout: function (color, amount, method) {
	        var hsl = color.toHSL();
	
	        if (typeof method !== "undefined" && method.value === "relative") {
	            hsl.a -=  hsl.a * amount.value / 100;
	        }
	        else {
	            hsl.a -= amount.value / 100;
	        }
	        hsl.a = clamp(hsl.a);
	        return hsla(hsl);
	    },
	    fade: function (color, amount) {
	        var hsl = color.toHSL();
	
	        hsl.a = amount.value / 100;
	        hsl.a = clamp(hsl.a);
	        return hsla(hsl);
	    },
	    spin: function (color, amount) {
	        var hsl = color.toHSL();
	        var hue = (hsl.h + amount.value) % 360;
	
	        hsl.h = hue < 0 ? 360 + hue : hue;
	
	        return hsla(hsl);
	    },
	    //
	    // Copyright (c) 2006-2009 Hampton Catlin, Natalie Weizenbaum, and Chris Eppstein
	    // http://sass-lang.com
	    //
	    mix: function (color1, color2, weight) {
	        if (!color1.toHSL || !color2.toHSL) {
	            console.log(color2.type);
	            console.dir(color2);
	        }
	        if (!weight) {
	            weight = new Dimension(50);
	        }
	        var p = weight.value / 100.0;
	        var w = p * 2 - 1;
	        var a = color1.toHSL().a - color2.toHSL().a;
	
	        var w1 = (((w * a == -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
	        var w2 = 1 - w1;
	
	        var rgb = [color1.rgb[0] * w1 + color2.rgb[0] * w2,
	            color1.rgb[1] * w1 + color2.rgb[1] * w2,
	            color1.rgb[2] * w1 + color2.rgb[2] * w2];
	
	        var alpha = color1.alpha * p + color2.alpha * (1 - p);
	
	        return new Color(rgb, alpha);
	    },
	    greyscale: function (color) {
	        return colorFunctions.desaturate(color, new Dimension(100));
	    },
	    contrast: function (color, dark, light, threshold) {
	        // filter: contrast(3.2);
	        // should be kept as is, so check for color
	        if (!color.rgb) {
	            return null;
	        }
	        if (typeof light === 'undefined') {
	            light = colorFunctions.rgba(255, 255, 255, 1.0);
	        }
	        if (typeof dark === 'undefined') {
	            dark = colorFunctions.rgba(0, 0, 0, 1.0);
	        }
	        //Figure out which is actually light and dark!
	        if (dark.luma() > light.luma()) {
	            var t = light;
	            light = dark;
	            dark = t;
	        }
	        if (typeof threshold === 'undefined') {
	            threshold = 0.43;
	        } else {
	            threshold = number(threshold);
	        }
	        if (color.luma() < threshold) {
	            return light;
	        } else {
	            return dark;
	        }
	    },
	    argb: function (color) {
	        return new Anonymous(color.toARGB());
	    },
	    color: function(c) {
	        if ((c instanceof Quoted) &&
	            (/^#([a-f0-9]{6}|[a-f0-9]{3})$/i.test(c.value))) {
	            return new Color(c.value.slice(1));
	        }
	        if ((c instanceof Color) || (c = Color.fromKeyword(c.value))) {
	            c.value = undefined;
	            return c;
	        }
	        throw {
	            type:    "Argument",
	            message: "argument must be a color keyword or 3/6 digit hex e.g. #FFF"
	        };
	    },
	    tint: function(color, amount) {
	        return colorFunctions.mix(colorFunctions.rgb(255, 255, 255), color, amount);
	    },
	    shade: function(color, amount) {
	        return colorFunctions.mix(colorFunctions.rgb(0, 0, 0), color, amount);
	    }
	};
	functionRegistry.addMultiple(colorFunctions);


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    unitConversions = __webpack_require__(284),
	    Unit = __webpack_require__(285),
	    Color = __webpack_require__(286);
	
	//
	// A number with a unit
	//
	var Dimension = function (value, unit) {
	    this.value = parseFloat(value);
	    this.unit = (unit && unit instanceof Unit) ? unit :
	      new Unit(unit ? [unit] : undefined);
	};
	
	Dimension.prototype = new Node();
	Dimension.prototype.type = "Dimension";
	Dimension.prototype.accept = function (visitor) {
	    this.unit = visitor.visit(this.unit);
	};
	Dimension.prototype.eval = function (context) {
	    return this;
	};
	Dimension.prototype.toColor = function () {
	    return new Color([this.value, this.value, this.value]);
	};
	Dimension.prototype.genCSS = function (context, output) {
	    if ((context && context.strictUnits) && !this.unit.isSingular()) {
	        throw new Error("Multiple units in dimension. Correct the units or use the unit function. Bad unit: " + this.unit.toString());
	    }
	
	    var value = this.fround(context, this.value),
	        strValue = String(value);
	
	    if (value !== 0 && value < 0.000001 && value > -0.000001) {
	        // would be output 1e-6 etc.
	        strValue = value.toFixed(20).replace(/0+$/, "");
	    }
	
	    if (context && context.compress) {
	        // Zero values doesn't need a unit
	        if (value === 0 && this.unit.isLength()) {
	            output.add(strValue);
	            return;
	        }
	
	        // Float values doesn't need a leading zero
	        if (value > 0 && value < 1) {
	            strValue = (strValue).substr(1);
	        }
	    }
	
	    output.add(strValue);
	    this.unit.genCSS(context, output);
	};
	
	// In an operation between two Dimensions,
	// we default to the first Dimension's unit,
	// so `1px + 2` will yield `3px`.
	Dimension.prototype.operate = function (context, op, other) {
	    /*jshint noempty:false */
	    var value = this._operate(context, op, this.value, other.value),
	        unit = this.unit.clone();
	
	    if (op === '+' || op === '-') {
	        if (unit.numerator.length === 0 && unit.denominator.length === 0) {
	            unit = other.unit.clone();
	            if (this.unit.backupUnit) {
	                unit.backupUnit = this.unit.backupUnit;
	            }
	        } else if (other.unit.numerator.length === 0 && unit.denominator.length === 0) {
	            // do nothing
	        } else {
	            other = other.convertTo(this.unit.usedUnits());
	
	            if (context.strictUnits && other.unit.toString() !== unit.toString()) {
	                throw new Error("Incompatible units. Change the units or use the unit function. Bad units: '" + unit.toString() +
	                    "' and '" + other.unit.toString() + "'.");
	            }
	
	            value = this._operate(context, op, this.value, other.value);
	        }
	    } else if (op === '*') {
	        unit.numerator = unit.numerator.concat(other.unit.numerator).sort();
	        unit.denominator = unit.denominator.concat(other.unit.denominator).sort();
	        unit.cancel();
	    } else if (op === '/') {
	        unit.numerator = unit.numerator.concat(other.unit.denominator).sort();
	        unit.denominator = unit.denominator.concat(other.unit.numerator).sort();
	        unit.cancel();
	    }
	    return new Dimension(value, unit);
	};
	Dimension.prototype.compare = function (other) {
	    var a, b;
	
	    if (!(other instanceof Dimension)) {
	        return undefined;
	    }
	
	    if (this.unit.isEmpty() || other.unit.isEmpty()) {
	        a = this;
	        b = other;
	    } else {
	        a = this.unify();
	        b = other.unify();
	        if (a.unit.compare(b.unit) !== 0) {
	            return undefined;
	        }
	    }
	
	    return Node.numericCompare(a.value, b.value);
	};
	Dimension.prototype.unify = function () {
	    return this.convertTo({ length: 'px', duration: 's', angle: 'rad' });
	};
	Dimension.prototype.convertTo = function (conversions) {
	    var value = this.value, unit = this.unit.clone(),
	        i, groupName, group, targetUnit, derivedConversions = {}, applyUnit;
	
	    if (typeof conversions === 'string') {
	        for (i in unitConversions) {
	            if (unitConversions[i].hasOwnProperty(conversions)) {
	                derivedConversions = {};
	                derivedConversions[i] = conversions;
	            }
	        }
	        conversions = derivedConversions;
	    }
	    applyUnit = function (atomicUnit, denominator) {
	        /* jshint loopfunc:true */
	        if (group.hasOwnProperty(atomicUnit)) {
	            if (denominator) {
	                value = value / (group[atomicUnit] / group[targetUnit]);
	            } else {
	                value = value * (group[atomicUnit] / group[targetUnit]);
	            }
	
	            return targetUnit;
	        }
	
	        return atomicUnit;
	    };
	
	    for (groupName in conversions) {
	        if (conversions.hasOwnProperty(groupName)) {
	            targetUnit = conversions[groupName];
	            group = unitConversions[groupName];
	
	            unit.map(applyUnit);
	        }
	    }
	
	    unit.cancel();
	
	    return new Dimension(value, unit);
	};
	module.exports = Dimension;


/***/ }),
/* 284 */
/***/ (function(module, exports) {

	module.exports = {
	    length: {
	        'm': 1,
	        'cm': 0.01,
	        'mm': 0.001,
	        'in': 0.0254,
	        'px': 0.0254 / 96,
	        'pt': 0.0254 / 72,
	        'pc': 0.0254 / 72 * 12
	    },
	    duration: {
	        's': 1,
	        'ms': 0.001
	    },
	    angle: {
	        'rad': 1 / (2 * Math.PI),
	        'deg': 1 / 360,
	        'grad': 1 / 400,
	        'turn': 1
	    }
	};

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    unitConversions = __webpack_require__(284);
	
	var Unit = function (numerator, denominator, backupUnit) {
	    this.numerator = numerator ? numerator.slice(0).sort() : [];
	    this.denominator = denominator ? denominator.slice(0).sort() : [];
	    if (backupUnit) {
	        this.backupUnit = backupUnit;
	    } else if (numerator && numerator.length) {
	        this.backupUnit = numerator[0];
	    }
	};
	
	Unit.prototype = new Node();
	Unit.prototype.type = "Unit";
	Unit.prototype.clone = function () {
	    return new Unit(this.numerator.slice(0), this.denominator.slice(0), this.backupUnit);
	};
	Unit.prototype.genCSS = function (context, output) {
	    // Dimension checks the unit is singular and throws an error if in strict math mode.
	    var strictUnits = context && context.strictUnits;
	    if (this.numerator.length === 1) {
	        output.add(this.numerator[0]); // the ideal situation
	    } else if (!strictUnits && this.backupUnit) {
	        output.add(this.backupUnit);
	    } else if (!strictUnits && this.denominator.length) {
	        output.add(this.denominator[0]);
	    }
	};
	Unit.prototype.toString = function () {
	    var i, returnStr = this.numerator.join("*");
	    for (i = 0; i < this.denominator.length; i++) {
	        returnStr += "/" + this.denominator[i];
	    }
	    return returnStr;
	};
	Unit.prototype.compare = function (other) {
	    return this.is(other.toString()) ? 0 : undefined;
	};
	Unit.prototype.is = function (unitString) {
	    return this.toString().toUpperCase() === unitString.toUpperCase();
	};
	Unit.prototype.isLength = function () {
	    return Boolean(this.toCSS().match(/px|em|%|in|cm|mm|pc|pt|ex/));
	};
	Unit.prototype.isEmpty = function () {
	    return this.numerator.length === 0 && this.denominator.length === 0;
	};
	Unit.prototype.isSingular = function() {
	    return this.numerator.length <= 1 && this.denominator.length === 0;
	};
	Unit.prototype.map = function(callback) {
	    var i;
	
	    for (i = 0; i < this.numerator.length; i++) {
	        this.numerator[i] = callback(this.numerator[i], false);
	    }
	
	    for (i = 0; i < this.denominator.length; i++) {
	        this.denominator[i] = callback(this.denominator[i], true);
	    }
	};
	Unit.prototype.usedUnits = function() {
	    var group, result = {}, mapUnit, groupName;
	
	    mapUnit = function (atomicUnit) {
	        /*jshint loopfunc:true */
	        if (group.hasOwnProperty(atomicUnit) && !result[groupName]) {
	            result[groupName] = atomicUnit;
	        }
	
	        return atomicUnit;
	    };
	
	    for (groupName in unitConversions) {
	        if (unitConversions.hasOwnProperty(groupName)) {
	            group = unitConversions[groupName];
	
	            this.map(mapUnit);
	        }
	    }
	
	    return result;
	};
	Unit.prototype.cancel = function () {
	    var counter = {}, atomicUnit, i;
	
	    for (i = 0; i < this.numerator.length; i++) {
	        atomicUnit = this.numerator[i];
	        counter[atomicUnit] = (counter[atomicUnit] || 0) + 1;
	    }
	
	    for (i = 0; i < this.denominator.length; i++) {
	        atomicUnit = this.denominator[i];
	        counter[atomicUnit] = (counter[atomicUnit] || 0) - 1;
	    }
	
	    this.numerator = [];
	    this.denominator = [];
	
	    for (atomicUnit in counter) {
	        if (counter.hasOwnProperty(atomicUnit)) {
	            var count = counter[atomicUnit];
	
	            if (count > 0) {
	                for (i = 0; i < count; i++) {
	                    this.numerator.push(atomicUnit);
	                }
	            } else if (count < 0) {
	                for (i = 0; i < -count; i++) {
	                    this.denominator.push(atomicUnit);
	                }
	            }
	        }
	    }
	
	    this.numerator.sort();
	    this.denominator.sort();
	};
	module.exports = Unit;


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    colors = __webpack_require__(287);
	
	//
	// RGB Colors - #ff0014, #eee
	//
	var Color = function (rgb, a, originalForm) {
	    //
	    // The end goal here, is to parse the arguments
	    // into an integer triplet, such as `128, 255, 0`
	    //
	    // This facilitates operations and conversions.
	    //
	    if (Array.isArray(rgb)) {
	        this.rgb = rgb;
	    } else if (rgb.length == 6) {
	        this.rgb = rgb.match(/.{2}/g).map(function (c) {
	            return parseInt(c, 16);
	        });
	    } else {
	        this.rgb = rgb.split('').map(function (c) {
	            return parseInt(c + c, 16);
	        });
	    }
	    this.alpha = typeof a === 'number' ? a : 1;
	    if (typeof originalForm !== 'undefined') {
	        this.value = originalForm;
	    }
	};
	
	Color.prototype = new Node();
	Color.prototype.type = "Color";
	
	function clamp(v, max) {
	    return Math.min(Math.max(v, 0), max);
	}
	
	function toHex(v) {
	    return '#' + v.map(function (c) {
	        c = clamp(Math.round(c), 255);
	        return (c < 16 ? '0' : '') + c.toString(16);
	    }).join('');
	}
	
	Color.prototype.luma = function () {
	    var r = this.rgb[0] / 255,
	        g = this.rgb[1] / 255,
	        b = this.rgb[2] / 255;
	
	    r = (r <= 0.03928) ? r / 12.92 : Math.pow(((r + 0.055) / 1.055), 2.4);
	    g = (g <= 0.03928) ? g / 12.92 : Math.pow(((g + 0.055) / 1.055), 2.4);
	    b = (b <= 0.03928) ? b / 12.92 : Math.pow(((b + 0.055) / 1.055), 2.4);
	
	    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
	};
	Color.prototype.genCSS = function (context, output) {
	    output.add(this.toCSS(context));
	};
	Color.prototype.toCSS = function (context, doNotCompress) {
	    var compress = context && context.compress && !doNotCompress, color, alpha;
	
	    // `value` is set if this color was originally
	    // converted from a named color string so we need
	    // to respect this and try to output named color too.
	    if (this.value) {
	        return this.value;
	    }
	
	    // If we have some transparency, the only way to represent it
	    // is via `rgba`. Otherwise, we use the hex representation,
	    // which has better compatibility with older browsers.
	    // Values are capped between `0` and `255`, rounded and zero-padded.
	    alpha = this.fround(context, this.alpha);
	    if (alpha < 1) {
	        return "rgba(" + this.rgb.map(function (c) {
	            return clamp(Math.round(c), 255);
	        }).concat(clamp(alpha, 1))
	            .join(',' + (compress ? '' : ' ')) + ")";
	    }
	
	    color = this.toRGB();
	
	    if (compress) {
	        var splitcolor = color.split('');
	
	        // Convert color to short format
	        if (splitcolor[1] === splitcolor[2] && splitcolor[3] === splitcolor[4] && splitcolor[5] === splitcolor[6]) {
	            color = '#' + splitcolor[1] + splitcolor[3] + splitcolor[5];
	        }
	    }
	
	    return color;
	};
	
	//
	// Operations have to be done per-channel, if not,
	// channels will spill onto each other. Once we have
	// our result, in the form of an integer triplet,
	// we create a new Color node to hold the result.
	//
	Color.prototype.operate = function (context, op, other) {
	    var rgb = [];
	    var alpha = this.alpha * (1 - other.alpha) + other.alpha;
	    for (var c = 0; c < 3; c++) {
	        rgb[c] = this._operate(context, op, this.rgb[c], other.rgb[c]);
	    }
	    return new Color(rgb, alpha);
	};
	Color.prototype.toRGB = function () {
	    return toHex(this.rgb);
	};
	Color.prototype.toHSL = function () {
	    var r = this.rgb[0] / 255,
	        g = this.rgb[1] / 255,
	        b = this.rgb[2] / 255,
	        a = this.alpha;
	
	    var max = Math.max(r, g, b), min = Math.min(r, g, b);
	    var h, s, l = (max + min) / 2, d = max - min;
	
	    if (max === min) {
	        h = s = 0;
	    } else {
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	
	        switch (max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2;               break;
	            case b: h = (r - g) / d + 4;               break;
	        }
	        h /= 6;
	    }
	    return { h: h * 360, s: s, l: l, a: a };
	};
	//Adapted from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript
	Color.prototype.toHSV = function () {
	    var r = this.rgb[0] / 255,
	        g = this.rgb[1] / 255,
	        b = this.rgb[2] / 255,
	        a = this.alpha;
	
	    var max = Math.max(r, g, b), min = Math.min(r, g, b);
	    var h, s, v = max;
	
	    var d = max - min;
	    if (max === 0) {
	        s = 0;
	    } else {
	        s = d / max;
	    }
	
	    if (max === min) {
	        h = 0;
	    } else {
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }
	        h /= 6;
	    }
	    return { h: h * 360, s: s, v: v, a: a };
	};
	Color.prototype.toARGB = function () {
	    return toHex([this.alpha * 255].concat(this.rgb));
	};
	Color.prototype.compare = function (x) {
	    return (x.rgb &&
	        x.rgb[0] === this.rgb[0] &&
	        x.rgb[1] === this.rgb[1] &&
	        x.rgb[2] === this.rgb[2] &&
	        x.alpha  === this.alpha) ? 0 : undefined;
	};
	
	Color.fromKeyword = function(keyword) {
	    var c, key = keyword.toLowerCase();
	    if (colors.hasOwnProperty(key)) {
	        c = new Color(colors[key].slice(1));
	    }
	    else if (key === "transparent") {
	        c = new Color([0, 0, 0], 0);
	    }
	
	    if (c) {
	        c.value = keyword;
	        return c;
	    }
	};
	module.exports = Color;


/***/ }),
/* 287 */
/***/ (function(module, exports) {

	module.exports = {
	    'aliceblue':'#f0f8ff',
	    'antiquewhite':'#faebd7',
	    'aqua':'#00ffff',
	    'aquamarine':'#7fffd4',
	    'azure':'#f0ffff',
	    'beige':'#f5f5dc',
	    'bisque':'#ffe4c4',
	    'black':'#000000',
	    'blanchedalmond':'#ffebcd',
	    'blue':'#0000ff',
	    'blueviolet':'#8a2be2',
	    'brown':'#a52a2a',
	    'burlywood':'#deb887',
	    'cadetblue':'#5f9ea0',
	    'chartreuse':'#7fff00',
	    'chocolate':'#d2691e',
	    'coral':'#ff7f50',
	    'cornflowerblue':'#6495ed',
	    'cornsilk':'#fff8dc',
	    'crimson':'#dc143c',
	    'cyan':'#00ffff',
	    'darkblue':'#00008b',
	    'darkcyan':'#008b8b',
	    'darkgoldenrod':'#b8860b',
	    'darkgray':'#a9a9a9',
	    'darkgrey':'#a9a9a9',
	    'darkgreen':'#006400',
	    'darkkhaki':'#bdb76b',
	    'darkmagenta':'#8b008b',
	    'darkolivegreen':'#556b2f',
	    'darkorange':'#ff8c00',
	    'darkorchid':'#9932cc',
	    'darkred':'#8b0000',
	    'darksalmon':'#e9967a',
	    'darkseagreen':'#8fbc8f',
	    'darkslateblue':'#483d8b',
	    'darkslategray':'#2f4f4f',
	    'darkslategrey':'#2f4f4f',
	    'darkturquoise':'#00ced1',
	    'darkviolet':'#9400d3',
	    'deeppink':'#ff1493',
	    'deepskyblue':'#00bfff',
	    'dimgray':'#696969',
	    'dimgrey':'#696969',
	    'dodgerblue':'#1e90ff',
	    'firebrick':'#b22222',
	    'floralwhite':'#fffaf0',
	    'forestgreen':'#228b22',
	    'fuchsia':'#ff00ff',
	    'gainsboro':'#dcdcdc',
	    'ghostwhite':'#f8f8ff',
	    'gold':'#ffd700',
	    'goldenrod':'#daa520',
	    'gray':'#808080',
	    'grey':'#808080',
	    'green':'#008000',
	    'greenyellow':'#adff2f',
	    'honeydew':'#f0fff0',
	    'hotpink':'#ff69b4',
	    'indianred':'#cd5c5c',
	    'indigo':'#4b0082',
	    'ivory':'#fffff0',
	    'khaki':'#f0e68c',
	    'lavender':'#e6e6fa',
	    'lavenderblush':'#fff0f5',
	    'lawngreen':'#7cfc00',
	    'lemonchiffon':'#fffacd',
	    'lightblue':'#add8e6',
	    'lightcoral':'#f08080',
	    'lightcyan':'#e0ffff',
	    'lightgoldenrodyellow':'#fafad2',
	    'lightgray':'#d3d3d3',
	    'lightgrey':'#d3d3d3',
	    'lightgreen':'#90ee90',
	    'lightpink':'#ffb6c1',
	    'lightsalmon':'#ffa07a',
	    'lightseagreen':'#20b2aa',
	    'lightskyblue':'#87cefa',
	    'lightslategray':'#778899',
	    'lightslategrey':'#778899',
	    'lightsteelblue':'#b0c4de',
	    'lightyellow':'#ffffe0',
	    'lime':'#00ff00',
	    'limegreen':'#32cd32',
	    'linen':'#faf0e6',
	    'magenta':'#ff00ff',
	    'maroon':'#800000',
	    'mediumaquamarine':'#66cdaa',
	    'mediumblue':'#0000cd',
	    'mediumorchid':'#ba55d3',
	    'mediumpurple':'#9370d8',
	    'mediumseagreen':'#3cb371',
	    'mediumslateblue':'#7b68ee',
	    'mediumspringgreen':'#00fa9a',
	    'mediumturquoise':'#48d1cc',
	    'mediumvioletred':'#c71585',
	    'midnightblue':'#191970',
	    'mintcream':'#f5fffa',
	    'mistyrose':'#ffe4e1',
	    'moccasin':'#ffe4b5',
	    'navajowhite':'#ffdead',
	    'navy':'#000080',
	    'oldlace':'#fdf5e6',
	    'olive':'#808000',
	    'olivedrab':'#6b8e23',
	    'orange':'#ffa500',
	    'orangered':'#ff4500',
	    'orchid':'#da70d6',
	    'palegoldenrod':'#eee8aa',
	    'palegreen':'#98fb98',
	    'paleturquoise':'#afeeee',
	    'palevioletred':'#d87093',
	    'papayawhip':'#ffefd5',
	    'peachpuff':'#ffdab9',
	    'peru':'#cd853f',
	    'pink':'#ffc0cb',
	    'plum':'#dda0dd',
	    'powderblue':'#b0e0e6',
	    'purple':'#800080',
	    'rebeccapurple':'#663399',
	    'red':'#ff0000',
	    'rosybrown':'#bc8f8f',
	    'royalblue':'#4169e1',
	    'saddlebrown':'#8b4513',
	    'salmon':'#fa8072',
	    'sandybrown':'#f4a460',
	    'seagreen':'#2e8b57',
	    'seashell':'#fff5ee',
	    'sienna':'#a0522d',
	    'silver':'#c0c0c0',
	    'skyblue':'#87ceeb',
	    'slateblue':'#6a5acd',
	    'slategray':'#708090',
	    'slategrey':'#708090',
	    'snow':'#fffafa',
	    'springgreen':'#00ff7f',
	    'steelblue':'#4682b4',
	    'tan':'#d2b48c',
	    'teal':'#008080',
	    'thistle':'#d8bfd8',
	    'tomato':'#ff6347',
	    'turquoise':'#40e0d0',
	    'violet':'#ee82ee',
	    'wheat':'#f5deb3',
	    'white':'#ffffff',
	    'whitesmoke':'#f5f5f5',
	    'yellow':'#ffff00',
	    'yellowgreen':'#9acd32'
	};

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    JsEvalNode = __webpack_require__(289),
	    Variable = __webpack_require__(290);
	
	var Quoted = function (str, content, escaped, index, currentFileInfo) {
	    this.escaped = (escaped == null) ? true : escaped;
	    this.value = content || '';
	    this.quote = str.charAt(0);
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	};
	Quoted.prototype = new JsEvalNode();
	Quoted.prototype.type = "Quoted";
	Quoted.prototype.genCSS = function (context, output) {
	    if (!this.escaped) {
	        output.add(this.quote, this.currentFileInfo, this.index);
	    }
	    output.add(this.value);
	    if (!this.escaped) {
	        output.add(this.quote);
	    }
	};
	Quoted.prototype.containsVariables = function() {
	    return this.value.match(/(`([^`]+)`)|@\{([\w-]+)\}/);
	};
	Quoted.prototype.eval = function (context) {
	    var that = this, value = this.value;
	    var javascriptReplacement = function (_, exp) {
	        return String(that.evaluateJavaScript(exp, context));
	    };
	    var interpolationReplacement = function (_, name) {
	        var v = new Variable('@' + name, that.index, that.currentFileInfo).eval(context, true);
	        return (v instanceof Quoted) ? v.value : v.toCSS();
	    };
	    function iterativeReplace(value, regexp, replacementFnc) {
	        var evaluatedValue = value;
	        do {
	            value = evaluatedValue;
	            evaluatedValue = value.replace(regexp, replacementFnc);
	        } while (value !== evaluatedValue);
	        return evaluatedValue;
	    }
	    value = iterativeReplace(value, /`([^`]+)`/g, javascriptReplacement);
	    value = iterativeReplace(value, /@\{([\w-]+)\}/g, interpolationReplacement);
	    return new Quoted(this.quote + value + this.quote, value, this.escaped, this.index, this.currentFileInfo);
	};
	Quoted.prototype.compare = function (other) {
	    // when comparing quoted strings allow the quote to differ
	    if (other.type === "Quoted" && !this.escaped && !other.escaped) {
	        return Node.numericCompare(this.value, other.value);
	    } else {
	        return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
	    }
	};
	module.exports = Quoted;


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Variable = __webpack_require__(290);
	
	var JsEvalNode = function() {
	};
	JsEvalNode.prototype = new Node();
	
	JsEvalNode.prototype.evaluateJavaScript = function (expression, context) {
	    var result,
	        that = this,
	        evalContext = {};
	
	    if (context.javascriptEnabled !== undefined && !context.javascriptEnabled) {
	        throw { message: "You are using JavaScript, which has been disabled.",
	            filename: this.currentFileInfo.filename,
	            index: this.index };
	    }
	
	    expression = expression.replace(/@\{([\w-]+)\}/g, function (_, name) {
	        return that.jsify(new Variable('@' + name, that.index, that.currentFileInfo).eval(context));
	    });
	
	    try {
	        expression = new Function('return (' + expression + ')');
	    } catch (e) {
	        throw { message: "JavaScript evaluation error: " + e.message + " from `" + expression + "`" ,
	            filename: this.currentFileInfo.filename,
	            index: this.index };
	    }
	
	    var variables = context.frames[0].variables();
	    for (var k in variables) {
	        if (variables.hasOwnProperty(k)) {
	            /*jshint loopfunc:true */
	            evalContext[k.slice(1)] = {
	                value: variables[k].value,
	                toJS: function () {
	                    return this.value.eval(context).toCSS();
	                }
	            };
	        }
	    }
	
	    try {
	        result = expression.call(evalContext);
	    } catch (e) {
	        throw { message: "JavaScript evaluation error: '" + e.name + ': ' + e.message.replace(/["]/g, "'") + "'" ,
	            filename: this.currentFileInfo.filename,
	            index: this.index };
	    }
	    return result;
	};
	JsEvalNode.prototype.jsify = function (obj) {
	    if (Array.isArray(obj.value) && (obj.value.length > 1)) {
	        return '[' + obj.value.map(function (v) { return v.toCSS(); }).join(', ') + ']';
	    } else {
	        return obj.toCSS();
	    }
	};
	
	module.exports = JsEvalNode;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Variable = function (name, index, currentFileInfo) {
	    this.name = name;
	    this.index = index;
	    this.currentFileInfo = currentFileInfo || {};
	};
	Variable.prototype = new Node();
	Variable.prototype.type = "Variable";
	Variable.prototype.eval = function (context) {
	    var variable, name = this.name;
	
	    if (name.indexOf('@@') === 0) {
	        name = '@' + new Variable(name.slice(1), this.index, this.currentFileInfo).eval(context).value;
	    }
	
	    if (this.evaluating) {
	        throw { type: 'Name',
	                message: "Recursive variable definition for " + name,
	                filename: this.currentFileInfo.filename,
	                index: this.index };
	    }
	
	    this.evaluating = true;
	
	    variable = this.find(context.frames, function (frame) {
	        var v = frame.variable(name);
	        if (v) {
	            if (v.important) {
	                var importantScope = context.importantScope[context.importantScope.length - 1];
	                importantScope.important = v.important;
	            }
	            return v.value.eval(context);
	        }
	    });
	    if (variable) {
	        this.evaluating = false;
	        return variable;
	    } else {
	        throw { type: 'Name',
	                message: "variable " + name + " is undefined",
	                filename: this.currentFileInfo.filename,
	                index: this.index };
	    }
	};
	Variable.prototype.find = function (obj, fun) {
	    for (var i = 0, r; i < obj.length; i++) {
	        r = fun.call(obj, obj[i]);
	        if (r) { return r; }
	    }
	    return null;
	};
	module.exports = Variable;


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Anonymous = function (value, index, currentFileInfo, mapLines, rulesetLike, visibilityInfo) {
	    this.value = value;
	    this.index = index;
	    this.mapLines = mapLines;
	    this.currentFileInfo = currentFileInfo;
	    this.rulesetLike = (typeof rulesetLike === 'undefined') ? false : rulesetLike;
	    this.allowRoot = true;
	    this.copyVisibilityInfo(visibilityInfo);
	};
	Anonymous.prototype = new Node();
	Anonymous.prototype.type = "Anonymous";
	Anonymous.prototype.eval = function () {
	    return new Anonymous(this.value, this.index, this.currentFileInfo, this.mapLines, this.rulesetLike, this.visibilityInfo());
	};
	Anonymous.prototype.compare = function (other) {
	    return other.toCSS && this.toCSS() === other.toCSS() ? 0 : undefined;
	};
	Anonymous.prototype.isRulesetLike = function() {
	    return this.rulesetLike;
	};
	Anonymous.prototype.genCSS = function (context, output) {
	    output.add(this.value, this.currentFileInfo, this.index, this.mapLines);
	};
	module.exports = Anonymous;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	var Color = __webpack_require__(286),
	    functionRegistry = __webpack_require__(273);
	
	// Color Blending
	// ref: http://www.w3.org/TR/compositing-1
	
	function colorBlend(mode, color1, color2) {
	    var ab = color1.alpha, cb, // backdrop
	        as = color2.alpha, cs, // source
	        ar, cr, r = [];        // result
	
	    ar = as + ab * (1 - as);
	    for (var i = 0; i < 3; i++) {
	        cb = color1.rgb[i] / 255;
	        cs = color2.rgb[i] / 255;
	        cr = mode(cb, cs);
	        if (ar) {
	            cr = (as * cs + ab * (cb -
	                  as * (cb + cs - cr))) / ar;
	        }
	        r[i] = cr * 255;
	    }
	
	    return new Color(r, ar);
	}
	
	var colorBlendModeFunctions = {
	    multiply: function(cb, cs) {
	        return cb * cs;
	    },
	    screen: function(cb, cs) {
	        return cb + cs - cb * cs;
	    },
	    overlay: function(cb, cs) {
	        cb *= 2;
	        return (cb <= 1) ?
	            colorBlendModeFunctions.multiply(cb, cs) :
	            colorBlendModeFunctions.screen(cb - 1, cs);
	    },
	    softlight: function(cb, cs) {
	        var d = 1, e = cb;
	        if (cs > 0.5) {
	            e = 1;
	            d = (cb > 0.25) ? Math.sqrt(cb)
	                : ((16 * cb - 12) * cb + 4) * cb;
	        }
	        return cb - (1 - 2 * cs) * e * (d - cb);
	    },
	    hardlight: function(cb, cs) {
	        return colorBlendModeFunctions.overlay(cs, cb);
	    },
	    difference: function(cb, cs) {
	        return Math.abs(cb - cs);
	    },
	    exclusion: function(cb, cs) {
	        return cb + cs - 2 * cb * cs;
	    },
	
	    // non-w3c functions:
	    average: function(cb, cs) {
	        return (cb + cs) / 2;
	    },
	    negation: function(cb, cs) {
	        return 1 - Math.abs(cb + cs - 1);
	    }
	};
	
	for (var f in colorBlendModeFunctions) {
	    if (colorBlendModeFunctions.hasOwnProperty(f)) {
	        colorBlend[f] = colorBlend.bind(null, colorBlendModeFunctions[f]);
	    }
	}
	
	functionRegistry.addMultiple(colorBlend);


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function(environment) {
	    var Quoted = __webpack_require__(288),
	        URL = __webpack_require__(294),
	        functionRegistry = __webpack_require__(273),
	        fallback = function(functionThis, node) {
	            return new URL(node, functionThis.index, functionThis.currentFileInfo).eval(functionThis.context);
	        },
	        logger = __webpack_require__(271);
	
	    functionRegistry.add("data-uri", function(mimetypeNode, filePathNode) {
	
	        if (!filePathNode) {
	            filePathNode = mimetypeNode;
	            mimetypeNode = null;
	        }
	
	        var mimetype = mimetypeNode && mimetypeNode.value;
	        var filePath = filePathNode.value;
	        var currentFileInfo = this.currentFileInfo;
	        var currentDirectory = currentFileInfo.relativeUrls ?
	            currentFileInfo.currentDirectory : currentFileInfo.entryPath;
	
	        var fragmentStart = filePath.indexOf('#');
	        var fragment = '';
	        if (fragmentStart !== -1) {
	            fragment = filePath.slice(fragmentStart);
	            filePath = filePath.slice(0, fragmentStart);
	        }
	
	        var fileManager = environment.getFileManager(filePath, currentDirectory, this.context, environment, true);
	
	        if (!fileManager) {
	            return fallback(this, filePathNode);
	        }
	
	        var useBase64 = false;
	
	        // detect the mimetype if not given
	        if (!mimetypeNode) {
	
	            mimetype = environment.mimeLookup(filePath);
	
	            if (mimetype === "image/svg+xml") {
	                useBase64 = false;
	            } else {
	                // use base 64 unless it's an ASCII or UTF-8 format
	                var charset = environment.charsetLookup(mimetype);
	                useBase64 = ['US-ASCII', 'UTF-8'].indexOf(charset) < 0;
	            }
	            if (useBase64) { mimetype += ';base64'; }
	        }
	        else {
	            useBase64 = /;base64$/.test(mimetype);
	        }
	
	        var fileSync = fileManager.loadFileSync(filePath, currentDirectory, this.context, environment);
	        if (!fileSync.contents) {
	            logger.warn("Skipped data-uri embedding of " + filePath + " because file not found");
	            return fallback(this, filePathNode || mimetypeNode);
	        }
	        var buf = fileSync.contents;
	        if (useBase64 && !environment.encodeBase64) {
	            return fallback(this, filePathNode);
	        }
	
	        buf = useBase64 ? environment.encodeBase64(buf) : encodeURIComponent(buf);
	
	        var uri = "data:" + mimetype + ',' + buf + fragment;
	
	        // IE8 cannot handle a data-uri larger than 32,768 characters. If this is exceeded
	        // and the --ieCompat flag is enabled, return a normal url() instead.
	        var DATA_URI_MAX = 32768;
	        if (uri.length >= DATA_URI_MAX) {
	
	            if (this.context.ieCompat !== false) {
	                logger.warn("Skipped data-uri embedding of " + filePath + " because its size (" + uri.length +
	                    " characters) exceeds IE8-safe " + DATA_URI_MAX + " characters!");
	
	                return fallback(this, filePathNode || mimetypeNode);
	            }
	        }
	
	        return new URL(new Quoted('"' + uri + '"', uri, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);
	    });
	};


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var URL = function (val, index, currentFileInfo, isEvald) {
	    this.value = val;
	    this.currentFileInfo = currentFileInfo;
	    this.index = index;
	    this.isEvald = isEvald;
	};
	URL.prototype = new Node();
	URL.prototype.type = "Url";
	URL.prototype.accept = function (visitor) {
	    this.value = visitor.visit(this.value);
	};
	URL.prototype.genCSS = function (context, output) {
	    output.add("url(");
	    this.value.genCSS(context, output);
	    output.add(")");
	};
	URL.prototype.eval = function (context) {
	    var val = this.value.eval(context),
	        rootpath;
	
	    if (!this.isEvald) {
	        // Add the base path if the URL is relative
	        rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;
	        if (rootpath &&
	            typeof val.value === "string" &&
	            context.isPathRelative(val.value)) {
	
	            if (!val.quote) {
	                rootpath = rootpath.replace(/[\(\)'"\s]/g, function(match) { return "\\" + match; });
	            }
	            val.value = rootpath + val.value;
	        }
	
	        val.value = context.normalizePath(val.value);
	
	        // Add url args if enabled
	        if (context.urlArgs) {
	            if (!val.value.match(/^\s*data:/)) {
	                var delimiter = val.value.indexOf('?') === -1 ? '?' : '&';
	                var urlArgs = delimiter + context.urlArgs;
	                if (val.value.indexOf('#') !== -1) {
	                    val.value = val.value.replace('#', urlArgs + '#');
	                } else {
	                    val.value += urlArgs;
	                }
	            }
	        }
	    }
	
	    return new URL(val, this.index, this.currentFileInfo, true);
	};
	module.exports = URL;


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	var functionRegistry = __webpack_require__(273),
	    mathHelper = __webpack_require__(296);
	
	var mathFunctions = {
	    // name,  unit
	    ceil:  null,
	    floor: null,
	    sqrt:  null,
	    abs:   null,
	    tan:   "",
	    sin:   "",
	    cos:   "",
	    atan:  "rad",
	    asin:  "rad",
	    acos:  "rad"
	};
	
	for (var f in mathFunctions) {
	    if (mathFunctions.hasOwnProperty(f)) {
	        mathFunctions[f] = mathHelper._math.bind(null, Math[f], mathFunctions[f]);
	    }
	}
	
	mathFunctions.round = function (n, f) {
	    var fraction = typeof f === "undefined" ? 0 : f.value;
	    return mathHelper._math(function(num) { return num.toFixed(fraction); }, null, n);
	};
	
	functionRegistry.addMultiple(mathFunctions);


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	var Dimension = __webpack_require__(283);
	
	var MathHelper = function() {
	};
	MathHelper._math = function (fn, unit, n) {
	    if (!(n instanceof Dimension)) {
	        throw { type: "Argument", message: "argument must be a number" };
	    }
	    if (unit == null) {
	        unit = n.unit;
	    } else {
	        n = n.unify();
	    }
	    return new Dimension(fn(parseFloat(n.value)), unit);
	};
	module.exports = MathHelper;

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	var Dimension = __webpack_require__(283),
	    Anonymous = __webpack_require__(291),
	    functionRegistry = __webpack_require__(273),
	    mathHelper = __webpack_require__(296);
	
	var minMax = function (isMin, args) {
	    args = Array.prototype.slice.call(args);
	    switch(args.length) {
	        case 0: throw { type: "Argument", message: "one or more arguments required" };
	    }
	    var i, j, current, currentUnified, referenceUnified, unit, unitStatic, unitClone,
	        order  = [], // elems only contains original argument values.
	        values = {}; // key is the unit.toString() for unified Dimension values,
	    // value is the index into the order array.
	    for (i = 0; i < args.length; i++) {
	        current = args[i];
	        if (!(current instanceof Dimension)) {
	            if (Array.isArray(args[i].value)) {
	                Array.prototype.push.apply(args, Array.prototype.slice.call(args[i].value));
	            }
	            continue;
	        }
	        currentUnified = current.unit.toString() === "" && unitClone !== undefined ? new Dimension(current.value, unitClone).unify() : current.unify();
	        unit = currentUnified.unit.toString() === "" && unitStatic !== undefined ? unitStatic : currentUnified.unit.toString();
	        unitStatic = unit !== "" && unitStatic === undefined || unit !== "" && order[0].unify().unit.toString() === "" ? unit : unitStatic;
	        unitClone = unit !== "" && unitClone === undefined ? current.unit.toString() : unitClone;
	        j = values[""] !== undefined && unit !== "" && unit === unitStatic ? values[""] : values[unit];
	        if (j === undefined) {
	            if (unitStatic !== undefined && unit !== unitStatic) {
	                throw{ type: "Argument", message: "incompatible types" };
	            }
	            values[unit] = order.length;
	            order.push(current);
	            continue;
	        }
	        referenceUnified = order[j].unit.toString() === "" && unitClone !== undefined ? new Dimension(order[j].value, unitClone).unify() : order[j].unify();
	        if ( isMin && currentUnified.value < referenceUnified.value ||
	            !isMin && currentUnified.value > referenceUnified.value) {
	            order[j] = current;
	        }
	    }
	    if (order.length == 1) {
	        return order[0];
	    }
	    args = order.map(function (a) { return a.toCSS(this.context); }).join(this.context.compress ? "," : ", ");
	    return new Anonymous((isMin ? "min" : "max") + "(" + args + ")");
	};
	functionRegistry.addMultiple({
	    min: function () {
	        return minMax(true, arguments);
	    },
	    max: function () {
	        return minMax(false, arguments);
	    },
	    convert: function (val, unit) {
	        return val.convertTo(unit.value);
	    },
	    pi: function () {
	        return new Dimension(Math.PI);
	    },
	    mod: function(a, b) {
	        return new Dimension(a.value % b.value, a.unit);
	    },
	    pow: function(x, y) {
	        if (typeof x === "number" && typeof y === "number") {
	            x = new Dimension(x);
	            y = new Dimension(y);
	        } else if (!(x instanceof Dimension) || !(y instanceof Dimension)) {
	            throw { type: "Argument", message: "arguments must be numbers" };
	        }
	
	        return new Dimension(Math.pow(x.value, y.value), x.unit);
	    },
	    percentage: function (n) {
	        var result = mathHelper._math(function(num) {
	            return num * 100;
	        }, '%', n);
	
	        return result;
	    }
	});


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	var Quoted = __webpack_require__(288),
	    Anonymous = __webpack_require__(291),
	    JavaScript = __webpack_require__(299),
	    functionRegistry = __webpack_require__(273);
	
	functionRegistry.addMultiple({
	    e: function (str) {
	        return new Anonymous(str instanceof JavaScript ? str.evaluated : str.value);
	    },
	    escape: function (str) {
	        return new Anonymous(
	            encodeURI(str.value).replace(/=/g, "%3D").replace(/:/g, "%3A").replace(/#/g, "%23").replace(/;/g, "%3B")
	                .replace(/\(/g, "%28").replace(/\)/g, "%29"));
	    },
	    replace: function (string, pattern, replacement, flags) {
	        var result = string.value;
	        replacement = (replacement.type === "Quoted") ?
	            replacement.value : replacement.toCSS();
	        result = result.replace(new RegExp(pattern.value, flags ? flags.value : ''), replacement);
	        return new Quoted(string.quote || '', result, string.escaped);
	    },
	    '%': function (string /* arg, arg, ...*/) {
	        var args = Array.prototype.slice.call(arguments, 1),
	            result = string.value;
	
	        for (var i = 0; i < args.length; i++) {
	            /*jshint loopfunc:true */
	            result = result.replace(/%[sda]/i, function(token) {
	                var value = ((args[i].type === "Quoted") &&
	                    token.match(/s/i)) ? args[i].value : args[i].toCSS();
	                return token.match(/[A-Z]$/) ? encodeURIComponent(value) : value;
	            });
	        }
	        result = result.replace(/%%/g, '%');
	        return new Quoted(string.quote || '', result, string.escaped);
	    }
	});


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	var JsEvalNode = __webpack_require__(289),
	    Dimension = __webpack_require__(283),
	    Quoted = __webpack_require__(288),
	    Anonymous = __webpack_require__(291);
	
	var JavaScript = function (string, escaped, index, currentFileInfo) {
	    this.escaped = escaped;
	    this.expression = string;
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	};
	JavaScript.prototype = new JsEvalNode();
	JavaScript.prototype.type = "JavaScript";
	JavaScript.prototype.eval = function(context) {
	    var result = this.evaluateJavaScript(this.expression, context);
	
	    if (typeof result === 'number') {
	        return new Dimension(result);
	    } else if (typeof result === 'string') {
	        return new Quoted('"' + result + '"', result, this.escaped, this.index);
	    } else if (Array.isArray(result)) {
	        return new Anonymous(result.join(', '));
	    } else {
	        return new Anonymous(result);
	    }
	};
	
	module.exports = JavaScript;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function(environment) {
	    var Dimension = __webpack_require__(283),
	        Color = __webpack_require__(286),
	        Expression = __webpack_require__(275),
	        Quoted = __webpack_require__(288),
	        URL = __webpack_require__(294),
	        functionRegistry = __webpack_require__(273);
	
	    functionRegistry.add("svg-gradient", function(direction) {
	
	        var stops,
	            gradientDirectionSvg,
	            gradientType = "linear",
	            rectangleDimension = 'x="0" y="0" width="1" height="1"',
	            renderEnv = {compress: false},
	            returner,
	            directionValue = direction.toCSS(renderEnv),
				i, color, position, positionValue, alpha;
	
	        function throwArgumentDescriptor() {
	            throw { type: "Argument",
						message: "svg-gradient expects direction, start_color [start_position], [color position,]...," +
								" end_color [end_position] or direction, color list" };
	        }
	
	        if (arguments.length == 2) {
	            if (arguments[1].value.length < 2) {
	                throwArgumentDescriptor();
	            }
	            stops = arguments[1].value;
	        } else if (arguments.length < 3) {
	            throwArgumentDescriptor();
	        } else {
	            stops = Array.prototype.slice.call(arguments, 1);
	        }
	
	        switch (directionValue) {
	            case "to bottom":
	                gradientDirectionSvg = 'x1="0%" y1="0%" x2="0%" y2="100%"';
	                break;
	            case "to right":
	                gradientDirectionSvg = 'x1="0%" y1="0%" x2="100%" y2="0%"';
	                break;
	            case "to bottom right":
	                gradientDirectionSvg = 'x1="0%" y1="0%" x2="100%" y2="100%"';
	                break;
	            case "to top right":
	                gradientDirectionSvg = 'x1="0%" y1="100%" x2="100%" y2="0%"';
	                break;
	            case "ellipse":
	            case "ellipse at center":
	                gradientType = "radial";
	                gradientDirectionSvg = 'cx="50%" cy="50%" r="75%"';
	                rectangleDimension = 'x="-50" y="-50" width="101" height="101"';
	                break;
	            default:
	                throw { type: "Argument", message: "svg-gradient direction must be 'to bottom', 'to right'," +
	                    " 'to bottom right', 'to top right' or 'ellipse at center'" };
	        }
	        returner = '<?xml version="1.0" ?>' +
	            '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none">' +
	            '<' + gradientType + 'Gradient id="gradient" gradientUnits="userSpaceOnUse" ' + gradientDirectionSvg + '>';
	
	        for (i = 0; i < stops.length; i+= 1) {
	            if (stops[i] instanceof Expression) {
	                color = stops[i].value[0];
	                position = stops[i].value[1];
	            } else {
	                color = stops[i];
	                position = undefined;
	            }
	
	            if (!(color instanceof Color) || (!((i === 0 || i + 1 === stops.length) && position === undefined) && !(position instanceof Dimension))) {
	                throwArgumentDescriptor();
	            }
	            positionValue = position ? position.toCSS(renderEnv) : i === 0 ? "0%" : "100%";
	            alpha = color.alpha;
	            returner += '<stop offset="' + positionValue + '" stop-color="' + color.toRGB() + '"' + (alpha < 1 ? ' stop-opacity="' + alpha + '"' : '') + '/>';
	        }
	        returner += '</' + gradientType + 'Gradient>' +
	            '<rect ' + rectangleDimension + ' fill="url(#gradient)" /></svg>';
	
	        returner = encodeURIComponent(returner);
	
	        returner = "data:image/svg+xml," + returner;
	        return new URL(new Quoted("'" + returner + "'", returner, false, this.index, this.currentFileInfo), this.index, this.currentFileInfo);
	    });
	};


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	var Keyword = __webpack_require__(281),
	    DetachedRuleset = __webpack_require__(302),
	    Dimension = __webpack_require__(283),
	    Color = __webpack_require__(286),
	    Quoted = __webpack_require__(288),
	    Anonymous = __webpack_require__(291),
	    URL = __webpack_require__(294),
	    Operation = __webpack_require__(304),
	    functionRegistry = __webpack_require__(273);
	
	var isa = function (n, Type) {
	        return (n instanceof Type) ? Keyword.True : Keyword.False;
	    },
	    isunit = function (n, unit) {
	        if (unit === undefined) {
	            throw { type: "Argument", message: "missing the required second argument to isunit." };
	        }
	        unit = typeof unit.value === "string" ? unit.value : unit;
	        if (typeof unit !== "string") {
	            throw { type: "Argument", message: "Second argument to isunit should be a unit or a string." };
	        }
	        return (n instanceof Dimension) && n.unit.is(unit) ? Keyword.True : Keyword.False;
	    },
	    getItemsFromNode = function(node) {
	        // handle non-array values as an array of length 1
	        // return 'undefined' if index is invalid
	        var items = Array.isArray(node.value) ?
	            node.value : Array(node);
	
	        return items;
	    };
	functionRegistry.addMultiple({
	    isruleset: function (n) {
	        return isa(n, DetachedRuleset);
	    },
	    iscolor: function (n) {
	        return isa(n, Color);
	    },
	    isnumber: function (n) {
	        return isa(n, Dimension);
	    },
	    isstring: function (n) {
	        return isa(n, Quoted);
	    },
	    iskeyword: function (n) {
	        return isa(n, Keyword);
	    },
	    isurl: function (n) {
	        return isa(n, URL);
	    },
	    ispixel: function (n) {
	        return isunit(n, 'px');
	    },
	    ispercentage: function (n) {
	        return isunit(n, '%');
	    },
	    isem: function (n) {
	        return isunit(n, 'em');
	    },
	    isunit: isunit,
	    unit: function (val, unit) {
	        if (!(val instanceof Dimension)) {
	            throw { type: "Argument",
	                message: "the first argument to unit must be a number" +
	                    (val instanceof Operation ? ". Have you forgotten parenthesis?" : "") };
	        }
	        if (unit) {
	            if (unit instanceof Keyword) {
	                unit = unit.value;
	            } else {
	                unit = unit.toCSS();
	            }
	        } else {
	            unit = "";
	        }
	        return new Dimension(val.value, unit);
	    },
	    "get-unit": function (n) {
	        return new Anonymous(n.unit);
	    },
	    extract: function(values, index) {
	        index = index.value - 1; // (1-based index)
	
	        return getItemsFromNode(values)[index];
	    },
	    length: function(values) {
	        return new Dimension(getItemsFromNode(values).length);
	    }
	});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    contexts = __webpack_require__(303);
	
	var DetachedRuleset = function (ruleset, frames) {
	    this.ruleset = ruleset;
	    this.frames = frames;
	};
	DetachedRuleset.prototype = new Node();
	DetachedRuleset.prototype.type = "DetachedRuleset";
	DetachedRuleset.prototype.evalFirst = true;
	DetachedRuleset.prototype.accept = function (visitor) {
	    this.ruleset = visitor.visit(this.ruleset);
	};
	DetachedRuleset.prototype.eval = function (context) {
	    var frames = this.frames || context.frames.slice(0);
	    return new DetachedRuleset(this.ruleset, frames);
	};
	DetachedRuleset.prototype.callEval = function (context) {
	    return this.ruleset.eval(this.frames ? new contexts.Eval(context, this.frames.concat(context.frames)) : context);
	};
	module.exports = DetachedRuleset;


/***/ }),
/* 303 */
/***/ (function(module, exports) {

	var contexts = {};
	module.exports = contexts;
	
	var copyFromOriginal = function copyFromOriginal(original, destination, propertiesToCopy) {
	    if (!original) { return; }
	
	    for (var i = 0; i < propertiesToCopy.length; i++) {
	        if (original.hasOwnProperty(propertiesToCopy[i])) {
	            destination[propertiesToCopy[i]] = original[propertiesToCopy[i]];
	        }
	    }
	};
	
	/*
	 parse is used whilst parsing
	 */
	var parseCopyProperties = [
	    // options
	    'paths',            // option - unmodified - paths to search for imports on
	    'relativeUrls',     // option - whether to adjust URL's to be relative
	    'rootpath',         // option - rootpath to append to URL's
	    'strictImports',    // option -
	    'insecure',         // option - whether to allow imports from insecure ssl hosts
	    'dumpLineNumbers',  // option - whether to dump line numbers
	    'compress',         // option - whether to compress
	    'syncImport',       // option - whether to import synchronously
	    'chunkInput',       // option - whether to chunk input. more performant but causes parse issues.
	    'mime',             // browser only - mime type for sheet import
	    'useFileCache',     // browser only - whether to use the per file session cache
	    // context
	    'processImports',   // option & context - whether to process imports. if false then imports will not be imported.
	                        // Used by the import manager to stop multiple import visitors being created.
	    'pluginManager'     // Used as the plugin manager for the session
	];
	
	contexts.Parse = function(options) {
	    copyFromOriginal(options, this, parseCopyProperties);
	
	    if (typeof this.paths === "string") { this.paths = [this.paths]; }
	};
	
	var evalCopyProperties = [
	    'paths',          // additional include paths
	    'compress',       // whether to compress
	    'ieCompat',       // whether to enforce IE compatibility (IE8 data-uri)
	    'strictMath',     // whether math has to be within parenthesis
	    'strictUnits',    // whether units need to evaluate correctly
	    'sourceMap',      // whether to output a source map
	    'importMultiple', // whether we are currently importing multiple copies
	    'urlArgs',        // whether to add args into url tokens
	    'javascriptEnabled',// option - whether JavaScript is enabled. if undefined, defaults to true
	    'pluginManager',  // Used as the plugin manager for the session
	    'importantScope'  // used to bubble up !important statements
	    ];
	
	contexts.Eval = function(options, frames) {
	    copyFromOriginal(options, this, evalCopyProperties);
	
	    if (typeof this.paths === "string") { this.paths = [this.paths]; }
	
	    this.frames = frames || [];
	    this.importantScope = this.importantScope || [];
	};
	
	contexts.Eval.prototype.inParenthesis = function () {
	    if (!this.parensStack) {
	        this.parensStack = [];
	    }
	    this.parensStack.push(true);
	};
	
	contexts.Eval.prototype.outOfParenthesis = function () {
	    this.parensStack.pop();
	};
	
	contexts.Eval.prototype.isMathOn = function () {
	    return this.strictMath ? (this.parensStack && this.parensStack.length) : true;
	};
	
	contexts.Eval.prototype.isPathRelative = function (path) {
	    return !/^(?:[a-z-]+:|\/|#)/i.test(path);
	};
	
	contexts.Eval.prototype.normalizePath = function( path ) {
	    var
	      segments = path.split("/").reverse(),
	      segment;
	
	    path = [];
	    while (segments.length !== 0 ) {
	        segment = segments.pop();
	        switch( segment ) {
	            case ".":
	                break;
	            case "..":
	                if ((path.length === 0) || (path[path.length - 1] === "..")) {
	                    path.push( segment );
	                } else {
	                    path.pop();
	                }
	                break;
	            default:
	                path.push( segment );
	                break;
	        }
	    }
	
	    return path.join("/");
	};
	
	//todo - do the same for the toCSS ?


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Color = __webpack_require__(286),
	    Dimension = __webpack_require__(283);
	
	var Operation = function (op, operands, isSpaced) {
	    this.op = op.trim();
	    this.operands = operands;
	    this.isSpaced = isSpaced;
	};
	Operation.prototype = new Node();
	Operation.prototype.type = "Operation";
	Operation.prototype.accept = function (visitor) {
	    this.operands = visitor.visit(this.operands);
	};
	Operation.prototype.eval = function (context) {
	    var a = this.operands[0].eval(context),
	        b = this.operands[1].eval(context);
	
	    if (context.isMathOn()) {
	        if (a instanceof Dimension && b instanceof Color) {
	            a = a.toColor();
	        }
	        if (b instanceof Dimension && a instanceof Color) {
	            b = b.toColor();
	        }
	        if (!a.operate) {
	            throw { type: "Operation",
	                    message: "Operation on an invalid type" };
	        }
	
	        return a.operate(context, this.op, b);
	    } else {
	        return new Operation(this.op, [a, b], this.isSpaced);
	    }
	};
	Operation.prototype.genCSS = function (context, output) {
	    this.operands[0].genCSS(context, output);
	    if (this.isSpaced) {
	        output.add(" ");
	    }
	    output.add(this.op);
	    if (this.isSpaced) {
	        output.add(" ");
	    }
	    this.operands[1].genCSS(context, output);
	};
	
	module.exports = Operation;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var LessError = __webpack_require__(306),
	    transformTree = __webpack_require__(308),
	    logger = __webpack_require__(271);
	
	module.exports = function(SourceMapBuilder) {
	    var ParseTree = function(root, imports) {
	        this.root = root;
	        this.imports = imports;
	    };
	
	    ParseTree.prototype.toCSS = function(options) {
	        var evaldRoot, result = {}, sourceMapBuilder;
	        try {
	            evaldRoot = transformTree(this.root, options);
	        } catch (e) {
	            throw new LessError(e, this.imports);
	        }
	
	        try {
	            var compress = Boolean(options.compress);
	            if (compress) {
	                logger.warn("The compress option has been deprecated. We recommend you use a dedicated css minifier, for instance see less-plugin-clean-css.");
	            }
	
	            var toCSSOptions = {
	                compress: compress,
	                dumpLineNumbers: options.dumpLineNumbers,
	                strictUnits: Boolean(options.strictUnits),
	                numPrecision: 8};
	
	            if (options.sourceMap) {
	                sourceMapBuilder = new SourceMapBuilder(options.sourceMap);
	                result.css = sourceMapBuilder.toCSS(evaldRoot, toCSSOptions, this.imports);
	            } else {
	                result.css = evaldRoot.toCSS(toCSSOptions);
	            }
	        } catch (e) {
	            throw new LessError(e, this.imports);
	        }
	
	        if (options.pluginManager) {
	            var postProcessors = options.pluginManager.getPostProcessors();
	            for (var i = 0; i < postProcessors.length; i++) {
	                result.css = postProcessors[i].process(result.css, { sourceMap: sourceMapBuilder, options: options, imports: this.imports });
	            }
	        }
	        if (options.sourceMap) {
	            result.map = sourceMapBuilder.getExternalSourceMap();
	        }
	
	        result.imports = [];
	        for (var file in this.imports.files) {
	            if (this.imports.files.hasOwnProperty(file) && file !== this.imports.rootFilename) {
	                result.imports.push(file);
	            }
	        }
	        return result;
	    };
	    return ParseTree;
	};


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(307);
	
	var LessError = module.exports = function LessError(e, importManager, currentFilename) {
	
	    Error.call(this);
	
	    var filename = e.filename || currentFilename;
	
	    if (importManager && filename) {
	        var input = importManager.contents[filename],
	            loc = utils.getLocation(e.index, input),
	            line = loc.line,
	            col  = loc.column,
	            callLine = e.call && utils.getLocation(e.call, input).line,
	            lines = input.split('\n');
	
	        this.type = e.type || 'Syntax';
	        this.filename = filename;
	        this.index = e.index;
	        this.line = typeof line === 'number' ? line + 1 : null;
	        this.callLine = callLine + 1;
	        this.callExtract = lines[callLine];
	        this.column = col;
	        this.extract = [
	            lines[line - 1],
	            lines[line],
	            lines[line + 1]
	        ];
	    }
	    this.message = e.message;
	    this.stack = e.stack;
	};
	
	if (typeof Object.create === 'undefined') {
	    var F = function () {};
	    F.prototype = Error.prototype;
	    LessError.prototype = new F();
	} else {
	    LessError.prototype = Object.create(Error.prototype);
	}
	
	LessError.prototype.constructor = LessError;


/***/ }),
/* 307 */
/***/ (function(module, exports) {

	module.exports = {
	    getLocation: function(index, inputStream) {
	        var n = index + 1,
	            line = null,
	            column = -1;
	
	        while (--n >= 0 && inputStream.charAt(n) !== '\n') {
	            column++;
	        }
	
	        if (typeof index === 'number') {
	            line = (inputStream.slice(0, index).match(/\n/g) || "").length;
	        }
	
	        return {
	            line: line,
	            column: column
	        };
	    }
	};


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var contexts = __webpack_require__(303),
	    visitor = __webpack_require__(309),
	    tree = __webpack_require__(311);
	
	module.exports = function(root, options) {
	    options = options || {};
	    var evaldRoot,
	        variables = options.variables,
	        evalEnv = new contexts.Eval(options);
	
	    //
	    // Allows setting variables with a hash, so:
	    //
	    //   `{ color: new tree.Color('#f01') }` will become:
	    //
	    //   new tree.Rule('@color',
	    //     new tree.Value([
	    //       new tree.Expression([
	    //         new tree.Color('#f01')
	    //       ])
	    //     ])
	    //   )
	    //
	    if (typeof variables === 'object' && !Array.isArray(variables)) {
	        variables = Object.keys(variables).map(function (k) {
	            var value = variables[k];
	
	            if (! (value instanceof tree.Value)) {
	                if (! (value instanceof tree.Expression)) {
	                    value = new tree.Expression([value]);
	                }
	                value = new tree.Value([value]);
	            }
	            return new tree.Rule('@' + k, value, false, null, 0);
	        });
	        evalEnv.frames = [new tree.Ruleset(null, variables)];
	    }
	
	    var preEvalVisitors = [],
	        visitors = [
	            new visitor.JoinSelectorVisitor(),
	            new visitor.MarkVisibleSelectorsVisitor(true),
	            new visitor.ExtendVisitor(),
	            new visitor.ToCSSVisitor({compress: Boolean(options.compress)})
	        ], i;
	
	    if (options.pluginManager) {
	        var pluginVisitors = options.pluginManager.getVisitors();
	        for (i = 0; i < pluginVisitors.length; i++) {
	            var pluginVisitor = pluginVisitors[i];
	            if (pluginVisitor.isPreEvalVisitor) {
	                preEvalVisitors.push(pluginVisitor);
	            } else {
	                if (pluginVisitor.isPreVisitor) {
	                    visitors.splice(0, 0, pluginVisitor);
	                } else {
	                    visitors.push(pluginVisitor);
	                }
	            }
	        }
	    }
	
	    for (i = 0; i < preEvalVisitors.length; i++) {
	        preEvalVisitors[i].run(root);
	    }
	
	    evaldRoot = root.eval(evalEnv);
	
	    for (i = 0; i < visitors.length; i++) {
	        visitors[i].run(evaldRoot);
	    }
	
	    return evaldRoot;
	};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	var visitors = {
	    Visitor: __webpack_require__(310),
	    ImportVisitor: __webpack_require__(332),
	    MarkVisibleSelectorsVisitor: __webpack_require__(334),
	    ExtendVisitor: __webpack_require__(335),
	    JoinSelectorVisitor: __webpack_require__(336),
	    ToCSSVisitor: __webpack_require__(337)
	};
	
	module.exports = visitors;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	var tree = __webpack_require__(311);
	
	var _visitArgs = { visitDeeper: true },
	    _hasIndexed = false;
	
	function _noop(node) {
	    return node;
	}
	
	function indexNodeTypes(parent, ticker) {
	    // add .typeIndex to tree node types for lookup table
	    var key, child;
	    for (key in parent) {
	        if (parent.hasOwnProperty(key)) {
	            child = parent[key];
	            switch (typeof child) {
	                case "function":
	                    // ignore bound functions directly on tree which do not have a prototype
	                    // or aren't nodes
	                    if (child.prototype && child.prototype.type) {
	                        child.prototype.typeIndex = ticker++;
	                    }
	                    break;
	                case "object":
	                    ticker = indexNodeTypes(child, ticker);
	                    break;
	            }
	        }
	    }
	    return ticker;
	}
	
	var Visitor = function(implementation) {
	    this._implementation = implementation;
	    this._visitFnCache = [];
	
	    if (!_hasIndexed) {
	        indexNodeTypes(tree, 1);
	        _hasIndexed = true;
	    }
	};
	
	Visitor.prototype = {
	    visit: function(node) {
	        if (!node) {
	            return node;
	        }
	
	        var nodeTypeIndex = node.typeIndex;
	        if (!nodeTypeIndex) {
	            return node;
	        }
	
	        var visitFnCache = this._visitFnCache,
	            impl = this._implementation,
	            aryIndx = nodeTypeIndex << 1,
	            outAryIndex = aryIndx | 1,
	            func = visitFnCache[aryIndx],
	            funcOut = visitFnCache[outAryIndex],
	            visitArgs = _visitArgs,
	            fnName;
	
	        visitArgs.visitDeeper = true;
	
	        if (!func) {
	            fnName = "visit" + node.type;
	            func = impl[fnName] || _noop;
	            funcOut = impl[fnName + "Out"] || _noop;
	            visitFnCache[aryIndx] = func;
	            visitFnCache[outAryIndex] = funcOut;
	        }
	
	        if (func !== _noop) {
	            var newNode = func.call(impl, node, visitArgs);
	            if (impl.isReplacing) {
	                node = newNode;
	            }
	        }
	
	        if (visitArgs.visitDeeper && node && node.accept) {
	            node.accept(this);
	        }
	
	        if (funcOut != _noop) {
	            funcOut.call(impl, node);
	        }
	
	        return node;
	    },
	    visitArray: function(nodes, nonReplacing) {
	        if (!nodes) {
	            return nodes;
	        }
	
	        var cnt = nodes.length, i;
	
	        // Non-replacing
	        if (nonReplacing || !this._implementation.isReplacing) {
	            for (i = 0; i < cnt; i++) {
	                this.visit(nodes[i]);
	            }
	            return nodes;
	        }
	
	        // Replacing
	        var out = [];
	        for (i = 0; i < cnt; i++) {
	            var evald = this.visit(nodes[i]);
	            if (evald === undefined) { continue; }
	            if (!evald.splice) {
	                out.push(evald);
	            } else if (evald.length) {
	                this.flatten(evald, out);
	            }
	        }
	        return out;
	    },
	    flatten: function(arr, out) {
	        if (!out) {
	            out = [];
	        }
	
	        var cnt, i, item,
	            nestedCnt, j, nestedItem;
	
	        for (i = 0, cnt = arr.length; i < cnt; i++) {
	            item = arr[i];
	            if (item === undefined) {
	                continue;
	            }
	            if (!item.splice) {
	                out.push(item);
	                continue;
	            }
	
	            for (j = 0, nestedCnt = item.length; j < nestedCnt; j++) {
	                nestedItem = item[j];
	                if (nestedItem === undefined) {
	                    continue;
	                }
	                if (!nestedItem.splice) {
	                    out.push(nestedItem);
	                } else if (nestedItem.length) {
	                    this.flatten(nestedItem, out);
	                }
	            }
	        }
	
	        return out;
	    }
	};
	module.exports = Visitor;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var tree = {};
	
	tree.Node = __webpack_require__(276);
	tree.Alpha = __webpack_require__(312);
	tree.Color = __webpack_require__(286);
	tree.Directive = __webpack_require__(313);
	tree.DetachedRuleset = __webpack_require__(302);
	tree.Operation = __webpack_require__(304);
	tree.Dimension = __webpack_require__(283);
	tree.Unit = __webpack_require__(285);
	tree.Keyword = __webpack_require__(281);
	tree.Variable = __webpack_require__(290);
	tree.Ruleset = __webpack_require__(317);
	tree.Element = __webpack_require__(315);
	tree.Attribute = __webpack_require__(320);
	tree.Combinator = __webpack_require__(316);
	tree.Selector = __webpack_require__(314);
	tree.Quoted = __webpack_require__(288);
	tree.Expression = __webpack_require__(275);
	tree.Rule = __webpack_require__(318);
	tree.Call = __webpack_require__(321);
	tree.URL = __webpack_require__(294);
	tree.Import = __webpack_require__(322);
	tree.mixin = {
	    Call: __webpack_require__(324),
	    Definition: __webpack_require__(325)
	};
	tree.Comment = __webpack_require__(278);
	tree.Anonymous = __webpack_require__(291);
	tree.Value = __webpack_require__(319);
	tree.JavaScript = __webpack_require__(299);
	tree.Assignment = __webpack_require__(326);
	tree.Condition = __webpack_require__(327);
	tree.Paren = __webpack_require__(277);
	tree.Media = __webpack_require__(323);
	tree.UnicodeDescriptor = __webpack_require__(328);
	tree.Negative = __webpack_require__(329);
	tree.Extend = __webpack_require__(330);
	tree.RulesetCall = __webpack_require__(331);
	
	module.exports = tree;


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Alpha = function (val) {
	    this.value = val;
	};
	Alpha.prototype = new Node();
	Alpha.prototype.type = "Alpha";
	
	Alpha.prototype.accept = function (visitor) {
	    this.value = visitor.visit(this.value);
	};
	Alpha.prototype.eval = function (context) {
	    if (this.value.eval) { return new Alpha(this.value.eval(context)); }
	    return this;
	};
	Alpha.prototype.genCSS = function (context, output) {
	    output.add("alpha(opacity=");
	
	    if (this.value.genCSS) {
	        this.value.genCSS(context, output);
	    } else {
	        output.add(this.value);
	    }
	
	    output.add(")");
	};
	
	module.exports = Alpha;


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Selector = __webpack_require__(314),
	    Ruleset = __webpack_require__(317);
	
	var Directive = function (name, value, rules, index, currentFileInfo, debugInfo, isRooted, visibilityInfo) {
	    var i;
	
	    this.name  = name;
	    this.value = value;
	    if (rules) {
	        if (Array.isArray(rules)) {
	            this.rules = rules;
	        } else {
	            this.rules = [rules];
	            this.rules[0].selectors = (new Selector([], null, null, this.index, currentFileInfo)).createEmptySelectors();
	        }
	        for (i = 0; i < this.rules.length; i++) {
	            this.rules[i].allowImports = true;
	        }
	    }
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	    this.debugInfo = debugInfo;
	    this.isRooted = isRooted || false;
	    this.copyVisibilityInfo(visibilityInfo);
	    this.allowRoot = true;
	};
	
	Directive.prototype = new Node();
	Directive.prototype.type = "Directive";
	Directive.prototype.accept = function (visitor) {
	    var value = this.value, rules = this.rules;
	    if (rules) {
	        this.rules = visitor.visitArray(rules);
	    }
	    if (value) {
	        this.value = visitor.visit(value);
	    }
	};
	Directive.prototype.isRulesetLike = function() {
	    return this.rules || !this.isCharset();
	};
	Directive.prototype.isCharset = function() {
	    return "@charset" === this.name;
	};
	Directive.prototype.genCSS = function (context, output) {
	    var value = this.value, rules = this.rules;
	    output.add(this.name, this.currentFileInfo, this.index);
	    if (value) {
	        output.add(' ');
	        value.genCSS(context, output);
	    }
	    if (rules) {
	        this.outputRuleset(context, output, rules);
	    } else {
	        output.add(';');
	    }
	};
	Directive.prototype.eval = function (context) {
	    var mediaPathBackup, mediaBlocksBackup, value = this.value, rules = this.rules;
	
	    //media stored inside other directive should not bubble over it
	    //backpup media bubbling information
	    mediaPathBackup = context.mediaPath;
	    mediaBlocksBackup = context.mediaBlocks;
	    //deleted media bubbling information
	    context.mediaPath = [];
	    context.mediaBlocks = [];
	
	    if (value) {
	        value = value.eval(context);
	    }
	    if (rules) {
	        // assuming that there is only one rule at this point - that is how parser constructs the rule
	        rules = [rules[0].eval(context)];
	        rules[0].root = true;
	    }
	    //restore media bubbling information
	    context.mediaPath = mediaPathBackup;
	    context.mediaBlocks = mediaBlocksBackup;
	
	    return new Directive(this.name, value, rules,
	        this.index, this.currentFileInfo, this.debugInfo, this.isRooted, this.visibilityInfo());
	};
	Directive.prototype.variable = function (name) {
	    if (this.rules) {
	        // assuming that there is only one rule at this point - that is how parser constructs the rule
	        return Ruleset.prototype.variable.call(this.rules[0], name);
	    }
	};
	Directive.prototype.find = function () {
	    if (this.rules) {
	        // assuming that there is only one rule at this point - that is how parser constructs the rule
	        return Ruleset.prototype.find.apply(this.rules[0], arguments);
	    }
	};
	Directive.prototype.rulesets = function () {
	    if (this.rules) {
	        // assuming that there is only one rule at this point - that is how parser constructs the rule
	        return Ruleset.prototype.rulesets.apply(this.rules[0]);
	    }
	};
	Directive.prototype.outputRuleset = function (context, output, rules) {
	    var ruleCnt = rules.length, i;
	    context.tabLevel = (context.tabLevel | 0) + 1;
	
	    // Compressed
	    if (context.compress) {
	        output.add('{');
	        for (i = 0; i < ruleCnt; i++) {
	            rules[i].genCSS(context, output);
	        }
	        output.add('}');
	        context.tabLevel--;
	        return;
	    }
	
	    // Non-compressed
	    var tabSetStr = '\n' + Array(context.tabLevel).join("  "), tabRuleStr = tabSetStr + "  ";
	    if (!ruleCnt) {
	        output.add(" {" + tabSetStr + '}');
	    } else {
	        output.add(" {" + tabRuleStr);
	        rules[0].genCSS(context, output);
	        for (i = 1; i < ruleCnt; i++) {
	            output.add(tabRuleStr);
	            rules[i].genCSS(context, output);
	        }
	        output.add(tabSetStr + '}');
	    }
	
	    context.tabLevel--;
	};
	module.exports = Directive;


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Element = __webpack_require__(315);
	
	var Selector = function (elements, extendList, condition, index, currentFileInfo, visibilityInfo) {
	    this.elements = elements;
	    this.extendList = extendList;
	    this.condition = condition;
	    this.currentFileInfo = currentFileInfo || {};
	    if (!condition) {
	        this.evaldCondition = true;
	    }
	    this.copyVisibilityInfo(visibilityInfo);
	};
	Selector.prototype = new Node();
	Selector.prototype.type = "Selector";
	Selector.prototype.accept = function (visitor) {
	    if (this.elements) {
	        this.elements = visitor.visitArray(this.elements);
	    }
	    if (this.extendList) {
	        this.extendList = visitor.visitArray(this.extendList);
	    }
	    if (this.condition) {
	        this.condition = visitor.visit(this.condition);
	    }
	};
	Selector.prototype.createDerived = function(elements, extendList, evaldCondition) {
	    var info = this.visibilityInfo();
	    evaldCondition = (evaldCondition != null) ? evaldCondition : this.evaldCondition;
	    var newSelector = new Selector(elements, extendList || this.extendList, null, this.index, this.currentFileInfo, info);
	    newSelector.evaldCondition = evaldCondition;
	    newSelector.mediaEmpty = this.mediaEmpty;
	    return newSelector;
	};
	Selector.prototype.createEmptySelectors = function() {
	    var el = new Element('', '&', this.index, this.currentFileInfo),
	        sels = [new Selector([el], null, null, this.index, this.currentFileInfo)];
	    sels[0].mediaEmpty = true;
	    return sels;
	};
	Selector.prototype.match = function (other) {
	    var elements = this.elements,
	        len = elements.length,
	        olen, i;
	
	    other.CacheElements();
	
	    olen = other._elements.length;
	    if (olen === 0 || len < olen) {
	        return 0;
	    } else {
	        for (i = 0; i < olen; i++) {
	            if (elements[i].value !== other._elements[i]) {
	                return 0;
	            }
	        }
	    }
	
	    return olen; // return number of matched elements
	};
	Selector.prototype.CacheElements = function() {
	    if (this._elements) {
	        return;
	    }
	
	    var elements = this.elements.map( function(v) {
	        return v.combinator.value + (v.value.value || v.value);
	    }).join("").match(/[,&#\*\.\w-]([\w-]|(\\.))*/g);
	
	    if (elements) {
	        if (elements[0] === "&") {
	            elements.shift();
	        }
	    } else {
	        elements = [];
	    }
	
	    this._elements = elements;
	};
	Selector.prototype.isJustParentSelector = function() {
	    return !this.mediaEmpty &&
	        this.elements.length === 1 &&
	        this.elements[0].value === '&' &&
	        (this.elements[0].combinator.value === ' ' || this.elements[0].combinator.value === '');
	};
	Selector.prototype.eval = function (context) {
	    var evaldCondition = this.condition && this.condition.eval(context),
	        elements = this.elements, extendList = this.extendList;
	
	    elements = elements && elements.map(function (e) { return e.eval(context); });
	    extendList = extendList && extendList.map(function(extend) { return extend.eval(context); });
	
	    return this.createDerived(elements, extendList, evaldCondition);
	};
	Selector.prototype.genCSS = function (context, output) {
	    var i, element;
	    if ((!context || !context.firstSelector) && this.elements[0].combinator.value === "") {
	        output.add(' ', this.currentFileInfo, this.index);
	    }
	    if (!this._css) {
	        //TODO caching? speed comparison?
	        for (i = 0; i < this.elements.length; i++) {
	            element = this.elements[i];
	            element.genCSS(context, output);
	        }
	    }
	};
	Selector.prototype.getIsOutput = function() {
	    return this.evaldCondition;
	};
	module.exports = Selector;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Paren = __webpack_require__(277),
	    Combinator = __webpack_require__(316);
	
	var Element = function (combinator, value, index, currentFileInfo, info) {
	    this.combinator = combinator instanceof Combinator ?
	                      combinator : new Combinator(combinator);
	
	    if (typeof value === 'string') {
	        this.value = value.trim();
	    } else if (value) {
	        this.value = value;
	    } else {
	        this.value = "";
	    }
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	    this.copyVisibilityInfo(info);
	};
	Element.prototype = new Node();
	Element.prototype.type = "Element";
	Element.prototype.accept = function (visitor) {
	    var value = this.value;
	    this.combinator = visitor.visit(this.combinator);
	    if (typeof value === "object") {
	        this.value = visitor.visit(value);
	    }
	};
	Element.prototype.eval = function (context) {
	    return new Element(this.combinator,
	                             this.value.eval ? this.value.eval(context) : this.value,
	                             this.index,
	                             this.currentFileInfo, this.visibilityInfo());
	};
	Element.prototype.clone = function () {
	    return new Element(this.combinator,
	        this.value,
	        this.index,
	        this.currentFileInfo, this.visibilityInfo());
	};
	Element.prototype.genCSS = function (context, output) {
	    output.add(this.toCSS(context), this.currentFileInfo, this.index);
	};
	Element.prototype.toCSS = function (context) {
	    context = context || {};
	    var value = this.value, firstSelector = context.firstSelector;
	    if (value instanceof Paren) {
	        // selector in parens should not be affected by outer selector
	        // flags (breaks only interpolated selectors - see #1973)
	        context.firstSelector = true;
	    }
	    value = value.toCSS ? value.toCSS(context) : value;
	    context.firstSelector = firstSelector;
	    if (value === '' && this.combinator.value.charAt(0) === '&') {
	        return '';
	    } else {
	        return this.combinator.toCSS(context) + value;
	    }
	};
	module.exports = Element;


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Combinator = function (value) {
	    if (value === ' ') {
	        this.value = ' ';
	        this.emptyOrWhitespace = true;
	    } else {
	        this.value = value ? value.trim() : "";
	        this.emptyOrWhitespace = this.value === "";
	    }
	};
	Combinator.prototype = new Node();
	Combinator.prototype.type = "Combinator";
	var _noSpaceCombinators = {
	    '': true,
	    ' ': true,
	    '|': true
	};
	Combinator.prototype.genCSS = function (context, output) {
	    var spaceOrEmpty = (context.compress || _noSpaceCombinators[this.value]) ? '' : ' ';
	    output.add(spaceOrEmpty + this.value + spaceOrEmpty);
	};
	module.exports = Combinator;


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Rule = __webpack_require__(318),
	    Selector = __webpack_require__(314),
	    Element = __webpack_require__(315),
	    Paren = __webpack_require__(277),
	    contexts = __webpack_require__(303),
	    globalFunctionRegistry = __webpack_require__(273),
	    defaultFunc = __webpack_require__(280),
	    getDebugInfo = __webpack_require__(279);
	
	var Ruleset = function (selectors, rules, strictImports, visibilityInfo) {
	    this.selectors = selectors;
	    this.rules = rules;
	    this._lookups = {};
	    this.strictImports = strictImports;
	    this.copyVisibilityInfo(visibilityInfo);
	    this.allowRoot = true;
	};
	Ruleset.prototype = new Node();
	Ruleset.prototype.type = "Ruleset";
	Ruleset.prototype.isRuleset = true;
	Ruleset.prototype.isRulesetLike = true;
	Ruleset.prototype.accept = function (visitor) {
	    if (this.paths) {
	        this.paths = visitor.visitArray(this.paths, true);
	    } else if (this.selectors) {
	        this.selectors = visitor.visitArray(this.selectors);
	    }
	    if (this.rules && this.rules.length) {
	        this.rules = visitor.visitArray(this.rules);
	    }
	};
	Ruleset.prototype.eval = function (context) {
	    var thisSelectors = this.selectors, selectors,
	        selCnt, selector, i, hasOnePassingSelector = false;
	
	    if (thisSelectors && (selCnt = thisSelectors.length)) {
	        selectors = [];
	        defaultFunc.error({
	            type: "Syntax",
	            message: "it is currently only allowed in parametric mixin guards,"
	        });
	        for (i = 0; i < selCnt; i++) {
	            selector = thisSelectors[i].eval(context);
	            selectors.push(selector);
	            if (selector.evaldCondition) {
	                hasOnePassingSelector = true;
	            }
	        }
	        defaultFunc.reset();
	    } else {
	        hasOnePassingSelector = true;
	    }
	
	    var rules = this.rules ? this.rules.slice(0) : null,
	        ruleset = new Ruleset(selectors, rules, this.strictImports, this.visibilityInfo()),
	        rule, subRule;
	
	    ruleset.originalRuleset = this;
	    ruleset.root = this.root;
	    ruleset.firstRoot = this.firstRoot;
	    ruleset.allowImports = this.allowImports;
	
	    if (this.debugInfo) {
	        ruleset.debugInfo = this.debugInfo;
	    }
	
	    if (!hasOnePassingSelector) {
	        rules.length = 0;
	    }
	
	    // inherit a function registry from the frames stack when possible;
	    // otherwise from the global registry
	    ruleset.functionRegistry = (function (frames) {
	        var i = 0,
	            n = frames.length,
	            found;
	        for ( ; i !== n ; ++i ) {
	            found = frames[ i ].functionRegistry;
	            if ( found ) { return found; }
	        }
	        return globalFunctionRegistry;
	    }(context.frames)).inherit();
	
	    // push the current ruleset to the frames stack
	    var ctxFrames = context.frames;
	    ctxFrames.unshift(ruleset);
	
	    // currrent selectors
	    var ctxSelectors = context.selectors;
	    if (!ctxSelectors) {
	        context.selectors = ctxSelectors = [];
	    }
	    ctxSelectors.unshift(this.selectors);
	
	    // Evaluate imports
	    if (ruleset.root || ruleset.allowImports || !ruleset.strictImports) {
	        ruleset.evalImports(context);
	    }
	
	    // Store the frames around mixin definitions,
	    // so they can be evaluated like closures when the time comes.
	    var rsRules = ruleset.rules, rsRuleCnt = rsRules ? rsRules.length : 0;
	    for (i = 0; i < rsRuleCnt; i++) {
	        if (rsRules[i].evalFirst) {
	            rsRules[i] = rsRules[i].eval(context);
	        }
	    }
	
	    var mediaBlockCount = (context.mediaBlocks && context.mediaBlocks.length) || 0;
	
	    // Evaluate mixin calls.
	    for (i = 0; i < rsRuleCnt; i++) {
	        if (rsRules[i].type === "MixinCall") {
	            /*jshint loopfunc:true */
	            rules = rsRules[i].eval(context).filter(function(r) {
	                if ((r instanceof Rule) && r.variable) {
	                    // do not pollute the scope if the variable is
	                    // already there. consider returning false here
	                    // but we need a way to "return" variable from mixins
	                    return !(ruleset.variable(r.name));
	                }
	                return true;
	            });
	            rsRules.splice.apply(rsRules, [i, 1].concat(rules));
	            rsRuleCnt += rules.length - 1;
	            i += rules.length - 1;
	            ruleset.resetCache();
	        } else if (rsRules[i].type === "RulesetCall") {
	            /*jshint loopfunc:true */
	            rules = rsRules[i].eval(context).rules.filter(function(r) {
	                if ((r instanceof Rule) && r.variable) {
	                    // do not pollute the scope at all
	                    return false;
	                }
	                return true;
	            });
	            rsRules.splice.apply(rsRules, [i, 1].concat(rules));
	            rsRuleCnt += rules.length - 1;
	            i += rules.length - 1;
	            ruleset.resetCache();
	        }
	    }
	
	    // Evaluate everything else
	    for (i = 0; i < rsRules.length; i++) {
	        rule = rsRules[i];
	        if (!rule.evalFirst) {
	            rsRules[i] = rule = rule.eval ? rule.eval(context) : rule;
	        }
	    }
	
	    // Evaluate everything else
	    for (i = 0; i < rsRules.length; i++) {
	        rule = rsRules[i];
	        // for rulesets, check if it is a css guard and can be removed
	        if (rule instanceof Ruleset && rule.selectors && rule.selectors.length === 1) {
	            // check if it can be folded in (e.g. & where)
	            if (rule.selectors[0].isJustParentSelector()) {
	                rsRules.splice(i--, 1);
	
	                for (var j = 0; j < rule.rules.length; j++) {
	                    subRule = rule.rules[j];
	                    subRule.copyVisibilityInfo(rule.visibilityInfo());
	                    if (!(subRule instanceof Rule) || !subRule.variable) {
	                        rsRules.splice(++i, 0, subRule);
	                    }
	                }
	            }
	        }
	    }
	
	    // Pop the stack
	    ctxFrames.shift();
	    ctxSelectors.shift();
	
	    if (context.mediaBlocks) {
	        for (i = mediaBlockCount; i < context.mediaBlocks.length; i++) {
	            context.mediaBlocks[i].bubbleSelectors(selectors);
	        }
	    }
	
	    return ruleset;
	};
	Ruleset.prototype.evalImports = function(context) {
	    var rules = this.rules, i, importRules;
	    if (!rules) { return; }
	
	    for (i = 0; i < rules.length; i++) {
	        if (rules[i].type === "Import") {
	            importRules = rules[i].eval(context);
	            if (importRules && (importRules.length || importRules.length === 0)) {
	                rules.splice.apply(rules, [i, 1].concat(importRules));
	                i+= importRules.length - 1;
	            } else {
	                rules.splice(i, 1, importRules);
	            }
	            this.resetCache();
	        }
	    }
	};
	Ruleset.prototype.makeImportant = function() {
	    var result = new Ruleset(this.selectors, this.rules.map(function (r) {
	        if (r.makeImportant) {
	            return r.makeImportant();
	        } else {
	            return r;
	        }
	    }), this.strictImports, this.visibilityInfo());
	
	    return result;
	};
	Ruleset.prototype.matchArgs = function (args) {
	    return !args || args.length === 0;
	};
	// lets you call a css selector with a guard
	Ruleset.prototype.matchCondition = function (args, context) {
	    var lastSelector = this.selectors[this.selectors.length - 1];
	    if (!lastSelector.evaldCondition) {
	        return false;
	    }
	    if (lastSelector.condition &&
	        !lastSelector.condition.eval(
	            new contexts.Eval(context,
	                context.frames))) {
	        return false;
	    }
	    return true;
	};
	Ruleset.prototype.resetCache = function () {
	    this._rulesets = null;
	    this._variables = null;
	    this._lookups = {};
	};
	Ruleset.prototype.variables = function () {
	    if (!this._variables) {
	        this._variables = !this.rules ? {} : this.rules.reduce(function (hash, r) {
	            if (r instanceof Rule && r.variable === true) {
	                hash[r.name] = r;
	            }
	            // when evaluating variables in an import statement, imports have not been eval'd
	            // so we need to go inside import statements.
	            // guard against root being a string (in the case of inlined less)
	            if (r.type === "Import" && r.root && r.root.variables) {
	                var vars = r.root.variables();
	                for (var name in vars) {
	                    if (vars.hasOwnProperty(name)) {
	                        hash[name] = vars[name];
	                    }
	                }
	            }
	            return hash;
	        }, {});
	    }
	    return this._variables;
	};
	Ruleset.prototype.variable = function (name) {
	    return this.variables()[name];
	};
	Ruleset.prototype.rulesets = function () {
	    if (!this.rules) { return []; }
	
	    var filtRules = [], rules = this.rules, cnt = rules.length,
	        i, rule;
	
	    for (i = 0; i < cnt; i++) {
	        rule = rules[i];
	        if (rule.isRuleset) {
	            filtRules.push(rule);
	        }
	    }
	
	    return filtRules;
	};
	Ruleset.prototype.prependRule = function (rule) {
	    var rules = this.rules;
	    if (rules) {
	        rules.unshift(rule);
	    } else {
	        this.rules = [ rule ];
	    }
	};
	Ruleset.prototype.find = function (selector, self, filter) {
	    self = self || this;
	    var rules = [], match, foundMixins,
	        key = selector.toCSS();
	
	    if (key in this._lookups) { return this._lookups[key]; }
	
	    this.rulesets().forEach(function (rule) {
	        if (rule !== self) {
	            for (var j = 0; j < rule.selectors.length; j++) {
	                match = selector.match(rule.selectors[j]);
	                if (match) {
	                    if (selector.elements.length > match) {
	                        if (!filter || filter(rule)) {
	                            foundMixins = rule.find(new Selector(selector.elements.slice(match)), self, filter);
	                            for (var i = 0; i < foundMixins.length; ++i) {
	                                foundMixins[i].path.push(rule);
	                            }
	                            Array.prototype.push.apply(rules, foundMixins);
	                        }
	                    } else {
	                        rules.push({ rule: rule, path: []});
	                    }
	                    break;
	                }
	            }
	        }
	    });
	    this._lookups[key] = rules;
	    return rules;
	};
	Ruleset.prototype.genCSS = function (context, output) {
	    var i, j,
	        charsetRuleNodes = [],
	        ruleNodes = [],
	        debugInfo,     // Line number debugging
	        rule,
	        path;
	
	    context.tabLevel = (context.tabLevel || 0);
	
	    if (!this.root) {
	        context.tabLevel++;
	    }
	
	    var tabRuleStr = context.compress ? '' : Array(context.tabLevel + 1).join("  "),
	        tabSetStr = context.compress ? '' : Array(context.tabLevel).join("  "),
	        sep;
	
	    function isRulesetLikeNode(rule) {
	        // if it has nested rules, then it should be treated like a ruleset
	        // medias and comments do not have nested rules, but should be treated like rulesets anyway
	        // some directives and anonymous nodes are ruleset like, others are not
	        if (typeof rule.isRulesetLike === "boolean") {
	            return rule.isRulesetLike;
	        } else if (typeof rule.isRulesetLike === "function") {
	            return rule.isRulesetLike();
	        }
	
	        //anything else is assumed to be a rule
	        return false;
	    }
	
	    var charsetNodeIndex = 0;
	    var importNodeIndex = 0;
	    for (i = 0; i < this.rules.length; i++) {
	        rule = this.rules[i];
	        if (rule.type === "Comment") {
	            if (importNodeIndex === i) {
	                importNodeIndex++;
	            }
	            ruleNodes.push(rule);
	        } else if (rule.isCharset && rule.isCharset()) {
	            ruleNodes.splice(charsetNodeIndex, 0, rule);
	            charsetNodeIndex++;
	            importNodeIndex++;
	        } else if (rule.type === "Import") {
	            ruleNodes.splice(importNodeIndex, 0, rule);
	            importNodeIndex++;
	        } else {
	            ruleNodes.push(rule);
	        }
	    }
	    ruleNodes = charsetRuleNodes.concat(ruleNodes);
	
	    // If this is the root node, we don't render
	    // a selector, or {}.
	    if (!this.root) {
	        debugInfo = getDebugInfo(context, this, tabSetStr);
	
	        if (debugInfo) {
	            output.add(debugInfo);
	            output.add(tabSetStr);
	        }
	
	        var paths = this.paths, pathCnt = paths.length,
	            pathSubCnt;
	
	        sep = context.compress ? ',' : (',\n' + tabSetStr);
	
	        for (i = 0; i < pathCnt; i++) {
	            path = paths[i];
	            if (!(pathSubCnt = path.length)) { continue; }
	            if (i > 0) { output.add(sep); }
	
	            context.firstSelector = true;
	            path[0].genCSS(context, output);
	
	            context.firstSelector = false;
	            for (j = 1; j < pathSubCnt; j++) {
	                path[j].genCSS(context, output);
	            }
	        }
	
	        output.add((context.compress ? '{' : ' {\n') + tabRuleStr);
	    }
	
	    // Compile rules and rulesets
	    for (i = 0; i < ruleNodes.length; i++) {
	        rule = ruleNodes[i];
	
	        if (i + 1 === ruleNodes.length) {
	            context.lastRule = true;
	        }
	
	        var currentLastRule = context.lastRule;
	        if (isRulesetLikeNode(rule)) {
	            context.lastRule = false;
	        }
	
	        if (rule.genCSS) {
	            rule.genCSS(context, output);
	        } else if (rule.value) {
	            output.add(rule.value.toString());
	        }
	
	        context.lastRule = currentLastRule;
	
	        if (!context.lastRule) {
	            output.add(context.compress ? '' : ('\n' + tabRuleStr));
	        } else {
	            context.lastRule = false;
	        }
	    }
	
	    if (!this.root) {
	        output.add((context.compress ? '}' : '\n' + tabSetStr + '}'));
	        context.tabLevel--;
	    }
	
	    if (!output.isEmpty() && !context.compress && this.firstRoot) {
	        output.add('\n');
	    }
	};
	
	Ruleset.prototype.joinSelectors = function (paths, context, selectors) {
	    for (var s = 0; s < selectors.length; s++) {
	        this.joinSelector(paths, context, selectors[s]);
	    }
	};
	
	Ruleset.prototype.joinSelector = function (paths, context, selector) {
	
	    function createParenthesis(elementsToPak, originalElement) {
	        var replacementParen, j;
	        if (elementsToPak.length === 0) {
	            replacementParen = new Paren(elementsToPak[0]);
	        } else {
	            var insideParent = [];
	            for (j = 0; j < elementsToPak.length; j++) {
	                insideParent.push(new Element(null, elementsToPak[j], originalElement.index, originalElement.currentFileInfo));
	            }
	            replacementParen = new Paren(new Selector(insideParent));
	        }
	        return replacementParen;
	    }
	
	    function createSelector(containedElement, originalElement) {
	        var element, selector;
	        element = new Element(null, containedElement, originalElement.index, originalElement.currentFileInfo);
	        selector = new Selector([element]);
	        return selector;
	    }
	
	    // joins selector path from `beginningPath` with selector path in `addPath`
	    // `replacedElement` contains element that is being replaced by `addPath`
	    // returns concatenated path
	    function addReplacementIntoPath(beginningPath, addPath, replacedElement, originalSelector) {
	        var newSelectorPath, lastSelector, newJoinedSelector;
	        // our new selector path
	        newSelectorPath = [];
	
	        //construct the joined selector - if & is the first thing this will be empty,
	        // if not newJoinedSelector will be the last set of elements in the selector
	        if (beginningPath.length > 0) {
	            newSelectorPath = beginningPath.slice(0);
	            lastSelector = newSelectorPath.pop();
	            newJoinedSelector = originalSelector.createDerived(lastSelector.elements.slice(0));
	        }
	        else {
	            newJoinedSelector = originalSelector.createDerived([]);
	        }
	
	        if (addPath.length > 0) {
	            // /deep/ is a combinator that is valid without anything in front of it
	            // so if the & does not have a combinator that is "" or " " then
	            // and there is a combinator on the parent, then grab that.
	            // this also allows + a { & .b { .a & { ... though not sure why you would want to do that
	            var combinator = replacedElement.combinator, parentEl = addPath[0].elements[0];
	            if (combinator.emptyOrWhitespace && !parentEl.combinator.emptyOrWhitespace) {
	                combinator = parentEl.combinator;
	            }
	            // join the elements so far with the first part of the parent
	            newJoinedSelector.elements.push(new Element(combinator, parentEl.value, replacedElement.index, replacedElement.currentFileInfo));
	            newJoinedSelector.elements = newJoinedSelector.elements.concat(addPath[0].elements.slice(1));
	        }
	
	        // now add the joined selector - but only if it is not empty
	        if (newJoinedSelector.elements.length !== 0) {
	            newSelectorPath.push(newJoinedSelector);
	        }
	
	        //put together the parent selectors after the join (e.g. the rest of the parent)
	        if (addPath.length > 1) {
	            var restOfPath = addPath.slice(1);
	            restOfPath = restOfPath.map(function (selector) {
	                return selector.createDerived(selector.elements, []);
	            });
	            newSelectorPath = newSelectorPath.concat(restOfPath);
	        }
	        return newSelectorPath;
	    }
	
	    // joins selector path from `beginningPath` with every selector path in `addPaths` array
	    // `replacedElement` contains element that is being replaced by `addPath`
	    // returns array with all concatenated paths
	    function addAllReplacementsIntoPath( beginningPath, addPaths, replacedElement, originalSelector, result) {
	        var j;
	        for (j = 0; j < beginningPath.length; j++) {
	            var newSelectorPath = addReplacementIntoPath(beginningPath[j], addPaths, replacedElement, originalSelector);
	            result.push(newSelectorPath);
	        }
	        return result;
	    }
	
	    function mergeElementsOnToSelectors(elements, selectors) {
	        var i, sel;
	
	        if (elements.length === 0) {
	            return ;
	        }
	        if (selectors.length === 0) {
	            selectors.push([ new Selector(elements) ]);
	            return;
	        }
	
	        for (i = 0; i < selectors.length; i++) {
	            sel = selectors[i];
	
	            // if the previous thing in sel is a parent this needs to join on to it
	            if (sel.length > 0) {
	                sel[sel.length - 1] = sel[sel.length - 1].createDerived(sel[sel.length - 1].elements.concat(elements));
	            }
	            else {
	                sel.push(new Selector(elements));
	            }
	        }
	    }
	
	    // replace all parent selectors inside `inSelector` by content of `context` array
	    // resulting selectors are returned inside `paths` array
	    // returns true if `inSelector` contained at least one parent selector
	    function replaceParentSelector(paths, context, inSelector) {
	        // The paths are [[Selector]]
	        // The first list is a list of comma separated selectors
	        // The inner list is a list of inheritance separated selectors
	        // e.g.
	        // .a, .b {
	        //   .c {
	        //   }
	        // }
	        // == [[.a] [.c]] [[.b] [.c]]
	        //
	        var i, j, k, currentElements, newSelectors, selectorsMultiplied, sel, el, hadParentSelector = false, length, lastSelector;
	        function findNestedSelector(element) {
	            var maybeSelector;
	            if (element.value.type !== 'Paren') {
	                return null;
	            }
	
	            maybeSelector = element.value.value;
	            if (maybeSelector.type !== 'Selector') {
	                return null;
	            }
	
	            return maybeSelector;
	        }
	
	        // the elements from the current selector so far
	        currentElements = [];
	        // the current list of new selectors to add to the path.
	        // We will build it up. We initiate it with one empty selector as we "multiply" the new selectors
	        // by the parents
	        newSelectors = [
	            []
	        ];
	
	        for (i = 0; i < inSelector.elements.length; i++) {
	            el = inSelector.elements[i];
	            // non parent reference elements just get added
	            if (el.value !== "&") {
	                var nestedSelector = findNestedSelector(el);
	                if (nestedSelector != null) {
	                    // merge the current list of non parent selector elements
	                    // on to the current list of selectors to add
	                    mergeElementsOnToSelectors(currentElements, newSelectors);
	
	                    var nestedPaths = [], replaced, replacedNewSelectors = [];
	                    replaced = replaceParentSelector(nestedPaths, context, nestedSelector);
	                    hadParentSelector = hadParentSelector || replaced;
	                    //the nestedPaths array should have only one member - replaceParentSelector does not multiply selectors
	                    for (k = 0; k < nestedPaths.length; k++) {
	                        var replacementSelector = createSelector(createParenthesis(nestedPaths[k], el), el);
	                        addAllReplacementsIntoPath(newSelectors, [replacementSelector], el, inSelector, replacedNewSelectors);
	                    }
	                    newSelectors = replacedNewSelectors;
	                    currentElements = [];
	
	                } else {
	                    currentElements.push(el);
	                }
	
	            } else {
	                hadParentSelector = true;
	                // the new list of selectors to add
	                selectorsMultiplied = [];
	
	                // merge the current list of non parent selector elements
	                // on to the current list of selectors to add
	                mergeElementsOnToSelectors(currentElements, newSelectors);
	
	                // loop through our current selectors
	                for (j = 0; j < newSelectors.length; j++) {
	                    sel = newSelectors[j];
	                    // if we don't have any parent paths, the & might be in a mixin so that it can be used
	                    // whether there are parents or not
	                    if (context.length === 0) {
	                        // the combinator used on el should now be applied to the next element instead so that
	                        // it is not lost
	                        if (sel.length > 0) {
	                            sel[0].elements.push(new Element(el.combinator, '', el.index, el.currentFileInfo));
	                        }
	                        selectorsMultiplied.push(sel);
	                    }
	                    else {
	                        // and the parent selectors
	                        for (k = 0; k < context.length; k++) {
	                            // We need to put the current selectors
	                            // then join the last selector's elements on to the parents selectors
	                            var newSelectorPath = addReplacementIntoPath(sel, context[k], el, inSelector);
	                            // add that to our new set of selectors
	                            selectorsMultiplied.push(newSelectorPath);
	                        }
	                    }
	                }
	
	                // our new selectors has been multiplied, so reset the state
	                newSelectors = selectorsMultiplied;
	                currentElements = [];
	            }
	        }
	
	        // if we have any elements left over (e.g. .a& .b == .b)
	        // add them on to all the current selectors
	        mergeElementsOnToSelectors(currentElements, newSelectors);
	
	        for (i = 0; i < newSelectors.length; i++) {
	            length = newSelectors[i].length;
	            if (length > 0) {
	                paths.push(newSelectors[i]);
	                lastSelector = newSelectors[i][length - 1];
	                newSelectors[i][length - 1] = lastSelector.createDerived(lastSelector.elements, inSelector.extendList);
	                //newSelectors[i][length - 1].copyVisibilityInfo(inSelector.visibilityInfo());
	            }
	        }
	
	        return hadParentSelector;
	    }
	
	    function deriveSelector(visibilityInfo, deriveFrom) {
	        var newSelector = deriveFrom.createDerived(deriveFrom.elements, deriveFrom.extendList, deriveFrom.evaldCondition);
	        newSelector.copyVisibilityInfo(visibilityInfo);
	        return newSelector;
	    }
	
	    // joinSelector code follows
	    var i, newPaths, hadParentSelector;
	
	    newPaths = [];
	    hadParentSelector = replaceParentSelector(newPaths, context, selector);
	
	    if (!hadParentSelector) {
	        if (context.length > 0) {
	            newPaths = [];
	            for (i = 0; i < context.length; i++) {
	                //var concatenated = [];
	                //context[i].forEach(function(entry) {
	                //    var newEntry = entry.createDerived(entry.elements, entry.extendList, entry.evaldCondition);
	                //    newEntry.copyVisibilityInfo(selector.visibilityInfo());
	                //    concatenated.push(newEntry);
	                //}, this);
	                var concatenated = context[i].map(deriveSelector.bind(this, selector.visibilityInfo()));
	
	                concatenated.push(selector);
	                newPaths.push(concatenated);
	            }
	        }
	        else {
	            newPaths = [[selector]];
	        }
	    }
	
	    for (i = 0; i < newPaths.length; i++) {
	        paths.push(newPaths[i]);
	    }
	
	};
	module.exports = Ruleset;


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Value = __webpack_require__(319),
	    Keyword = __webpack_require__(281);
	
	var Rule = function (name, value, important, merge, index, currentFileInfo, inline, variable) {
	    this.name = name;
	    this.value = (value instanceof Node) ? value : new Value([value]); //value instanceof tree.Value || value instanceof tree.Ruleset ??
	    this.important = important ? ' ' + important.trim() : '';
	    this.merge = merge;
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	    this.inline = inline || false;
	    this.variable = (variable !== undefined) ? variable
	        : (name.charAt && (name.charAt(0) === '@'));
	    this.allowRoot = true;
	};
	
	function evalName(context, name) {
	    var value = "", i, n = name.length,
	        output = {add: function (s) {value += s;}};
	    for (i = 0; i < n; i++) {
	        name[i].eval(context).genCSS(context, output);
	    }
	    return value;
	}
	
	Rule.prototype = new Node();
	Rule.prototype.type = "Rule";
	Rule.prototype.genCSS = function (context, output) {
	    output.add(this.name + (context.compress ? ':' : ': '), this.currentFileInfo, this.index);
	    try {
	        this.value.genCSS(context, output);
	    }
	    catch(e) {
	        e.index = this.index;
	        e.filename = this.currentFileInfo.filename;
	        throw e;
	    }
	    output.add(this.important + ((this.inline || (context.lastRule && context.compress)) ? "" : ";"), this.currentFileInfo, this.index);
	};
	Rule.prototype.eval = function (context) {
	    var strictMathBypass = false, name = this.name, evaldValue, variable = this.variable;
	    if (typeof name !== "string") {
	        // expand 'primitive' name directly to get
	        // things faster (~10% for benchmark.less):
	        name = (name.length === 1) && (name[0] instanceof Keyword) ?
	                name[0].value : evalName(context, name);
	        variable = false; // never treat expanded interpolation as new variable name
	    }
	    if (name === "font" && !context.strictMath) {
	        strictMathBypass = true;
	        context.strictMath = true;
	    }
	    try {
	        context.importantScope.push({});
	        evaldValue = this.value.eval(context);
	
	        if (!this.variable && evaldValue.type === "DetachedRuleset") {
	            throw { message: "Rulesets cannot be evaluated on a property.",
	                    index: this.index, filename: this.currentFileInfo.filename };
	        }
	        var important = this.important,
	            importantResult = context.importantScope.pop();
	        if (!important && importantResult.important) {
	            important = importantResult.important;
	        }
	
	        return new Rule(name,
	                          evaldValue,
	                          important,
	                          this.merge,
	                          this.index, this.currentFileInfo, this.inline,
	                              variable);
	    }
	    catch(e) {
	        if (typeof e.index !== 'number') {
	            e.index = this.index;
	            e.filename = this.currentFileInfo.filename;
	        }
	        throw e;
	    }
	    finally {
	        if (strictMathBypass) {
	            context.strictMath = false;
	        }
	    }
	};
	Rule.prototype.makeImportant = function () {
	    return new Rule(this.name,
	                          this.value,
	                          "!important",
	                          this.merge,
	                          this.index, this.currentFileInfo, this.inline);
	};
	
	module.exports = Rule;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Value = function (value) {
	    this.value = value;
	    if (!value) {
	        throw new Error("Value requires an array argument");
	    }
	};
	Value.prototype = new Node();
	Value.prototype.type = "Value";
	Value.prototype.accept = function (visitor) {
	    if (this.value) {
	        this.value = visitor.visitArray(this.value);
	    }
	};
	Value.prototype.eval = function (context) {
	    if (this.value.length === 1) {
	        return this.value[0].eval(context);
	    } else {
	        return new Value(this.value.map(function (v) {
	            return v.eval(context);
	        }));
	    }
	};
	Value.prototype.genCSS = function (context, output) {
	    var i;
	    for (i = 0; i < this.value.length; i++) {
	        this.value[i].genCSS(context, output);
	        if (i + 1 < this.value.length) {
	            output.add((context && context.compress) ? ',' : ', ');
	        }
	    }
	};
	module.exports = Value;


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Attribute = function (key, op, value) {
	    this.key = key;
	    this.op = op;
	    this.value = value;
	};
	Attribute.prototype = new Node();
	Attribute.prototype.type = "Attribute";
	Attribute.prototype.eval = function (context) {
	    return new Attribute(this.key.eval ? this.key.eval(context) : this.key,
	        this.op, (this.value && this.value.eval) ? this.value.eval(context) : this.value);
	};
	Attribute.prototype.genCSS = function (context, output) {
	    output.add(this.toCSS(context));
	};
	Attribute.prototype.toCSS = function (context) {
	    var value = this.key.toCSS ? this.key.toCSS(context) : this.key;
	
	    if (this.op) {
	        value += this.op;
	        value += (this.value.toCSS ? this.value.toCSS(context) : this.value);
	    }
	
	    return '[' + value + ']';
	};
	module.exports = Attribute;


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    FunctionCaller = __webpack_require__(274);
	//
	// A function call node.
	//
	var Call = function (name, args, index, currentFileInfo) {
	    this.name = name;
	    this.args = args;
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	};
	Call.prototype = new Node();
	Call.prototype.type = "Call";
	Call.prototype.accept = function (visitor) {
	    if (this.args) {
	        this.args = visitor.visitArray(this.args);
	    }
	};
	//
	// When evaluating a function call,
	// we either find the function in the functionRegistry,
	// in which case we call it, passing the  evaluated arguments,
	// if this returns null or we cannot find the function, we
	// simply print it out as it appeared originally [2].
	//
	// The reason why we evaluate the arguments, is in the case where
	// we try to pass a variable to a function, like: `saturate(@color)`.
	// The function should receive the value, not the variable.
	//
	Call.prototype.eval = function (context) {
	    var args = this.args.map(function (a) { return a.eval(context); }),
	        result, funcCaller = new FunctionCaller(this.name, context, this.index, this.currentFileInfo);
	
	    if (funcCaller.isValid()) {
	        try {
	            result = funcCaller.call(args);
	        } catch (e) {
	            throw { type: e.type || "Runtime",
	                    message: "error evaluating function `" + this.name + "`" +
	                             (e.message ? ': ' + e.message : ''),
	                    index: this.index, filename: this.currentFileInfo.filename };
	        }
	
	        if (result != null) {
	            result.index = this.index;
	            result.currentFileInfo = this.currentFileInfo;
	            return result;
	        }
	    }
	
	    return new Call(this.name, args, this.index, this.currentFileInfo);
	};
	Call.prototype.genCSS = function (context, output) {
	    output.add(this.name + "(", this.currentFileInfo, this.index);
	
	    for (var i = 0; i < this.args.length; i++) {
	        this.args[i].genCSS(context, output);
	        if (i + 1 < this.args.length) {
	            output.add(", ");
	        }
	    }
	
	    output.add(")");
	};
	module.exports = Call;


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Media = __webpack_require__(323),
	    URL = __webpack_require__(294),
	    Quoted = __webpack_require__(288),
	    Ruleset = __webpack_require__(317),
	    Anonymous = __webpack_require__(291);
	
	//
	// CSS @import node
	//
	// The general strategy here is that we don't want to wait
	// for the parsing to be completed, before we start importing
	// the file. That's because in the context of a browser,
	// most of the time will be spent waiting for the server to respond.
	//
	// On creation, we push the import path to our import queue, though
	// `import,push`, we also pass it a callback, which it'll call once
	// the file has been fetched, and parsed.
	//
	var Import = function (path, features, options, index, currentFileInfo, visibilityInfo) {
	    this.options = options;
	    this.index = index;
	    this.path = path;
	    this.features = features;
	    this.currentFileInfo = currentFileInfo;
	    this.allowRoot = true;
	
	    if (this.options.less !== undefined || this.options.inline) {
	        this.css = !this.options.less || this.options.inline;
	    } else {
	        var pathValue = this.getPath();
	        if (pathValue && /[#\.\&\?\/]css([\?;].*)?$/.test(pathValue)) {
	            this.css = true;
	        }
	    }
	    this.copyVisibilityInfo(visibilityInfo);
	};
	
	//
	// The actual import node doesn't return anything, when converted to CSS.
	// The reason is that it's used at the evaluation stage, so that the rules
	// it imports can be treated like any other rules.
	//
	// In `eval`, we make sure all Import nodes get evaluated, recursively, so
	// we end up with a flat structure, which can easily be imported in the parent
	// ruleset.
	//
	Import.prototype = new Node();
	Import.prototype.type = "Import";
	Import.prototype.accept = function (visitor) {
	    if (this.features) {
	        this.features = visitor.visit(this.features);
	    }
	    this.path = visitor.visit(this.path);
	    if (!this.options.plugin && !this.options.inline && this.root) {
	        this.root = visitor.visit(this.root);
	    }
	};
	Import.prototype.genCSS = function (context, output) {
	    if (this.css && this.path.currentFileInfo.reference === undefined) {
	        output.add("@import ", this.currentFileInfo, this.index);
	        this.path.genCSS(context, output);
	        if (this.features) {
	            output.add(" ");
	            this.features.genCSS(context, output);
	        }
	        output.add(';');
	    }
	};
	Import.prototype.getPath = function () {
	    return (this.path instanceof URL) ?
	        this.path.value.value : this.path.value;
	};
	Import.prototype.isVariableImport = function () {
	    var path = this.path;
	    if (path instanceof URL) {
	        path = path.value;
	    }
	    if (path instanceof Quoted) {
	        return path.containsVariables();
	    }
	
	    return true;
	};
	Import.prototype.evalForImport = function (context) {
	    var path = this.path;
	
	    if (path instanceof URL) {
	        path = path.value;
	    }
	
	    return new Import(path.eval(context), this.features, this.options, this.index, this.currentFileInfo, this.visibilityInfo());
	};
	Import.prototype.evalPath = function (context) {
	    var path = this.path.eval(context);
	    var rootpath = this.currentFileInfo && this.currentFileInfo.rootpath;
	
	    if (!(path instanceof URL)) {
	        if (rootpath) {
	            var pathValue = path.value;
	            // Add the base path if the import is relative
	            if (pathValue && context.isPathRelative(pathValue)) {
	                path.value = rootpath + pathValue;
	            }
	        }
	        path.value = context.normalizePath(path.value);
	    }
	
	    return path;
	};
	Import.prototype.eval = function (context) {
	    var result = this.doEval(context);
	    if (this.options.reference || this.blocksVisibility()) {
	        if (result.length || result.length === 0) {
	            result.forEach(function (node) {
	                    node.addVisibilityBlock();
	                }
	            );
	        } else {
	            result.addVisibilityBlock();
	        }
	    }
	    return result;
	};
	Import.prototype.doEval = function (context) {
	    var ruleset, registry,
	        features = this.features && this.features.eval(context);
	
	    if (this.options.plugin) {
	        registry = context.frames[0] && context.frames[0].functionRegistry;
	        if ( registry && this.root && this.root.functions ) {
	            registry.addMultiple( this.root.functions );
	        }
	        return [];
	    }
	
	    if (this.skip) {
	        if (typeof this.skip === "function") {
	            this.skip = this.skip();
	        }
	        if (this.skip) {
	            return [];
	        }
	    }
	    if (this.options.inline) {
	        var contents = new Anonymous(this.root, 0,
	          {
	              filename: this.importedFilename,
	              reference: this.path.currentFileInfo && this.path.currentFileInfo.reference
	          }, true, true);
	
	        return this.features ? new Media([contents], this.features.value) : [contents];
	    } else if (this.css) {
	        var newImport = new Import(this.evalPath(context), features, this.options, this.index);
	        if (!newImport.css && this.error) {
	            throw this.error;
	        }
	        return newImport;
	    } else {
	        ruleset = new Ruleset(null, this.root.rules.slice(0));
	        ruleset.evalImports(context);
	
	        return this.features ? new Media(ruleset.rules, this.features.value) : ruleset.rules;
	    }
	};
	module.exports = Import;


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	var Ruleset = __webpack_require__(317),
	    Value = __webpack_require__(319),
	    Selector = __webpack_require__(314),
	    Anonymous = __webpack_require__(291),
	    Expression = __webpack_require__(275),
	    Directive = __webpack_require__(313);
	
	var Media = function (value, features, index, currentFileInfo, visibilityInfo) {
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	
	    var selectors = (new Selector([], null, null, this.index, this.currentFileInfo)).createEmptySelectors();
	
	    this.features = new Value(features);
	    this.rules = [new Ruleset(selectors, value)];
	    this.rules[0].allowImports = true;
	    this.copyVisibilityInfo(visibilityInfo);
	    this.allowRoot = true;
	};
	Media.prototype = new Directive();
	Media.prototype.type = "Media";
	Media.prototype.isRulesetLike = true;
	Media.prototype.accept = function (visitor) {
	    if (this.features) {
	        this.features = visitor.visit(this.features);
	    }
	    if (this.rules) {
	        this.rules = visitor.visitArray(this.rules);
	    }
	};
	Media.prototype.genCSS = function (context, output) {
	    output.add('@media ', this.currentFileInfo, this.index);
	    this.features.genCSS(context, output);
	    this.outputRuleset(context, output, this.rules);
	};
	Media.prototype.eval = function (context) {
	    if (!context.mediaBlocks) {
	        context.mediaBlocks = [];
	        context.mediaPath = [];
	    }
	
	    var media = new Media(null, [], this.index, this.currentFileInfo, this.visibilityInfo());
	    if (this.debugInfo) {
	        this.rules[0].debugInfo = this.debugInfo;
	        media.debugInfo = this.debugInfo;
	    }
	    var strictMathBypass = false;
	    if (!context.strictMath) {
	        strictMathBypass = true;
	        context.strictMath = true;
	    }
	    try {
	        media.features = this.features.eval(context);
	    }
	    finally {
	        if (strictMathBypass) {
	            context.strictMath = false;
	        }
	    }
	
	    context.mediaPath.push(media);
	    context.mediaBlocks.push(media);
	
	    this.rules[0].functionRegistry = context.frames[0].functionRegistry.inherit();
	    context.frames.unshift(this.rules[0]);
	    media.rules = [this.rules[0].eval(context)];
	    context.frames.shift();
	
	    context.mediaPath.pop();
	
	    return context.mediaPath.length === 0 ? media.evalTop(context) :
	                media.evalNested(context);
	};
	Media.prototype.evalTop = function (context) {
	    var result = this;
	
	    // Render all dependent Media blocks.
	    if (context.mediaBlocks.length > 1) {
	        var selectors = (new Selector([], null, null, this.index, this.currentFileInfo)).createEmptySelectors();
	        result = new Ruleset(selectors, context.mediaBlocks);
	        result.multiMedia = true;
	        result.copyVisibilityInfo(this.visibilityInfo());
	    }
	
	    delete context.mediaBlocks;
	    delete context.mediaPath;
	
	    return result;
	};
	Media.prototype.evalNested = function (context) {
	    var i, value,
	        path = context.mediaPath.concat([this]);
	
	    // Extract the media-query conditions separated with `,` (OR).
	    for (i = 0; i < path.length; i++) {
	        value = path[i].features instanceof Value ?
	                    path[i].features.value : path[i].features;
	        path[i] = Array.isArray(value) ? value : [value];
	    }
	
	    // Trace all permutations to generate the resulting media-query.
	    //
	    // (a, b and c) with nested (d, e) ->
	    //    a and d
	    //    a and e
	    //    b and c and d
	    //    b and c and e
	    this.features = new Value(this.permute(path).map(function (path) {
	        path = path.map(function (fragment) {
	            return fragment.toCSS ? fragment : new Anonymous(fragment);
	        });
	
	        for (i = path.length - 1; i > 0; i--) {
	            path.splice(i, 0, new Anonymous("and"));
	        }
	
	        return new Expression(path);
	    }));
	
	    // Fake a tree-node that doesn't output anything.
	    return new Ruleset([], []);
	};
	Media.prototype.permute = function (arr) {
	    if (arr.length === 0) {
	        return [];
	    } else if (arr.length === 1) {
	        return arr[0];
	    } else {
	        var result = [];
	        var rest = this.permute(arr.slice(1));
	        for (var i = 0; i < rest.length; i++) {
	            for (var j = 0; j < arr[0].length; j++) {
	                result.push([arr[0][j]].concat(rest[i]));
	            }
	        }
	        return result;
	    }
	};
	Media.prototype.bubbleSelectors = function (selectors) {
	    if (!selectors) {
	        return;
	    }
	    this.rules = [new Ruleset(selectors.slice(0), [this.rules[0]])];
	};
	module.exports = Media;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Selector = __webpack_require__(314),
	    MixinDefinition = __webpack_require__(325),
	    defaultFunc = __webpack_require__(280);
	
	var MixinCall = function (elements, args, index, currentFileInfo, important) {
	    this.selector = new Selector(elements);
	    this.arguments = args || [];
	    this.index = index;
	    this.currentFileInfo = currentFileInfo;
	    this.important = important;
	    this.allowRoot = true;
	};
	MixinCall.prototype = new Node();
	MixinCall.prototype.type = "MixinCall";
	MixinCall.prototype.accept = function (visitor) {
	    if (this.selector) {
	        this.selector = visitor.visit(this.selector);
	    }
	    if (this.arguments.length) {
	        this.arguments = visitor.visitArray(this.arguments);
	    }
	};
	MixinCall.prototype.eval = function (context) {
	    var mixins, mixin, mixinPath, args = [], arg, argValue,
	        rules = [], match = false, i, m, f, isRecursive, isOneFound,
	        candidates = [], candidate, conditionResult = [], defaultResult, defFalseEitherCase = -1,
	        defNone = 0, defTrue = 1, defFalse = 2, count, originalRuleset, noArgumentsFilter;
	
	    function calcDefGroup(mixin, mixinPath) {
	        var f, p, namespace;
	
	        for (f = 0; f < 2; f++) {
	            conditionResult[f] = true;
	            defaultFunc.value(f);
	            for (p = 0; p < mixinPath.length && conditionResult[f]; p++) {
	                namespace = mixinPath[p];
	                if (namespace.matchCondition) {
	                    conditionResult[f] = conditionResult[f] && namespace.matchCondition(null, context);
	                }
	            }
	            if (mixin.matchCondition) {
	                conditionResult[f] = conditionResult[f] && mixin.matchCondition(args, context);
	            }
	        }
	        if (conditionResult[0] || conditionResult[1]) {
	            if (conditionResult[0] != conditionResult[1]) {
	                return conditionResult[1] ?
	                    defTrue : defFalse;
	            }
	
	            return defNone;
	        }
	        return defFalseEitherCase;
	    }
	
	    for (i = 0; i < this.arguments.length; i++) {
	        arg = this.arguments[i];
	        argValue = arg.value.eval(context);
	        if (arg.expand && Array.isArray(argValue.value)) {
	            argValue = argValue.value;
	            for (m = 0; m < argValue.length; m++) {
	                args.push({value: argValue[m]});
	            }
	        } else {
	            args.push({name: arg.name, value: argValue});
	        }
	    }
	
	    noArgumentsFilter = function(rule) {return rule.matchArgs(null, context);};
	
	    for (i = 0; i < context.frames.length; i++) {
	        if ((mixins = context.frames[i].find(this.selector, null, noArgumentsFilter)).length > 0) {
	            isOneFound = true;
	
	            // To make `default()` function independent of definition order we have two "subpasses" here.
	            // At first we evaluate each guard *twice* (with `default() == true` and `default() == false`),
	            // and build candidate list with corresponding flags. Then, when we know all possible matches,
	            // we make a final decision.
	
	            for (m = 0; m < mixins.length; m++) {
	                mixin = mixins[m].rule;
	                mixinPath = mixins[m].path;
	                isRecursive = false;
	                for (f = 0; f < context.frames.length; f++) {
	                    if ((!(mixin instanceof MixinDefinition)) && mixin === (context.frames[f].originalRuleset || context.frames[f])) {
	                        isRecursive = true;
	                        break;
	                    }
	                }
	                if (isRecursive) {
	                    continue;
	                }
	
	                if (mixin.matchArgs(args, context)) {
	                    candidate = {mixin: mixin, group: calcDefGroup(mixin, mixinPath)};
	
	                    if (candidate.group !== defFalseEitherCase) {
	                        candidates.push(candidate);
	                    }
	
	                    match = true;
	                }
	            }
	
	            defaultFunc.reset();
	
	            count = [0, 0, 0];
	            for (m = 0; m < candidates.length; m++) {
	                count[candidates[m].group]++;
	            }
	
	            if (count[defNone] > 0) {
	                defaultResult = defFalse;
	            } else {
	                defaultResult = defTrue;
	                if ((count[defTrue] + count[defFalse]) > 1) {
	                    throw { type: 'Runtime',
	                        message: 'Ambiguous use of `default()` found when matching for `' + this.format(args) + '`',
	                        index: this.index, filename: this.currentFileInfo.filename };
	                }
	            }
	
	            for (m = 0; m < candidates.length; m++) {
	                candidate = candidates[m].group;
	                if ((candidate === defNone) || (candidate === defaultResult)) {
	                    try {
	                        mixin = candidates[m].mixin;
	                        if (!(mixin instanceof MixinDefinition)) {
	                            originalRuleset = mixin.originalRuleset || mixin;
	                            mixin = new MixinDefinition("", [], mixin.rules, null, false, null, originalRuleset.visibilityInfo());
	                            mixin.originalRuleset = originalRuleset;
	                        }
	                        var newRules = mixin.evalCall(context, args, this.important).rules;
	                        this._setVisibilityToReplacement(newRules);
	                        Array.prototype.push.apply(rules, newRules);
	                    } catch (e) {
	                        throw { message: e.message, index: this.index, filename: this.currentFileInfo.filename, stack: e.stack };
	                    }
	                }
	            }
	
	            if (match) {
	                return rules;
	            }
	        }
	    }
	    if (isOneFound) {
	        throw { type:    'Runtime',
	            message: 'No matching definition was found for `' + this.format(args) + '`',
	            index:   this.index, filename: this.currentFileInfo.filename };
	    } else {
	        throw { type:    'Name',
	            message: this.selector.toCSS().trim() + " is undefined",
	            index:   this.index, filename: this.currentFileInfo.filename };
	    }
	};
	
	MixinCall.prototype._setVisibilityToReplacement = function (replacement) {
	    var i, rule;
	    if (this.blocksVisibility()) {
	        for (i = 0; i < replacement.length; i++) {
	            rule = replacement[i];
	            rule.addVisibilityBlock();
	        }
	    }
	};
	MixinCall.prototype.format = function (args) {
	    return this.selector.toCSS().trim() + '(' +
	        (args ? args.map(function (a) {
	            var argValue = "";
	            if (a.name) {
	                argValue += a.name + ":";
	            }
	            if (a.value.toCSS) {
	                argValue += a.value.toCSS();
	            } else {
	                argValue += "???";
	            }
	            return argValue;
	        }).join(', ') : "") + ")";
	};
	module.exports = MixinCall;


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	var Selector = __webpack_require__(314),
	    Element = __webpack_require__(315),
	    Ruleset = __webpack_require__(317),
	    Rule = __webpack_require__(318),
	    Expression = __webpack_require__(275),
	    contexts = __webpack_require__(303);
	
	var Definition = function (name, params, rules, condition, variadic, frames, visibilityInfo) {
	    this.name = name;
	    this.selectors = [new Selector([new Element(null, name, this.index, this.currentFileInfo)])];
	    this.params = params;
	    this.condition = condition;
	    this.variadic = variadic;
	    this.arity = params.length;
	    this.rules = rules;
	    this._lookups = {};
	    var optionalParameters = [];
	    this.required = params.reduce(function (count, p) {
	        if (!p.name || (p.name && !p.value)) {
	            return count + 1;
	        }
	        else {
	            optionalParameters.push(p.name);
	            return count;
	        }
	    }, 0);
	    this.optionalParameters = optionalParameters;
	    this.frames = frames;
	    this.copyVisibilityInfo(visibilityInfo);
	    this.allowRoot = true;
	};
	Definition.prototype = new Ruleset();
	Definition.prototype.type = "MixinDefinition";
	Definition.prototype.evalFirst = true;
	Definition.prototype.accept = function (visitor) {
	    if (this.params && this.params.length) {
	        this.params = visitor.visitArray(this.params);
	    }
	    this.rules = visitor.visitArray(this.rules);
	    if (this.condition) {
	        this.condition = visitor.visit(this.condition);
	    }
	};
	Definition.prototype.evalParams = function (context, mixinEnv, args, evaldArguments) {
	    /*jshint boss:true */
	    var frame = new Ruleset(null, null),
	        varargs, arg,
	        params = this.params.slice(0),
	        i, j, val, name, isNamedFound, argIndex, argsLength = 0;
	
	    if (mixinEnv.frames && mixinEnv.frames[0] && mixinEnv.frames[0].functionRegistry) {
	        frame.functionRegistry = mixinEnv.frames[0].functionRegistry.inherit();
	    }
	    mixinEnv = new contexts.Eval(mixinEnv, [frame].concat(mixinEnv.frames));
	
	    if (args) {
	        args = args.slice(0);
	        argsLength = args.length;
	
	        for (i = 0; i < argsLength; i++) {
	            arg = args[i];
	            if (name = (arg && arg.name)) {
	                isNamedFound = false;
	                for (j = 0; j < params.length; j++) {
	                    if (!evaldArguments[j] && name === params[j].name) {
	                        evaldArguments[j] = arg.value.eval(context);
	                        frame.prependRule(new Rule(name, arg.value.eval(context)));
	                        isNamedFound = true;
	                        break;
	                    }
	                }
	                if (isNamedFound) {
	                    args.splice(i, 1);
	                    i--;
	                    continue;
	                } else {
	                    throw { type: 'Runtime', message: "Named argument for " + this.name +
	                        ' ' + args[i].name + ' not found' };
	                }
	            }
	        }
	    }
	    argIndex = 0;
	    for (i = 0; i < params.length; i++) {
	        if (evaldArguments[i]) { continue; }
	
	        arg = args && args[argIndex];
	
	        if (name = params[i].name) {
	            if (params[i].variadic) {
	                varargs = [];
	                for (j = argIndex; j < argsLength; j++) {
	                    varargs.push(args[j].value.eval(context));
	                }
	                frame.prependRule(new Rule(name, new Expression(varargs).eval(context)));
	            } else {
	                val = arg && arg.value;
	                if (val) {
	                    val = val.eval(context);
	                } else if (params[i].value) {
	                    val = params[i].value.eval(mixinEnv);
	                    frame.resetCache();
	                } else {
	                    throw { type: 'Runtime', message: "wrong number of arguments for " + this.name +
	                        ' (' + argsLength + ' for ' + this.arity + ')' };
	                }
	
	                frame.prependRule(new Rule(name, val));
	                evaldArguments[i] = val;
	            }
	        }
	
	        if (params[i].variadic && args) {
	            for (j = argIndex; j < argsLength; j++) {
	                evaldArguments[j] = args[j].value.eval(context);
	            }
	        }
	        argIndex++;
	    }
	
	    return frame;
	};
	Definition.prototype.makeImportant = function() {
	    var rules = !this.rules ? this.rules : this.rules.map(function (r) {
	        if (r.makeImportant) {
	            return r.makeImportant(true);
	        } else {
	            return r;
	        }
	    });
	    var result = new Definition(this.name, this.params, rules, this.condition, this.variadic, this.frames);
	    return result;
	};
	Definition.prototype.eval = function (context) {
	    return new Definition(this.name, this.params, this.rules, this.condition, this.variadic, this.frames || context.frames.slice(0));
	};
	Definition.prototype.evalCall = function (context, args, important) {
	    var _arguments = [],
	        mixinFrames = this.frames ? this.frames.concat(context.frames) : context.frames,
	        frame = this.evalParams(context, new contexts.Eval(context, mixinFrames), args, _arguments),
	        rules, ruleset;
	
	    frame.prependRule(new Rule('@arguments', new Expression(_arguments).eval(context)));
	
	    rules = this.rules.slice(0);
	
	    ruleset = new Ruleset(null, rules);
	    ruleset.originalRuleset = this;
	    ruleset = ruleset.eval(new contexts.Eval(context, [this, frame].concat(mixinFrames)));
	    if (important) {
	        ruleset = ruleset.makeImportant();
	    }
	    return ruleset;
	};
	Definition.prototype.matchCondition = function (args, context) {
	    if (this.condition && !this.condition.eval(
	        new contexts.Eval(context,
	            [this.evalParams(context, /* the parameter variables*/
	                new contexts.Eval(context, this.frames ? this.frames.concat(context.frames) : context.frames), args, [])]
	            .concat(this.frames || []) // the parent namespace/mixin frames
	            .concat(context.frames)))) { // the current environment frames
	        return false;
	    }
	    return true;
	};
	Definition.prototype.matchArgs = function (args, context) {
	    var allArgsCnt = (args && args.length) || 0, len, optionalParameters = this.optionalParameters;
	    var requiredArgsCnt = !args ? 0 : args.reduce(function (count, p) {
	        if (optionalParameters.indexOf(p.name) < 0) {
	            return count + 1;
	        } else {
	            return count;
	        }
	    }, 0);
	
	    if (! this.variadic) {
	        if (requiredArgsCnt < this.required) {
	            return false;
	        }
	        if (allArgsCnt > this.params.length) {
	            return false;
	        }
	    } else {
	        if (requiredArgsCnt < (this.required - 1)) {
	            return false;
	        }
	    }
	
	    // check patterns
	    len = Math.min(requiredArgsCnt, this.arity);
	
	    for (var i = 0; i < len; i++) {
	        if (!this.params[i].name && !this.params[i].variadic) {
	            if (args[i].value.eval(context).toCSS() != this.params[i].value.eval(context).toCSS()) {
	                return false;
	            }
	        }
	    }
	    return true;
	};
	module.exports = Definition;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Assignment = function (key, val) {
	    this.key = key;
	    this.value = val;
	};
	
	Assignment.prototype = new Node();
	Assignment.prototype.type = "Assignment";
	Assignment.prototype.accept = function (visitor) {
	    this.value = visitor.visit(this.value);
	};
	Assignment.prototype.eval = function (context) {
	    if (this.value.eval) {
	        return new Assignment(this.key, this.value.eval(context));
	    }
	    return this;
	};
	Assignment.prototype.genCSS = function (context, output) {
	    output.add(this.key + '=');
	    if (this.value.genCSS) {
	        this.value.genCSS(context, output);
	    } else {
	        output.add(this.value);
	    }
	};
	module.exports = Assignment;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var Condition = function (op, l, r, i, negate) {
	    this.op = op.trim();
	    this.lvalue = l;
	    this.rvalue = r;
	    this.index = i;
	    this.negate = negate;
	};
	Condition.prototype = new Node();
	Condition.prototype.type = "Condition";
	Condition.prototype.accept = function (visitor) {
	    this.lvalue = visitor.visit(this.lvalue);
	    this.rvalue = visitor.visit(this.rvalue);
	};
	Condition.prototype.eval = function (context) {
	    var result = (function (op, a, b) {
	        switch (op) {
	            case 'and': return a && b;
	            case 'or':  return a || b;
	            default:
	                switch (Node.compare(a, b)) {
	                    case -1:
	                        return op === '<' || op === '=<' || op === '<=';
	                    case 0:
	                        return op === '=' || op === '>=' || op === '=<' || op === '<=';
	                    case 1:
	                        return op === '>' || op === '>=';
	                    default:
	                        return false;
	                }
	        }
	    })(this.op, this.lvalue.eval(context), this.rvalue.eval(context));
	
	    return this.negate ? !result : result;
	};
	module.exports = Condition;


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276);
	
	var UnicodeDescriptor = function (value) {
	    this.value = value;
	};
	UnicodeDescriptor.prototype = new Node();
	UnicodeDescriptor.prototype.type = "UnicodeDescriptor";
	
	module.exports = UnicodeDescriptor;


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Operation = __webpack_require__(304),
	    Dimension = __webpack_require__(283);
	
	var Negative = function (node) {
	    this.value = node;
	};
	Negative.prototype = new Node();
	Negative.prototype.type = "Negative";
	Negative.prototype.genCSS = function (context, output) {
	    output.add('-');
	    this.value.genCSS(context, output);
	};
	Negative.prototype.eval = function (context) {
	    if (context.isMathOn()) {
	        return (new Operation('*', [new Dimension(-1), this.value])).eval(context);
	    }
	    return new Negative(this.value.eval(context));
	};
	module.exports = Negative;


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Selector = __webpack_require__(314);
	
	var Extend = function Extend(selector, option, index, currentFileInfo, visibilityInfo) {
	    this.selector = selector;
	    this.option = option;
	    this.index = index;
	    this.object_id = Extend.next_id++;
	    this.parent_ids = [this.object_id];
	    this.currentFileInfo = currentFileInfo || {};
	    this.copyVisibilityInfo(visibilityInfo);
	    this.allowRoot = true;
	
	    switch(option) {
	        case "all":
	            this.allowBefore = true;
	            this.allowAfter = true;
	            break;
	        default:
	            this.allowBefore = false;
	            this.allowAfter = false;
	            break;
	    }
	};
	Extend.next_id = 0;
	
	Extend.prototype = new Node();
	Extend.prototype.type = "Extend";
	Extend.prototype.accept = function (visitor) {
	    this.selector = visitor.visit(this.selector);
	};
	Extend.prototype.eval = function (context) {
	    return new Extend(this.selector.eval(context), this.option, this.index, this.currentFileInfo, this.visibilityInfo());
	};
	Extend.prototype.clone = function (context) {
	    return new Extend(this.selector, this.option, this.index, this.currentFileInfo, this.visibilityInfo());
	};
	//it concatenates (joins) all selectors in selector array
	Extend.prototype.findSelfSelectors = function (selectors) {
	    var selfElements = [],
	        i,
	        selectorElements;
	
	    for (i = 0; i < selectors.length; i++) {
	        selectorElements = selectors[i].elements;
	        // duplicate the logic in genCSS function inside the selector node.
	        // future TODO - move both logics into the selector joiner visitor
	        if (i > 0 && selectorElements.length && selectorElements[0].combinator.value === "") {
	            selectorElements[0].combinator.value = ' ';
	        }
	        selfElements = selfElements.concat(selectors[i].elements);
	    }
	
	    this.selfSelectors = [new Selector(selfElements)];
	    this.selfSelectors[0].copyVisibilityInfo(this.visibilityInfo());
	};
	module.exports = Extend;


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	var Node = __webpack_require__(276),
	    Variable = __webpack_require__(290);
	
	var RulesetCall = function (variable) {
	    this.variable = variable;
	    this.allowRoot = true;
	};
	RulesetCall.prototype = new Node();
	RulesetCall.prototype.type = "RulesetCall";
	RulesetCall.prototype.eval = function (context) {
	    var detachedRuleset = new Variable(this.variable).eval(context);
	    return detachedRuleset.callEval(context);
	};
	module.exports = RulesetCall;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	var contexts = __webpack_require__(303),
	    Visitor = __webpack_require__(310),
	    ImportSequencer = __webpack_require__(333);
	
	var ImportVisitor = function(importer, finish) {
	
	    this._visitor = new Visitor(this);
	    this._importer = importer;
	    this._finish = finish;
	    this.context = new contexts.Eval();
	    this.importCount = 0;
	    this.onceFileDetectionMap = {};
	    this.recursionDetector = {};
	    this._sequencer = new ImportSequencer(this._onSequencerEmpty.bind(this));
	};
	
	ImportVisitor.prototype = {
	    isReplacing: false,
	    run: function (root) {
	        try {
	            // process the contents
	            this._visitor.visit(root);
	        }
	        catch(e) {
	            this.error = e;
	        }
	
	        this.isFinished = true;
	        this._sequencer.tryRun();
	    },
	    _onSequencerEmpty: function() {
	        if (!this.isFinished) {
	            return;
	        }
	        this._finish(this.error);
	    },
	    visitImport: function (importNode, visitArgs) {
	        var inlineCSS = importNode.options.inline;
	
	        if (!importNode.css || inlineCSS) {
	
	            var context = new contexts.Eval(this.context, this.context.frames.slice(0));
	            var importParent = context.frames[0];
	
	            this.importCount++;
	            if (importNode.isVariableImport()) {
	                this._sequencer.addVariableImport(this.processImportNode.bind(this, importNode, context, importParent));
	            } else {
	                this.processImportNode(importNode, context, importParent);
	            }
	        }
	        visitArgs.visitDeeper = false;
	    },
	    processImportNode: function(importNode, context, importParent) {
	        var evaldImportNode,
	            inlineCSS = importNode.options.inline;
	
	        try {
	            evaldImportNode = importNode.evalForImport(context);
	        } catch(e) {
	            if (!e.filename) { e.index = importNode.index; e.filename = importNode.currentFileInfo.filename; }
	            // attempt to eval properly and treat as css
	            importNode.css = true;
	            // if that fails, this error will be thrown
	            importNode.error = e;
	        }
	
	        if (evaldImportNode && (!evaldImportNode.css || inlineCSS)) {
	
	            if (evaldImportNode.options.multiple) {
	                context.importMultiple = true;
	            }
	
	            // try appending if we haven't determined if it is css or not
	            var tryAppendLessExtension = evaldImportNode.css === undefined;
	
	            for (var i = 0; i < importParent.rules.length; i++) {
	                if (importParent.rules[i] === importNode) {
	                    importParent.rules[i] = evaldImportNode;
	                    break;
	                }
	            }
	
	            var onImported = this.onImported.bind(this, evaldImportNode, context),
	                sequencedOnImported = this._sequencer.addImport(onImported);
	
	            this._importer.push(evaldImportNode.getPath(), tryAppendLessExtension, evaldImportNode.currentFileInfo,
	                evaldImportNode.options, sequencedOnImported);
	        } else {
	            this.importCount--;
	            if (this.isFinished) {
	                this._sequencer.tryRun();
	            }
	        }
	    },
	    onImported: function (importNode, context, e, root, importedAtRoot, fullPath) {
	        if (e) {
	            if (!e.filename) {
	                e.index = importNode.index; e.filename = importNode.currentFileInfo.filename;
	            }
	            this.error = e;
	        }
	
	        var importVisitor = this,
	            inlineCSS = importNode.options.inline,
	            isPlugin = importNode.options.plugin,
	            isOptional = importNode.options.optional,
	            duplicateImport = importedAtRoot || fullPath in importVisitor.recursionDetector;
	
	        if (!context.importMultiple) {
	            if (duplicateImport) {
	                importNode.skip = true;
	            } else {
	                importNode.skip = function() {
	                    if (fullPath in importVisitor.onceFileDetectionMap) {
	                        return true;
	                    }
	                    importVisitor.onceFileDetectionMap[fullPath] = true;
	                    return false;
	                };
	            }
	        }
	
	        if (!fullPath && isOptional) {
	            importNode.skip = true;
	        }
	
	        if (root) {
	            importNode.root = root;
	            importNode.importedFilename = fullPath;
	
	            if (!inlineCSS && !isPlugin && (context.importMultiple || !duplicateImport)) {
	                importVisitor.recursionDetector[fullPath] = true;
	
	                var oldContext = this.context;
	                this.context = context;
	                try {
	                    this._visitor.visit(root);
	                } catch (e) {
	                    this.error = e;
	                }
	                this.context = oldContext;
	            }
	        }
	
	        importVisitor.importCount--;
	
	        if (importVisitor.isFinished) {
	            importVisitor._sequencer.tryRun();
	        }
	    },
	    visitRule: function (ruleNode, visitArgs) {
	        if (ruleNode.value.type === "DetachedRuleset") {
	            this.context.frames.unshift(ruleNode);
	        } else {
	            visitArgs.visitDeeper = false;
	        }
	    },
	    visitRuleOut : function(ruleNode) {
	        if (ruleNode.value.type === "DetachedRuleset") {
	            this.context.frames.shift();
	        }
	    },
	    visitDirective: function (directiveNode, visitArgs) {
	        this.context.frames.unshift(directiveNode);
	    },
	    visitDirectiveOut: function (directiveNode) {
	        this.context.frames.shift();
	    },
	    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
	        this.context.frames.unshift(mixinDefinitionNode);
	    },
	    visitMixinDefinitionOut: function (mixinDefinitionNode) {
	        this.context.frames.shift();
	    },
	    visitRuleset: function (rulesetNode, visitArgs) {
	        this.context.frames.unshift(rulesetNode);
	    },
	    visitRulesetOut: function (rulesetNode) {
	        this.context.frames.shift();
	    },
	    visitMedia: function (mediaNode, visitArgs) {
	        this.context.frames.unshift(mediaNode.rules[0]);
	    },
	    visitMediaOut: function (mediaNode) {
	        this.context.frames.shift();
	    }
	};
	module.exports = ImportVisitor;


/***/ }),
/* 333 */
/***/ (function(module, exports) {

	function ImportSequencer(onSequencerEmpty) {
	    this.imports = [];
	    this.variableImports = [];
	    this._onSequencerEmpty = onSequencerEmpty;
	    this._currentDepth = 0;
	}
	
	ImportSequencer.prototype.addImport = function(callback) {
	    var importSequencer = this,
	        importItem = {
	            callback: callback,
	            args: null,
	            isReady: false
	        };
	    this.imports.push(importItem);
	    return function() {
	        importItem.args = Array.prototype.slice.call(arguments, 0);
	        importItem.isReady = true;
	        importSequencer.tryRun();
	    };
	};
	
	ImportSequencer.prototype.addVariableImport = function(callback) {
	    this.variableImports.push(callback);
	};
	
	ImportSequencer.prototype.tryRun = function() {
	    this._currentDepth++;
	    try {
	        while (true) {
	            while (this.imports.length > 0) {
	                var importItem = this.imports[0];
	                if (!importItem.isReady) {
	                    return;
	                }
	                this.imports = this.imports.slice(1);
	                importItem.callback.apply(null, importItem.args);
	            }
	            if (this.variableImports.length === 0) {
	                break;
	            }
	            var variableImport = this.variableImports[0];
	            this.variableImports = this.variableImports.slice(1);
	            variableImport();
	        }
	    } finally {
	        this._currentDepth--;
	    }
	    if (this._currentDepth === 0 && this._onSequencerEmpty) {
	        this._onSequencerEmpty();
	    }
	};
	
	module.exports = ImportSequencer;


/***/ }),
/* 334 */
/***/ (function(module, exports) {

	var SetTreeVisibilityVisitor = function(visible) {
	    this.visible = visible;
	};
	SetTreeVisibilityVisitor.prototype.run = function(root) {
	    this.visit(root);
	};
	SetTreeVisibilityVisitor.prototype.visitArray = function(nodes) {
	    if (!nodes) {
	        return nodes;
	    }
	
	    var cnt = nodes.length, i;
	    for (i = 0; i < cnt; i++) {
	        this.visit(nodes[i]);
	    }
	    return nodes;
	};
	SetTreeVisibilityVisitor.prototype.visit = function(node) {
	    if (!node) {
	        return node;
	    }
	    if (node.constructor === Array) {
	        return this.visitArray(node);
	    }
	
	    if (!node.blocksVisibility || node.blocksVisibility()) {
	        return node;
	    }
	    if (this.visible) {
	        node.ensureVisibility();
	    } else {
	        node.ensureInvisibility();
	    }
	
	    node.accept(this);
	    return node;
	};
	module.exports = SetTreeVisibilityVisitor;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	var tree = __webpack_require__(311),
	    Visitor = __webpack_require__(310),
	    logger = __webpack_require__(271);
	
	/*jshint loopfunc:true */
	
	var ExtendFinderVisitor = function() {
	    this._visitor = new Visitor(this);
	    this.contexts = [];
	    this.allExtendsStack = [[]];
	};
	
	ExtendFinderVisitor.prototype = {
	    run: function (root) {
	        root = this._visitor.visit(root);
	        root.allExtends = this.allExtendsStack[0];
	        return root;
	    },
	    visitRule: function (ruleNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	    visitRuleset: function (rulesetNode, visitArgs) {
	        if (rulesetNode.root) {
	            return;
	        }
	
	        var i, j, extend, allSelectorsExtendList = [], extendList;
	
	        // get &:extend(.a); rules which apply to all selectors in this ruleset
	        var rules = rulesetNode.rules, ruleCnt = rules ? rules.length : 0;
	        for (i = 0; i < ruleCnt; i++) {
	            if (rulesetNode.rules[i] instanceof tree.Extend) {
	                allSelectorsExtendList.push(rules[i]);
	                rulesetNode.extendOnEveryPath = true;
	            }
	        }
	
	        // now find every selector and apply the extends that apply to all extends
	        // and the ones which apply to an individual extend
	        var paths = rulesetNode.paths;
	        for (i = 0; i < paths.length; i++) {
	            var selectorPath = paths[i],
	                selector = selectorPath[selectorPath.length - 1],
	                selExtendList = selector.extendList;
	
	            extendList = selExtendList ? selExtendList.slice(0).concat(allSelectorsExtendList)
	                                       : allSelectorsExtendList;
	
	            if (extendList) {
	                extendList = extendList.map(function(allSelectorsExtend) {
	                    return allSelectorsExtend.clone();
	                });
	            }
	
	            for (j = 0; j < extendList.length; j++) {
	                this.foundExtends = true;
	                extend = extendList[j];
	                extend.findSelfSelectors(selectorPath);
	                extend.ruleset = rulesetNode;
	                if (j === 0) { extend.firstExtendOnThisSelectorPath = true; }
	                this.allExtendsStack[this.allExtendsStack.length - 1].push(extend);
	            }
	        }
	
	        this.contexts.push(rulesetNode.selectors);
	    },
	    visitRulesetOut: function (rulesetNode) {
	        if (!rulesetNode.root) {
	            this.contexts.length = this.contexts.length - 1;
	        }
	    },
	    visitMedia: function (mediaNode, visitArgs) {
	        mediaNode.allExtends = [];
	        this.allExtendsStack.push(mediaNode.allExtends);
	    },
	    visitMediaOut: function (mediaNode) {
	        this.allExtendsStack.length = this.allExtendsStack.length - 1;
	    },
	    visitDirective: function (directiveNode, visitArgs) {
	        directiveNode.allExtends = [];
	        this.allExtendsStack.push(directiveNode.allExtends);
	    },
	    visitDirectiveOut: function (directiveNode) {
	        this.allExtendsStack.length = this.allExtendsStack.length - 1;
	    }
	};
	
	var ProcessExtendsVisitor = function() {
	    this._visitor = new Visitor(this);
	};
	
	ProcessExtendsVisitor.prototype = {
	    run: function(root) {
	        var extendFinder = new ExtendFinderVisitor();
	        this.extendIndices = {};
	        extendFinder.run(root);
	        if (!extendFinder.foundExtends) { return root; }
	        root.allExtends = root.allExtends.concat(this.doExtendChaining(root.allExtends, root.allExtends));
	        this.allExtendsStack = [root.allExtends];
	        var newRoot = this._visitor.visit(root);
	        this.checkExtendsForNonMatched(root.allExtends);
	        return newRoot;
	    },
	    checkExtendsForNonMatched: function(extendList) {
	        var indices = this.extendIndices;
	        extendList.filter(function(extend) {
	            return !extend.hasFoundMatches && extend.parent_ids.length == 1;
	        }).forEach(function(extend) {
	                var selector = "_unknown_";
	                try {
	                    selector = extend.selector.toCSS({});
	                }
	                catch(_) {}
	
	                if (!indices[extend.index + ' ' + selector]) {
	                    indices[extend.index + ' ' + selector] = true;
	                    logger.warn("extend '" + selector + "' has no matches");
	                }
	            });
	    },
	    doExtendChaining: function (extendsList, extendsListTarget, iterationCount) {
	        //
	        // chaining is different from normal extension.. if we extend an extend then we are not just copying, altering
	        // and pasting the selector we would do normally, but we are also adding an extend with the same target selector
	        // this means this new extend can then go and alter other extends
	        //
	        // this method deals with all the chaining work - without it, extend is flat and doesn't work on other extend selectors
	        // this is also the most expensive.. and a match on one selector can cause an extension of a selector we had already
	        // processed if we look at each selector at a time, as is done in visitRuleset
	
	        var extendIndex, targetExtendIndex, matches, extendsToAdd = [], newSelector, extendVisitor = this, selectorPath,
	            extend, targetExtend, newExtend;
	
	        iterationCount = iterationCount || 0;
	
	        //loop through comparing every extend with every target extend.
	        // a target extend is the one on the ruleset we are looking at copy/edit/pasting in place
	        // e.g.  .a:extend(.b) {}  and .b:extend(.c) {} then the first extend extends the second one
	        // and the second is the target.
	        // the separation into two lists allows us to process a subset of chains with a bigger set, as is the
	        // case when processing media queries
	        for (extendIndex = 0; extendIndex < extendsList.length; extendIndex++) {
	            for (targetExtendIndex = 0; targetExtendIndex < extendsListTarget.length; targetExtendIndex++) {
	
	                extend = extendsList[extendIndex];
	                targetExtend = extendsListTarget[targetExtendIndex];
	
	                // look for circular references
	                if ( extend.parent_ids.indexOf( targetExtend.object_id ) >= 0 ) { continue; }
	
	                // find a match in the target extends self selector (the bit before :extend)
	                selectorPath = [targetExtend.selfSelectors[0]];
	                matches = extendVisitor.findMatch(extend, selectorPath);
	
	                if (matches.length) {
	                    extend.hasFoundMatches = true;
	
	                    // we found a match, so for each self selector..
	                    extend.selfSelectors.forEach(function(selfSelector) {
	                        var info = targetExtend.visibilityInfo();
	
	                        // process the extend as usual
	                        newSelector = extendVisitor.extendSelector(matches, selectorPath, selfSelector, extend.isVisible());
	
	                        // but now we create a new extend from it
	                        newExtend = new(tree.Extend)(targetExtend.selector, targetExtend.option, 0, targetExtend.currentFileInfo, info);
	                        newExtend.selfSelectors = newSelector;
	
	                        // add the extend onto the list of extends for that selector
	                        newSelector[newSelector.length - 1].extendList = [newExtend];
	
	                        // record that we need to add it.
	                        extendsToAdd.push(newExtend);
	                        newExtend.ruleset = targetExtend.ruleset;
	
	                        //remember its parents for circular references
	                        newExtend.parent_ids = newExtend.parent_ids.concat(targetExtend.parent_ids, extend.parent_ids);
	
	                        // only process the selector once.. if we have :extend(.a,.b) then multiple
	                        // extends will look at the same selector path, so when extending
	                        // we know that any others will be duplicates in terms of what is added to the css
	                        if (targetExtend.firstExtendOnThisSelectorPath) {
	                            newExtend.firstExtendOnThisSelectorPath = true;
	                            targetExtend.ruleset.paths.push(newSelector);
	                        }
	                    });
	                }
	            }
	        }
	
	        if (extendsToAdd.length) {
	            // try to detect circular references to stop a stack overflow.
	            // may no longer be needed.
	            this.extendChainCount++;
	            if (iterationCount > 100) {
	                var selectorOne = "{unable to calculate}";
	                var selectorTwo = "{unable to calculate}";
	                try {
	                    selectorOne = extendsToAdd[0].selfSelectors[0].toCSS();
	                    selectorTwo = extendsToAdd[0].selector.toCSS();
	                }
	                catch(e) {}
	                throw { message: "extend circular reference detected. One of the circular extends is currently:" +
	                    selectorOne + ":extend(" + selectorTwo + ")"};
	            }
	
	            // now process the new extends on the existing rules so that we can handle a extending b extending c extending
	            // d extending e...
	            return extendsToAdd.concat(extendVisitor.doExtendChaining(extendsToAdd, extendsListTarget, iterationCount + 1));
	        } else {
	            return extendsToAdd;
	        }
	    },
	    visitRule: function (ruleNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	    visitSelector: function (selectorNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	    visitRuleset: function (rulesetNode, visitArgs) {
	        if (rulesetNode.root) {
	            return;
	        }
	        var matches, pathIndex, extendIndex, allExtends = this.allExtendsStack[this.allExtendsStack.length - 1],
	            selectorsToAdd = [], extendVisitor = this, selectorPath;
	
	        // look at each selector path in the ruleset, find any extend matches and then copy, find and replace
	
	        for (extendIndex = 0; extendIndex < allExtends.length; extendIndex++) {
	            for (pathIndex = 0; pathIndex < rulesetNode.paths.length; pathIndex++) {
	                selectorPath = rulesetNode.paths[pathIndex];
	
	                // extending extends happens initially, before the main pass
	                if (rulesetNode.extendOnEveryPath) { continue; }
	                var extendList = selectorPath[selectorPath.length - 1].extendList;
	                if (extendList && extendList.length) { continue; }
	
	                matches = this.findMatch(allExtends[extendIndex], selectorPath);
	
	                if (matches.length) {
	                    allExtends[extendIndex].hasFoundMatches = true;
	
	                    allExtends[extendIndex].selfSelectors.forEach(function(selfSelector) {
	                        var extendedSelectors;
	                        extendedSelectors = extendVisitor.extendSelector(matches, selectorPath, selfSelector, allExtends[extendIndex].isVisible());
	                        selectorsToAdd.push(extendedSelectors);
	                    });
	                }
	            }
	        }
	        rulesetNode.paths = rulesetNode.paths.concat(selectorsToAdd);
	    },
	    findMatch: function (extend, haystackSelectorPath) {
	        //
	        // look through the haystack selector path to try and find the needle - extend.selector
	        // returns an array of selector matches that can then be replaced
	        //
	        var haystackSelectorIndex, hackstackSelector, hackstackElementIndex, haystackElement,
	            targetCombinator, i,
	            extendVisitor = this,
	            needleElements = extend.selector.elements,
	            potentialMatches = [], potentialMatch, matches = [];
	
	        // loop through the haystack elements
	        for (haystackSelectorIndex = 0; haystackSelectorIndex < haystackSelectorPath.length; haystackSelectorIndex++) {
	            hackstackSelector = haystackSelectorPath[haystackSelectorIndex];
	
	            for (hackstackElementIndex = 0; hackstackElementIndex < hackstackSelector.elements.length; hackstackElementIndex++) {
	
	                haystackElement = hackstackSelector.elements[hackstackElementIndex];
	
	                // if we allow elements before our match we can add a potential match every time. otherwise only at the first element.
	                if (extend.allowBefore || (haystackSelectorIndex === 0 && hackstackElementIndex === 0)) {
	                    potentialMatches.push({pathIndex: haystackSelectorIndex, index: hackstackElementIndex, matched: 0,
	                        initialCombinator: haystackElement.combinator});
	                }
	
	                for (i = 0; i < potentialMatches.length; i++) {
	                    potentialMatch = potentialMatches[i];
	
	                    // selectors add " " onto the first element. When we use & it joins the selectors together, but if we don't
	                    // then each selector in haystackSelectorPath has a space before it added in the toCSS phase. so we need to
	                    // work out what the resulting combinator will be
	                    targetCombinator = haystackElement.combinator.value;
	                    if (targetCombinator === '' && hackstackElementIndex === 0) {
	                        targetCombinator = ' ';
	                    }
	
	                    // if we don't match, null our match to indicate failure
	                    if (!extendVisitor.isElementValuesEqual(needleElements[potentialMatch.matched].value, haystackElement.value) ||
	                        (potentialMatch.matched > 0 && needleElements[potentialMatch.matched].combinator.value !== targetCombinator)) {
	                        potentialMatch = null;
	                    } else {
	                        potentialMatch.matched++;
	                    }
	
	                    // if we are still valid and have finished, test whether we have elements after and whether these are allowed
	                    if (potentialMatch) {
	                        potentialMatch.finished = potentialMatch.matched === needleElements.length;
	                        if (potentialMatch.finished &&
	                            (!extend.allowAfter &&
	                                (hackstackElementIndex + 1 < hackstackSelector.elements.length || haystackSelectorIndex + 1 < haystackSelectorPath.length))) {
	                            potentialMatch = null;
	                        }
	                    }
	                    // if null we remove, if not, we are still valid, so either push as a valid match or continue
	                    if (potentialMatch) {
	                        if (potentialMatch.finished) {
	                            potentialMatch.length = needleElements.length;
	                            potentialMatch.endPathIndex = haystackSelectorIndex;
	                            potentialMatch.endPathElementIndex = hackstackElementIndex + 1; // index after end of match
	                            potentialMatches.length = 0; // we don't allow matches to overlap, so start matching again
	                            matches.push(potentialMatch);
	                        }
	                    } else {
	                        potentialMatches.splice(i, 1);
	                        i--;
	                    }
	                }
	            }
	        }
	        return matches;
	    },
	    isElementValuesEqual: function(elementValue1, elementValue2) {
	        if (typeof elementValue1 === "string" || typeof elementValue2 === "string") {
	            return elementValue1 === elementValue2;
	        }
	        if (elementValue1 instanceof tree.Attribute) {
	            if (elementValue1.op !== elementValue2.op || elementValue1.key !== elementValue2.key) {
	                return false;
	            }
	            if (!elementValue1.value || !elementValue2.value) {
	                if (elementValue1.value || elementValue2.value) {
	                    return false;
	                }
	                return true;
	            }
	            elementValue1 = elementValue1.value.value || elementValue1.value;
	            elementValue2 = elementValue2.value.value || elementValue2.value;
	            return elementValue1 === elementValue2;
	        }
	        elementValue1 = elementValue1.value;
	        elementValue2 = elementValue2.value;
	        if (elementValue1 instanceof tree.Selector) {
	            if (!(elementValue2 instanceof tree.Selector) || elementValue1.elements.length !== elementValue2.elements.length) {
	                return false;
	            }
	            for (var i = 0; i  < elementValue1.elements.length; i++) {
	                if (elementValue1.elements[i].combinator.value !== elementValue2.elements[i].combinator.value) {
	                    if (i !== 0 || (elementValue1.elements[i].combinator.value || ' ') !== (elementValue2.elements[i].combinator.value || ' ')) {
	                        return false;
	                    }
	                }
	                if (!this.isElementValuesEqual(elementValue1.elements[i].value, elementValue2.elements[i].value)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        return false;
	    },
	    extendSelector:function (matches, selectorPath, replacementSelector, isVisible) {
	
	        //for a set of matches, replace each match with the replacement selector
	
	        var currentSelectorPathIndex = 0,
	            currentSelectorPathElementIndex = 0,
	            path = [],
	            matchIndex,
	            selector,
	            firstElement,
	            match,
	            newElements;
	
	        for (matchIndex = 0; matchIndex < matches.length; matchIndex++) {
	            match = matches[matchIndex];
	            selector = selectorPath[match.pathIndex];
	            firstElement = new tree.Element(
	                match.initialCombinator,
	                replacementSelector.elements[0].value,
	                replacementSelector.elements[0].index,
	                replacementSelector.elements[0].currentFileInfo
	            );
	
	            if (match.pathIndex > currentSelectorPathIndex && currentSelectorPathElementIndex > 0) {
	                path[path.length - 1].elements = path[path.length - 1]
	                    .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));
	                currentSelectorPathElementIndex = 0;
	                currentSelectorPathIndex++;
	            }
	
	            newElements = selector.elements
	                .slice(currentSelectorPathElementIndex, match.index)
	                .concat([firstElement])
	                .concat(replacementSelector.elements.slice(1));
	
	            if (currentSelectorPathIndex === match.pathIndex && matchIndex > 0) {
	                path[path.length - 1].elements =
	                    path[path.length - 1].elements.concat(newElements);
	            } else {
	                path = path.concat(selectorPath.slice(currentSelectorPathIndex, match.pathIndex));
	
	                path.push(new tree.Selector(
	                    newElements
	                ));
	            }
	            currentSelectorPathIndex = match.endPathIndex;
	            currentSelectorPathElementIndex = match.endPathElementIndex;
	            if (currentSelectorPathElementIndex >= selectorPath[currentSelectorPathIndex].elements.length) {
	                currentSelectorPathElementIndex = 0;
	                currentSelectorPathIndex++;
	            }
	        }
	
	        if (currentSelectorPathIndex < selectorPath.length && currentSelectorPathElementIndex > 0) {
	            path[path.length - 1].elements = path[path.length - 1]
	                .elements.concat(selectorPath[currentSelectorPathIndex].elements.slice(currentSelectorPathElementIndex));
	            currentSelectorPathIndex++;
	        }
	
	        path = path.concat(selectorPath.slice(currentSelectorPathIndex, selectorPath.length));
	        path = path.map(function (currentValue) {
	            // we can re-use elements here, because the visibility property matters only for selectors
	            var derived = currentValue.createDerived(currentValue.elements);
	            if (isVisible) {
	                derived.ensureVisibility();
	            } else {
	                derived.ensureInvisibility();
	            }
	            return derived;
	        });
	        return path;
	    },
	    visitMedia: function (mediaNode, visitArgs) {
	        var newAllExtends = mediaNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);
	        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, mediaNode.allExtends));
	        this.allExtendsStack.push(newAllExtends);
	    },
	    visitMediaOut: function (mediaNode) {
	        var lastIndex = this.allExtendsStack.length - 1;
	        this.allExtendsStack.length = lastIndex;
	    },
	    visitDirective: function (directiveNode, visitArgs) {
	        var newAllExtends = directiveNode.allExtends.concat(this.allExtendsStack[this.allExtendsStack.length - 1]);
	        newAllExtends = newAllExtends.concat(this.doExtendChaining(newAllExtends, directiveNode.allExtends));
	        this.allExtendsStack.push(newAllExtends);
	    },
	    visitDirectiveOut: function (directiveNode) {
	        var lastIndex = this.allExtendsStack.length - 1;
	        this.allExtendsStack.length = lastIndex;
	    }
	};
	
	module.exports = ProcessExtendsVisitor;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	var Visitor = __webpack_require__(310);
	
	var JoinSelectorVisitor = function() {
	    this.contexts = [[]];
	    this._visitor = new Visitor(this);
	};
	
	JoinSelectorVisitor.prototype = {
	    run: function (root) {
	        return this._visitor.visit(root);
	    },
	    visitRule: function (ruleNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	    visitMixinDefinition: function (mixinDefinitionNode, visitArgs) {
	        visitArgs.visitDeeper = false;
	    },
	
	    visitRuleset: function (rulesetNode, visitArgs) {
	        var context = this.contexts[this.contexts.length - 1],
	            paths = [], selectors;
	
	        this.contexts.push(paths);
	
	        if (! rulesetNode.root) {
	            selectors = rulesetNode.selectors;
	            if (selectors) {
	                selectors = selectors.filter(function(selector) { return selector.getIsOutput(); });
	                rulesetNode.selectors = selectors.length ? selectors : (selectors = null);
	                if (selectors) { rulesetNode.joinSelectors(paths, context, selectors); }
	            }
	            if (!selectors) { rulesetNode.rules = null; }
	            rulesetNode.paths = paths;
	        }
	    },
	    visitRulesetOut: function (rulesetNode) {
	        this.contexts.length = this.contexts.length - 1;
	    },
	    visitMedia: function (mediaNode, visitArgs) {
	        var context = this.contexts[this.contexts.length - 1];
	        mediaNode.rules[0].root = (context.length === 0 || context[0].multiMedia);
	    },
	    visitDirective: function (directiveNode, visitArgs) {
	        var context = this.contexts[this.contexts.length - 1];
	        if (directiveNode.rules && directiveNode.rules.length) {
	            directiveNode.rules[0].root = (directiveNode.isRooted || context.length === 0 || null);
	        }
	    }
	};
	
	module.exports = JoinSelectorVisitor;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	var tree = __webpack_require__(311),
	    Visitor = __webpack_require__(310);
	
	var CSSVisitorUtils = function(context) {
	    this._visitor = new Visitor(this);
	    this._context = context;
	};
	
	CSSVisitorUtils.prototype = {
	    containsSilentNonBlockedChild: function(bodyRules) {
	        var rule;
	        if (bodyRules == null) {
	            return false;
	        }
	        for (var r = 0; r < bodyRules.length; r++) {
	            rule = bodyRules[r];
	            if (rule.isSilent && rule.isSilent(this._context) && !rule.blocksVisibility()) {
	                //the directive contains something that was referenced (likely by extend)
	                //therefore it needs to be shown in output too
	                return true;
	            }
	        }
	        return false;
	    },
	
	    keepOnlyVisibleChilds: function(owner) {
	        if (owner == null || owner.rules == null) {
	            return ;
	        }
	
	        owner.rules = owner.rules.filter(function(thing) {
	                return thing.isVisible();
	            }
	        );
	    },
	
	    isEmpty: function(owner) {
	        if (owner == null || owner.rules == null) {
	            return true;
	        }
	        return owner.rules.length === 0;
	    },
	
	    hasVisibleSelector: function(rulesetNode) {
	        if (rulesetNode == null || rulesetNode.paths == null) {
	            return false;
	        }
	        return rulesetNode.paths.length > 0;
	    },
	
	    resolveVisibility: function (node, originalRules) {
	        if (!node.blocksVisibility()) {
	            if (this.isEmpty(node) && !this.containsSilentNonBlockedChild(originalRules)) {
	                return ;
	            }
	
	            return node;
	        }
	
	        var compiledRulesBody = node.rules[0];
	        this.keepOnlyVisibleChilds(compiledRulesBody);
	
	        if (this.isEmpty(compiledRulesBody)) {
	            return ;
	        }
	
	        node.ensureVisibility();
	        node.removeVisibilityBlock();
	
	        return node;
	    },
	
	    isVisibleRuleset: function(rulesetNode) {
	        if (rulesetNode.firstRoot) {
	            return true;
	        }
	
	        if (this.isEmpty(rulesetNode)) {
	            return false;
	        }
	
	        if (!rulesetNode.root && !this.hasVisibleSelector(rulesetNode)) {
	            return false;
	        }
	
	        return true;
	    }
	
	};
	
	var ToCSSVisitor = function(context) {
	    this._visitor = new Visitor(this);
	    this._context = context;
	    this.utils = new CSSVisitorUtils(context);
	};
	
	ToCSSVisitor.prototype = {
	    isReplacing: true,
	    run: function (root) {
	        return this._visitor.visit(root);
	    },
	
	    visitRule: function (ruleNode, visitArgs) {
	        if (ruleNode.blocksVisibility() || ruleNode.variable) {
	            return;
	        }
	        return ruleNode;
	    },
	
	    visitMixinDefinition: function (mixinNode, visitArgs) {
	        // mixin definitions do not get eval'd - this means they keep state
	        // so we have to clear that state here so it isn't used if toCSS is called twice
	        mixinNode.frames = [];
	    },
	
	    visitExtend: function (extendNode, visitArgs) {
	    },
	
	    visitComment: function (commentNode, visitArgs) {
	        if (commentNode.blocksVisibility() || commentNode.isSilent(this._context)) {
	            return;
	        }
	        return commentNode;
	    },
	
	    visitMedia: function(mediaNode, visitArgs) {
	        var originalRules = mediaNode.rules[0].rules;
	        mediaNode.accept(this._visitor);
	        visitArgs.visitDeeper = false;
	
	        return this.utils.resolveVisibility(mediaNode, originalRules);
	    },
	
	    visitImport: function (importNode, visitArgs) {
	        if (importNode.blocksVisibility()) {
	            return ;
	        }
	        return importNode;
	    },
	
	    visitDirective: function(directiveNode, visitArgs) {
	        if (directiveNode.rules && directiveNode.rules.length) {
	            return this.visitDirectiveWithBody(directiveNode, visitArgs);
	        } else {
	            return this.visitDirectiveWithoutBody(directiveNode, visitArgs);
	        }
	    },
	
	    visitDirectiveWithBody: function(directiveNode, visitArgs) {
	        //if there is only one nested ruleset and that one has no path, then it is
	        //just fake ruleset
	        function hasFakeRuleset(directiveNode) {
	            var bodyRules = directiveNode.rules;
	            return bodyRules.length === 1 && (!bodyRules[0].paths || bodyRules[0].paths.length === 0);
	        }
	        function getBodyRules(directiveNode) {
	            var nodeRules = directiveNode.rules;
	            if (hasFakeRuleset(directiveNode)) {
	                return nodeRules[0].rules;
	            }
	
	            return nodeRules;
	        }
	        //it is still true that it is only one ruleset in array
	        //this is last such moment
	        //process childs
	        var originalRules = getBodyRules(directiveNode);
	        directiveNode.accept(this._visitor);
	        visitArgs.visitDeeper = false;
	
	        if (!this.utils.isEmpty(directiveNode)) {
	            this._mergeRules(directiveNode.rules[0].rules);
	        }
	
	        return this.utils.resolveVisibility(directiveNode, originalRules);
	    },
	
	    visitDirectiveWithoutBody: function(directiveNode, visitArgs) {
	        if (directiveNode.blocksVisibility()) {
	            return;
	        }
	
	        if (directiveNode.name === "@charset") {
	            // Only output the debug info together with subsequent @charset definitions
	            // a comment (or @media statement) before the actual @charset directive would
	            // be considered illegal css as it has to be on the first line
	            if (this.charset) {
	                if (directiveNode.debugInfo) {
	                    var comment = new tree.Comment("/* " + directiveNode.toCSS(this._context).replace(/\n/g, "") + " */\n");
	                    comment.debugInfo = directiveNode.debugInfo;
	                    return this._visitor.visit(comment);
	                }
	                return;
	            }
	            this.charset = true;
	        }
	
	        return directiveNode;
	    },
	
	    checkValidNodes: function(rules, isRoot) {
	        if (!rules) {
	            return;
	        }
	
	        for (var i = 0; i < rules.length; i++) {
	            var ruleNode = rules[i];
	            if (isRoot && ruleNode instanceof tree.Rule && !ruleNode.variable) {
	                throw { message: "Properties must be inside selector blocks. They cannot be in the root",
	                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};
	            }
	            if (ruleNode instanceof tree.Call) {
	                throw { message: "Function '" + ruleNode.name + "' is undefined",
	                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};
	            }
	            if (ruleNode.type && !ruleNode.allowRoot) {
	                throw { message: ruleNode.type + " node returned by a function is not valid here",
	                    index: ruleNode.index, filename: ruleNode.currentFileInfo && ruleNode.currentFileInfo.filename};
	            }
	        }
	    },
	
	    visitRuleset: function (rulesetNode, visitArgs) {
	        //at this point rulesets are nested into each other
	        var rule, rulesets = [];
	
	        this.checkValidNodes(rulesetNode.rules, rulesetNode.firstRoot);
	
	        if (! rulesetNode.root) {
	            //remove invisible paths
	            this._compileRulesetPaths(rulesetNode);
	
	            // remove rulesets from this ruleset body and compile them separately
	            var nodeRules = rulesetNode.rules, nodeRuleCnt = nodeRules ? nodeRules.length : 0;
	            for (var i = 0; i < nodeRuleCnt; ) {
	                rule = nodeRules[i];
	                if (rule && rule.rules) {
	                    // visit because we are moving them out from being a child
	                    rulesets.push(this._visitor.visit(rule));
	                    nodeRules.splice(i, 1);
	                    nodeRuleCnt--;
	                    continue;
	                }
	                i++;
	            }
	            // accept the visitor to remove rules and refactor itself
	            // then we can decide nogw whether we want it or not
	            // compile body
	            if (nodeRuleCnt > 0) {
	                rulesetNode.accept(this._visitor);
	            } else {
	                rulesetNode.rules = null;
	            }
	            visitArgs.visitDeeper = false;
	
	        } else { //if (! rulesetNode.root) {
	            rulesetNode.accept(this._visitor);
	            visitArgs.visitDeeper = false;
	        }
	
	        if (rulesetNode.rules) {
	            this._mergeRules(rulesetNode.rules);
	            this._removeDuplicateRules(rulesetNode.rules);
	        }
	
	        //now decide whether we keep the ruleset
	        if (this.utils.isVisibleRuleset(rulesetNode)) {
	            rulesetNode.ensureVisibility();
	            rulesets.splice(0, 0, rulesetNode);
	        }
	
	        if (rulesets.length === 1) {
	            return rulesets[0];
	        }
	        return rulesets;
	    },
	
	    _compileRulesetPaths: function(rulesetNode) {
	        if (rulesetNode.paths) {
	            rulesetNode.paths = rulesetNode.paths
	                .filter(function(p) {
	                    var i;
	                    if (p[0].elements[0].combinator.value === ' ') {
	                        p[0].elements[0].combinator = new(tree.Combinator)('');
	                    }
	                    for (i = 0; i < p.length; i++) {
	                        if (p[i].isVisible() && p[i].getIsOutput()) {
	                            return true;
	                        }
	                    }
	                    return false;
	                });
	        }
	    },
	
	    _removeDuplicateRules: function(rules) {
	        if (!rules) { return; }
	
	        // remove duplicates
	        var ruleCache = {},
	            ruleList, rule, i;
	
	        for (i = rules.length - 1; i >= 0 ; i--) {
	            rule = rules[i];
	            if (rule instanceof tree.Rule) {
	                if (!ruleCache[rule.name]) {
	                    ruleCache[rule.name] = rule;
	                } else {
	                    ruleList = ruleCache[rule.name];
	                    if (ruleList instanceof tree.Rule) {
	                        ruleList = ruleCache[rule.name] = [ruleCache[rule.name].toCSS(this._context)];
	                    }
	                    var ruleCSS = rule.toCSS(this._context);
	                    if (ruleList.indexOf(ruleCSS) !== -1) {
	                        rules.splice(i, 1);
	                    } else {
	                        ruleList.push(ruleCSS);
	                    }
	                }
	            }
	        }
	    },
	
	    _mergeRules: function (rules) {
	        if (!rules) { return; }
	
	        var groups = {},
	            parts,
	            rule,
	            key;
	
	        for (var i = 0; i < rules.length; i++) {
	            rule = rules[i];
	
	            if ((rule instanceof tree.Rule) && rule.merge) {
	                key = [rule.name,
	                    rule.important ? "!" : ""].join(",");
	
	                if (!groups[key]) {
	                    groups[key] = [];
	                } else {
	                    rules.splice(i--, 1);
	                }
	
	                groups[key].push(rule);
	            }
	        }
	
	        Object.keys(groups).map(function (k) {
	
	            function toExpression(values) {
	                return new (tree.Expression)(values.map(function (p) {
	                    return p.value;
	                }));
	            }
	
	            function toValue(values) {
	                return new (tree.Value)(values.map(function (p) {
	                    return p;
	                }));
	            }
	
	            parts = groups[k];
	
	            if (parts.length > 1) {
	                rule = parts[0];
	                var spacedGroups = [];
	                var lastSpacedGroup = [];
	                parts.map(function (p) {
	                    if (p.merge === "+") {
	                        if (lastSpacedGroup.length > 0) {
	                            spacedGroups.push(toExpression(lastSpacedGroup));
	                        }
	                        lastSpacedGroup = [];
	                    }
	                    lastSpacedGroup.push(p);
	                });
	                spacedGroups.push(toExpression(lastSpacedGroup));
	                rule.value = toValue(spacedGroups);
	            }
	        });
	    },
	
	    visitAnonymous: function(anonymousNode, visitArgs) {
	        if (anonymousNode.blocksVisibility()) {
	            return ;
	        }
	        anonymousNode.accept(this._visitor);
	        return anonymousNode;
	    }
	};
	
	module.exports = ToCSSVisitor;


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	var contexts = __webpack_require__(303),
	    Parser = __webpack_require__(339),
	    FunctionImporter = __webpack_require__(342);
	
	module.exports = function(environment) {
	
	    // FileInfo = {
	    //  'relativeUrls' - option - whether to adjust URL's to be relative
	    //  'filename' - full resolved filename of current file
	    //  'rootpath' - path to append to normal URLs for this node
	    //  'currentDirectory' - path to the current file, absolute
	    //  'rootFilename' - filename of the base file
	    //  'entryPath' - absolute path to the entry file
	    //  'reference' - whether the file should not be output and only output parts that are referenced
	
	    var ImportManager = function(context, rootFileInfo) {
	        this.rootFilename = rootFileInfo.filename;
	        this.paths = context.paths || [];  // Search paths, when importing
	        this.contents = {};             // map - filename to contents of all the files
	        this.contentsIgnoredChars = {}; // map - filename to lines at the beginning of each file to ignore
	        this.mime = context.mime;
	        this.error = null;
	        this.context = context;
	        // Deprecated? Unused outside of here, could be useful.
	        this.queue = [];        // Files which haven't been imported yet
	        this.files = {};        // Holds the imported parse trees.
	    };
	    /**
	     * Add an import to be imported
	     * @param path - the raw path
	     * @param tryAppendLessExtension - whether to try appending the less extension (if the path has no extension)
	     * @param currentFileInfo - the current file info (used for instance to work out relative paths)
	     * @param importOptions - import options
	     * @param callback - callback for when it is imported
	     */
	    ImportManager.prototype.push = function (path, tryAppendLessExtension, currentFileInfo, importOptions, callback) {
	        var importManager = this;
	        this.queue.push(path);
	
	        var fileParsedFunc = function (e, root, fullPath) {
	            importManager.queue.splice(importManager.queue.indexOf(path), 1); // Remove the path from the queue
	
	            var importedEqualsRoot = fullPath === importManager.rootFilename;
	            if (importOptions.optional && e) {
	                callback(null, {rules:[]}, false, null);
	            }
	            else {
	                importManager.files[fullPath] = root;
	                if (e && !importManager.error) { importManager.error = e; }
	                callback(e, root, importedEqualsRoot, fullPath);
	            }
	        };
	
	        var newFileInfo = {
	            relativeUrls: this.context.relativeUrls,
	            entryPath: currentFileInfo.entryPath,
	            rootpath: currentFileInfo.rootpath,
	            rootFilename: currentFileInfo.rootFilename
	        };
	
	        var fileManager = environment.getFileManager(path, currentFileInfo.currentDirectory, this.context, environment);
	
	        if (!fileManager) {
	            fileParsedFunc({ message: "Could not find a file-manager for " + path });
	            return;
	        }
	
	        if (tryAppendLessExtension) {
	            path = fileManager.tryAppendExtension(path, importOptions.plugin ? ".js" : ".less");
	        }
	
	        var loadFileCallback = function(loadedFile) {
	            var resolvedFilename = loadedFile.filename,
	                contents = loadedFile.contents.replace(/^\uFEFF/, '');
	
	            // Pass on an updated rootpath if path of imported file is relative and file
	            // is in a (sub|sup) directory
	            //
	            // Examples:
	            // - If path of imported file is 'module/nav/nav.less' and rootpath is 'less/',
	            //   then rootpath should become 'less/module/nav/'
	            // - If path of imported file is '../mixins.less' and rootpath is 'less/',
	            //   then rootpath should become 'less/../'
	            newFileInfo.currentDirectory = fileManager.getPath(resolvedFilename);
	            if (newFileInfo.relativeUrls) {
	                newFileInfo.rootpath = fileManager.join(
	                    (importManager.context.rootpath || ""),
	                    fileManager.pathDiff(newFileInfo.currentDirectory, newFileInfo.entryPath));
	
	                if (!fileManager.isPathAbsolute(newFileInfo.rootpath) && fileManager.alwaysMakePathsAbsolute()) {
	                    newFileInfo.rootpath = fileManager.join(newFileInfo.entryPath, newFileInfo.rootpath);
	                }
	            }
	            newFileInfo.filename = resolvedFilename;
	
	            var newEnv = new contexts.Parse(importManager.context);
	
	            newEnv.processImports = false;
	            importManager.contents[resolvedFilename] = contents;
	
	            if (currentFileInfo.reference || importOptions.reference) {
	                newFileInfo.reference = true;
	            }
	
	            if (importOptions.plugin) {
	                new FunctionImporter(newEnv, newFileInfo).eval(contents, function (e, root) {
	                    fileParsedFunc(e, root, resolvedFilename);
	                });
	            } else if (importOptions.inline) {
	                fileParsedFunc(null, contents, resolvedFilename);
	            } else {
	                new Parser(newEnv, importManager, newFileInfo).parse(contents, function (e, root) {
	                    fileParsedFunc(e, root, resolvedFilename);
	                });
	            }
	        };
	
	        var promise = fileManager.loadFile(path, currentFileInfo.currentDirectory, this.context, environment,
	            function(err, loadedFile) {
	            if (err) {
	                fileParsedFunc(err);
	            } else {
	                loadFileCallback(loadedFile);
	            }
	        });
	        if (promise) {
	            promise.then(loadFileCallback, fileParsedFunc);
	        }
	    };
	    return ImportManager;
	};


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	var LessError = __webpack_require__(306),
	    tree = __webpack_require__(311),
	    visitors = __webpack_require__(309),
	    getParserInput = __webpack_require__(340),
	    utils = __webpack_require__(307);
	
	//
	// less.js - parser
	//
	//    A relatively straight-forward predictive parser.
	//    There is no tokenization/lexing stage, the input is parsed
	//    in one sweep.
	//
	//    To make the parser fast enough to run in the browser, several
	//    optimization had to be made:
	//
	//    - Matching and slicing on a huge input is often cause of slowdowns.
	//      The solution is to chunkify the input into smaller strings.
	//      The chunks are stored in the `chunks` var,
	//      `j` holds the current chunk index, and `currentPos` holds
	//      the index of the current chunk in relation to `input`.
	//      This gives us an almost 4x speed-up.
	//
	//    - In many cases, we don't need to match individual tokens;
	//      for example, if a value doesn't hold any variables, operations
	//      or dynamic references, the parser can effectively 'skip' it,
	//      treating it as a literal.
	//      An example would be '1px solid #000' - which evaluates to itself,
	//      we don't need to know what the individual components are.
	//      The drawback, of course is that you don't get the benefits of
	//      syntax-checking on the CSS. This gives us a 50% speed-up in the parser,
	//      and a smaller speed-up in the code-gen.
	//
	//
	//    Token matching is done with the `$` function, which either takes
	//    a terminal string or regexp, or a non-terminal function to call.
	//    It also takes care of moving all the indices forwards.
	//`
	//
	var Parser = function Parser(context, imports, fileInfo) {
	    var parsers,
	        parserInput = getParserInput();
	
	    function error(msg, type) {
	        throw new LessError(
	            {
	                index: parserInput.i,
	                filename: fileInfo.filename,
	                type: type || 'Syntax',
	                message: msg
	            },
	            imports
	        );
	    }
	
	    function expect(arg, msg, index) {
	        // some older browsers return typeof 'function' for RegExp
	        var result = (arg instanceof Function) ? arg.call(parsers) : parserInput.$re(arg);
	        if (result) {
	            return result;
	        }
	        error(msg || (typeof arg === 'string' ? "expected '" + arg + "' got '" + parserInput.currentChar() + "'"
	                                               : "unexpected token"));
	    }
	
	    // Specialization of expect()
	    function expectChar(arg, msg) {
	        if (parserInput.$char(arg)) {
	            return arg;
	        }
	        error(msg || "expected '" + arg + "' got '" + parserInput.currentChar() + "'");
	    }
	
	    function getDebugInfo(index) {
	        var filename = fileInfo.filename;
	
	        return {
	            lineNumber: utils.getLocation(index, parserInput.getInput()).line + 1,
	            fileName: filename
	        };
	    }
	
	    //
	    // The Parser
	    //
	    return {
	
	        //
	        // Parse an input string into an abstract syntax tree,
	        // @param str A string containing 'less' markup
	        // @param callback call `callback` when done.
	        // @param [additionalData] An optional map which can contains vars - a map (key, value) of variables to apply
	        //
	        parse: function (str, callback, additionalData) {
	            var root, error = null, globalVars, modifyVars, ignored, preText = "";
	
	            globalVars = (additionalData && additionalData.globalVars) ? Parser.serializeVars(additionalData.globalVars) + '\n' : '';
	            modifyVars = (additionalData && additionalData.modifyVars) ? '\n' + Parser.serializeVars(additionalData.modifyVars) : '';
	
	            if (context.pluginManager) {
	                var preProcessors = context.pluginManager.getPreProcessors();
	                for (var i = 0; i < preProcessors.length; i++) {
	                    str = preProcessors[i].process(str, { context: context, imports: imports, fileInfo: fileInfo });
	                }
	            }
	
	            if (globalVars || (additionalData && additionalData.banner)) {
	                preText = ((additionalData && additionalData.banner) ? additionalData.banner : "") + globalVars;
	                ignored = imports.contentsIgnoredChars;
	                ignored[fileInfo.filename] = ignored[fileInfo.filename] || 0;
	                ignored[fileInfo.filename] += preText.length;
	            }
	
	            str = str.replace(/\r\n?/g, '\n');
	            // Remove potential UTF Byte Order Mark
	            str = preText + str.replace(/^\uFEFF/, '') + modifyVars;
	            imports.contents[fileInfo.filename] = str;
	
	            // Start with the primary rule.
	            // The whole syntax tree is held under a Ruleset node,
	            // with the `root` property set to true, so no `{}` are
	            // output. The callback is called when the input is parsed.
	            try {
	                parserInput.start(str, context.chunkInput, function fail(msg, index) {
	                    throw new LessError({
	                        index: index,
	                        type: 'Parse',
	                        message: msg,
	                        filename: fileInfo.filename
	                    }, imports);
	                });
	
	                root = new(tree.Ruleset)(null, this.parsers.primary());
	                root.root = true;
	                root.firstRoot = true;
	            } catch (e) {
	                return callback(new LessError(e, imports, fileInfo.filename));
	            }
	
	            // If `i` is smaller than the `input.length - 1`,
	            // it means the parser wasn't able to parse the whole
	            // string, so we've got a parsing error.
	            //
	            // We try to extract a \n delimited string,
	            // showing the line where the parse error occurred.
	            // We split it up into two parts (the part which parsed,
	            // and the part which didn't), so we can color them differently.
	            var endInfo = parserInput.end();
	            if (!endInfo.isFinished) {
	
	                var message = endInfo.furthestPossibleErrorMessage;
	
	                if (!message) {
	                    message = "Unrecognised input";
	                    if (endInfo.furthestChar === '}') {
	                        message += ". Possibly missing opening '{'";
	                    } else if (endInfo.furthestChar === ')') {
	                        message += ". Possibly missing opening '('";
	                    } else if (endInfo.furthestReachedEnd) {
	                        message += ". Possibly missing something";
	                    }
	                }
	
	                error = new LessError({
	                    type: "Parse",
	                    message: message,
	                    index: endInfo.furthest,
	                    filename: fileInfo.filename
	                }, imports);
	            }
	
	            var finish = function (e) {
	                e = error || e || imports.error;
	
	                if (e) {
	                    if (!(e instanceof LessError)) {
	                        e = new LessError(e, imports, fileInfo.filename);
	                    }
	
	                    return callback(e);
	                }
	                else {
	                    return callback(null, root);
	                }
	            };
	
	            if (context.processImports !== false) {
	                new visitors.ImportVisitor(imports, finish)
	                    .run(root);
	            } else {
	                return finish();
	            }
	        },
	
	        //
	        // Here in, the parsing rules/functions
	        //
	        // The basic structure of the syntax tree generated is as follows:
	        //
	        //   Ruleset ->  Rule -> Value -> Expression -> Entity
	        //
	        // Here's some Less code:
	        //
	        //    .class {
	        //      color: #fff;
	        //      border: 1px solid #000;
	        //      width: @w + 4px;
	        //      > .child {...}
	        //    }
	        //
	        // And here's what the parse tree might look like:
	        //
	        //     Ruleset (Selector '.class', [
	        //         Rule ("color",  Value ([Expression [Color #fff]]))
	        //         Rule ("border", Value ([Expression [Dimension 1px][Keyword "solid"][Color #000]]))
	        //         Rule ("width",  Value ([Expression [Operation " + " [Variable "@w"][Dimension 4px]]]))
	        //         Ruleset (Selector [Element '>', '.child'], [...])
	        //     ])
	        //
	        //  In general, most rules will try to parse a token with the `$re()` function, and if the return
	        //  value is truly, will return a new node, of the relevant type. Sometimes, we need to check
	        //  first, before parsing, that's when we use `peek()`.
	        //
	        parsers: parsers = {
	            //
	            // The `primary` rule is the *entry* and *exit* point of the parser.
	            // The rules here can appear at any level of the parse tree.
	            //
	            // The recursive nature of the grammar is an interplay between the `block`
	            // rule, which represents `{ ... }`, the `ruleset` rule, and this `primary` rule,
	            // as represented by this simplified grammar:
	            //
	            //     primary  →  (ruleset | rule)+
	            //     ruleset  →  selector+ block
	            //     block    →  '{' primary '}'
	            //
	            // Only at one point is the primary rule not called from the
	            // block rule: at the root level.
	            //
	            primary: function () {
	                var mixin = this.mixin, root = [], node;
	
	                while (true) {
	                    while (true) {
	                        node = this.comment();
	                        if (!node) { break; }
	                        root.push(node);
	                    }
	                    // always process comments before deciding if finished
	                    if (parserInput.finished) {
	                        break;
	                    }
	                    if (parserInput.peek('}')) {
	                        break;
	                    }
	
	                    node = this.extendRule();
	                    if (node) {
	                        root = root.concat(node);
	                        continue;
	                    }
	
	                    node = mixin.definition() || this.rule() || this.ruleset() ||
	                        mixin.call() || this.rulesetCall() || this.entities.call() || this.directive();
	                    if (node) {
	                        root.push(node);
	                    } else {
	                        var foundSemiColon = false;
	                        while (parserInput.$char(";")) {
	                            foundSemiColon = true;
	                        }
	                        if (!foundSemiColon) {
	                            break;
	                        }
	                    }
	                }
	
	                return root;
	            },
	
	            // comments are collected by the main parsing mechanism and then assigned to nodes
	            // where the current structure allows it
	            comment: function () {
	                if (parserInput.commentStore.length) {
	                    var comment = parserInput.commentStore.shift();
	                    return new(tree.Comment)(comment.text, comment.isLineComment, comment.index, fileInfo);
	                }
	            },
	
	            //
	            // Entities are tokens which can be found inside an Expression
	            //
	            entities: {
	                //
	                // A string, which supports escaping " and '
	                //
	                //     "milky way" 'he\'s the one!'
	                //
	                quoted: function () {
	                    var str, index = parserInput.i, isEscaped = false;
	
	                    parserInput.save();
	                    if (parserInput.$char("~")) {
	                        isEscaped = true;
	                    }
	                    str = parserInput.$quoted();
	                    if (!str) {
	                        parserInput.restore();
	                        return;
	                    }
	                    parserInput.forget();
	
	                    return new(tree.Quoted)(str.charAt(0), str.substr(1, str.length - 2), isEscaped, index, fileInfo);
	                },
	
	                //
	                // A catch-all word, such as:
	                //
	                //     black border-collapse
	                //
	                keyword: function () {
	                    var k = parserInput.$char("%") || parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]*/);
	                    if (k) {
	                        return tree.Color.fromKeyword(k) || new(tree.Keyword)(k);
	                    }
	                },
	
	                //
	                // A function call
	                //
	                //     rgb(255, 0, 255)
	                //
	                // We also try to catch IE's `alpha()`, but let the `alpha` parser
	                // deal with the details.
	                //
	                // The arguments are parsed with the `entities.arguments` parser.
	                //
	                call: function () {
	                    var name, nameLC, args, alpha, index = parserInput.i;
	
	                    // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18
	                    if (parserInput.peek(/^url\(/i)) {
	                        return;
	                    }
	
	                    parserInput.save();
	
	                    name = parserInput.$re(/^([\w-]+|%|progid:[\w\.]+)\(/);
	                    if (!name) { parserInput.forget(); return; }
	
	                    name = name[1];
	                    nameLC = name.toLowerCase();
	
	                    if (nameLC === 'alpha') {
	                        alpha = parsers.alpha();
	                        if (alpha) {
	                            parserInput.forget();
	                            return alpha;
	                        }
	                    }
	
	                    args = this.arguments();
	
	                    if (! parserInput.$char(')')) {
	                        parserInput.restore("Could not parse call arguments or missing ')'");
	                        return;
	                    }
	
	                    parserInput.forget();
	                    return new(tree.Call)(name, args, index, fileInfo);
	                },
	                arguments: function () {
	                    var argsSemiColon = [], argsComma = [],
	                        expressions = [],
	                        isSemiColonSeparated, value, arg;
	
	                    parserInput.save();
	
	                    while (true) {
	
	                        arg = parsers.detachedRuleset() || this.assignment() || parsers.expression();
	
	                        if (!arg) {
	                            break;
	                        }
	
	                        value = arg;
	
	                        if (arg.value && arg.value.length == 1) {
	                            value = arg.value[0];
	                        }
	
	                        if (value) {
	                            expressions.push(value);
	                        }
	
	                        argsComma.push(value);
	
	                        if (parserInput.$char(',')) {
	                            continue;
	                        }
	
	                        if (parserInput.$char(';') || isSemiColonSeparated) {
	
	                            isSemiColonSeparated = true;
	
	                            if (expressions.length > 1) {
	                                value = new(tree.Value)(expressions);
	                            }
	                            argsSemiColon.push(value);
	
	                            expressions = [];
	                        }
	                    }
	
	                    parserInput.forget();
	                    return isSemiColonSeparated ? argsSemiColon : argsComma;
	                },
	                literal: function () {
	                    return this.dimension() ||
	                           this.color() ||
	                           this.quoted() ||
	                           this.unicodeDescriptor();
	                },
	
	                // Assignments are argument entities for calls.
	                // They are present in ie filter properties as shown below.
	                //
	                //     filter: progid:DXImageTransform.Microsoft.Alpha( *opacity=50* )
	                //
	
	                assignment: function () {
	                    var key, value;
	                    parserInput.save();
	                    key = parserInput.$re(/^\w+(?=\s?=)/i);
	                    if (!key) {
	                        parserInput.restore();
	                        return;
	                    }
	                    if (!parserInput.$char('=')) {
	                        parserInput.restore();
	                        return;
	                    }
	                    value = parsers.entity();
	                    if (value) {
	                        parserInput.forget();
	                        return new(tree.Assignment)(key, value);
	                    } else {
	                        parserInput.restore();
	                    }
	                },
	
	                //
	                // Parse url() tokens
	                //
	                // We use a specific rule for urls, because they don't really behave like
	                // standard function calls. The difference is that the argument doesn't have
	                // to be enclosed within a string, so it can't be parsed as an Expression.
	                //
	                url: function () {
	                    var value, index = parserInput.i;
	
	                    parserInput.autoCommentAbsorb = false;
	
	                    if (!parserInput.$str("url(")) {
	                        parserInput.autoCommentAbsorb = true;
	                        return;
	                    }
	
	                    value = this.quoted() || this.variable() ||
	                            parserInput.$re(/^(?:(?:\\[\(\)'"])|[^\(\)'"])+/) || "";
	
	                    parserInput.autoCommentAbsorb = true;
	
	                    expectChar(')');
	
	                    return new(tree.URL)((value.value != null || value instanceof tree.Variable) ?
	                                        value : new(tree.Anonymous)(value), index, fileInfo);
	                },
	
	                //
	                // A Variable entity, such as `@fink`, in
	                //
	                //     width: @fink + 2px
	                //
	                // We use a different parser for variable definitions,
	                // see `parsers.variable`.
	                //
	                variable: function () {
	                    var name, index = parserInput.i;
	
	                    if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^@@?[\w-]+/))) {
	                        return new(tree.Variable)(name, index, fileInfo);
	                    }
	                },
	
	                // A variable entity using the protective {} e.g. @{var}
	                variableCurly: function () {
	                    var curly, index = parserInput.i;
	
	                    if (parserInput.currentChar() === '@' && (curly = parserInput.$re(/^@\{([\w-]+)\}/))) {
	                        return new(tree.Variable)("@" + curly[1], index, fileInfo);
	                    }
	                },
	
	                //
	                // A Hexadecimal color
	                //
	                //     #4F3C2F
	                //
	                // `rgb` and `hsl` colors are parsed through the `entities.call` parser.
	                //
	                color: function () {
	                    var rgb;
	
	                    if (parserInput.currentChar() === '#' && (rgb = parserInput.$re(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})/))) {
	                        // strip colons, brackets, whitespaces and other characters that should not
	                        // definitely be part of color string
	                        var colorCandidateString = rgb.input.match(/^#([\w]+).*/);
	                        colorCandidateString = colorCandidateString[1];
	                        if (!colorCandidateString.match(/^[A-Fa-f0-9]+$/)) { // verify if candidate consists only of allowed HEX characters
	                            error("Invalid HEX color code");
	                        }
	                        return new(tree.Color)(rgb[1], undefined, '#' + colorCandidateString);
	                    }
	                },
	
	                colorKeyword: function () {
	                    parserInput.save();
	                    var autoCommentAbsorb = parserInput.autoCommentAbsorb;
	                    parserInput.autoCommentAbsorb = false;
	                    var k = parserInput.$re(/^[_A-Za-z-][_A-Za-z0-9-]+/);
	                    parserInput.autoCommentAbsorb = autoCommentAbsorb;
	                    if (!k) {
	                        parserInput.forget();
	                        return;
	                    }
	                    parserInput.restore();
	                    var color = tree.Color.fromKeyword(k);
	                    if (color) {
	                        parserInput.$str(k);
	                        return color;
	                    }
	                },
	
	                //
	                // A Dimension, that is, a number and a unit
	                //
	                //     0.5em 95%
	                //
	                dimension: function () {
	                    if (parserInput.peekNotNumeric()) {
	                        return;
	                    }
	
	                    var value = parserInput.$re(/^([+-]?\d*\.?\d+)(%|[a-z_]+)?/i);
	                    if (value) {
	                        return new(tree.Dimension)(value[1], value[2]);
	                    }
	                },
	
	                //
	                // A unicode descriptor, as is used in unicode-range
	                //
	                // U+0??  or U+00A1-00A9
	                //
	                unicodeDescriptor: function () {
	                    var ud;
	
	                    ud = parserInput.$re(/^U\+[0-9a-fA-F?]+(\-[0-9a-fA-F?]+)?/);
	                    if (ud) {
	                        return new(tree.UnicodeDescriptor)(ud[0]);
	                    }
	                },
	
	                //
	                // JavaScript code to be evaluated
	                //
	                //     `window.location.href`
	                //
	                javascript: function () {
	                    var js, index = parserInput.i;
	
	                    parserInput.save();
	
	                    var escape = parserInput.$char("~");
	                    var jsQuote = parserInput.$char("`");
	
	                    if (!jsQuote) {
	                        parserInput.restore();
	                        return;
	                    }
	
	                    js = parserInput.$re(/^[^`]*`/);
	                    if (js) {
	                        parserInput.forget();
	                        return new(tree.JavaScript)(js.substr(0, js.length - 1), Boolean(escape), index, fileInfo);
	                    }
	                    parserInput.restore("invalid javascript definition");
	                }
	            },
	
	            //
	            // The variable part of a variable definition. Used in the `rule` parser
	            //
	            //     @fink:
	            //
	            variable: function () {
	                var name;
	
	                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\w-]+)\s*:/))) { return name[1]; }
	            },
	
	            //
	            // The variable part of a variable definition. Used in the `rule` parser
	            //
	            //     @fink();
	            //
	            rulesetCall: function () {
	                var name;
	
	                if (parserInput.currentChar() === '@' && (name = parserInput.$re(/^(@[\w-]+)\(\s*\)\s*;/))) {
	                    return new tree.RulesetCall(name[1]);
	                }
	            },
	
	            //
	            // extend syntax - used to extend selectors
	            //
	            extend: function(isRule) {
	                var elements, e, index = parserInput.i, option, extendList, extend;
	
	                if (!parserInput.$str(isRule ? "&:extend(" : ":extend(")) {
	                    return;
	                }
	
	                do {
	                    option = null;
	                    elements = null;
	                    while (! (option = parserInput.$re(/^(all)(?=\s*(\)|,))/))) {
	                        e = this.element();
	                        if (!e) {
	                            break;
	                        }
	                        if (elements) {
	                            elements.push(e);
	                        } else {
	                            elements = [ e ];
	                        }
	                    }
	
	                    option = option && option[1];
	                    if (!elements) {
	                        error("Missing target selector for :extend().");
	                    }
	                    extend = new(tree.Extend)(new(tree.Selector)(elements), option, index, fileInfo);
	                    if (extendList) {
	                        extendList.push(extend);
	                    } else {
	                        extendList = [ extend ];
	                    }
	                } while (parserInput.$char(","));
	
	                expect(/^\)/);
	
	                if (isRule) {
	                    expect(/^;/);
	                }
	
	                return extendList;
	            },
	
	            //
	            // extendRule - used in a rule to extend all the parent selectors
	            //
	            extendRule: function() {
	                return this.extend(true);
	            },
	
	            //
	            // Mixins
	            //
	            mixin: {
	                //
	                // A Mixin call, with an optional argument list
	                //
	                //     #mixins > .square(#fff);
	                //     .rounded(4px, black);
	                //     .button;
	                //
	                // The `while` loop is there because mixins can be
	                // namespaced, but we only support the child and descendant
	                // selector for now.
	                //
	                call: function () {
	                    var s = parserInput.currentChar(), important = false, index = parserInput.i, elemIndex,
	                        elements, elem, e, c, args;
	
	                    if (s !== '.' && s !== '#') { return; }
	
	                    parserInput.save(); // stop us absorbing part of an invalid selector
	
	                    while (true) {
	                        elemIndex = parserInput.i;
	                        e = parserInput.$re(/^[#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/);
	                        if (!e) {
	                            break;
	                        }
	                        elem = new(tree.Element)(c, e, elemIndex, fileInfo);
	                        if (elements) {
	                            elements.push(elem);
	                        } else {
	                            elements = [ elem ];
	                        }
	                        c = parserInput.$char('>');
	                    }
	
	                    if (elements) {
	                        if (parserInput.$char('(')) {
	                            args = this.args(true).args;
	                            expectChar(')');
	                        }
	
	                        if (parsers.important()) {
	                            important = true;
	                        }
	
	                        if (parsers.end()) {
	                            parserInput.forget();
	                            return new(tree.mixin.Call)(elements, args, index, fileInfo, important);
	                        }
	                    }
	
	                    parserInput.restore();
	                },
	                args: function (isCall) {
	                    var entities = parsers.entities,
	                        returner = { args:null, variadic: false },
	                        expressions = [], argsSemiColon = [], argsComma = [],
	                        isSemiColonSeparated, expressionContainsNamed, name, nameLoop,
	                        value, arg, expand;
	
	                    parserInput.save();
	
	                    while (true) {
	                        if (isCall) {
	                            arg = parsers.detachedRuleset() || parsers.expression();
	                        } else {
	                            parserInput.commentStore.length = 0;
	                            if (parserInput.$str("...")) {
	                                returner.variadic = true;
	                                if (parserInput.$char(";") && !isSemiColonSeparated) {
	                                    isSemiColonSeparated = true;
	                                }
	                                (isSemiColonSeparated ? argsSemiColon : argsComma)
	                                    .push({ variadic: true });
	                                break;
	                            }
	                            arg = entities.variable() || entities.literal() || entities.keyword();
	                        }
	
	                        if (!arg) {
	                            break;
	                        }
	
	                        nameLoop = null;
	                        if (arg.throwAwayComments) {
	                            arg.throwAwayComments();
	                        }
	                        value = arg;
	                        var val = null;
	
	                        if (isCall) {
	                            // Variable
	                            if (arg.value && arg.value.length == 1) {
	                                val = arg.value[0];
	                            }
	                        } else {
	                            val = arg;
	                        }
	
	                        if (val && val instanceof tree.Variable) {
	                            if (parserInput.$char(':')) {
	                                if (expressions.length > 0) {
	                                    if (isSemiColonSeparated) {
	                                        error("Cannot mix ; and , as delimiter types");
	                                    }
	                                    expressionContainsNamed = true;
	                                }
	
	                                value = parsers.detachedRuleset() || parsers.expression();
	
	                                if (!value) {
	                                    if (isCall) {
	                                        error("could not understand value for named argument");
	                                    } else {
	                                        parserInput.restore();
	                                        returner.args = [];
	                                        return returner;
	                                    }
	                                }
	                                nameLoop = (name = val.name);
	                            } else if (parserInput.$str("...")) {
	                                if (!isCall) {
	                                    returner.variadic = true;
	                                    if (parserInput.$char(";") && !isSemiColonSeparated) {
	                                        isSemiColonSeparated = true;
	                                    }
	                                    (isSemiColonSeparated ? argsSemiColon : argsComma)
	                                        .push({ name: arg.name, variadic: true });
	                                    break;
	                                } else {
	                                    expand = true;
	                                }
	                            } else if (!isCall) {
	                                name = nameLoop = val.name;
	                                value = null;
	                            }
	                        }
	
	                        if (value) {
	                            expressions.push(value);
	                        }
	
	                        argsComma.push({ name:nameLoop, value:value, expand:expand });
	
	                        if (parserInput.$char(',')) {
	                            continue;
	                        }
	
	                        if (parserInput.$char(';') || isSemiColonSeparated) {
	
	                            if (expressionContainsNamed) {
	                                error("Cannot mix ; and , as delimiter types");
	                            }
	
	                            isSemiColonSeparated = true;
	
	                            if (expressions.length > 1) {
	                                value = new(tree.Value)(expressions);
	                            }
	                            argsSemiColon.push({ name:name, value:value, expand:expand });
	
	                            name = null;
	                            expressions = [];
	                            expressionContainsNamed = false;
	                        }
	                    }
	
	                    parserInput.forget();
	                    returner.args = isSemiColonSeparated ? argsSemiColon : argsComma;
	                    return returner;
	                },
	                //
	                // A Mixin definition, with a list of parameters
	                //
	                //     .rounded (@radius: 2px, @color) {
	                //        ...
	                //     }
	                //
	                // Until we have a finer grained state-machine, we have to
	                // do a look-ahead, to make sure we don't have a mixin call.
	                // See the `rule` function for more information.
	                //
	                // We start by matching `.rounded (`, and then proceed on to
	                // the argument list, which has optional default values.
	                // We store the parameters in `params`, with a `value` key,
	                // if there is a value, such as in the case of `@radius`.
	                //
	                // Once we've got our params list, and a closing `)`, we parse
	                // the `{...}` block.
	                //
	                definition: function () {
	                    var name, params = [], match, ruleset, cond, variadic = false;
	                    if ((parserInput.currentChar() !== '.' && parserInput.currentChar() !== '#') ||
	                        parserInput.peek(/^[^{]*\}/)) {
	                        return;
	                    }
	
	                    parserInput.save();
	
	                    match = parserInput.$re(/^([#.](?:[\w-]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+)\s*\(/);
	                    if (match) {
	                        name = match[1];
	
	                        var argInfo = this.args(false);
	                        params = argInfo.args;
	                        variadic = argInfo.variadic;
	
	                        // .mixincall("@{a}");
	                        // looks a bit like a mixin definition..
	                        // also
	                        // .mixincall(@a: {rule: set;});
	                        // so we have to be nice and restore
	                        if (!parserInput.$char(')')) {
	                            parserInput.restore("Missing closing ')'");
	                            return;
	                        }
	
	                        parserInput.commentStore.length = 0;
	
	                        if (parserInput.$str("when")) { // Guard
	                            cond = expect(parsers.conditions, 'expected condition');
	                        }
	
	                        ruleset = parsers.block();
	
	                        if (ruleset) {
	                            parserInput.forget();
	                            return new(tree.mixin.Definition)(name, params, ruleset, cond, variadic);
	                        } else {
	                            parserInput.restore();
	                        }
	                    } else {
	                        parserInput.forget();
	                    }
	                }
	            },
	
	            //
	            // Entities are the smallest recognized token,
	            // and can be found inside a rule's value.
	            //
	            entity: function () {
	                var entities = this.entities;
	
	                return this.comment() || entities.literal() || entities.variable() || entities.url() ||
	                       entities.call()    || entities.keyword()  || entities.javascript();
	            },
	
	            //
	            // A Rule terminator. Note that we use `peek()` to check for '}',
	            // because the `block` rule will be expecting it, but we still need to make sure
	            // it's there, if ';' was omitted.
	            //
	            end: function () {
	                return parserInput.$char(';') || parserInput.peek('}');
	            },
	
	            //
	            // IE's alpha function
	            //
	            //     alpha(opacity=88)
	            //
	            alpha: function () {
	                var value;
	
	                // http://jsperf.com/case-insensitive-regex-vs-strtolower-then-regex/18
	                if (! parserInput.$re(/^opacity=/i)) { return; }
	                value = parserInput.$re(/^\d+/);
	                if (!value) {
	                    value = expect(this.entities.variable, "Could not parse alpha");
	                }
	                expectChar(')');
	                return new(tree.Alpha)(value);
	            },
	
	            //
	            // A Selector Element
	            //
	            //     div
	            //     + h1
	            //     #socks
	            //     input[type="text"]
	            //
	            // Elements are the building blocks for Selectors,
	            // they are made out of a `Combinator` (see combinator rule),
	            // and an element name, such as a tag a class, or `*`.
	            //
	            element: function () {
	                var e, c, v, index = parserInput.i;
	
	                c = this.combinator();
	
	                e = parserInput.$re(/^(?:\d+\.\d+|\d+)%/) ||
	                    parserInput.$re(/^(?:[.#]?|:*)(?:[\w-]|[^\x00-\x9f]|\\(?:[A-Fa-f0-9]{1,6} ?|[^A-Fa-f0-9]))+/) ||
	                    parserInput.$char('*') || parserInput.$char('&') || this.attribute() ||
	                    parserInput.$re(/^\([^&()@]+\)/) ||  parserInput.$re(/^[\.#:](?=@)/) ||
	                    this.entities.variableCurly();
	
	                if (! e) {
	                    parserInput.save();
	                    if (parserInput.$char('(')) {
	                        if ((v = this.selector()) && parserInput.$char(')')) {
	                            e = new(tree.Paren)(v);
	                            parserInput.forget();
	                        } else {
	                            parserInput.restore("Missing closing ')'");
	                        }
	                    } else {
	                        parserInput.forget();
	                    }
	                }
	
	                if (e) { return new(tree.Element)(c, e, index, fileInfo); }
	            },
	
	            //
	            // Combinators combine elements together, in a Selector.
	            //
	            // Because our parser isn't white-space sensitive, special care
	            // has to be taken, when parsing the descendant combinator, ` `,
	            // as it's an empty space. We have to check the previous character
	            // in the input, to see if it's a ` ` character. More info on how
	            // we deal with this in *combinator.js*.
	            //
	            combinator: function () {
	                var c = parserInput.currentChar();
	
	                if (c === '/') {
	                    parserInput.save();
	                    var slashedCombinator = parserInput.$re(/^\/[a-z]+\//i);
	                    if (slashedCombinator) {
	                        parserInput.forget();
	                        return new(tree.Combinator)(slashedCombinator);
	                    }
	                    parserInput.restore();
	                }
	
	                if (c === '>' || c === '+' || c === '~' || c === '|' || c === '^') {
	                    parserInput.i++;
	                    if (c === '^' && parserInput.currentChar() === '^') {
	                        c = '^^';
	                        parserInput.i++;
	                    }
	                    while (parserInput.isWhitespace()) { parserInput.i++; }
	                    return new(tree.Combinator)(c);
	                } else if (parserInput.isWhitespace(-1)) {
	                    return new(tree.Combinator)(" ");
	                } else {
	                    return new(tree.Combinator)(null);
	                }
	            },
	            //
	            // A CSS selector (see selector below)
	            // with less extensions e.g. the ability to extend and guard
	            //
	            lessSelector: function () {
	                return this.selector(true);
	            },
	            //
	            // A CSS Selector
	            //
	            //     .class > div + h1
	            //     li a:hover
	            //
	            // Selectors are made out of one or more Elements, see above.
	            //
	            selector: function (isLess) {
	                var index = parserInput.i, elements, extendList, c, e, allExtends, when, condition;
	
	                while ((isLess && (extendList = this.extend())) || (isLess && (when = parserInput.$str("when"))) || (e = this.element())) {
	                    if (when) {
	                        condition = expect(this.conditions, 'expected condition');
	                    } else if (condition) {
	                        error("CSS guard can only be used at the end of selector");
	                    } else if (extendList) {
	                        if (allExtends) {
	                            allExtends = allExtends.concat(extendList);
	                        } else {
	                            allExtends = extendList;
	                        }
	                    } else {
	                        if (allExtends) { error("Extend can only be used at the end of selector"); }
	                        c = parserInput.currentChar();
	                        if (elements) {
	                            elements.push(e);
	                        } else {
	                            elements = [ e ];
	                        }
	                        e = null;
	                    }
	                    if (c === '{' || c === '}' || c === ';' || c === ',' || c === ')') {
	                        break;
	                    }
	                }
	
	                if (elements) { return new(tree.Selector)(elements, allExtends, condition, index, fileInfo); }
	                if (allExtends) { error("Extend must be used to extend a selector, it cannot be used on its own"); }
	            },
	            attribute: function () {
	                if (! parserInput.$char('[')) { return; }
	
	                var entities = this.entities,
	                    key, val, op;
	
	                if (!(key = entities.variableCurly())) {
	                    key = expect(/^(?:[_A-Za-z0-9-\*]*\|)?(?:[_A-Za-z0-9-]|\\.)+/);
	                }
	
	                op = parserInput.$re(/^[|~*$^]?=/);
	                if (op) {
	                    val = entities.quoted() || parserInput.$re(/^[0-9]+%/) || parserInput.$re(/^[\w-]+/) || entities.variableCurly();
	                }
	
	                expectChar(']');
	
	                return new(tree.Attribute)(key, op, val);
	            },
	
	            //
	            // The `block` rule is used by `ruleset` and `mixin.definition`.
	            // It's a wrapper around the `primary` rule, with added `{}`.
	            //
	            block: function () {
	                var content;
	                if (parserInput.$char('{') && (content = this.primary()) && parserInput.$char('}')) {
	                    return content;
	                }
	            },
	
	            blockRuleset: function() {
	                var block = this.block();
	
	                if (block) {
	                    block = new tree.Ruleset(null, block);
	                }
	                return block;
	            },
	
	            detachedRuleset: function() {
	                var blockRuleset = this.blockRuleset();
	                if (blockRuleset) {
	                    return new tree.DetachedRuleset(blockRuleset);
	                }
	            },
	
	            //
	            // div, .class, body > p {...}
	            //
	            ruleset: function () {
	                var selectors, s, rules, debugInfo;
	
	                parserInput.save();
	
	                if (context.dumpLineNumbers) {
	                    debugInfo = getDebugInfo(parserInput.i);
	                }
	
	                while (true) {
	                    s = this.lessSelector();
	                    if (!s) {
	                        break;
	                    }
	                    if (selectors) {
	                        selectors.push(s);
	                    } else {
	                        selectors = [ s ];
	                    }
	                    parserInput.commentStore.length = 0;
	                    if (s.condition && selectors.length > 1) {
	                        error("Guards are only currently allowed on a single selector.");
	                    }
	                    if (! parserInput.$char(',')) { break; }
	                    if (s.condition) {
	                        error("Guards are only currently allowed on a single selector.");
	                    }
	                    parserInput.commentStore.length = 0;
	                }
	
	                if (selectors && (rules = this.block())) {
	                    parserInput.forget();
	                    var ruleset = new(tree.Ruleset)(selectors, rules, context.strictImports);
	                    if (context.dumpLineNumbers) {
	                        ruleset.debugInfo = debugInfo;
	                    }
	                    return ruleset;
	                } else {
	                    parserInput.restore();
	                }
	            },
	            rule: function (tryAnonymous) {
	                var name, value, startOfRule = parserInput.i, c = parserInput.currentChar(), important, merge, isVariable;
	
	                if (c === '.' || c === '#' || c === '&' || c === ':') { return; }
	
	                parserInput.save();
	
	                name = this.variable() || this.ruleProperty();
	                if (name) {
	                    isVariable = typeof name === "string";
	
	                    if (isVariable) {
	                        value = this.detachedRuleset();
	                    }
	
	                    parserInput.commentStore.length = 0;
	                    if (!value) {
	                        // a name returned by this.ruleProperty() is always an array of the form:
	                        // [string-1, ..., string-n, ""] or [string-1, ..., string-n, "+"]
	                        // where each item is a tree.Keyword or tree.Variable
	                        merge = !isVariable && name.length > 1 && name.pop().value;
	
	                        // prefer to try to parse first if its a variable or we are compressing
	                        // but always fallback on the other one
	                        var tryValueFirst = !tryAnonymous && (context.compress || isVariable);
	
	                        if (tryValueFirst) {
	                            value = this.value();
	                        }
	                        if (!value) {
	                            value = this.anonymousValue();
	                            if (value) {
	                                parserInput.forget();
	                                // anonymous values absorb the end ';' which is required for them to work
	                                return new (tree.Rule)(name, value, false, merge, startOfRule, fileInfo);
	                            }
	                        }
	                        if (!tryValueFirst && !value) {
	                            value = this.value();
	                        }
	
	                        important = this.important();
	                    }
	
	                    if (value && this.end()) {
	                        parserInput.forget();
	                        return new (tree.Rule)(name, value, important, merge, startOfRule, fileInfo);
	                    } else {
	                        parserInput.restore();
	                        if (value && !tryAnonymous) {
	                            return this.rule(true);
	                        }
	                    }
	                } else {
	                    parserInput.forget();
	                }
	            },
	            anonymousValue: function () {
	                var match = parserInput.$re(/^([^@+\/'"*`(;{}-]*);/);
	                if (match) {
	                    return new(tree.Anonymous)(match[1]);
	                }
	            },
	
	            //
	            // An @import directive
	            //
	            //     @import "lib";
	            //
	            // Depending on our environment, importing is done differently:
	            // In the browser, it's an XHR request, in Node, it would be a
	            // file-system operation. The function used for importing is
	            // stored in `import`, which we pass to the Import constructor.
	            //
	            "import": function () {
	                var path, features, index = parserInput.i;
	
	                var dir = parserInput.$re(/^@import?\s+/);
	
	                if (dir) {
	                    var options = (dir ? this.importOptions() : null) || {};
	
	                    if ((path = this.entities.quoted() || this.entities.url())) {
	                        features = this.mediaFeatures();
	
	                        if (!parserInput.$char(';')) {
	                            parserInput.i = index;
	                            error("missing semi-colon or unrecognised media features on import");
	                        }
	                        features = features && new(tree.Value)(features);
	                        return new(tree.Import)(path, features, options, index, fileInfo);
	                    }
	                    else {
	                        parserInput.i = index;
	                        error("malformed import statement");
	                    }
	                }
	            },
	
	            importOptions: function() {
	                var o, options = {}, optionName, value;
	
	                // list of options, surrounded by parens
	                if (! parserInput.$char('(')) { return null; }
	                do {
	                    o = this.importOption();
	                    if (o) {
	                        optionName = o;
	                        value = true;
	                        switch(optionName) {
	                            case "css":
	                                optionName = "less";
	                                value = false;
	                                break;
	                            case "once":
	                                optionName = "multiple";
	                                value = false;
	                                break;
	                        }
	                        options[optionName] = value;
	                        if (! parserInput.$char(',')) { break; }
	                    }
	                } while (o);
	                expectChar(')');
	                return options;
	            },
	
	            importOption: function() {
	                var opt = parserInput.$re(/^(less|css|multiple|once|inline|reference|optional)/);
	                if (opt) {
	                    return opt[1];
	                }
	            },
	
	            mediaFeature: function () {
	                var entities = this.entities, nodes = [], e, p;
	                parserInput.save();
	                do {
	                    e = entities.keyword() || entities.variable();
	                    if (e) {
	                        nodes.push(e);
	                    } else if (parserInput.$char('(')) {
	                        p = this.property();
	                        e = this.value();
	                        if (parserInput.$char(')')) {
	                            if (p && e) {
	                                nodes.push(new(tree.Paren)(new(tree.Rule)(p, e, null, null, parserInput.i, fileInfo, true)));
	                            } else if (e) {
	                                nodes.push(new(tree.Paren)(e));
	                            } else {
	                                error("badly formed media feature definition");
	                            }
	                        } else {
	                            error("Missing closing ')'", "Parse");
	                        }
	                    }
	                } while (e);
	
	                parserInput.forget();
	                if (nodes.length > 0) {
	                    return new(tree.Expression)(nodes);
	                }
	            },
	
	            mediaFeatures: function () {
	                var entities = this.entities, features = [], e;
	                do {
	                    e = this.mediaFeature();
	                    if (e) {
	                        features.push(e);
	                        if (! parserInput.$char(',')) { break; }
	                    } else {
	                        e = entities.variable();
	                        if (e) {
	                            features.push(e);
	                            if (! parserInput.$char(',')) { break; }
	                        }
	                    }
	                } while (e);
	
	                return features.length > 0 ? features : null;
	            },
	
	            media: function () {
	                var features, rules, media, debugInfo, index = parserInput.i;
	
	                if (context.dumpLineNumbers) {
	                    debugInfo = getDebugInfo(index);
	                }
	
	                parserInput.save();
	
	                if (parserInput.$str("@media")) {
	                    features = this.mediaFeatures();
	
	                    rules = this.block();
	
	                    if (!rules) {
	                        error("media definitions require block statements after any features");
	                    }
	
	                    parserInput.forget();
	
	                    media = new(tree.Media)(rules, features, index, fileInfo);
	                    if (context.dumpLineNumbers) {
	                        media.debugInfo = debugInfo;
	                    }
	
	                    return media;
	                }
	
	                parserInput.restore();
	            },
	
	            //
	            // A @plugin directive, used to import compiler extensions dynamically.
	            //
	            //     @plugin "lib";
	            //
	            // Depending on our environment, importing is done differently:
	            // In the browser, it's an XHR request, in Node, it would be a
	            // file-system operation. The function used for importing is
	            // stored in `import`, which we pass to the Import constructor.
	            //
	            plugin: function () {
	                var path,
	                    index = parserInput.i,
	                    dir   = parserInput.$re(/^@plugin?\s+/);
	
	                if (dir) {
	                    var options = { plugin : true };
	
	                    if ((path = this.entities.quoted() || this.entities.url())) {
	
	                        if (!parserInput.$char(';')) {
	                            parserInput.i = index;
	                            error("missing semi-colon on plugin");
	                        }
	
	                        return new(tree.Import)(path, null, options, index, fileInfo);
	                    }
	                    else {
	                        parserInput.i = index;
	                        error("malformed plugin statement");
	                    }
	                }
	            },
	
	            //
	            // A CSS Directive
	            //
	            //     @charset "utf-8";
	            //
	            directive: function () {
	                var index = parserInput.i, name, value, rules, nonVendorSpecificName,
	                    hasIdentifier, hasExpression, hasUnknown, hasBlock = true, isRooted = true;
	
	                if (parserInput.currentChar() !== '@') { return; }
	
	                value = this['import']() || this.plugin() || this.media();
	                if (value) {
	                    return value;
	                }
	
	                parserInput.save();
	
	                name = parserInput.$re(/^@[a-z-]+/);
	
	                if (!name) { return; }
	
	                nonVendorSpecificName = name;
	                if (name.charAt(1) == '-' && name.indexOf('-', 2) > 0) {
	                    nonVendorSpecificName = "@" + name.slice(name.indexOf('-', 2) + 1);
	                }
	
	                switch(nonVendorSpecificName) {
	                    case "@charset":
	                        hasIdentifier = true;
	                        hasBlock = false;
	                        break;
	                    case "@namespace":
	                        hasExpression = true;
	                        hasBlock = false;
	                        break;
	                    case "@keyframes":
	                    case "@counter-style":
	                        hasIdentifier = true;
	                        break;
	                    case "@document":
	                    case "@supports":
	                        hasUnknown = true;
	                        isRooted = false;
	                        break;
	                    default:
	                        hasUnknown = true;
	                        break;
	                }
	
	                parserInput.commentStore.length = 0;
	
	                if (hasIdentifier) {
	                    value = this.entity();
	                    if (!value) {
	                        error("expected " + name + " identifier");
	                    }
	                } else if (hasExpression) {
	                    value = this.expression();
	                    if (!value) {
	                        error("expected " + name + " expression");
	                    }
	                } else if (hasUnknown) {
	                    value = (parserInput.$re(/^[^{;]+/) || '').trim();
	                    hasBlock = (parserInput.currentChar() == '{');
	                    if (value) {
	                        value = new(tree.Anonymous)(value);
	                    }
	                }
	
	                if (hasBlock) {
	                    rules = this.blockRuleset();
	                }
	
	                if (rules || (!hasBlock && value && parserInput.$char(';'))) {
	                    parserInput.forget();
	                    return new (tree.Directive)(name, value, rules, index, fileInfo,
	                        context.dumpLineNumbers ? getDebugInfo(index) : null,
	                        isRooted
	                    );
	                }
	
	                parserInput.restore("directive options not recognised");
	            },
	
	            //
	            // A Value is a comma-delimited list of Expressions
	            //
	            //     font-family: Baskerville, Georgia, serif;
	            //
	            // In a Rule, a Value represents everything after the `:`,
	            // and before the `;`.
	            //
	            value: function () {
	                var e, expressions = [];
	
	                do {
	                    e = this.expression();
	                    if (e) {
	                        expressions.push(e);
	                        if (! parserInput.$char(',')) { break; }
	                    }
	                } while (e);
	
	                if (expressions.length > 0) {
	                    return new(tree.Value)(expressions);
	                }
	            },
	            important: function () {
	                if (parserInput.currentChar() === '!') {
	                    return parserInput.$re(/^! *important/);
	                }
	            },
	            sub: function () {
	                var a, e;
	
	                parserInput.save();
	                if (parserInput.$char('(')) {
	                    a = this.addition();
	                    if (a && parserInput.$char(')')) {
	                        parserInput.forget();
	                        e = new(tree.Expression)([a]);
	                        e.parens = true;
	                        return e;
	                    }
	                    parserInput.restore("Expected ')'");
	                    return;
	                }
	                parserInput.restore();
	            },
	            multiplication: function () {
	                var m, a, op, operation, isSpaced;
	                m = this.operand();
	                if (m) {
	                    isSpaced = parserInput.isWhitespace(-1);
	                    while (true) {
	                        if (parserInput.peek(/^\/[*\/]/)) {
	                            break;
	                        }
	
	                        parserInput.save();
	
	                        op = parserInput.$char('/') || parserInput.$char('*');
	
	                        if (!op) { parserInput.forget(); break; }
	
	                        a = this.operand();
	
	                        if (!a) { parserInput.restore(); break; }
	                        parserInput.forget();
	
	                        m.parensInOp = true;
	                        a.parensInOp = true;
	                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);
	                        isSpaced = parserInput.isWhitespace(-1);
	                    }
	                    return operation || m;
	                }
	            },
	            addition: function () {
	                var m, a, op, operation, isSpaced;
	                m = this.multiplication();
	                if (m) {
	                    isSpaced = parserInput.isWhitespace(-1);
	                    while (true) {
	                        op = parserInput.$re(/^[-+]\s+/) || (!isSpaced && (parserInput.$char('+') || parserInput.$char('-')));
	                        if (!op) {
	                            break;
	                        }
	                        a = this.multiplication();
	                        if (!a) {
	                            break;
	                        }
	
	                        m.parensInOp = true;
	                        a.parensInOp = true;
	                        operation = new(tree.Operation)(op, [operation || m, a], isSpaced);
	                        isSpaced = parserInput.isWhitespace(-1);
	                    }
	                    return operation || m;
	                }
	            },
	            conditions: function () {
	                var a, b, index = parserInput.i, condition;
	
	                a = this.condition();
	                if (a) {
	                    while (true) {
	                        if (!parserInput.peek(/^,\s*(not\s*)?\(/) || !parserInput.$char(',')) {
	                            break;
	                        }
	                        b = this.condition();
	                        if (!b) {
	                            break;
	                        }
	                        condition = new(tree.Condition)('or', condition || a, b, index);
	                    }
	                    return condition || a;
	                }
	            },
	            condition: function () {
	                var result, logical, next;
	                function or() {
	                    return parserInput.$str("or");
	                }
	
	                result = this.conditionAnd(this);
	                if (!result) {
	                    return ;
	                }
	                logical = or();
	                if (logical) {
	                    next = this.condition();
	                    if (next) {
	                        result = new(tree.Condition)(logical, result, next);
	                    } else {
	                        return ;
	                    }
	                }
	                return result;
	            },
	            conditionAnd: function () {
	                var result, logical, next;
	                function insideCondition(me) {
	                    return me.negatedCondition() || me.parenthesisCondition();
	                }
	                function and() {
	                    return parserInput.$str("and");
	                }
	
	                result = insideCondition(this);
	                if (!result) {
	                    return ;
	                }
	                logical = and();
	                if (logical) {
	                    next = this.conditionAnd();
	                    if (next) {
	                        result = new(tree.Condition)(logical, result, next);
	                    } else {
	                        return ;
	                    }
	                }
	                return result;
	            },
	            negatedCondition: function () {
	                if (parserInput.$str("not")) {
	                    var result = this.parenthesisCondition();
	                    if (result) {
	                        result.negate = !result.negate;
	                    }
	                    return result;
	                }
	            },
	            parenthesisCondition: function () {
	                function tryConditionFollowedByParenthesis(me) {
	                    var body;
	                    parserInput.save();
	                    body = me.condition();
	                    if (!body) {
	                        parserInput.restore();
	                        return ;
	                    }
	                    if (!parserInput.$char(')')) {
	                        parserInput.restore();
	                        return ;
	                    }
	                    parserInput.forget();
	                    return body;
	                }
	
	                var body;
	                parserInput.save();
	                if (!parserInput.$str("(")) {
	                    parserInput.restore();
	                    return ;
	                }
	                body = tryConditionFollowedByParenthesis(this);
	                if (body) {
	                    parserInput.forget();
	                    return body;
	                }
	
	                body = this.atomicCondition();
	                if (!body) {
	                    parserInput.restore();
	                    return ;
	                }
	                if (!parserInput.$char(')')) {
	                    parserInput.restore("expected ')' got '" + parserInput.currentChar() + "'");
	                    return ;
	                }
	                parserInput.forget();
	                return body;
	            },
	            atomicCondition: function () {
	                var entities = this.entities, index = parserInput.i, a, b, c, op;
	
	                a = this.addition() || entities.keyword() || entities.quoted();
	                if (a) {
	                    if (parserInput.$char('>')) {
	                        if (parserInput.$char('=')) {
	                            op = ">=";
	                        } else {
	                            op = '>';
	                        }
	                    } else
	                    if (parserInput.$char('<')) {
	                        if (parserInput.$char('=')) {
	                            op = "<=";
	                        } else {
	                            op = '<';
	                        }
	                    } else
	                    if (parserInput.$char('=')) {
	                        if (parserInput.$char('>')) {
	                            op = "=>";
	                        } else if (parserInput.$char('<')) {
	                            op = '=<';
	                        } else {
	                            op = '=';
	                        }
	                    }
	                    if (op) {
	                        b = this.addition() || entities.keyword() || entities.quoted();
	                        if (b) {
	                            c = new(tree.Condition)(op, a, b, index, false);
	                        } else {
	                            error('expected expression');
	                        }
	                    } else {
	                        c = new(tree.Condition)('=', a, new(tree.Keyword)('true'), index, false);
	                    }
	                    return c;
	                }
	            },
	
	            //
	            // An operand is anything that can be part of an operation,
	            // such as a Color, or a Variable
	            //
	            operand: function () {
	                var entities = this.entities, negate;
	
	                if (parserInput.peek(/^-[@\(]/)) {
	                    negate = parserInput.$char('-');
	                }
	
	                var o = this.sub() || entities.dimension() ||
	                        entities.color() || entities.variable() ||
	                        entities.call() || entities.colorKeyword();
	
	                if (negate) {
	                    o.parensInOp = true;
	                    o = new(tree.Negative)(o);
	                }
	
	                return o;
	            },
	
	            //
	            // Expressions either represent mathematical operations,
	            // or white-space delimited Entities.
	            //
	            //     1px solid black
	            //     @var * 2
	            //
	            expression: function () {
	                var entities = [], e, delim;
	
	                do {
	                    e = this.comment();
	                    if (e) {
	                        entities.push(e);
	                        continue;
	                    }
	                    e = this.addition() || this.entity();
	                    if (e) {
	                        entities.push(e);
	                        // operations do not allow keyword "/" dimension (e.g. small/20px) so we support that here
	                        if (!parserInput.peek(/^\/[\/*]/)) {
	                            delim = parserInput.$char('/');
	                            if (delim) {
	                                entities.push(new(tree.Anonymous)(delim));
	                            }
	                        }
	                    }
	                } while (e);
	                if (entities.length > 0) {
	                    return new(tree.Expression)(entities);
	                }
	            },
	            property: function () {
	                var name = parserInput.$re(/^(\*?-?[_a-zA-Z0-9-]+)\s*:/);
	                if (name) {
	                    return name[1];
	                }
	            },
	            ruleProperty: function () {
	                var name = [], index = [], s, k;
	
	                parserInput.save();
	
	                var simpleProperty = parserInput.$re(/^([_a-zA-Z0-9-]+)\s*:/);
	                if (simpleProperty) {
	                    name = [new(tree.Keyword)(simpleProperty[1])];
	                    parserInput.forget();
	                    return name;
	                }
	
	                function match(re) {
	                    var i = parserInput.i,
	                        chunk = parserInput.$re(re);
	                    if (chunk) {
	                        index.push(i);
	                        return name.push(chunk[1]);
	                    }
	                }
	
	                match(/^(\*?)/);
	                while (true) {
	                    if (!match(/^((?:[\w-]+)|(?:@\{[\w-]+\}))/)) {
	                        break;
	                    }
	                }
	
	                if ((name.length > 1) && match(/^((?:\+_|\+)?)\s*:/)) {
	                    parserInput.forget();
	
	                    // at last, we have the complete match now. move forward,
	                    // convert name particles to tree objects and return:
	                    if (name[0] === '') {
	                        name.shift();
	                        index.shift();
	                    }
	                    for (k = 0; k < name.length; k++) {
	                        s = name[k];
	                        name[k] = (s.charAt(0) !== '@') ?
	                            new(tree.Keyword)(s) :
	                            new(tree.Variable)('@' + s.slice(2, -1),
	                                index[k], fileInfo);
	                    }
	                    return name;
	                }
	                parserInput.restore();
	            }
	        }
	    };
	};
	Parser.serializeVars = function(vars) {
	    var s = '';
	
	    for (var name in vars) {
	        if (Object.hasOwnProperty.call(vars, name)) {
	            var value = vars[name];
	            s += ((name[0] === '@') ? '' : '@') + name + ': ' + value +
	                ((String(value).slice(-1) === ';') ? '' : ';');
	        }
	    }
	
	    return s;
	};
	
	module.exports = Parser;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	var chunker = __webpack_require__(341);
	
	module.exports = function() {
	    var input,       // LeSS input string
	        j,           // current chunk
	        saveStack = [],   // holds state for backtracking
	        furthest,    // furthest index the parser has gone to
	        furthestPossibleErrorMessage,// if this is furthest we got to, this is the probably cause
	        chunks,      // chunkified input
	        current,     // current chunk
	        currentPos,  // index of current chunk, in `input`
	        parserInput = {};
	
	    var CHARCODE_SPACE = 32,
	        CHARCODE_TAB = 9,
	        CHARCODE_LF = 10,
	        CHARCODE_CR = 13,
	        CHARCODE_PLUS = 43,
	        CHARCODE_COMMA = 44,
	        CHARCODE_FORWARD_SLASH = 47,
	        CHARCODE_9 = 57;
	
	    function skipWhitespace(length) {
	        var oldi = parserInput.i, oldj = j,
	            curr = parserInput.i - currentPos,
	            endIndex = parserInput.i + current.length - curr,
	            mem = (parserInput.i += length),
	            inp = input,
	            c, nextChar, comment;
	
	        for (; parserInput.i < endIndex; parserInput.i++) {
	            c = inp.charCodeAt(parserInput.i);
	
	            if (parserInput.autoCommentAbsorb && c === CHARCODE_FORWARD_SLASH) {
	                nextChar = inp.charAt(parserInput.i + 1);
	                if (nextChar === '/') {
	                    comment = {index: parserInput.i, isLineComment: true};
	                    var nextNewLine = inp.indexOf("\n", parserInput.i + 2);
	                    if (nextNewLine < 0) {
	                        nextNewLine = endIndex;
	                    }
	                    parserInput.i = nextNewLine;
	                    comment.text = inp.substr(comment.index, parserInput.i - comment.index);
	                    parserInput.commentStore.push(comment);
	                    continue;
	                } else if (nextChar === '*') {
	                    var nextStarSlash = inp.indexOf("*/", parserInput.i + 2);
	                    if (nextStarSlash >= 0) {
	                        comment = {
	                            index: parserInput.i,
	                            text: inp.substr(parserInput.i, nextStarSlash + 2 - parserInput.i),
	                            isLineComment: false
	                        };
	                        parserInput.i += comment.text.length - 1;
	                        parserInput.commentStore.push(comment);
	                        continue;
	                    }
	                }
	                break;
	            }
	
	            if ((c !== CHARCODE_SPACE) && (c !== CHARCODE_LF) && (c !== CHARCODE_TAB) && (c !== CHARCODE_CR)) {
	                break;
	            }
	        }
	
	        current = current.slice(length + parserInput.i - mem + curr);
	        currentPos = parserInput.i;
	
	        if (!current.length) {
	            if (j < chunks.length - 1) {
	                current = chunks[++j];
	                skipWhitespace(0); // skip space at the beginning of a chunk
	                return true; // things changed
	            }
	            parserInput.finished = true;
	        }
	
	        return oldi !== parserInput.i || oldj !== j;
	    }
	
	    parserInput.save = function() {
	        currentPos = parserInput.i;
	        saveStack.push( { current: current, i: parserInput.i, j: j });
	    };
	    parserInput.restore = function(possibleErrorMessage) {
	
	        if (parserInput.i > furthest || (parserInput.i === furthest && possibleErrorMessage && !furthestPossibleErrorMessage)) {
	            furthest = parserInput.i;
	            furthestPossibleErrorMessage = possibleErrorMessage;
	        }
	        var state = saveStack.pop();
	        current = state.current;
	        currentPos = parserInput.i = state.i;
	        j = state.j;
	    };
	    parserInput.forget = function() {
	        saveStack.pop();
	    };
	    parserInput.isWhitespace = function (offset) {
	        var pos = parserInput.i + (offset || 0),
	            code = input.charCodeAt(pos);
	        return (code === CHARCODE_SPACE || code === CHARCODE_CR || code === CHARCODE_TAB || code === CHARCODE_LF);
	    };
	
	    // Specialization of $(tok)
	    parserInput.$re = function(tok) {
	        if (parserInput.i > currentPos) {
	            current = current.slice(parserInput.i - currentPos);
	            currentPos = parserInput.i;
	        }
	
	        var m = tok.exec(current);
	        if (!m) {
	            return null;
	        }
	
	        skipWhitespace(m[0].length);
	        if (typeof m === "string") {
	            return m;
	        }
	
	        return m.length === 1 ? m[0] : m;
	    };
	
	    parserInput.$char = function(tok) {
	        if (input.charAt(parserInput.i) !== tok) {
	            return null;
	        }
	        skipWhitespace(1);
	        return tok;
	    };
	
	    parserInput.$str = function(tok) {
	        var tokLength = tok.length;
	
	        // https://jsperf.com/string-startswith/21
	        for (var i = 0; i < tokLength; i++) {
	            if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {
	                return null;
	            }
	        }
	
	        skipWhitespace(tokLength);
	        return tok;
	    };
	
	    parserInput.$quoted = function() {
	
	        var startChar = input.charAt(parserInput.i);
	        if (startChar !== "'" && startChar !== '"') {
	            return;
	        }
	        var length = input.length,
	            currentPosition = parserInput.i;
	
	        for (var i = 1; i + currentPosition < length; i++) {
	            var nextChar = input.charAt(i + currentPosition);
	            switch(nextChar) {
	                case "\\":
	                    i++;
	                    continue;
	                case "\r":
	                case "\n":
	                    break;
	                case startChar:
	                    var str = input.substr(currentPosition, i + 1);
	                    skipWhitespace(i + 1);
	                    return str;
	                default:
	            }
	        }
	        return null;
	    };
	
	    parserInput.autoCommentAbsorb = true;
	    parserInput.commentStore = [];
	    parserInput.finished = false;
	
	    // Same as $(), but don't change the state of the parser,
	    // just return the match.
	    parserInput.peek = function(tok) {
	        if (typeof tok === 'string') {
	            // https://jsperf.com/string-startswith/21
	            for (var i = 0; i < tok.length; i++) {
	                if (input.charAt(parserInput.i + i) !== tok.charAt(i)) {
	                    return false;
	                }
	            }
	            return true;
	        } else {
	            return tok.test(current);
	        }
	    };
	
	    // Specialization of peek()
	    // TODO remove or change some currentChar calls to peekChar
	    parserInput.peekChar = function(tok) {
	        return input.charAt(parserInput.i) === tok;
	    };
	
	    parserInput.currentChar = function() {
	        return input.charAt(parserInput.i);
	    };
	
	    parserInput.getInput = function() {
	        return input;
	    };
	
	    parserInput.peekNotNumeric = function() {
	        var c = input.charCodeAt(parserInput.i);
	        //Is the first char of the dimension 0-9, '.', '+' or '-'
	        return (c > CHARCODE_9 || c < CHARCODE_PLUS) || c === CHARCODE_FORWARD_SLASH || c === CHARCODE_COMMA;
	    };
	
	    parserInput.start = function(str, chunkInput, failFunction) {
	        input = str;
	        parserInput.i = j = currentPos = furthest = 0;
	
	        // chunking apparently makes things quicker (but my tests indicate
	        // it might actually make things slower in node at least)
	        // and it is a non-perfect parse - it can't recognise
	        // unquoted urls, meaning it can't distinguish comments
	        // meaning comments with quotes or {}() in them get 'counted'
	        // and then lead to parse errors.
	        // In addition if the chunking chunks in the wrong place we might
	        // not be able to parse a parser statement in one go
	        // this is officially deprecated but can be switched on via an option
	        // in the case it causes too much performance issues.
	        if (chunkInput) {
	            chunks = chunker(str, failFunction);
	        } else {
	            chunks = [str];
	        }
	
	        current = chunks[0];
	
	        skipWhitespace(0);
	    };
	
	    parserInput.end = function() {
	        var message,
	            isFinished = parserInput.i >= input.length;
	
	        if (parserInput.i < furthest) {
	            message = furthestPossibleErrorMessage;
	            parserInput.i = furthest;
	        }
	        return {
	            isFinished: isFinished,
	            furthest: parserInput.i,
	            furthestPossibleErrorMessage: message,
	            furthestReachedEnd: parserInput.i >= input.length - 1,
	            furthestChar: input[parserInput.i]
	        };
	    };
	
	    return parserInput;
	};


/***/ }),
/* 341 */
/***/ (function(module, exports) {

	// Split the input into chunks.
	module.exports = function (input, fail) {
	    var len = input.length, level = 0, parenLevel = 0,
	        lastOpening, lastOpeningParen, lastMultiComment, lastMultiCommentEndBrace,
	        chunks = [], emitFrom = 0,
	        chunkerCurrentIndex, currentChunkStartIndex, cc, cc2, matched;
	
	    function emitChunk(force) {
	        var len = chunkerCurrentIndex - emitFrom;
	        if (((len < 512) && !force) || !len) {
	            return;
	        }
	        chunks.push(input.slice(emitFrom, chunkerCurrentIndex + 1));
	        emitFrom = chunkerCurrentIndex + 1;
	    }
	
	    for (chunkerCurrentIndex = 0; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
	        cc = input.charCodeAt(chunkerCurrentIndex);
	        if (((cc >= 97) && (cc <= 122)) || (cc < 34)) {
	            // a-z or whitespace
	            continue;
	        }
	
	        switch (cc) {
	            case 40:                        // (
	                parenLevel++;
	                lastOpeningParen = chunkerCurrentIndex;
	                continue;
	            case 41:                        // )
	                if (--parenLevel < 0) {
	                    return fail("missing opening `(`", chunkerCurrentIndex);
	                }
	                continue;
	            case 59:                        // ;
	                if (!parenLevel) { emitChunk(); }
	                continue;
	            case 123:                       // {
	                level++;
	                lastOpening = chunkerCurrentIndex;
	                continue;
	            case 125:                       // }
	                if (--level < 0) {
	                    return fail("missing opening `{`", chunkerCurrentIndex);
	                }
	                if (!level && !parenLevel) { emitChunk(); }
	                continue;
	            case 92:                        // \
	                if (chunkerCurrentIndex < len - 1) { chunkerCurrentIndex++; continue; }
	                return fail("unescaped `\\`", chunkerCurrentIndex);
	            case 34:
	            case 39:
	            case 96:                        // ", ' and `
	                matched = 0;
	                currentChunkStartIndex = chunkerCurrentIndex;
	                for (chunkerCurrentIndex = chunkerCurrentIndex + 1; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
	                    cc2 = input.charCodeAt(chunkerCurrentIndex);
	                    if (cc2 > 96) { continue; }
	                    if (cc2 == cc) { matched = 1; break; }
	                    if (cc2 == 92) {        // \
	                        if (chunkerCurrentIndex == len - 1) {
	                            return fail("unescaped `\\`", chunkerCurrentIndex);
	                        }
	                        chunkerCurrentIndex++;
	                    }
	                }
	                if (matched) { continue; }
	                return fail("unmatched `" + String.fromCharCode(cc) + "`", currentChunkStartIndex);
	            case 47:                        // /, check for comment
	                if (parenLevel || (chunkerCurrentIndex == len - 1)) { continue; }
	                cc2 = input.charCodeAt(chunkerCurrentIndex + 1);
	                if (cc2 == 47) {
	                    // //, find lnfeed
	                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len; chunkerCurrentIndex++) {
	                        cc2 = input.charCodeAt(chunkerCurrentIndex);
	                        if ((cc2 <= 13) && ((cc2 == 10) || (cc2 == 13))) { break; }
	                    }
	                } else if (cc2 == 42) {
	                    // /*, find */
	                    lastMultiComment = currentChunkStartIndex = chunkerCurrentIndex;
	                    for (chunkerCurrentIndex = chunkerCurrentIndex + 2; chunkerCurrentIndex < len - 1; chunkerCurrentIndex++) {
	                        cc2 = input.charCodeAt(chunkerCurrentIndex);
	                        if (cc2 == 125) { lastMultiCommentEndBrace = chunkerCurrentIndex; }
	                        if (cc2 != 42) { continue; }
	                        if (input.charCodeAt(chunkerCurrentIndex + 1) == 47) { break; }
	                    }
	                    if (chunkerCurrentIndex == len - 1) {
	                        return fail("missing closing `*/`", currentChunkStartIndex);
	                    }
	                    chunkerCurrentIndex++;
	                }
	                continue;
	            case 42:                       // *, check for unmatched */
	                if ((chunkerCurrentIndex < len - 1) && (input.charCodeAt(chunkerCurrentIndex + 1) == 47)) {
	                    return fail("unmatched `/*`", chunkerCurrentIndex);
	                }
	                continue;
	        }
	    }
	
	    if (level !== 0) {
	        if ((lastMultiComment > lastOpening) && (lastMultiCommentEndBrace > lastMultiComment)) {
	            return fail("missing closing `}` or `*/`", lastOpening);
	        } else {
	            return fail("missing closing `}`", lastOpening);
	        }
	    } else if (parenLevel !== 0) {
	        return fail("missing closing `)`", lastOpeningParen);
	    }
	
	    emitChunk(true);
	    return chunks;
	};


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	var LessError = __webpack_require__(306),
	    tree = __webpack_require__(311);
	
	var FunctionImporter = module.exports = function FunctionImporter(context, fileInfo) {
	    this.fileInfo = fileInfo;
	};
	
	FunctionImporter.prototype.eval = function(contents, callback) {
	    var loaded = {},
	        loader,
	        registry;
	
	    registry = {
	        add: function(name, func) {
	            loaded[name] = func;
	        },
	        addMultiple: function(functions) {
	            Object.keys(functions).forEach(function(name) {
	                loaded[name] = functions[name];
	            });
	        }
	    };
	
	    try {
	        loader = new Function("functions", "tree", "fileInfo", contents);
	        loader(registry, tree, this.fileInfo);
	    } catch(e) {
	        callback(new LessError({
	            message: "Plugin evaluation error: '" + e.name + ': ' + e.message.replace(/["]/g, "'") + "'" ,
	            filename: this.fileInfo.filename
	        }), null );
	    }
	
	    callback(null, { functions: loaded });
	};


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	var PromiseConstructor;
	
	module.exports = function(environment, ParseTree, ImportManager) {
	    var render = function (input, options, callback) {
	        if (typeof options === 'function') {
	            callback = options;
	            options = {};
	        }
	
	        if (!callback) {
	            if (!PromiseConstructor) {
	                PromiseConstructor = typeof Promise === 'undefined' ? __webpack_require__(344) : Promise;
	            }
	            var self = this;
	            return new PromiseConstructor(function (resolve, reject) {
	                render.call(self, input, options, function(err, output) {
	                    if (err) {
	                        reject(err);
	                    } else {
	                        resolve(output);
	                    }
	                });
	            });
	        } else {
	            this.parse(input, options, function(err, root, imports, options) {
	                if (err) { return callback(err); }
	
	                var result;
	                try {
	                    var parseTree = new ParseTree(root, imports);
	                    result = parseTree.toCSS(options);
	                }
	                catch (err) { return callback(err); }
	
	                callback(null, result);
	            });
	        }
	    };
	
	    return render;
	};


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(345)


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(346);
	__webpack_require__(348);
	__webpack_require__(349);
	__webpack_require__(350);
	__webpack_require__(351);
	__webpack_require__(353);


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var asap = __webpack_require__(347);
	
	function noop() {}
	
	// States:
	//
	// 0 - pending
	// 1 - fulfilled with _value
	// 2 - rejected with _value
	// 3 - adopted the state of another promise, _value
	//
	// once the state is no longer pending (0) it is immutable
	
	// All `_` prefixed properties will be reduced to `_{random number}`
	// at build time to obfuscate them and discourage their use.
	// We don't use symbols or Object.defineProperty to fully hide them
	// because the performance isn't good enough.
	
	
	// to avoid using try/catch inside critical functions, we
	// extract them to here.
	var LAST_ERROR = null;
	var IS_ERROR = {};
	function getThen(obj) {
	  try {
	    return obj.then;
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	
	function tryCallOne(fn, a) {
	  try {
	    return fn(a);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	function tryCallTwo(fn, a, b) {
	  try {
	    fn(a, b);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	
	module.exports = Promise;
	
	function Promise(fn) {
	  if (typeof this !== 'object') {
	    throw new TypeError('Promises must be constructed via new');
	  }
	  if (typeof fn !== 'function') {
	    throw new TypeError('Promise constructor\'s argument is not a function');
	  }
	  this._40 = 0;
	  this._65 = 0;
	  this._55 = null;
	  this._72 = null;
	  if (fn === noop) return;
	  doResolve(fn, this);
	}
	Promise._37 = null;
	Promise._87 = null;
	Promise._61 = noop;
	
	Promise.prototype.then = function(onFulfilled, onRejected) {
	  if (this.constructor !== Promise) {
	    return safeThen(this, onFulfilled, onRejected);
	  }
	  var res = new Promise(noop);
	  handle(this, new Handler(onFulfilled, onRejected, res));
	  return res;
	};
	
	function safeThen(self, onFulfilled, onRejected) {
	  return new self.constructor(function (resolve, reject) {
	    var res = new Promise(noop);
	    res.then(resolve, reject);
	    handle(self, new Handler(onFulfilled, onRejected, res));
	  });
	}
	function handle(self, deferred) {
	  while (self._65 === 3) {
	    self = self._55;
	  }
	  if (Promise._37) {
	    Promise._37(self);
	  }
	  if (self._65 === 0) {
	    if (self._40 === 0) {
	      self._40 = 1;
	      self._72 = deferred;
	      return;
	    }
	    if (self._40 === 1) {
	      self._40 = 2;
	      self._72 = [self._72, deferred];
	      return;
	    }
	    self._72.push(deferred);
	    return;
	  }
	  handleResolved(self, deferred);
	}
	
	function handleResolved(self, deferred) {
	  asap(function() {
	    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      if (self._65 === 1) {
	        resolve(deferred.promise, self._55);
	      } else {
	        reject(deferred.promise, self._55);
	      }
	      return;
	    }
	    var ret = tryCallOne(cb, self._55);
	    if (ret === IS_ERROR) {
	      reject(deferred.promise, LAST_ERROR);
	    } else {
	      resolve(deferred.promise, ret);
	    }
	  });
	}
	function resolve(self, newValue) {
	  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	  if (newValue === self) {
	    return reject(
	      self,
	      new TypeError('A promise cannot be resolved with itself.')
	    );
	  }
	  if (
	    newValue &&
	    (typeof newValue === 'object' || typeof newValue === 'function')
	  ) {
	    var then = getThen(newValue);
	    if (then === IS_ERROR) {
	      return reject(self, LAST_ERROR);
	    }
	    if (
	      then === self.then &&
	      newValue instanceof Promise
	    ) {
	      self._65 = 3;
	      self._55 = newValue;
	      finale(self);
	      return;
	    } else if (typeof then === 'function') {
	      doResolve(then.bind(newValue), self);
	      return;
	    }
	  }
	  self._65 = 1;
	  self._55 = newValue;
	  finale(self);
	}
	
	function reject(self, newValue) {
	  self._65 = 2;
	  self._55 = newValue;
	  if (Promise._87) {
	    Promise._87(self, newValue);
	  }
	  finale(self);
	}
	function finale(self) {
	  if (self._40 === 1) {
	    handle(self, self._72);
	    self._72 = null;
	  }
	  if (self._40 === 2) {
	    for (var i = 0; i < self._72.length; i++) {
	      handle(self, self._72[i]);
	    }
	    self._72 = null;
	  }
	}
	
	function Handler(onFulfilled, onRejected, promise){
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}
	
	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, promise) {
	  var done = false;
	  var res = tryCallTwo(fn, function (value) {
	    if (done) return;
	    done = true;
	    resolve(promise, value);
	  }, function (reason) {
	    if (done) return;
	    done = true;
	    reject(promise, reason);
	  });
	  if (!done && res === IS_ERROR) {
	    done = true;
	    reject(promise, LAST_ERROR);
	  }
	}


/***/ }),
/* 347 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}
	
	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;
	
	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}
	
	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
	
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` or `self` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	
	/* globals self */
	var scope = typeof global !== "undefined" ? global : self;
	var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
	
	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);
	
	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.
	
	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396
	
	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}
	
	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;
	
	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}
	
	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html
	
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.
	
	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }
	
	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.
	
	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }
	
	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.
	
	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.
	
	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);
	
	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}
	
	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
	
	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Promise = __webpack_require__(346);
	
	module.exports = Promise;
	Promise.prototype.done = function (onFulfilled, onRejected) {
	  var self = arguments.length ? this.then.apply(this, arguments) : this;
	  self.then(null, function (err) {
	    setTimeout(function () {
	      throw err;
	    }, 0);
	  });
	};


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Promise = __webpack_require__(346);
	
	module.exports = Promise;
	Promise.prototype['finally'] = function (f) {
	  return this.then(function (value) {
	    return Promise.resolve(f()).then(function () {
	      return value;
	    });
	  }, function (err) {
	    return Promise.resolve(f()).then(function () {
	      throw err;
	    });
	  });
	};


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	//This file contains the ES6 extensions to the core Promises/A+ API
	
	var Promise = __webpack_require__(346);
	
	module.exports = Promise;
	
	/* Static Functions */
	
	var TRUE = valuePromise(true);
	var FALSE = valuePromise(false);
	var NULL = valuePromise(null);
	var UNDEFINED = valuePromise(undefined);
	var ZERO = valuePromise(0);
	var EMPTYSTRING = valuePromise('');
	
	function valuePromise(value) {
	  var p = new Promise(Promise._61);
	  p._65 = 1;
	  p._55 = value;
	  return p;
	}
	Promise.resolve = function (value) {
	  if (value instanceof Promise) return value;
	
	  if (value === null) return NULL;
	  if (value === undefined) return UNDEFINED;
	  if (value === true) return TRUE;
	  if (value === false) return FALSE;
	  if (value === 0) return ZERO;
	  if (value === '') return EMPTYSTRING;
	
	  if (typeof value === 'object' || typeof value === 'function') {
	    try {
	      var then = value.then;
	      if (typeof then === 'function') {
	        return new Promise(then.bind(value));
	      }
	    } catch (ex) {
	      return new Promise(function (resolve, reject) {
	        reject(ex);
	      });
	    }
	  }
	  return valuePromise(value);
	};
	
	Promise.all = function (arr) {
	  var args = Array.prototype.slice.call(arr);
	
	  return new Promise(function (resolve, reject) {
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;
	    function res(i, val) {
	      if (val && (typeof val === 'object' || typeof val === 'function')) {
	        if (val instanceof Promise && val.then === Promise.prototype.then) {
	          while (val._65 === 3) {
	            val = val._55;
	          }
	          if (val._65 === 1) return res(i, val._55);
	          if (val._65 === 2) reject(val._55);
	          val.then(function (val) {
	            res(i, val);
	          }, reject);
	          return;
	        } else {
	          var then = val.then;
	          if (typeof then === 'function') {
	            var p = new Promise(then.bind(val));
	            p.then(function (val) {
	              res(i, val);
	            }, reject);
	            return;
	          }
	        }
	      }
	      args[i] = val;
	      if (--remaining === 0) {
	        resolve(args);
	      }
	    }
	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};
	
	Promise.reject = function (value) {
	  return new Promise(function (resolve, reject) {
	    reject(value);
	  });
	};
	
	Promise.race = function (values) {
	  return new Promise(function (resolve, reject) {
	    values.forEach(function(value){
	      Promise.resolve(value).then(resolve, reject);
	    });
	  });
	};
	
	/* Prototype Methods */
	
	Promise.prototype['catch'] = function (onRejected) {
	  return this.then(null, onRejected);
	};


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// This file contains then/promise specific extensions that are only useful
	// for node.js interop
	
	var Promise = __webpack_require__(346);
	var asap = __webpack_require__(352);
	
	module.exports = Promise;
	
	/* Static Functions */
	
	Promise.denodeify = function (fn, argumentCount) {
	  if (
	    typeof argumentCount === 'number' && argumentCount !== Infinity
	  ) {
	    return denodeifyWithCount(fn, argumentCount);
	  } else {
	    return denodeifyWithoutCount(fn);
	  }
	};
	
	var callbackFn = (
	  'function (err, res) {' +
	  'if (err) { rj(err); } else { rs(res); }' +
	  '}'
	);
	function denodeifyWithCount(fn, argumentCount) {
	  var args = [];
	  for (var i = 0; i < argumentCount; i++) {
	    args.push('a' + i);
	  }
	  var body = [
	    'return function (' + args.join(',') + ') {',
	    'var self = this;',
	    'return new Promise(function (rs, rj) {',
	    'var res = fn.call(',
	    ['self'].concat(args).concat([callbackFn]).join(','),
	    ');',
	    'if (res &&',
	    '(typeof res === "object" || typeof res === "function") &&',
	    'typeof res.then === "function"',
	    ') {rs(res);}',
	    '});',
	    '};'
	  ].join('');
	  return Function(['Promise', 'fn'], body)(Promise, fn);
	}
	function denodeifyWithoutCount(fn) {
	  var fnLength = Math.max(fn.length - 1, 3);
	  var args = [];
	  for (var i = 0; i < fnLength; i++) {
	    args.push('a' + i);
	  }
	  var body = [
	    'return function (' + args.join(',') + ') {',
	    'var self = this;',
	    'var args;',
	    'var argLength = arguments.length;',
	    'if (arguments.length > ' + fnLength + ') {',
	    'args = new Array(arguments.length + 1);',
	    'for (var i = 0; i < arguments.length; i++) {',
	    'args[i] = arguments[i];',
	    '}',
	    '}',
	    'return new Promise(function (rs, rj) {',
	    'var cb = ' + callbackFn + ';',
	    'var res;',
	    'switch (argLength) {',
	    args.concat(['extra']).map(function (_, index) {
	      return (
	        'case ' + (index) + ':' +
	        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
	        'break;'
	      );
	    }).join(''),
	    'default:',
	    'args[argLength] = cb;',
	    'res = fn.apply(self, args);',
	    '}',
	    
	    'if (res &&',
	    '(typeof res === "object" || typeof res === "function") &&',
	    'typeof res.then === "function"',
	    ') {rs(res);}',
	    '});',
	    '};'
	  ].join('');
	
	  return Function(
	    ['Promise', 'fn'],
	    body
	  )(Promise, fn);
	}
	
	Promise.nodeify = function (fn) {
	  return function () {
	    var args = Array.prototype.slice.call(arguments);
	    var callback =
	      typeof args[args.length - 1] === 'function' ? args.pop() : null;
	    var ctx = this;
	    try {
	      return fn.apply(this, arguments).nodeify(callback, ctx);
	    } catch (ex) {
	      if (callback === null || typeof callback == 'undefined') {
	        return new Promise(function (resolve, reject) {
	          reject(ex);
	        });
	      } else {
	        asap(function () {
	          callback.call(ctx, ex);
	        })
	      }
	    }
	  }
	};
	
	Promise.prototype.nodeify = function (callback, ctx) {
	  if (typeof callback != 'function') return this;
	
	  this.then(function (value) {
	    asap(function () {
	      callback.call(ctx, null, value);
	    });
	  }, function (err) {
	    asap(function () {
	      callback.call(ctx, err);
	    });
	  });
	};


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	// rawAsap provides everything we need except exception management.
	var rawAsap = __webpack_require__(347);
	// RawTasks are recycled to reduce GC churn.
	var freeTasks = [];
	// We queue errors to ensure they are thrown in right order (FIFO).
	// Array-as-queue is good enough here, since we are just dealing with exceptions.
	var pendingErrors = [];
	var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
	
	function throwFirstError() {
	    if (pendingErrors.length) {
	        throw pendingErrors.shift();
	    }
	}
	
	/**
	 * Calls a task as soon as possible after returning, in its own event, with priority
	 * over other events like animation, reflow, and repaint. An error thrown from an
	 * event will not interrupt, nor even substantially slow down the processing of
	 * other events, but will be rather postponed to a lower priority event.
	 * @param {{call}} task A callable object, typically a function that takes no
	 * arguments.
	 */
	module.exports = asap;
	function asap(task) {
	    var rawTask;
	    if (freeTasks.length) {
	        rawTask = freeTasks.pop();
	    } else {
	        rawTask = new RawTask();
	    }
	    rawTask.task = task;
	    rawAsap(rawTask);
	}
	
	// We wrap tasks with recyclable task objects.  A task object implements
	// `call`, just like a function.
	function RawTask() {
	    this.task = null;
	}
	
	// The sole purpose of wrapping the task is to catch the exception and recycle
	// the task object after its single use.
	RawTask.prototype.call = function () {
	    try {
	        this.task.call();
	    } catch (error) {
	        if (asap.onerror) {
	            // This hook exists purely for testing purposes.
	            // Its name will be periodically randomized to break any code that
	            // depends on its existence.
	            asap.onerror(error);
	        } else {
	            // In a web browser, exceptions are not fatal. However, to avoid
	            // slowing down the queue of pending tasks, we rethrow the error in a
	            // lower priority turn.
	            pendingErrors.push(error);
	            requestErrorThrow();
	        }
	    } finally {
	        this.task = null;
	        freeTasks[freeTasks.length] = this;
	    }
	};


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Promise = __webpack_require__(346);
	
	module.exports = Promise;
	Promise.enableSynchronous = function () {
	  Promise.prototype.isPending = function() {
	    return this.getState() == 0;
	  };
	
	  Promise.prototype.isFulfilled = function() {
	    return this.getState() == 1;
	  };
	
	  Promise.prototype.isRejected = function() {
	    return this.getState() == 2;
	  };
	
	  Promise.prototype.getValue = function () {
	    if (this._65 === 3) {
	      return this._55.getValue();
	    }
	
	    if (!this.isFulfilled()) {
	      throw new Error('Cannot get a value of an unfulfilled promise.');
	    }
	
	    return this._55;
	  };
	
	  Promise.prototype.getReason = function () {
	    if (this._65 === 3) {
	      return this._55.getReason();
	    }
	
	    if (!this.isRejected()) {
	      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
	    }
	
	    return this._55;
	  };
	
	  Promise.prototype.getState = function () {
	    if (this._65 === 3) {
	      return this._55.getState();
	    }
	    if (this._65 === -1 || this._65 === -2) {
	      return 0;
	    }
	
	    return this._65;
	  };
	};
	
	Promise.disableSynchronous = function() {
	  Promise.prototype.isPending = undefined;
	  Promise.prototype.isFulfilled = undefined;
	  Promise.prototype.isRejected = undefined;
	  Promise.prototype.getValue = undefined;
	  Promise.prototype.getReason = undefined;
	  Promise.prototype.getState = undefined;
	};


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	var PromiseConstructor,
	    contexts = __webpack_require__(303),
	    Parser = __webpack_require__(339),
	    PluginManager = __webpack_require__(355);
	
	module.exports = function(environment, ParseTree, ImportManager) {
	    var parse = function (input, options, callback) {
	        options = options || {};
	
	        if (typeof options === 'function') {
	            callback = options;
	            options = {};
	        }
	
	        if (!callback) {
	            if (!PromiseConstructor) {
	                PromiseConstructor = typeof Promise === 'undefined' ? __webpack_require__(344) : Promise;
	            }
	            var self = this;
	            return new PromiseConstructor(function (resolve, reject) {
	                parse.call(self, input, options, function(err, output) {
	                    if (err) {
	                        reject(err);
	                    } else {
	                        resolve(output);
	                    }
	                });
	            });
	        } else {
	            var context,
	                rootFileInfo,
	                pluginManager = new PluginManager(this);
	
	            pluginManager.addPlugins(options.plugins);
	            options.pluginManager = pluginManager;
	
	            context = new contexts.Parse(options);
	
	            if (options.rootFileInfo) {
	                rootFileInfo = options.rootFileInfo;
	            } else {
	                var filename = options.filename || "input";
	                var entryPath = filename.replace(/[^\/\\]*$/, "");
	                rootFileInfo = {
	                    filename: filename,
	                    relativeUrls: context.relativeUrls,
	                    rootpath: context.rootpath || "",
	                    currentDirectory: entryPath,
	                    entryPath: entryPath,
	                    rootFilename: filename
	                };
	                // add in a missing trailing slash
	                if (rootFileInfo.rootpath && rootFileInfo.rootpath.slice(-1) !== "/") {
	                    rootFileInfo.rootpath += "/";
	                }
	            }
	
	            var imports = new ImportManager(context, rootFileInfo);
	
	            new Parser(context, imports, rootFileInfo)
	                .parse(input, function (e, root) {
	                if (e) { return callback(e); }
	                callback(null, root, imports, options);
	            }, options);
	        }
	    };
	    return parse;
	};


/***/ }),
/* 355 */
/***/ (function(module, exports) {

	/**
	 * Plugin Manager
	 */
	var PluginManager = function(less) {
	    this.less = less;
	    this.visitors = [];
	    this.preProcessors = [];
	    this.postProcessors = [];
	    this.installedPlugins = [];
	    this.fileManagers = [];
	};
	/**
	 * Adds all the plugins in the array
	 * @param {Array} plugins
	 */
	PluginManager.prototype.addPlugins = function(plugins) {
	    if (plugins) {
	        for (var i = 0; i < plugins.length; i++) {
	            this.addPlugin(plugins[i]);
	        }
	    }
	};
	/**
	 *
	 * @param plugin
	 */
	PluginManager.prototype.addPlugin = function(plugin) {
	    this.installedPlugins.push(plugin);
	    plugin.install(this.less, this);
	};
	/**
	 * Adds a visitor. The visitor object has options on itself to determine
	 * when it should run.
	 * @param visitor
	 */
	PluginManager.prototype.addVisitor = function(visitor) {
	    this.visitors.push(visitor);
	};
	/**
	 * Adds a pre processor object
	 * @param {object} preProcessor
	 * @param {number} priority - guidelines 1 = before import, 1000 = import, 2000 = after import
	 */
	PluginManager.prototype.addPreProcessor = function(preProcessor, priority) {
	    var indexToInsertAt;
	    for (indexToInsertAt = 0; indexToInsertAt < this.preProcessors.length; indexToInsertAt++) {
	        if (this.preProcessors[indexToInsertAt].priority >= priority) {
	            break;
	        }
	    }
	    this.preProcessors.splice(indexToInsertAt, 0, {preProcessor: preProcessor, priority: priority});
	};
	/**
	 * Adds a post processor object
	 * @param {object} postProcessor
	 * @param {number} priority - guidelines 1 = before compression, 1000 = compression, 2000 = after compression
	 */
	PluginManager.prototype.addPostProcessor = function(postProcessor, priority) {
	    var indexToInsertAt;
	    for (indexToInsertAt = 0; indexToInsertAt < this.postProcessors.length; indexToInsertAt++) {
	        if (this.postProcessors[indexToInsertAt].priority >= priority) {
	            break;
	        }
	    }
	    this.postProcessors.splice(indexToInsertAt, 0, {postProcessor: postProcessor, priority: priority});
	};
	/**
	 *
	 * @param manager
	 */
	PluginManager.prototype.addFileManager = function(manager) {
	    this.fileManagers.push(manager);
	};
	/**
	 *
	 * @returns {Array}
	 * @private
	 */
	PluginManager.prototype.getPreProcessors = function() {
	    var preProcessors = [];
	    for (var i = 0; i < this.preProcessors.length; i++) {
	        preProcessors.push(this.preProcessors[i].preProcessor);
	    }
	    return preProcessors;
	};
	/**
	 *
	 * @returns {Array}
	 * @private
	 */
	PluginManager.prototype.getPostProcessors = function() {
	    var postProcessors = [];
	    for (var i = 0; i < this.postProcessors.length; i++) {
	        postProcessors.push(this.postProcessors[i].postProcessor);
	    }
	    return postProcessors;
	};
	/**
	 *
	 * @returns {Array}
	 * @private
	 */
	PluginManager.prototype.getVisitors = function() {
	    return this.visitors;
	};
	/**
	 *
	 * @returns {Array}
	 * @private
	 */
	PluginManager.prototype.getFileManagers = function() {
	    return this.fileManagers;
	};
	module.exports = PluginManager;


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	var Birch, CompositeDisposable, Item, ItemBuffer, ItemSerializer, ItemSpan, LineBuffer, Mutation, Outline, Selection, assert, ref, util,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(1), Outline = ref.Outline, Item = ref.Item, Mutation = ref.Mutation, ItemSerializer = ref.ItemSerializer, util = ref.util;
	
	CompositeDisposable = __webpack_require__(242).CompositeDisposable;
	
	LineBuffer = __webpack_require__(357);
	
	Selection = __webpack_require__(359);
	
	ItemSpan = __webpack_require__(360);
	
	Birch = __webpack_require__(252);
	
	assert = util.assert;
	
	ItemBuffer = (function(superClass) {
	  extend(ItemBuffer, superClass);
	
	  function ItemBuffer(outline1, editor) {
	    this.outline = outline1;
	    this.editor = editor;
	    ItemBuffer.__super__.constructor.call(this);
	    this.isUpdatingIndex = 0;
	    this.isUpdatingOutline = 0;
	    this.ignoreItemsAddedToOutline = 0;
	    this._bufferState = {};
	    this._collapsedItems = new Set;
	    this._itemsToExpansionStateCache = new Map;
	    this._invalidateItemCalculatedStyles = null;
	    this.subscriptions = new CompositeDisposable;
	    this.subscriptions.add(this.outline.onDidBeginChanges(this._outlineDidBeginChanges.bind(this)));
	    this.subscriptions.add(this.outline.onDidChange(this._outlineDidChange.bind(this)));
	    this.subscriptions.add(this.outline.onDidEndChanges(this._outlineDidEndChanges.bind(this)));
	    this.subscriptions.add(this.outline.onDidDestroy((function(_this) {
	      return function() {
	        return _this.destroy();
	      };
	    })(this)));
	    this.outline.retain();
	  }
	
	  ItemBuffer.prototype.destroy = function() {
	    if (!this.destroyed) {
	      this.subscriptions.dispose();
	      ItemBuffer.__super__.destroy.call(this);
	      return this.outline.release();
	    }
	  };
	
	
	  /*
	  Section: Changes
	   */
	
	  ItemBuffer.prototype.beginChanges = function(changeEvent) {
	    if (!(this.isUpdatingIndex || this.isUpdatingOutline)) {
	      throw new Error('Must first call @beginUpdatingIndex or @beginUpdatingOutline before making changes to item buffer');
	    }
	    if (this.changing === 0) {
	      this._invalidateItemCalculatedStyles = new Set;
	    }
	    return ItemBuffer.__super__.beginChanges.call(this, changeEvent);
	  };
	
	  ItemBuffer.prototype.endChanges = function() {
	    if (!(this.isUpdatingIndex || this.isUpdatingOutline)) {
	      throw new Error('Must first call @beginUpdatingIndex or @beginUpdatingOutline before making changes to item buffer');
	    }
	    if (this.changing === 1) {
	      this._invalidateItemCalculatedStyles.forEach((function(_this) {
	        return function(each) {
	          var ref1;
	          _this._itemsToExpansionStateCache["delete"](each);
	          return (ref1 = _this.editor) != null ? ref1.invalidateItem(each, null) : void 0;
	        };
	      })(this));
	    }
	    return ItemBuffer.__super__.endChanges.call(this);
	  };
	
	  ItemBuffer.prototype.beginUpdatingIndex = function() {
	    if (this.isUpdatingOutline) {
	      throw new Error('Can not update index at same time as outline');
	    }
	    this.isUpdatingIndex++;
	    return this.beginChanges();
	  };
	
	  ItemBuffer.prototype.endUpdatingIndex = function() {
	    this.endChanges();
	    this.isUpdatingIndex--;
	    if (this.isUpdatingIndex === 0) {
	      return this._validateBufferState();
	    }
	  };
	
	  ItemBuffer.prototype.updateIndex = function(callback) {
	    this.beginUpdatingIndex();
	    callback();
	    return this.endUpdatingIndex();
	  };
	
	  ItemBuffer.prototype.beginUpdatingOutline = function() {
	    if (this.isUpdatingIndex) {
	      throw new Error('Can not update outline at same time as index');
	    }
	    this.isUpdatingOutline++;
	    this.outline.beginChanges();
	    return this.beginChanges();
	  };
	
	  ItemBuffer.prototype.endUpdatingOutline = function() {
	    this.endChanges();
	    if (!this.hoistedItem.isInOutline) {
	      this.hoistedItem = this.outline.root;
	    }
	    this.outline.endChanges();
	    this.isUpdatingOutline--;
	    if (this.isUpdatingOutline === 0) {
	      return this._validateBufferState();
	    }
	  };
	
	  ItemBuffer.prototype.updateOutline = function(callback) {
	    this.beginUpdatingOutline();
	    callback();
	    return this.endUpdatingOutline();
	  };
	
	  ItemBuffer.prototype._validateBufferState = function() {
	    var focusedItem;
	    if (!this.hoistedItem.isInOutline) {
	      this.hoistedItem = this.outline.root;
	    }
	    if (focusedItem = this.focusedItem) {
	      if (this.focusedItem.parent !== this.hoistedItem) {
	        this._bufferState.focusedItem = null;
	        return this.emitter.emit('did-change-focused-item', this.focusedItem);
	      }
	    }
	  };
	
	
	  /*
	  Section: Events
	   */
	
	  ItemBuffer.prototype.onWillProcessOutlineMutation = function(callback) {
	    return this._getEmitter().on('will-process-outline-mutation', callback);
	  };
	
	  ItemBuffer.prototype.onDidProcessOutlineMutation = function(callback) {
	    return this._getEmitter().on('did-process-outline-mutation', callback);
	  };
	
	  ItemBuffer.prototype.onDidChangeHoistedItem = function(callback) {
	    return this._getEmitter().on('did-change-hoisted-item', callback);
	  };
	
	  ItemBuffer.prototype.onDidChangeFocusedItem = function(callback) {
	    return this._getEmitter().on('did-change-focused-item', callback);
	  };
	
	  ItemBuffer.prototype.onDidChangeItemPathFilter = function(callback) {
	    return this._getEmitter().on('did-change-item-path-filter', callback);
	  };
	
	
	  /*
	  Section: Buffer State
	   */
	
	  Object.defineProperty(ItemBuffer.prototype, 'hoistedItem', {
	    get: function() {
	      return this.bufferState.hoistedItem;
	    },
	    set: function(hoistedItem) {
	      return this.bufferState = {
	        hoistedItem: hoistedItem
	      };
	    }
	  });
	
	  Object.defineProperty(ItemBuffer.prototype, 'focusedItem', {
	    get: function() {
	      return this.bufferState.focusedItem;
	    },
	    set: function(focusedItem) {
	      return this.bufferState = {
	        focusedItem: focusedItem
	      };
	    }
	  });
	
	  Object.defineProperty(ItemBuffer.prototype, 'itemPathFilter', {
	    get: function() {
	      return this.bufferState.itemPathFilter;
	    },
	    set: function(itemPathFilter) {
	      return this.bufferState = {
	        itemPathFilter: itemPathFilter
	      };
	    }
	  });
	
	  Object.defineProperty(ItemBuffer.prototype, 'bufferState', {
	    get: function() {
	      return this._bufferState;
	    },
	    set: function(bufferState) {
	      var displayedItems, outline, prevFocusedItem, prevHoistedItem, prevItemPathFilter, ref1;
	      outline = this.outline;
	      prevHoistedItem = this.hoistedItem;
	      prevFocusedItem = this.focusedItem;
	      prevItemPathFilter = this.itemPathFilter;
	      if (bufferState.focusedItem) {
	        if (bufferState.focusedItem.isOutlineRoot) {
	          bufferState.hoistedItem = bufferState.focusedItem;
	          bufferState.focusedItem = null;
	        } else {
	          bufferState.hoistedItem = bufferState.focusedItem.parent;
	        }
	      }
	      if (bufferState.hoistedItem) {
	        if (Birch.preferences.get('BMaintainItemPathFilterWhenHoisting')) {
	          if (bufferState.itemPathFilter == null) {
	            bufferState.itemPathFilter = prevItemPathFilter;
	          }
	        }
	      } else {
	        if (Birch.preferences.get('BMaintainHoistedItemWhenFiltering')) {
	          bufferState.hoistedItem = prevHoistedItem != null ? prevHoistedItem : outline.root;
	          bufferState.focusedItem = prevFocusedItem;
	        } else {
	          bufferState.hoistedItem = outline.root;
	          bufferState.focusedItem = null;
	        }
	      }
	      assert(bufferState.hoistedItem.outline === this.outline);
	      assert(bufferState.hoistedItem.isInOutline);
	      if (bufferState.focusedItem) {
	        assert(bufferState.focusedItem.isInOutline);
	        assert(bufferState.focusedItem.parent === bufferState.hoistedItem);
	      }
	      if (bufferState.hoistedItem == null) {
	        bufferState.hoistedItem = null;
	      }
	      if (bufferState.focusedItem == null) {
	        bufferState.focusedItem = null;
	      }
	      if (bufferState.itemPathFilter == null) {
	        bufferState.itemPathFilter = '';
	      }
	      displayedItems = bufferState.displayedItems;
	      delete bufferState.displayedItems;
	      this._bufferState = bufferState;
	      this._itemsToItemSpansMap = new Map;
	      this.updateIndex((function(_this) {
	        return function() {
	          var each;
	          _this.removeSpans(0, _this.getSpanCount());
	          if (displayedItems) {
	            _this.insertSpans(0, (function() {
	              var i, len, results;
	              results = [];
	              for (i = 0, len = displayedItems.length; i < len; i++) {
	                each = displayedItems[i];
	                results.push(this.createSpanForItem(each));
	              }
	              return results;
	            }).call(_this));
	          } else {
	            _this.insertSpans(0, (function() {
	              var i, len, ref1, results;
	              ref1 = this._buildBufferItemsList();
	              results = [];
	              for (i = 0, len = ref1.length; i < len; i++) {
	                each = ref1[i];
	                results.push(this.createSpanForItem(each));
	              }
	              return results;
	            }).call(_this));
	          }
	          if (_this.emitter) {
	            if (_this.hoistedItem !== prevHoistedItem) {
	              _this.emitter.emit('did-change-hoisted-item', _this.hoistedItem);
	            }
	            if (_this.focusedItem !== prevFocusedItem) {
	              _this.emitter.emit('did-change-focused-item', _this.focusedItem);
	            }
	            if (_this.itemPathFilter !== prevItemPathFilter) {
	              return _this.emitter.emit('did-change-item-path-filter', _this.itemPathFilter);
	            }
	          }
	        };
	      })(this));
	      return (ref1 = this.editor) != null ? ref1.invalidateRestorableState() : void 0;
	    }
	  });
	
	  ItemBuffer.prototype._buildBufferItemsList = function() {
	    var each, i, itemsList, j, len, len1, localRoot, ref1, ref2;
	    itemsList = [];
	    if (this.focusedItem) {
	      localRoot = this.focusedItem;
	      itemsList.push(this.focusedItem);
	    } else {
	      localRoot = this.hoistedItem;
	    }
	    if (this.itemPathFilter) {
	      ref1 = this._buildMatchedItemsList(localRoot);
	      for (i = 0, len = ref1.length; i < len; i++) {
	        each = ref1[i];
	        itemsList.push(each);
	      }
	    } else {
	      ref2 = this._buildExpandedItemsList(localRoot);
	      for (j = 0, len1 = ref2.length; j < len1; j++) {
	        each = ref2[j];
	        itemsList.push(each);
	      }
	    }
	    return itemsList;
	  };
	
	  ItemBuffer.prototype._buildMatchedItemsList = function(item) {
	    var ancestor, ancestorInsertIndex, each, i, len, matchedList, matchedSet, outline, ref1;
	    matchedList = [];
	    matchedSet = new Set;
	    outline = item.outline;
	    ref1 = outline.evaluateItemPath(this.itemPathFilter, item, {
	      root: item
	    });
	    for (i = 0, len = ref1.length; i < len; i++) {
	      each = ref1[i];
	      if (each !== item && item.contains(each)) {
	        ancestor = each.parent;
	        ancestorInsertIndex = matchedList.length;
	        while (ancestor !== item) {
	          if (matchedSet.has(ancestor)) {
	            break;
	          } else {
	            matchedList.splice(ancestorInsertIndex, 0, ancestor);
	            matchedSet.add(ancestor);
	          }
	          ancestor = ancestor.parent;
	        }
	        matchedList.push(each);
	        matchedSet.add(each);
	      }
	    }
	    return matchedList;
	  };
	
	  ItemBuffer.prototype._buildExpandedItemsList = function(item) {
	    var each, end, expandedList;
	    expandedList = [];
	    each = item.firstChild;
	    end = item.nextBranch;
	    while (each && each !== end) {
	      expandedList.push(each);
	      if (each === this.focusedItem || !this._collapsedItems.has(each)) {
	        each = each.nextItem;
	      } else {
	        each = each.nextBranch;
	      }
	    }
	    return expandedList;
	  };
	
	  ItemBuffer.prototype._outlineDidBeginChanges = function(mutation) {
	    if (this.isUpdatingOutline) {
	      return;
	    }
	    return this.beginUpdatingIndex();
	  };
	
	  ItemBuffer.prototype._outlineDidChange = function(mutation) {
	    var ref1, ref2;
	    if (this.isUpdatingOutline) {
	      this._invalidateItemCalculatedStyles.add(mutation.target);
	      return;
	    }
	    if ((ref1 = this.emitter) != null) {
	      ref1.emit('will-process-outline-mutation', mutation);
	    }
	    this.updateIndex((function(_this) {
	      return function() {
	        var insertedString, itemSpan, localLocation, location, target;
	        target = mutation.target;
	        switch (mutation.type) {
	          case Mutation.BODY_CHANGED:
	            if (itemSpan = _this.getItemSpanForItem(target)) {
	              localLocation = mutation.insertedTextLocation;
	              insertedString = target.bodyString.substr(localLocation, mutation.insertedTextLength);
	              location = itemSpan.getLocation() + localLocation;
	              _this.replaceRange(location, mutation.replacedText.length, insertedString);
	            }
	            break;
	          case Mutation.CHILDREN_CHANGED:
	            if (mutation.removedItems.length) {
	              _this._outlineDidRemoveItems(target, mutation.getFlattendedRemovedItems());
	            }
	            if (mutation.addedItems.length) {
	              _this._outlineDidAddItems(target, mutation.addedItems);
	            }
	        }
	        return _this._invalidateItemCalculatedStyles.add(mutation.target);
	      };
	    })(this));
	    return (ref2 = this.emitter) != null ? ref2.emit('did-process-outline-mutation', mutation) : void 0;
	  };
	
	  ItemBuffer.prototype._outlineDidRemoveItems = function(target, removedDescendants) {
	    var each, i, itemSpan, len, removeCount, removeRangeIfDefined, removeStartIndex;
	    removeStartIndex = void 0;
	    removeCount = 0;
	    removeRangeIfDefined = (function(_this) {
	      return function() {
	        _this.removeLines(removeStartIndex, removeCount);
	        removeStartIndex = void 0;
	        return removeCount = 0;
	      };
	    })(this);
	    for (i = 0, len = removedDescendants.length; i < len; i++) {
	      each = removedDescendants[i];
	      if (itemSpan = this.getItemSpanForItem(each)) {
	        if (removeStartIndex == null) {
	          removeStartIndex = itemSpan.getSpanIndex();
	        }
	        removeCount++;
	      } else if (removeStartIndex) {
	        removeRangeIfDefined();
	      }
	    }
	    return removeRangeIfDefined();
	  };
	
	  ItemBuffer.prototype._outlineDidAddItems = function(target, addedChildren) {
	    var addedItemSpans, each, firstAdded, i, insertAfter, insertAfterItem, insertAfterLine, insertBefore, insertBeforeItem, insertBeforeLine, insertIndex, j, lastAdded, len, len1, pass, ref1;
	    if (this.ignoreItemsAddedToOutline) {
	      return;
	    }
	    firstAdded = addedChildren[0];
	    insertAfter = firstAdded.previousSibling;
	    lastAdded = addedChildren[addedChildren.length - 1];
	    insertBefore = lastAdded.nextSibling;
	    pass = false;
	    if (this.isDisplayed(insertAfter)) {
	      pass = true;
	    } else if (this.isDisplayed(insertBefore)) {
	      pass = true;
	    } else {
	      if (target === this.hoistedItem || this.isDisplayed(target)) {
	        if (!this._collapsedItems.has(target) && target.firstChild === firstAdded && target.lastChild === lastAdded) {
	          pass = true;
	        }
	      }
	    }
	    if (!pass) {
	      return;
	    }
	    addedItemSpans = [];
	    for (i = 0, len = addedChildren.length; i < len; i++) {
	      each = addedChildren[i];
	      addedItemSpans.push(this.createSpanForItem(each));
	      if (this.isExpanded(each)) {
	        ref1 = this._buildExpandedItemsList(each);
	        for (j = 0, len1 = ref1.length; j < len1; j++) {
	          each = ref1[j];
	          addedItemSpans.push(this.createSpanForItem(each));
	        }
	      }
	    }
	    if (addedItemSpans.length) {
	      insertBeforeItem = addedItemSpans[addedItemSpans.length - 1].item.nextItem;
	      while (insertBeforeItem && !(insertBeforeLine = this.getItemSpanForItem(insertBeforeItem))) {
	        insertBeforeItem = insertBeforeItem.nextItem;
	      }
	      if (insertBeforeLine) {
	        insertIndex = insertBeforeLine.getSpanIndex();
	      } else {
	        insertAfterItem = addedItemSpans[0].item.previousItem;
	        while (insertAfterItem && !(insertAfterLine = this.getItemSpanForItem(insertAfterItem))) {
	          insertAfterItem = insertAfterItem.nextItem;
	        }
	        if (insertAfterLine) {
	          insertIndex = insertAfterLine.getSpanIndex() + 1;
	        } else {
	          insertIndex = this.getLineCount();
	        }
	      }
	      return this.insertSpans(insertIndex, addedItemSpans);
	    }
	  };
	
	  ItemBuffer.prototype._outlineDidEndChanges = function(mutation) {
	    if (this.isUpdatingOutline) {
	      return;
	    }
	    return this.endUpdatingIndex();
	  };
	
	
	  /*
	  Section: Buffer Expansion State
	   */
	
	  ItemBuffer.prototype.isExpanded = function(item) {
	    return this.getItemExpandedState(item) === 'expanded';
	  };
	
	  ItemBuffer.prototype.isFiltered = function(item) {
	    return this.getItemExpandedState(item) === 'filtered';
	  };
	
	  ItemBuffer.prototype.isCollapsed = function(item) {
	    return this.getItemExpandedState(item) === 'collapsed';
	  };
	
	  ItemBuffer.prototype.isExplicitlyCollapsed = function(item) {
	    return this._collapsedItems.has(item);
	  };
	
	  ItemBuffer.prototype.getItemExpandedState = function(item) {
	    var childrenHiding, childrenShowing, each, state;
	    if (!item) {
	      return;
	    }
	    if (state = this._itemsToExpansionStateCache.get(item)) {
	      state;
	    } else if (item != null ? item.hasChildren : void 0) {
	      if (this.isDisplayed(item)) {
	        childrenShowing = false;
	        childrenHiding = false;
	        each = item.firstChild;
	        while (each && !(childrenShowing && childrenHiding)) {
	          if (this.isDisplayed(each)) {
	            childrenShowing = true;
	          } else {
	            childrenHiding = true;
	          }
	          each = each.nextSibling;
	        }
	        if (childrenHiding) {
	          if (childrenShowing) {
	            state = 'filtered';
	          } else {
	            state = 'collapsed';
	          }
	        } else {
	          state = 'expanded';
	        }
	      } else {
	        if (this._collapsedItems.has(item)) {
	          state = 'collapsed';
	        } else {
	          state = 'expanded';
	        }
	      }
	    } else {
	      state = 'leaf';
	    }
	    this._itemsToExpansionStateCache.set(item, state);
	    return state;
	  };
	
	  ItemBuffer.prototype.setExpandedState = function(items, state, completely) {
	    var ref1;
	    if (completely == null) {
	      completely = false;
	    }
	    this.updateIndex((function(_this) {
	      return function() {
	        var branchDisplayState, each, i, j, len, len1, parents, results;
	        parents = (function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = items.length; i < len; i++) {
	            each = items[i];
	            if (each.hasChildren) {
	              results.push(each);
	            }
	          }
	          return results;
	        })();
	        parents.sort(function(a, b) {
	          return a.depth < b.depth;
	        });
	        for (i = 0, len = parents.length; i < len; i++) {
	          each = parents[i];
	          branchDisplayState = _this.getItemExpandedState(each);
	          if (branchDisplayState === 'filtered' || (state && branchDisplayState === 'collapsed') || (!state && branchDisplayState === 'expanded')) {
	            _this._invalidateItemCalculatedStyles.add(each);
	            if (state) {
	              _this._collapsedItems["delete"](each);
	              _this._insertNeededDescendantLines(each);
	            } else {
	              _this._collapsedItems.add(each);
	              _this._removeDescendantLines(each);
	            }
	          }
	        }
	        if (state) {
	          results = [];
	          for (j = 0, len1 = items.length; j < len1; j++) {
	            each = items[j];
	            if (!each.hasChildren) {
	              results.push(_this._collapsedItems["delete"](each));
	            } else {
	              results.push(void 0);
	            }
	          }
	          return results;
	        }
	      };
	    })(this));
	    return (ref1 = this.editor) != null ? ref1.invalidateRestorableState() : void 0;
	  };
	
	  ItemBuffer.prototype._insertNeededDescendantLines = function(item) {
	    var each, itemSpan;
	    this._removeDescendantLines(item);
	    if (itemSpan = this.getItemSpanForItem(item)) {
	      return this.insertLines(itemSpan.getSpanIndex() + 1, (function() {
	        var i, len, ref1, results;
	        ref1 = this._buildExpandedItemsList(item);
	        results = [];
	        for (i = 0, len = ref1.length; i < len; i++) {
	          each = ref1[i];
	          results.push(this.createSpanForItem(each));
	        }
	        return results;
	      }).call(this));
	    }
	  };
	
	  ItemBuffer.prototype._removeDescendantLines = function(item) {
	    var each, end, endIndex, itemSpan, startIndex;
	    if (itemSpan = this.getItemSpanForItem(item)) {
	      startIndex = itemSpan.getSpanIndex() + 1;
	      endIndex = startIndex;
	      each = item.firstChild;
	      end = item.nextBranch;
	      while (each !== end) {
	        if (this.isDisplayed(each)) {
	          endIndex++;
	        }
	        each = each.nextItem;
	      }
	      return this.removeLines(startIndex, endIndex - startIndex);
	    }
	  };
	
	
	  /*
	  Section: Buffer Display State
	   */
	
	  ItemBuffer.prototype.isDisplayed = function(item) {
	    return !!this.getItemSpanForItem(item);
	  };
	
	  ItemBuffer.prototype.forceDisplayed = function(items, showAncestors) {
	    if (showAncestors == null) {
	      showAncestors = false;
	    }
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    return this.updateIndex((function(_this) {
	      return function() {
	        var each, eachAncestor, eachItemSpan, i, item, len, results;
	        results = [];
	        for (i = 0, len = items.length; i < len; i++) {
	          item = items[i];
	          assert(item.isInOutline, 'force displayed item must be in outline.');
	          assert(_this.hoistedItem.contains(item), 'force displayed item must descend from hoisted item.');
	          eachAncestor = item;
	          results.push((function() {
	            var results1;
	            results1 = [];
	            while (eachAncestor !== this.hoistedItem && !this.isDisplayed(eachAncestor)) {
	              each = eachAncestor.previousItem;
	              while (each && each !== this.hoistedItem) {
	                if (eachItemSpan = this.getItemSpanForItem(each)) {
	                  this.insertLines(eachItemSpan.getSpanIndex() + 1, [this.createSpanForItem(eachAncestor)]);
	                  break;
	                }
	                each = each.previousItem;
	              }
	              if (!each || each === this.hoistedItem) {
	                this.insertLines(0, [this.createSpanForItem(eachAncestor)]);
	              }
	              if (showAncestors) {
	                results1.push(eachAncestor = eachAncestor.parent);
	              } else {
	                results1.push(eachAncestor = this.hoistedItem);
	              }
	            }
	            return results1;
	          }).call(_this));
	        }
	        return results;
	      };
	    })(this));
	  };
	
	  ItemBuffer.prototype.forceHidden = function(items, hideDescendants) {
	    if (hideDescendants == null) {
	      hideDescendants = false;
	    }
	    if (!Array.isArray(items)) {
	      items = [items];
	    }
	    return this.updateIndex((function(_this) {
	      return function() {
	        var each, eachItemSpan, i, len, results;
	        results = [];
	        for (i = 0, len = items.length; i < len; i++) {
	          each = items[i];
	          if (eachItemSpan = _this.getItemSpanForItem(each)) {
	            results.push(_this.removeLines(eachItemSpan.getSpanIndex(), 1));
	          } else {
	            results.push(void 0);
	          }
	        }
	        return results;
	      };
	    })(this));
	  };
	
	  Object.defineProperty(ItemBuffer.prototype, 'displayedItems', {
	    get: function() {
	      var items;
	      items = [];
	      this.iterateLines(0, this.getLineCount(), function(each) {
	        return items.push(each.item);
	      });
	      return items;
	    }
	  });
	
	  Object.defineProperty(ItemBuffer.prototype, 'firstDisplayedItem', {
	    get: function() {
	      return this.getNextDisplayedItem(this.hoistedItem);
	    }
	  });
	
	  Object.defineProperty(ItemBuffer.prototype, 'lastDisplayedItem', {
	    get: function() {
	      var last;
	      last = this.hoistedItem.lastBranchItem;
	      if (this.isDisplayed(last)) {
	        return last;
	      } else {
	        return this.getPreviousDisplayedItem(last);
	      }
	    }
	  });
	
	  ItemBuffer.prototype.getDisplayedAncestor = function(item) {
	    var ancestor;
	    if (!item) {
	      return null;
	    }
	    ancestor = item.parent;
	    while (ancestor) {
	      if (this.isDisplayed(ancestor)) {
	        return ancestor;
	      }
	      ancestor = ancestor.parent;
	    }
	  };
	
	  ItemBuffer.prototype.getDisplayedSelfOrAncestor = function(item) {
	    if (!item) {
	      return null;
	    }
	    if (this.isDisplayed(item)) {
	      return item;
	    }
	    return this.getDisplayedAncestor(item);
	  };
	
	  ItemBuffer.prototype.getPreviousDisplayedSibling = function(item) {
	    if (!item) {
	      return null;
	    }
	    item = item.previousSibling;
	    while (item) {
	      if (this.isDisplayed(item)) {
	        return item;
	      }
	      item = item.previousSibling;
	    }
	  };
	
	  ItemBuffer.prototype.getNextDisplayedSibling = function(item) {
	    if (!item) {
	      return null;
	    }
	    item = item.nextSibling;
	    while (item) {
	      if (this.isDisplayed(item)) {
	        return item;
	      }
	      item = item.nextSibling;
	    }
	  };
	
	  ItemBuffer.prototype.getNextDisplayedItem = function(item) {
	    if (!item) {
	      return null;
	    }
	    item = item.nextItem;
	    while (item) {
	      if (this.isDisplayed(item)) {
	        return item;
	      }
	      item = item.nextItem;
	    }
	  };
	
	  ItemBuffer.prototype.getPreviousDisplayedItem = function(item) {
	    if (!item) {
	      return null;
	    }
	    item = item.previousItem;
	    while (item) {
	      if (this.isDisplayed(item)) {
	        return item;
	      }
	      item = item.previousItem;
	    }
	  };
	
	  ItemBuffer.prototype.getFirstDisplayedDescendant = function(item) {
	    var each, end;
	    if (!item) {
	      return null;
	    }
	    end = item.nextBranch;
	    each = item.nextItem;
	    while (each !== end) {
	      if (this.isDisplayed(each)) {
	        return each;
	      }
	      each = each.nextItem;
	    }
	  };
	
	  ItemBuffer.prototype.getLastDisplayedDescendant = function(item) {
	    var each;
	    if (!item) {
	      return null;
	    }
	    each = item.lastBranchItem;
	    while (each !== item) {
	      if (this.isDisplayed(each)) {
	        return each;
	      }
	      each = each.previousItem;
	    }
	  };
	
	  ItemBuffer.prototype.getFirstDisplayedDescendantOrSelf = function(item) {
	    var ref1;
	    return (ref1 = this.getFirstDisplayedDescendant(item)) != null ? ref1 : item;
	  };
	
	  ItemBuffer.prototype.getLastDisplayedDescendantOrSelf = function(item) {
	    var ref1;
	    return (ref1 = this.getLastDisplayedDescendant(item)) != null ? ref1 : item;
	  };
	
	  ItemBuffer.prototype.getDisplayedBodyCharacterRange = function(item) {
	    var itemSpan;
	    if (typeof item === 'string') {
	      item = this.outline.getItemForID(item);
	    }
	    itemSpan = this.getItemSpanForItem(item);
	    if (itemSpan) {
	      return {
	        location: itemSpan.getLocation(),
	        length: itemSpan.getLength() - 1
	      };
	    } else {
	      return null;
	    }
	  };
	
	  ItemBuffer.prototype.getDisplayedBranchCharacterRange = function(item) {
	    var end, endItemSpan, start, startItemSpan;
	    if (typeof item === 'string') {
	      item = this.outline.getItemForID(item);
	    }
	    startItemSpan = this.getItemSpanForItem(item);
	    if (startItemSpan) {
	      endItemSpan = this.getItemSpanForItem(this.getLastDisplayedDescendantOrSelf(item));
	      start = startItemSpan.getLocation();
	      end = endItemSpan.getLocation() + endItemSpan.getLength();
	      return {
	        location: start,
	        length: end - start
	      };
	    } else {
	      return null;
	    }
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  ItemBuffer.prototype.getItemOffsetForLocation = function(location) {
	    var each, item, length, spanInfo;
	    length = this.getLength();
	    if (location === -1) {
	      location = length;
	    }
	    location = Math.min(Math.max(location, 0), length);
	    spanInfo = this.getSpanInfoAtLocation(location, true);
	    if (location === length) {
	      if (item = spanInfo != null ? spanInfo.span.item : void 0) {
	        each = item.nextItem;
	        while (each && this.getDisplayedSelfOrAncestor(each)) {
	          item = each;
	          each = each.nextItem;
	        }
	        return {
	          item: item,
	          offset: item.bodyString.length + 1
	        };
	      }
	    }
	    return {
	      item: spanInfo != null ? spanInfo.span.item : void 0,
	      offset: spanInfo != null ? spanInfo.location : void 0
	    };
	  };
	
	  ItemBuffer.prototype.getLocationForItemOffset = function(item, offset) {
	    var visibleItem;
	    visibleItem = item;
	    while (visibleItem && !this.isDisplayed(visibleItem)) {
	      visibleItem = visibleItem.previousItem;
	    }
	    if (visibleItem !== item) {
	      offset = (visibleItem != null ? visibleItem.bodyString.length : void 0) + 1;
	      if (!visibleItem) {
	        return 0;
	      }
	    }
	    return this.getItemSpanForItem(visibleItem).getLocation() + offset;
	  };
	
	  ItemBuffer.prototype.replaceRange = function(location, length, string, lineSpans) {
	    var each, i, len;
	    if (location < 0 || (location + length) > this.getLength()) {
	      throw new Error("Invalide text range: " + location + "-" + (location + length));
	    }
	    if (lineSpans) {
	      for (i = 0, len = lineSpans.length; i < len; i++) {
	        each = lineSpans[i];
	        assert(!each.isInOutline, 'Inserted items must be deteched first');
	      }
	    }
	    return this.groupChanges(null, (function(_this) {
	      return function() {
	        var end, endItem, hiddenItems, previouslySelectedItems, ref1, selection, start, startItem;
	        selection = (ref1 = _this.editor) != null ? ref1.selection : void 0;
	        if (length > 0 && selection && selection.location === location && selection.length === length) {
	          start = _this.getItemOffsetForLocation(location);
	          startItem = start != null ? start.item : void 0;
	          end = _this.getItemOffsetForLocation(location + length);
	          endItem = end != null ? end.item : void 0;
	          if (!_this.isDisplayed(endItem)) {
	            assert(location + length === _this.getLength(), 'can only happen at end of buffer');
	            endItem = _this.hoistedItem.nextBranch;
	          }
	          previouslySelectedItems = new Set();
	          hiddenItems = [];
	          each = startItem;
	          while (each !== endItem) {
	            if (_this.isDisplayed(each)) {
	              previouslySelectedItems.add(each);
	            } else if (Selection.isSelectable(_this, each, previouslySelectedItems)) {
	              previouslySelectedItems.add(each);
	              hiddenItems.push(each);
	            }
	            each = each.nextItem;
	          }
	          _this.outline.removeItems(hiddenItems);
	        }
	        return ItemBuffer.__super__.replaceRange.call(_this, location, length, string, lineSpans);
	      };
	    })(this));
	  };
	
	
	  /*
	  Character attributes
	   */
	
	  ItemBuffer.prototype.getAttributedString = function(spanIndex, count) {
	    var body, bodyRunBuffer, each, i, item, itemAttributes, len, ref1, runSpans, spanString;
	    runSpans = [];
	    ref1 = this.getSpans(spanIndex, count);
	    for (i = 0, len = ref1.length; i < len; i++) {
	      each = ref1[i];
	      spanString = each.getString();
	      item = each.item;
	      itemAttributes = {
	        id: item.id,
	        parentID: item.parent.id,
	        attributes: item.attributes
	      };
	      body = item.bodyHighlightedAttributedString;
	      bodyRunBuffer = body.runBuffer;
	      if (bodyRunBuffer) {
	        body.runBuffer.iterateRuns(0, body.runBuffer.getRunCount(), function(run) {
	          var attributes;
	          attributes = Object.assign({}, run.attributes);
	          attributes.item = itemAttributes;
	          return runSpans.push({
	            string: run.string,
	            attributes: attributes
	          });
	        });
	        if (body.length !== spanString.length) {
	          runSpans.push({
	            string: '\n',
	            attributes: {
	              item: itemAttributes
	            }
	          });
	        }
	      } else {
	        runSpans.push({
	          string: spanString,
	          attributes: {
	            item: itemAttributes
	          }
	        });
	      }
	    }
	    return runSpans;
	  };
	
	  ItemBuffer.prototype.getAttributesAtIndex = function(location, effectiveRange, longestEffectiveRange) {
	    var attributes, start;
	    start = this.getSpanInfoAtLocation(location, true);
	    attributes = start.span.item.getBodyAttributesAtIndex(start.location, effectiveRange, longestEffectiveRange);
	    if (effectiveRange) {
	      effectiveRange.location += start.spanLocation;
	    }
	    if (longestEffectiveRange) {
	      longestEffectiveRange.location += start.spanLocation;
	    }
	    return attributes;
	  };
	
	  ItemBuffer.prototype.getBodyAttributeAtIndex = function(attribute, location, effectiveRange, longestEffectiveRange) {
	    var start;
	    start = this.getSpanInfoAtLocation(location, true);
	    attribute = start.span.item.getBodyAttributesAtIndex(attribute, start.location, effectiveRange, longestEffectiveRange);
	    if (effectiveRange) {
	      effectiveRange.location += start.spanLocation;
	    }
	    if (longestEffectiveRange) {
	      longestEffectiveRange.location += start.spanLocation;
	    }
	    return attribute;
	  };
	
	  ItemBuffer.prototype.setAttributesInRange = function(attributes, location, length) {};
	
	  ItemBuffer.prototype.addAttributeInRange = function(attribute, value, location, length) {};
	
	  ItemBuffer.prototype.addAttributesInRange = function(attributes, location, length) {};
	
	  ItemBuffer.prototype.removeAttributeInRange = function(attribute, location, length) {};
	
	
	  /*
	  Section: Serialization
	   */
	
	  ItemBuffer.prototype.serializeRange = function(location, length, options) {
	    var each, endItem, endItemOffset, endOffset, previouslySelectedItems, ref1, ref2, serializeItems, shouldSerializeItem, startItem, startItemOffset, startOffset, stopItem;
	    if (options == null) {
	      options = {};
	    }
	    startItemOffset = this.getItemOffsetForLocation(location);
	    endItemOffset = this.getItemOffsetForLocation(location + length);
	    startItem = startItemOffset.item;
	    startOffset = startItemOffset.offset;
	    endItem = endItemOffset.item;
	    endOffset = endItemOffset.offset;
	    previouslySelectedItems = new Set();
	    serializeItems = [];
	    shouldSerializeItem = (function(_this) {
	      return function(item) {
	        if (options.onlyDisplayed) {
	          return _this.isDisplayed(item);
	        } else {
	          if (Selection.isSelectable(_this, item, previouslySelectedItems)) {
	            previouslySelectedItems.add(item);
	            return true;
	          } else {
	            return false;
	          }
	        }
	      };
	    })(this);
	    each = startItem;
	    stopItem = endItem.nextItem;
	    while (each !== stopItem) {
	      if (shouldSerializeItem(each)) {
	        serializeItems.push(each);
	      }
	      each = each.nextItem;
	    }
	    if (!shouldSerializeItem(startItem)) {
	      startOffset = 0;
	    }
	    if (!shouldSerializeItem(endItem)) {
	      endOffset = (ref1 = (ref2 = serializeItems[serializeItems.length - 1]) != null ? ref2.bodyString.length : void 0) != null ? ref1 : 0;
	    }
	    if (options['startOffset'] == null) {
	      options['startOffset'] = startOffset;
	    }
	    if (options['endOffset'] == null) {
	      options['endOffset'] = endOffset;
	    }
	    options['flattenItemHiearchy'] = false;
	    return this.serializeItems(serializeItems, options);
	  };
	
	  ItemBuffer.prototype.serializeItems = function(items, options) {
	    var collapsedItems, each, i, len;
	    if (options == null) {
	      options = {};
	    }
	    if (options.flattenItemHiearchy == null) {
	      options.flattenItemHiearchy = true;
	    }
	    if (items && options.flattenItemHiearchy) {
	      items = Item.flattenItemHiearchy(items, false);
	    }
	    if (items == null) {
	      items = this.outline.root.descendants;
	    }
	    if (!options.collapsedItems) {
	      collapsedItems = [];
	      for (i = 0, len = items.length; i < len; i++) {
	        each = items[i];
	        if (this.isCollapsed(each)) {
	          collapsedItems.push(each);
	        }
	      }
	      options.collapsedItems = collapsedItems;
	    }
	    return ItemSerializer.serializeItems(items, options);
	  };
	
	  ItemBuffer.prototype.deserializeItems = function(serializedItems, options) {
	    var e;
	    if (options == null) {
	      options = {};
	    }
	    try {
	      return ItemSerializer.deserializeItems(serializedItems, this.outline, options);
	    } catch (error) {
	      e = error;
	      return null;
	    }
	  };
	
	
	  /*
	  Section: Item Spans
	   */
	
	  ItemBuffer.prototype.createSpan = function(text) {
	    var item;
	    item = this.outline.createItem(text);
	    item.indent = this.hoistedItem.depth + 1;
	    return this.createSpanForItem(item);
	  };
	
	  ItemBuffer.prototype.createSpanForItem = function(item) {
	    return new ItemSpan(item);
	  };
	
	  ItemBuffer.prototype.getItemSpanForItem = function(item) {
	    return this._itemsToItemSpansMap.get(item);
	  };
	
	  ItemBuffer.prototype.insertSpans = function(spanIndex, itemSpans) {
	    var each, hoistedDepth, i, insertAfter, insertBefore, items, len, parent, ref1;
	    if (itemSpans.length === 0) {
	      return;
	    }
	    hoistedDepth = this.hoistedItem.depth;
	    for (i = 0, len = itemSpans.length; i < len; i++) {
	      each = itemSpans[i];
	      assert(each.item.depth > hoistedDepth, 'Span item depth must be greater then hoisted item depth');
	      this._itemsToItemSpansMap.set(each.item, each);
	      if (parent = each.item.parent) {
	        this._invalidateItemCalculatedStyles.add(parent);
	      }
	    }
	    if (!this.isUpdatingIndex) {
	      if (!(insertBefore = (ref1 = this.getSpan(spanIndex)) != null ? ref1.item : void 0)) {
	        if (insertAfter = this.lastDisplayedItem) {
	          insertBefore = insertAfter.nextBranch;
	        } else {
	          insertBefore = this.hoistedItem.nextSibling;
	        }
	      }
	      items = (function() {
	        var j, len1, results;
	        results = [];
	        for (j = 0, len1 = itemSpans.length; j < len1; j++) {
	          each = itemSpans[j];
	          results.push(each.item);
	        }
	        return results;
	      })();
	      this.beginUpdatingOutline();
	      this.outline.insertItemsBefore(items, insertBefore);
	      this.endUpdatingOutline();
	    }
	    return ItemBuffer.__super__.insertSpans.call(this, spanIndex, itemSpans);
	  };
	
	  ItemBuffer.prototype.removeSpans = function(spanIndex, removeCount) {
	    var each, lineSpans;
	    if (removeCount === 0) {
	      return;
	    }
	    lineSpans = [];
	    this.iterateLines(spanIndex, removeCount, (function(_this) {
	      return function(each) {
	        var parent;
	        _this._itemsToItemSpansMap["delete"](each.item);
	        if (parent = each.item.parent) {
	          _this._invalidateItemCalculatedStyles.add(parent);
	        }
	        return lineSpans.push(each);
	      };
	    })(this));
	    if (!this.isUpdatingIndex) {
	      this.beginUpdatingOutline();
	      this.outline.removeItems((function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = lineSpans.length; i < len; i++) {
	          each = lineSpans[i];
	          results.push(each.item);
	        }
	        return results;
	      })());
	      this.endUpdatingOutline();
	    }
	    return ItemBuffer.__super__.removeSpans.call(this, spanIndex, removeCount);
	  };
	
	  return ItemBuffer;
	
	})(LineBuffer);
	
	module.exports = ItemBuffer;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	var LineBuffer, LineSpan, SpanBuffer, assert, ref, util,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(1), SpanBuffer = ref.SpanBuffer, util = ref.util;
	
	LineSpan = __webpack_require__(358);
	
	assert = util.assert;
	
	LineBuffer = (function(superClass) {
	  extend(LineBuffer, superClass);
	
	  function LineBuffer(children) {
	    LineBuffer.__super__.constructor.call(this, children);
	  }
	
	  LineBuffer.prototype.getLineCount = function() {
	    return this.spanCount;
	  };
	
	  LineBuffer.prototype.getLine = function(index) {
	    return this.getSpan(index);
	  };
	
	  LineBuffer.prototype.getLineIndex = function(child) {
	    return this.getSpanIndex(child);
	  };
	
	  LineBuffer.prototype.getLines = function(start, count) {
	    return this.getSpans(start, count);
	  };
	
	  LineBuffer.prototype.iterateLines = function(start, count, operation) {
	    return this.iterateSpans(start, count, operation);
	  };
	
	  LineBuffer.prototype.insertLines = function(start, lines) {
	    return this.insertSpans(start, lines);
	  };
	
	  LineBuffer.prototype.removeLines = function(start, removeCount) {
	    return this.removeSpans(start, removeCount);
	  };
	
	  LineBuffer.prototype.createLine = function(text) {
	    return this.createSpan(text);
	  };
	
	  LineBuffer.prototype.createSpan = function(text) {
	    return new LineSpan(text);
	  };
	
	  LineBuffer.prototype.replaceRange = function(location, length, string, lineSpans) {
	    var bufferLength, changeEvent, each, end, insertedString, lines;
	    end = location + length;
	    bufferLength = this.getLength();
	    if (location < 0 || end > bufferLength) {
	      throw new Error("Invalide text range: " + location + "-" + end);
	    }
	    if (this.emitter && !this.scheduledChangeEvent) {
	      insertedString = string;
	      if (end === bufferLength) {
	        insertedString += '\n';
	      }
	      changeEvent = {
	        location: location,
	        replacedLength: length,
	        insertedString: insertedString,
	        insertedSpans: [],
	        removedSpans: []
	      };
	    }
	    lines = string.split('\n');
	    if (lineSpans == null) {
	      lineSpans = (function() {
	        var i, len, results;
	        results = [];
	        for (i = 0, len = lines.length; i < len; i++) {
	          each = lines[i];
	          results.push(this.createSpan(each));
	        }
	        return results;
	      }).call(this);
	    }
	    return this.groupChanges(changeEvent, (function(_this) {
	      return function() {
	        var endSuffix, lastSpan, ref1, start;
	        start = _this.getSpanInfoAtLocation(location, true);
	        if (!start || location === bufferLength) {
	          assert(length === 0);
	          return _this.insertSpans(_this.getSpanCount(), lineSpans);
	        } else {
	          end = _this.getSpanInfoAtLocation(end, true);
	          if (start.span === end.span && lineSpans.length === 1) {
	            end = start.location + length;
	            if (length && end === start.span.getLength()) {
	              length--;
	            }
	            return start.span.replaceRange(start.location, length, lineSpans[0].getLineContentSuffix(0));
	          } else if (start.location === 0 && start.span !== end.span && end.location === 0) {
	            end.span.replaceRange(0, end.location, lineSpans.pop().getLineContentSuffix(0));
	            _this.removeSpans(start.spanIndex, end.spanIndex - start.spanIndex);
	            return _this.insertLines(start.spanIndex, lineSpans);
	          } else {
	            endSuffix = end.span.getLineContentSuffix(end.location);
	            start.span.replaceRange(start.location, start.span.getLineContent().length - start.location, lineSpans.shift().getLineContentSuffix(0));
	            _this.removeSpans(start.spanIndex + 1, end.spanIndex - start.spanIndex);
	            _this.insertLines(start.spanIndex + 1, lineSpans);
	            if (endSuffix.length) {
	              lastSpan = (ref1 = lineSpans.pop()) != null ? ref1 : start.span;
	              return lastSpan.replaceRange(lastSpan.getLineContent().length, 0, endSuffix);
	            }
	          }
	        }
	      };
	    })(this));
	  };
	
	  return LineBuffer;
	
	})(SpanBuffer);
	
	module.exports = LineBuffer;


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	var Itme, LineSpan, Span, assert, ref, util,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(1), Itme = ref.Itme, Span = ref.Span, util = ref.util;
	
	assert = util.assert;
	
	LineSpan = (function(superClass) {
	  extend(LineSpan, superClass);
	
	  function LineSpan(text) {
	    LineSpan.__super__.constructor.call(this, text);
	  }
	
	  LineSpan.prototype.getLineContent = function() {
	    return this.string;
	  };
	
	  LineSpan.prototype.getLineContentSuffix = function(location) {
	    return this.getLineContent().substr(location);
	  };
	
	  LineSpan.prototype.getLength = function() {
	    return this.string.length + 1;
	  };
	
	  LineSpan.prototype.getString = function() {
	    return this.getLineContent() + '\n';
	  };
	
	  LineSpan.prototype.setString = function(string) {
	    if (string == null) {
	      string = '';
	    }
	    assert(string.indexOf('\n') === -1);
	    return LineSpan.__super__.setString.call(this, string);
	  };
	
	  LineSpan.prototype.deleteRange = function(location, length) {
	    assert(location + length <= this.string.length);
	    return LineSpan.__super__.deleteRange.call(this, location, length);
	  };
	
	  LineSpan.prototype.insertString = function(location, text) {
	    assert(text.indexOf('\n') === -1);
	    return LineSpan.__super__.insertString.call(this, location, text);
	  };
	
	  return LineSpan;
	
	})(Span);
	
	module.exports = LineSpan;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	var Item, Selection;
	
	Item = __webpack_require__(1).Item;
	
	module.exports = Selection = (function() {
	  function Selection(editor1, start, end1, startItem1, startOffset1, endItem1, endOffset1) {
	    this.editor = editor1;
	    this.start = start;
	    this.end = end1;
	    this.startItem = startItem1;
	    this.startOffset = startOffset1;
	    this.endItem = endItem1;
	    this.endOffset = endOffset1;
	  }
	
	
	  /*
	  Section: Selection
	   */
	
	  Selection.prototype.isCollapsed = null;
	
	  Object.defineProperty(Selection.prototype, 'isCollapsed', {
	    get: function() {
	      return this.startItem === this.endItem && this.startOffset === this.endOffset;
	    }
	  });
	
	  Selection.prototype.isFullySelectingItems = null;
	
	  Object.defineProperty(Selection.prototype, 'isFullySelectingItems', {
	    get: function() {
	      if (this.startItem) {
	        return this.startOffset === 0 && this.endOffset === 0 && this.endItem === this.startItem.nextItem;
	      } else {
	        return true;
	      }
	    }
	  });
	
	
	  /*
	  Section: Characters
	   */
	
	  Selection.prototype.start = null;
	
	  Selection.prototype.end = null;
	
	  Selection.prototype.location = null;
	
	  Object.defineProperty(Selection.prototype, 'location', {
	    get: function() {
	      return this.start;
	    }
	  });
	
	  Selection.prototype.length = null;
	
	  Object.defineProperty(Selection.prototype, 'length', {
	    get: function() {
	      return this.end - this.start;
	    }
	  });
	
	
	  /*
	  Section: Items
	   */
	
	  Selection.prototype.startItem = null;
	
	  Selection.prototype.startOffset = void 0;
	
	  Selection.prototype.endItem = null;
	
	  Selection.prototype.endOffset = void 0;
	
	  Selection.prototype.selectedItems = null;
	
	  Object.defineProperty(Selection.prototype, 'selectedItems', {
	    get: function() {
	      var selectedItems;
	      selectedItems = [];
	      this.forEachItem(function(item, location, length, fullySelected) {
	        return selectedItems.push(item);
	      });
	      return selectedItems;
	    }
	  });
	
	  Selection.prototype.displayedSelectedItems = null;
	
	  Object.defineProperty(Selection.prototype, 'displayedSelectedItems', {
	    get: function() {
	      var each, i, len, ref, results;
	      results = [];
	      ref = this.selectedItems;
	      for (i = 0, len = ref.length; i < len; i++) {
	        each = ref[i];
	        if (this.editor.isDisplayed(each)) {
	          results.push(each);
	        }
	      }
	      return results;
	    }
	  });
	
	  Selection.prototype.displayedAncestorSelectedItems = null;
	
	  Object.defineProperty(Selection.prototype, 'displayedAncestorSelectedItems', {
	    get: function() {
	      var each, i, len, ref, results;
	      results = [];
	      ref = this.selectedItems;
	      for (i = 0, len = ref.length; i < len; i++) {
	        each = ref[i];
	        if (this.editor.getDisplayedSelfOrAncestor(each)) {
	          results.push(each);
	        }
	      }
	      return results;
	    }
	  });
	
	  Selection.prototype.trailingHiddenDescendentItems = null;
	
	  Object.defineProperty(Selection.prototype, 'trailingHiddenDescendentItems', {
	    get: function() {
	      var each, end, last, selectedItems, trailingCollapsed;
	      trailingCollapsed = [];
	      selectedItems = this.selectedItems;
	      last = selectedItems[selectedItems.length - 1];
	      end = last != null ? last.nextBranch : void 0;
	      each = last != null ? last.nextItem : void 0;
	      while (each !== end) {
	        if (this.editor.isDisplayed(each)) {
	          return trailingCollapsed;
	        } else {
	          trailingCollapsed.push(each);
	        }
	        each = each.nextItem;
	      }
	      return trailingCollapsed;
	    }
	  });
	
	  Selection.prototype.selectedItemsCommonAncestors = null;
	
	  Object.defineProperty(Selection.prototype, 'selectedItemsCommonAncestors', {
	    get: function() {
	      return Item.getCommonAncestors(this.selectedItems);
	    }
	  });
	
	  Selection.calculatedSelectedItems = function(editor, startItem, startOffset, endItem, endOffset) {
	    var callback, selectedItems;
	    selectedItems = [];
	    callback = function(item, location, length, fullySelected) {
	      return selectedItems.push(item);
	    };
	    this.forEachCalculatedSelectedItem(editor, startItem, startOffset, endItem, endOffset, callback);
	    return selectedItems;
	  };
	
	  Selection.isSelectable = function(editor, item, previouslySelectedItems) {
	    var each;
	    if (editor.isDisplayed(item)) {
	      return true;
	    } else {
	      each = item != null ? item.parent : void 0;
	      while (each && each !== editor.hoistedItem) {
	        if (previouslySelectedItems.has(each)) {
	          return true;
	        }
	        each = each.parent;
	      }
	      return false;
	    }
	  };
	
	  Selection.forEachCalculatedSelectedItem = function(editor, startItem, startOffset, endItem, endOffset, callback) {
	    var each, previouslySelectedItems;
	    previouslySelectedItems = new Set();
	    if (startItem === endItem) {
	      if (startItem) {
	        if (this.isSelectable(editor, startItem, previouslySelectedItems)) {
	          previouslySelectedItems.add(startItem);
	          return callback(startItem, startOffset, endOffset - startOffset, false);
	        }
	      }
	    } else {
	      each = startItem.nextItem;
	      if (this.isSelectable(editor, startItem, previouslySelectedItems)) {
	        previouslySelectedItems.add(startItem);
	        callback(startItem, startOffset, each.bodyString.length - startOffset, false);
	      }
	      while (each !== endItem) {
	        if (this.isSelectable(editor, each, previouslySelectedItems)) {
	          previouslySelectedItems.add(each);
	          callback(each, 0, each.bodyString.length, true);
	        }
	        each = each.nextItem;
	      }
	      if (endOffset > 0) {
	        if (this.isSelectable(editor, endItem, previouslySelectedItems)) {
	          previouslySelectedItems.add(endItem);
	          return callback(endItem, 0, endOffset, false);
	        }
	      }
	    }
	  };
	
	  Selection.prototype.forEachItem = function(callback) {
	    return Selection.forEachCalculatedSelectedItem(this.editor, this.startItem, this.startOffset, this.endItem, this.endOffset, callback);
	  };
	
	  Selection.prototype.prepareForMove = function() {
	    if (!this.startItem) {
	      return;
	    }
	    if (this.endItem !== this.startItem && this.endOffset === 0) {
	      return this.savedFullySelectedEnd = this.endItem.previousItem;
	    } else if (this.endOffset === this.endItem.bodyString.length + 1) {
	      return this.savedFullySelectedEnd = this.endItem;
	    }
	  };
	
	  Selection.prototype.restoreAfterMove = function() {
	    if (this.savedFullySelectedEnd) {
	      this.endItem = this.savedFullySelectedEnd.nextItem;
	      if (this.endItem) {
	        this.endOffset = 0;
	      } else {
	        this.endItem = this.savedFullySelectedEnd;
	        this.endOffset = this.savedFullySelectedEnd.bodyString.length + 1;
	      }
	      return this.savedFullySelectedEnd = void 0;
	    }
	  };
	
	  Selection.prototype.selectionByExtendingToItem = function(editor) {
	    var endItem, endOffset, nextItem;
	    if (!this.startItem) {
	      return new Selection(this.editor, 0, 0);
	    }
	    endItem = this.endItem;
	    endOffset = endItem.bodyString.length;
	    if (!this.isCollapsed && this.endOffset === 0) {
	      endOffset = 0;
	    } else {
	      nextItem = endItem.nextItem;
	      if (nextItem) {
	        endItem = nextItem;
	        endOffset = 0;
	      }
	    }
	    return new Selection(this.editor, null, null, this.startItem, 0, endItem, endOffset);
	  };
	
	  Selection.prototype.selectionByExtendingToBranch = function(editor) {
	    var commonAncestors, last, next;
	    if (!this.startItem) {
	      return new Selection(this.editor, 0, 0);
	    }
	    commonAncestors = this.selectedItemsCommonAncestors;
	    last = commonAncestors[commonAncestors.length - 1].lastBranchItem;
	    next = last.nextItem;
	    if (next) {
	      return new Selection(this.editor, null, null, commonAncestors[0], 0, next, 0);
	    } else {
	      return new Selection(this.editor, null, null, commonAncestors[0], 0, last, last.bodyString.length);
	    }
	  };
	
	  Selection.prototype.toString = function() {
	    return this.start + "," + this.end;
	  };
	
	  return Selection;
	
	})();


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	var AttributedString, ItemSpan, LineSpan,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	AttributedString = __webpack_require__(1).AttributedString;
	
	LineSpan = __webpack_require__(358);
	
	ItemSpan = (function(superClass) {
	  extend(ItemSpan, superClass);
	
	  function ItemSpan(item) {
	    this.item = item;
	    ItemSpan.__super__.constructor.call(this, this.item.bodyString);
	    this.bodyAttributedStringClone = this.item.bodyAttributedString.clone();
	  }
	
	  ItemSpan.prototype.clone = function() {
	    return new this.constructor(this.item.clone(false));
	  };
	
	
	  /*
	  Section: Characters
	   */
	
	  ItemSpan.prototype.getLineContent = function() {
	    return this.string;
	  };
	
	  ItemSpan.prototype.getLineContentSuffix = function(location) {
	    return this.bodyAttributedStringClone.attributedSubstringFromRange(location, -1);
	  };
	
	  ItemSpan.prototype.replaceRange = function(location, length, text) {
	    var root, string;
	    if (text instanceof AttributedString) {
	      string = text.string;
	    } else {
	      string = text;
	    }
	    ItemSpan.__super__.replaceRange.call(this, location, length, string);
	    if (root = this.getRoot()) {
	      if (!root.isUpdatingIndex) {
	        root.beginUpdatingOutline();
	        this.item.replaceBodyRange(location, length, text);
	        root.endUpdatingOutline();
	      }
	    } else {
	      this.item.replaceBodyRange(location, length, text);
	    }
	    return this.bodyAttributedStringClone = this.item.bodyAttributedString.clone();
	  };
	
	
	  /*
	  Section: Debug
	   */
	
	  ItemSpan.prototype.toString = function() {
	    return ItemSpan.__super__.toString.call(this, this.item.id);
	  };
	
	  return ItemSpan;
	
	})(LineSpan);
	
	module.exports = ItemSpan;


/***/ }),
/* 361 */
/***/ (function(module, exports) {

	'use strict'
	
	/**
	 * Flatten an array into the supplied array.
	 *
	 * @module reduce-flatten
	 * @example
	 * var flatten = require('reduce-flatten')
	 */
	module.exports = flatten
	
	/**
	 * @alias module:reduce-flatten
	 * @example
	 * > numbers = [ 1, 2, [ 3, 4 ], 5 ]
	 * > numbers.reduce(flatten, [])
	 * [ 1, 2, 3, 4, 5 ]
	 */
	function flatten (prev, curr) {
	  return prev.concat(curr)
	}


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.29.4
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	    var hookCallback;
	
	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }
	
	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }
	
	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }
	
	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }
	
	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }
	
	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }
	
	    function isUndefined(input) {
	        return input === void 0;
	    }
	
	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }
	
	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }
	
	    function map(arr, fn) {
	        var res = [],
	            i,
	            arrLen = arr.length;
	        for (i = 0; i < arrLen; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }
	
	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }
	
	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }
	
	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }
	
	        return a;
	    }
	
	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }
	
	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }
	
	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }
	
	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;
	
	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }
	
	            return false;
	        };
	    }
	
	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));
	
	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }
	
	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }
	
	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }
	
	        return m;
	    }
	
	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;
	
	    function copyConfig(to, from) {
	        var i,
	            prop,
	            val,
	            momentPropertiesLen = momentProperties.length;
	
	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }
	
	        if (momentPropertiesLen > 0) {
	            for (i = 0; i < momentPropertiesLen; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }
	
	        return to;
	    }
	
	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }
	
	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }
	
	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }
	
	    function deprecate(msg, fn) {
	        var firstTime = true;
	
	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key,
	                    argLen = arguments.length;
	                for (i = 0; i < argLen; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }
	
	    var deprecations = {};
	
	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }
	
	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;
	
	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }
	
	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }
	
	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }
	
	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }
	
	    var keys;
	
	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }
	
	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };
	
	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }
	
	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }
	
	    var formattingTokens =
	            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};
	
	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }
	
	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }
	
	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;
	
	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }
	
	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }
	
	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }
	
	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);
	
	        return formatFunctions[format](m);
	    }
	
	    function expandFormat(format, locale) {
	        var i = 5;
	
	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }
	
	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }
	
	        return format;
	    }
	
	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };
	
	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];
	
	        if (format || !formatUpper) {
	            return format;
	        }
	
	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');
	
	        return this._longDateFormat[key];
	    }
	
	    var defaultInvalidDate = 'Invalid date';
	
	    function invalidDate() {
	        return this._invalidDate;
	    }
	
	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;
	
	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }
	
	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };
	
	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }
	
	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }
	
	    var aliases = {};
	
	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }
	
	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }
	
	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;
	
	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }
	
	        return normalizedInput;
	    }
	
	    var priorities = {};
	
	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }
	
	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }
	
	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }
	
	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }
	
	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;
	
	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }
	
	        return value;
	    }
	
	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }
	
	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }
	
	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }
	
	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i,
	                prioritizedLen = prioritized.length;
	            for (i = 0; i < prioritizedLen; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }
	
	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord =
	            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;
	
	    regexes = {};
	
	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }
	
	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }
	
	        return regexes[token](config._strict, config._locale);
	    }
	
	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(
	                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
	                    function (matched, p1, p2, p3, p4) {
	                        return p1 || p2 || p3 || p4;
	                    }
	                )
	        );
	    }
	
	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }
	
	    var tokens = {};
	
	    function addParseToken(token, callback) {
	        var i,
	            func = callback,
	            tokenLen;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        tokenLen = token.length;
	        for (i = 0; i < tokenLen; i++) {
	            tokens[token[i]] = func;
	        }
	    }
	
	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }
	
	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }
	
	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;
	
	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }
	
	    var indexOf;
	
	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }
	
	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }
	
	    // FORMATTING
	
	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });
	
	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });
	
	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });
	
	    // ALIASES
	
	    addUnitAlias('month', 'M');
	
	    // PRIORITY
	
	    addUnitPriority('month', 8);
	
	    // PARSING
	
	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });
	
	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });
	
	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });
	
	    // LOCALES
	
	    var defaultLocaleMonths =
	            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	                '_'
	            ),
	        defaultLocaleMonthsShort =
	            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;
	
	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }
	
	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }
	
	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;
	
	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }
	
	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }
	
	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function setMonth(mom, value) {
	        var dayOfMonth;
	
	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }
	
	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }
	
	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }
	
	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }
	
	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }
	
	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }
	
	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }
	
	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }
	
	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });
	
	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });
	
	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	    // ALIASES
	
	    addUnitAlias('year', 'y');
	
	    // PRIORITIES
	
	    addUnitPriority('year', 1);
	
	    // PARSING
	
	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);
	
	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });
	
	    // HELPERS
	
	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }
	
	    // HOOKS
	
	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };
	
	    // MOMENTS
	
	    var getSetYear = makeGetSet('FullYear', true);
	
	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }
	
	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }
	
	        return date;
	    }
	
	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }
	
	        return date;
	    }
	
	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	        return -fwdlw + fwd - 1;
	    }
	
	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;
	
	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }
	
	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }
	
	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;
	
	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }
	
	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }
	
	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }
	
	    // FORMATTING
	
	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	    // ALIASES
	
	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');
	
	    // PRIORITIES
	
	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);
	
	    // PARSING
	
	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);
	
	    addWeekParseToken(
	        ['w', 'ww', 'W', 'WW'],
	        function (input, week, config, token) {
	            week[token.substr(0, 1)] = toInt(input);
	        }
	    );
	
	    // HELPERS
	
	    // LOCALES
	
	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }
	
	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };
	
	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }
	
	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }
	
	    // MOMENTS
	
	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('d', 0, 'do', 'day');
	
	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });
	
	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });
	
	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });
	
	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');
	
	    // ALIASES
	
	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');
	
	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);
	
	    // PARSING
	
	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });
	
	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });
	
	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });
	
	    // HELPERS
	
	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }
	
	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }
	
	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }
	
	        return null;
	    }
	
	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }
	
	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }
	
	    var defaultLocaleWeekdays =
	            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;
	
	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }
	
	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }
	
	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }
	
	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];
	
	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }
	
	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }
	
	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;
	
	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }
	
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }
	
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	
	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }
	
	    // MOMENTS
	
	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }
	
	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }
	
	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	
	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.
	
	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }
	
	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }
	
	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }
	
	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }
	
	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }
	
	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	
	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;
	
	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }
	
	    function kFormat() {
	        return this.hours() || 24;
	    }
	
	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);
	
	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });
	
	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });
	
	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });
	
	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }
	
	    meridiem('a', true);
	    meridiem('A', false);
	
	    // ALIASES
	
	    addUnitAlias('hour', 'h');
	
	    // PRIORITY
	    addUnitPriority('hour', 13);
	
	    // PARSING
	
	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }
	
	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);
	
	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);
	
	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });
	
	    // LOCALES
	
	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }
	
	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);
	
	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }
	
	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,
	
	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,
	
	        week: defaultLocaleWeek,
	
	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,
	
	        meridiemParse: defaultLocaleMeridiemParse,
	    };
	
	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;
	
	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }
	
	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }
	
	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;
	
	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }
	
	    function isLocaleNameSane(name) {
	        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
	        return name.match('^[^/\\\\]*$') != null;
	    }
	
	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            typeof module !== 'undefined' &&
	            module &&
	            module.exports &&
	            isLocaleNameSane(name)
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = require;
	                __webpack_require__(363)("./" + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }
	
	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }
	
	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }
	
	        return globalLocale._abbr;
	    }
	
	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }
	
	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);
	
	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }
	
	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;
	
	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }
	
	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }
	
	    // returns locale data
	    function getLocale(key) {
	        var locale;
	
	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }
	
	        if (!key) {
	            return globalLocale;
	        }
	
	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }
	
	        return chooseLocale(key);
	    }
	
	    function listLocales() {
	        return keys(locales);
	    }
	
	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;
	
	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;
	
	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }
	
	            getParsingFlags(m).overflow = overflow;
	        }
	
	        return m;
	    }
	
	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex =
	            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex =
	            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 =
	            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };
	
	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat,
	            isoDatesLen = isoDates.length,
	            isoTimesLen = isoTimes.length;
	
	        if (match) {
	            getParsingFlags(config).iso = true;
	            for (i = 0, l = isoDatesLen; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimesLen; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];
	
	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }
	
	        return result;
	    }
	
	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }
	
	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^()]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }
	
	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }
	
	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }
	
	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }
	
	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);
	
	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	
	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }
	
	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }
	
	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }
	
	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );
	
	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }
	
	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }
	
	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;
	
	        if (config._d) {
	            return;
	        }
	
	        currentDate = currentDateArray(config);
	
	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }
	
	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }
	
	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }
	
	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }
	
	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }
	
	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }
	
	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();
	
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }
	
	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	
	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }
	
	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
	
	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;
	
	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;
	
	            curWeek = weekOfYear(createLocal(), dow, doy);
	
	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	            // Default to current week.
	            week = defaults(w.w, curWeek.week);
	
	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }
	
	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};
	
	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};
	
	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;
	
	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era,
	            tokenLen;
	
	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];
	        tokenLen = tokens.length;
	        for (i = 0; i < tokenLen; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }
	
	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }
	
	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }
	
	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );
	
	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }
	
	        configFromArray(config);
	        checkOverflow(config);
	    }
	
	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;
	
	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }
	
	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false,
	            configfLen = config._f.length;
	
	        if (configfLen === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }
	
	        for (i = 0; i < configfLen; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);
	
	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }
	
	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	            getParsingFlags(tempConfig).score = currentScore;
	
	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }
	
	        extend(config, bestMoment || tempConfig);
	    }
	
	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }
	
	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );
	
	        configFromArray(config);
	    }
	
	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }
	
	        return res;
	    }
	
	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;
	
	        config._locale = config._locale || getLocale(config._l);
	
	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }
	
	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }
	
	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }
	
	        if (!isValid(config)) {
	            config._d = null;
	        }
	
	        return config;
	    }
	
	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }
	
	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};
	
	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }
	
	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }
	
	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;
	
	        return createFromConfig(c);
	    }
	
	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }
	
	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );
	
	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }
	
	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isBefore', args);
	    }
	
	    function max() {
	        var args = [].slice.call(arguments, 0);
	
	        return pickBy('isAfter', args);
	    }
	
	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };
	
	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];
	
	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i,
	            orderLen = ordering.length;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }
	
	        for (i = 0; i < orderLen; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }
	
	        return true;
	    }
	
	    function isValid$1() {
	        return this._isValid;
	    }
	
	    function createInvalid$1() {
	        return createDuration(NaN);
	    }
	
	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;
	
	        this._isValid = isDurationValid(normalizedInput);
	
	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;
	
	        this._data = {};
	
	        this._locale = getLocale();
	
	        this._bubble();
	    }
	
	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }
	
	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }
	
	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }
	
	    // FORMATTING
	
	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }
	
	    offset('Z', ':');
	    offset('ZZ', '');
	
	    // PARSING
	
	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });
	
	    // HELPERS
	
	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;
	
	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;
	
	        if (matches === null) {
	            return null;
	        }
	
	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }
	
	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }
	
	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }
	
	    // HOOKS
	
	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};
	
	    // MOMENTS
	
	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }
	
	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }
	
	            this.utcOffset(input, keepLocalTime);
	
	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }
	
	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }
	
	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;
	
	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }
	
	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }
	
	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;
	
	        return (this.utcOffset() - input) % 60 === 0;
	    }
	
	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }
	
	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }
	
	        var c = {},
	            other;
	
	        copyConfig(c, this);
	        c = prepareConfig(c);
	
	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }
	
	        return this._isDSTShifted;
	    }
	
	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }
	
	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }
	
	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }
	
	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex =
	            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
	
	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;
	
	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );
	
	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }
	
	        ret = new Duration(duration);
	
	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }
	
	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }
	
	        return ret;
	    }
	
	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;
	
	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }
	
	    function positiveMomentsDifference(base, other) {
	        var res = {};
	
	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }
	
	        res.milliseconds = +other - +base.clone().add(res.months, 'M');
	
	        return res;
	    }
	
	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }
	
	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }
	
	        return res;
	    }
	
	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }
	
	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }
	
	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);
	
	        if (!mom.isValid()) {
	            // No op
	            return;
	        }
	
	        updateOffset = updateOffset == null ? true : updateOffset;
	
	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }
	
	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');
	
	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }
	
	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }
	
	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property,
	            propertyLen = properties.length;
	
	        for (i = 0; i < propertyLen; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }
	
	        return objectTest && propertyTest;
	    }
	
	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }
	
	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;
	
	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }
	
	        return objectTest && propertyTest;
	    }
	
	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }
	
	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (!arguments[0]) {
	                time = undefined;
	                formats = undefined;
	            } else if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);
	
	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }
	
	    function clone() {
	        return new Moment(this);
	    }
	
	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }
	
	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }
	
	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }
	
	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }
	
	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }
	
	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }
	
	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;
	
	        if (!this.isValid()) {
	            return NaN;
	        }
	
	        that = cloneWithOffset(input, this);
	
	        if (!that.isValid()) {
	            return NaN;
	        }
	
	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	        units = normalizeUnits(units);
	
	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }
	
	        return asFloat ? output : absFloor(output);
	    }
	
	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;
	
	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }
	
	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }
	
	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }
	
	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }
	
	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';
	
	        return this.format(prefix + year + datetime + suffix);
	    }
	
	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }
	
	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }
	
	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }
	
	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }
	
	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;
	
	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }
	
	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );
	
	    function localeData() {
	        return this._locale;
	    }
	
	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
	
	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }
	
	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }
	
	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }
	
	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }
	
	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }
	
	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }
	
	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }
	
	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
	
	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }
	
	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }
	
	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }
	
	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }
	
	    function toDate() {
	        return new Date(this.valueOf());
	    }
	
	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }
	
	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }
	
	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }
	
	    function isValid$2() {
	        return isValid(this);
	    }
	
	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }
	
	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }
	
	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }
	
	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');
	
	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
	
	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);
	
	    addParseToken(
	        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
	        function (input, array, config, token) {
	            var era = config._locale.erasParse(input, token, config._strict);
	            if (era) {
	                getParsingFlags(config).era = era;
	            } else {
	                getParsingFlags(config).invalidEra = input;
	            }
	        }
	    );
	
	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);
	
	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }
	
	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });
	
	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }
	
	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }
	
	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();
	
	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();
	
	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;
	
	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;
	
	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }
	
	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }
	
	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }
	
	        return '';
	    }
	
	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;
	
	            // truncate time
	            val = this.clone().startOf('day').valueOf();
	
	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }
	
	        return this.year();
	    }
	
	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }
	
	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }
	
	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }
	
	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }
	
	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }
	
	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }
	
	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }
	
	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();
	
	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));
	
	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }
	
	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }
	
	    // FORMATTING
	
	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });
	
	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });
	
	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }
	
	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	    // ALIASES
	
	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');
	
	    // PRIORITY
	
	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);
	
	    // PARSING
	
	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);
	
	    addWeekParseToken(
	        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
	        function (input, week, config, token) {
	            week[token.substr(0, 2)] = toInt(input);
	        }
	    );
	
	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });
	
	    // MOMENTS
	
	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }
	
	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }
	
	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }
	
	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }
	
	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }
	
	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }
	
	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }
	
	    // FORMATTING
	
	    addFormatToken('Q', 0, 'Qo', 'quarter');
	
	    // ALIASES
	
	    addUnitAlias('quarter', 'Q');
	
	    // PRIORITY
	
	    addUnitPriority('quarter', 7);
	
	    // PARSING
	
	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });
	
	    // MOMENTS
	
	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }
	
	    // FORMATTING
	
	    addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	    // ALIASES
	
	    addUnitAlias('date', 'D');
	
	    // PRIORITY
	    addUnitPriority('date', 9);
	
	    // PARSING
	
	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });
	
	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });
	
	    // MOMENTS
	
	    var getSetDayOfMonth = makeGetSet('Date', true);
	
	    // FORMATTING
	
	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	    // ALIASES
	
	    addUnitAlias('dayOfYear', 'DDD');
	
	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);
	
	    // PARSING
	
	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });
	
	    // HELPERS
	
	    // MOMENTS
	
	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }
	
	    // FORMATTING
	
	    addFormatToken('m', ['mm', 2], 0, 'minute');
	
	    // ALIASES
	
	    addUnitAlias('minute', 'm');
	
	    // PRIORITY
	
	    addUnitPriority('minute', 14);
	
	    // PARSING
	
	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);
	
	    // MOMENTS
	
	    var getSetMinute = makeGetSet('Minutes', false);
	
	    // FORMATTING
	
	    addFormatToken('s', ['ss', 2], 0, 'second');
	
	    // ALIASES
	
	    addUnitAlias('second', 's');
	
	    // PRIORITY
	
	    addUnitPriority('second', 15);
	
	    // PARSING
	
	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);
	
	    // MOMENTS
	
	    var getSetSecond = makeGetSet('Seconds', false);
	
	    // FORMATTING
	
	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });
	
	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });
	
	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });
	
	    // ALIASES
	
	    addUnitAlias('millisecond', 'ms');
	
	    // PRIORITY
	
	    addUnitPriority('millisecond', 16);
	
	    // PARSING
	
	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);
	
	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }
	
	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }
	
	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	
	    getSetMillisecond = makeGetSet('Milliseconds', false);
	
	    // FORMATTING
	
	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');
	
	    // MOMENTS
	
	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }
	
	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }
	
	    var proto = Moment.prototype;
	
	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );
	
	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }
	
	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }
	
	    function preParsePostFormat(string) {
	        return string;
	    }
	
	    var proto$1 = Locale.prototype;
	
	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;
	
	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;
	
	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;
	
	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;
	
	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }
	
	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	
	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }
	
	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }
	
	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;
	
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }
	
	            format = format || '';
	        }
	
	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];
	
	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }
	
	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }
	
	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }
	
	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }
	
	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }
	
	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }
	
	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }
	
	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    // Side effect imports
	
	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );
	
	    var mathAbs = Math.abs;
	
	    function abs() {
	        var data = this._data;
	
	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);
	
	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);
	
	        return this;
	    }
	
	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);
	
	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;
	
	        return duration._bubble();
	    }
	
	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }
	
	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }
	
	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }
	
	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;
	
	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }
	
	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;
	
	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;
	
	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;
	
	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;
	
	        days += absFloor(hours / 24);
	
	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        data.days = days;
	        data.months = months;
	        data.years = years;
	
	        return this;
	    }
	
	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }
	
	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }
	
	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;
	
	        units = normalizeUnits(units);
	
	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }
	
	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }
	
	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }
	
	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');
	
	    function clone$1() {
	        return createDuration(this);
	    }
	
	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }
	
	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }
	
	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');
	
	    function weeks() {
	        return absFloor(this.days() / 7);
	    }
	
	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };
	
	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }
	
	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);
	
	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];
	
	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }
	
	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }
	
	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }
	
	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;
	
	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }
	
	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);
	
	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }
	
	        return locale.postformat(output);
	    }
	
	    var abs$1 = Math.abs;
	
	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }
	
	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }
	
	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;
	
	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }
	
	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;
	
	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;
	
	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	
	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
	
	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }
	
	    var proto$2 = Duration.prototype;
	
	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;
	
	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;
	
	    // FORMATTING
	
	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');
	
	    // PARSING
	
	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });
	
	    //! moment.js
	
	    hooks.version = '2.29.4';
	
	    setHookCallback(createLocal);
	
	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;
	
	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };
	
	    return hooks;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)(module)))

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./af": 364,
		"./af.js": 364,
		"./ar": 365,
		"./ar-dz": 366,
		"./ar-dz.js": 366,
		"./ar-kw": 367,
		"./ar-kw.js": 367,
		"./ar-ly": 368,
		"./ar-ly.js": 368,
		"./ar-ma": 369,
		"./ar-ma.js": 369,
		"./ar-sa": 370,
		"./ar-sa.js": 370,
		"./ar-tn": 371,
		"./ar-tn.js": 371,
		"./ar.js": 365,
		"./az": 372,
		"./az.js": 372,
		"./be": 373,
		"./be.js": 373,
		"./bg": 374,
		"./bg.js": 374,
		"./bm": 375,
		"./bm.js": 375,
		"./bn": 376,
		"./bn-bd": 377,
		"./bn-bd.js": 377,
		"./bn.js": 376,
		"./bo": 378,
		"./bo.js": 378,
		"./br": 379,
		"./br.js": 379,
		"./bs": 380,
		"./bs.js": 380,
		"./ca": 381,
		"./ca.js": 381,
		"./cs": 382,
		"./cs.js": 382,
		"./cv": 383,
		"./cv.js": 383,
		"./cy": 384,
		"./cy.js": 384,
		"./da": 385,
		"./da.js": 385,
		"./de": 386,
		"./de-at": 387,
		"./de-at.js": 387,
		"./de-ch": 388,
		"./de-ch.js": 388,
		"./de.js": 386,
		"./dv": 389,
		"./dv.js": 389,
		"./el": 390,
		"./el.js": 390,
		"./en-au": 391,
		"./en-au.js": 391,
		"./en-ca": 392,
		"./en-ca.js": 392,
		"./en-gb": 393,
		"./en-gb.js": 393,
		"./en-ie": 394,
		"./en-ie.js": 394,
		"./en-il": 395,
		"./en-il.js": 395,
		"./en-in": 396,
		"./en-in.js": 396,
		"./en-nz": 397,
		"./en-nz.js": 397,
		"./en-sg": 398,
		"./en-sg.js": 398,
		"./eo": 399,
		"./eo.js": 399,
		"./es": 400,
		"./es-do": 401,
		"./es-do.js": 401,
		"./es-mx": 402,
		"./es-mx.js": 402,
		"./es-us": 403,
		"./es-us.js": 403,
		"./es.js": 400,
		"./et": 404,
		"./et.js": 404,
		"./eu": 405,
		"./eu.js": 405,
		"./fa": 406,
		"./fa.js": 406,
		"./fi": 407,
		"./fi.js": 407,
		"./fil": 408,
		"./fil.js": 408,
		"./fo": 409,
		"./fo.js": 409,
		"./fr": 410,
		"./fr-ca": 411,
		"./fr-ca.js": 411,
		"./fr-ch": 412,
		"./fr-ch.js": 412,
		"./fr.js": 410,
		"./fy": 413,
		"./fy.js": 413,
		"./ga": 414,
		"./ga.js": 414,
		"./gd": 415,
		"./gd.js": 415,
		"./gl": 416,
		"./gl.js": 416,
		"./gom-deva": 417,
		"./gom-deva.js": 417,
		"./gom-latn": 418,
		"./gom-latn.js": 418,
		"./gu": 419,
		"./gu.js": 419,
		"./he": 420,
		"./he.js": 420,
		"./hi": 421,
		"./hi.js": 421,
		"./hr": 422,
		"./hr.js": 422,
		"./hu": 423,
		"./hu.js": 423,
		"./hy-am": 424,
		"./hy-am.js": 424,
		"./id": 425,
		"./id.js": 425,
		"./is": 426,
		"./is.js": 426,
		"./it": 427,
		"./it-ch": 428,
		"./it-ch.js": 428,
		"./it.js": 427,
		"./ja": 429,
		"./ja.js": 429,
		"./jv": 430,
		"./jv.js": 430,
		"./ka": 431,
		"./ka.js": 431,
		"./kk": 432,
		"./kk.js": 432,
		"./km": 433,
		"./km.js": 433,
		"./kn": 434,
		"./kn.js": 434,
		"./ko": 435,
		"./ko.js": 435,
		"./ku": 436,
		"./ku.js": 436,
		"./ky": 437,
		"./ky.js": 437,
		"./lb": 438,
		"./lb.js": 438,
		"./lo": 439,
		"./lo.js": 439,
		"./lt": 440,
		"./lt.js": 440,
		"./lv": 441,
		"./lv.js": 441,
		"./me": 442,
		"./me.js": 442,
		"./mi": 443,
		"./mi.js": 443,
		"./mk": 444,
		"./mk.js": 444,
		"./ml": 445,
		"./ml.js": 445,
		"./mn": 446,
		"./mn.js": 446,
		"./mr": 447,
		"./mr.js": 447,
		"./ms": 448,
		"./ms-my": 449,
		"./ms-my.js": 449,
		"./ms.js": 448,
		"./mt": 450,
		"./mt.js": 450,
		"./my": 451,
		"./my.js": 451,
		"./nb": 452,
		"./nb.js": 452,
		"./ne": 453,
		"./ne.js": 453,
		"./nl": 454,
		"./nl-be": 455,
		"./nl-be.js": 455,
		"./nl.js": 454,
		"./nn": 456,
		"./nn.js": 456,
		"./oc-lnc": 457,
		"./oc-lnc.js": 457,
		"./pa-in": 458,
		"./pa-in.js": 458,
		"./pl": 459,
		"./pl.js": 459,
		"./pt": 460,
		"./pt-br": 461,
		"./pt-br.js": 461,
		"./pt.js": 460,
		"./ro": 462,
		"./ro.js": 462,
		"./ru": 463,
		"./ru.js": 463,
		"./sd": 464,
		"./sd.js": 464,
		"./se": 465,
		"./se.js": 465,
		"./si": 466,
		"./si.js": 466,
		"./sk": 467,
		"./sk.js": 467,
		"./sl": 468,
		"./sl.js": 468,
		"./sq": 469,
		"./sq.js": 469,
		"./sr": 470,
		"./sr-cyrl": 471,
		"./sr-cyrl.js": 471,
		"./sr.js": 470,
		"./ss": 472,
		"./ss.js": 472,
		"./sv": 473,
		"./sv.js": 473,
		"./sw": 474,
		"./sw.js": 474,
		"./ta": 475,
		"./ta.js": 475,
		"./te": 476,
		"./te.js": 476,
		"./tet": 477,
		"./tet.js": 477,
		"./tg": 478,
		"./tg.js": 478,
		"./th": 479,
		"./th.js": 479,
		"./tk": 480,
		"./tk.js": 480,
		"./tl-ph": 481,
		"./tl-ph.js": 481,
		"./tlh": 482,
		"./tlh.js": 482,
		"./tr": 483,
		"./tr.js": 483,
		"./tzl": 484,
		"./tzl.js": 484,
		"./tzm": 485,
		"./tzm-latn": 486,
		"./tzm-latn.js": 486,
		"./tzm.js": 485,
		"./ug-cn": 487,
		"./ug-cn.js": 487,
		"./uk": 488,
		"./uk.js": 488,
		"./ur": 489,
		"./ur.js": 489,
		"./uz": 490,
		"./uz-latn": 491,
		"./uz-latn.js": 491,
		"./uz.js": 490,
		"./vi": 492,
		"./vi.js": 492,
		"./x-pseudo": 493,
		"./x-pseudo.js": 493,
		"./yo": 494,
		"./yo.js": 494,
		"./zh-cn": 495,
		"./zh-cn.js": 495,
		"./zh-hk": 496,
		"./zh-hk.js": 496,
		"./zh-mo": 497,
		"./zh-mo.js": 497,
		"./zh-tw": 498,
		"./zh-tw.js": 498
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 363;


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var af = moment.defineLocale('af', {
	        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
	            '_'
	        ),
	        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM: function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Vandag om] LT',
	            nextDay: '[Môre om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[Gister om] LT',
	            lastWeek: '[Laas] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'oor %s',
	            past: '%s gelede',
	            s: "'n paar sekondes",
	            ss: '%d sekondes',
	            m: "'n minuut",
	            mm: '%d minute',
	            h: "'n uur",
	            hh: '%d ure',
	            d: "'n dag",
	            dd: '%d dae',
	            M: "'n maand",
	            MM: '%d maande',
	            y: "'n jaar",
	            yy: '%d jaar',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            ); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week: {
	            dow: 1, // Maandag is die eerste dag van die week.
	            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        },
	    });
	
	    return af;
	
	})));


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '١',
	            2: '٢',
	            3: '٣',
	            4: '٤',
	            5: '٥',
	            6: '٦',
	            7: '٧',
	            8: '٨',
	            9: '٩',
	            0: '٠',
	        },
	        numberMap = {
	            '١': '1',
	            '٢': '2',
	            '٣': '3',
	            '٤': '4',
	            '٥': '5',
	            '٦': '6',
	            '٧': '7',
	            '٨': '8',
	            '٩': '9',
	            '٠': '0',
	        },
	        pluralForm = function (n) {
	            return n === 0
	                ? 0
	                : n === 1
	                ? 1
	                : n === 2
	                ? 2
	                : n % 100 >= 3 && n % 100 <= 10
	                ? 3
	                : n % 100 >= 11
	                ? 4
	                : 5;
	        },
	        plurals = {
	            s: [
	                'أقل من ثانية',
	                'ثانية واحدة',
	                ['ثانيتان', 'ثانيتين'],
	                '%d ثوان',
	                '%d ثانية',
	                '%d ثانية',
	            ],
	            m: [
	                'أقل من دقيقة',
	                'دقيقة واحدة',
	                ['دقيقتان', 'دقيقتين'],
	                '%d دقائق',
	                '%d دقيقة',
	                '%d دقيقة',
	            ],
	            h: [
	                'أقل من ساعة',
	                'ساعة واحدة',
	                ['ساعتان', 'ساعتين'],
	                '%d ساعات',
	                '%d ساعة',
	                '%d ساعة',
	            ],
	            d: [
	                'أقل من يوم',
	                'يوم واحد',
	                ['يومان', 'يومين'],
	                '%d أيام',
	                '%d يومًا',
	                '%d يوم',
	            ],
	            M: [
	                'أقل من شهر',
	                'شهر واحد',
	                ['شهران', 'شهرين'],
	                '%d أشهر',
	                '%d شهرا',
	                '%d شهر',
	            ],
	            y: [
	                'أقل من عام',
	                'عام واحد',
	                ['عامان', 'عامين'],
	                '%d أعوام',
	                '%d عامًا',
	                '%d عام',
	            ],
	        },
	        pluralize = function (u) {
	            return function (number, withoutSuffix, string, isFuture) {
	                var f = pluralForm(number),
	                    str = plurals[u][pluralForm(number)];
	                if (f === 2) {
	                    str = str[withoutSuffix ? 0 : 1];
	                }
	                return str.replace(/%d/i, number);
	            };
	        },
	        months = [
	            'يناير',
	            'فبراير',
	            'مارس',
	            'أبريل',
	            'مايو',
	            'يونيو',
	            'يوليو',
	            'أغسطس',
	            'سبتمبر',
	            'أكتوبر',
	            'نوفمبر',
	            'ديسمبر',
	        ];
	
	    var ar = moment.defineLocale('ar', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y'),
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return ar;
	
	})));


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Amine Roukh: https://github.com/Amine27
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var pluralForm = function (n) {
	            return n === 0
	                ? 0
	                : n === 1
	                ? 1
	                : n === 2
	                ? 2
	                : n % 100 >= 3 && n % 100 <= 10
	                ? 3
	                : n % 100 >= 11
	                ? 4
	                : 5;
	        },
	        plurals = {
	            s: [
	                'أقل من ثانية',
	                'ثانية واحدة',
	                ['ثانيتان', 'ثانيتين'],
	                '%d ثوان',
	                '%d ثانية',
	                '%d ثانية',
	            ],
	            m: [
	                'أقل من دقيقة',
	                'دقيقة واحدة',
	                ['دقيقتان', 'دقيقتين'],
	                '%d دقائق',
	                '%d دقيقة',
	                '%d دقيقة',
	            ],
	            h: [
	                'أقل من ساعة',
	                'ساعة واحدة',
	                ['ساعتان', 'ساعتين'],
	                '%d ساعات',
	                '%d ساعة',
	                '%d ساعة',
	            ],
	            d: [
	                'أقل من يوم',
	                'يوم واحد',
	                ['يومان', 'يومين'],
	                '%d أيام',
	                '%d يومًا',
	                '%d يوم',
	            ],
	            M: [
	                'أقل من شهر',
	                'شهر واحد',
	                ['شهران', 'شهرين'],
	                '%d أشهر',
	                '%d شهرا',
	                '%d شهر',
	            ],
	            y: [
	                'أقل من عام',
	                'عام واحد',
	                ['عامان', 'عامين'],
	                '%d أعوام',
	                '%d عامًا',
	                '%d عام',
	            ],
	        },
	        pluralize = function (u) {
	            return function (number, withoutSuffix, string, isFuture) {
	                var f = pluralForm(number),
	                    str = plurals[u][pluralForm(number)];
	                if (f === 2) {
	                    str = str[withoutSuffix ? 0 : 1];
	                }
	                return str.replace(/%d/i, number);
	            };
	        },
	        months = [
	            'جانفي',
	            'فيفري',
	            'مارس',
	            'أفريل',
	            'ماي',
	            'جوان',
	            'جويلية',
	            'أوت',
	            'سبتمبر',
	            'أكتوبر',
	            'نوفمبر',
	            'ديسمبر',
	        ];
	
	    var arDz = moment.defineLocale('ar-dz', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y'),
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return arDz;
	
	})));


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Kuwait) [ar-kw]
	//! author : Nusret Parlak: https://github.com/nusretparlak
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var arKw = moment.defineLocale('ar-kw', {
	        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return arKw;
	
	})));


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Libya) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '1',
	            2: '2',
	            3: '3',
	            4: '4',
	            5: '5',
	            6: '6',
	            7: '7',
	            8: '8',
	            9: '9',
	            0: '0',
	        },
	        pluralForm = function (n) {
	            return n === 0
	                ? 0
	                : n === 1
	                ? 1
	                : n === 2
	                ? 2
	                : n % 100 >= 3 && n % 100 <= 10
	                ? 3
	                : n % 100 >= 11
	                ? 4
	                : 5;
	        },
	        plurals = {
	            s: [
	                'أقل من ثانية',
	                'ثانية واحدة',
	                ['ثانيتان', 'ثانيتين'],
	                '%d ثوان',
	                '%d ثانية',
	                '%d ثانية',
	            ],
	            m: [
	                'أقل من دقيقة',
	                'دقيقة واحدة',
	                ['دقيقتان', 'دقيقتين'],
	                '%d دقائق',
	                '%d دقيقة',
	                '%d دقيقة',
	            ],
	            h: [
	                'أقل من ساعة',
	                'ساعة واحدة',
	                ['ساعتان', 'ساعتين'],
	                '%d ساعات',
	                '%d ساعة',
	                '%d ساعة',
	            ],
	            d: [
	                'أقل من يوم',
	                'يوم واحد',
	                ['يومان', 'يومين'],
	                '%d أيام',
	                '%d يومًا',
	                '%d يوم',
	            ],
	            M: [
	                'أقل من شهر',
	                'شهر واحد',
	                ['شهران', 'شهرين'],
	                '%d أشهر',
	                '%d شهرا',
	                '%d شهر',
	            ],
	            y: [
	                'أقل من عام',
	                'عام واحد',
	                ['عامان', 'عامين'],
	                '%d أعوام',
	                '%d عامًا',
	                '%d عام',
	            ],
	        },
	        pluralize = function (u) {
	            return function (number, withoutSuffix, string, isFuture) {
	                var f = pluralForm(number),
	                    str = plurals[u][pluralForm(number)];
	                if (f === 2) {
	                    str = str[withoutSuffix ? 0 : 1];
	                }
	                return str.replace(/%d/i, number);
	            };
	        },
	        months = [
	            'يناير',
	            'فبراير',
	            'مارس',
	            'أبريل',
	            'مايو',
	            'يونيو',
	            'يوليو',
	            'أغسطس',
	            'سبتمبر',
	            'أكتوبر',
	            'نوفمبر',
	            'ديسمبر',
	        ];
	
	    var arLy = moment.defineLocale('ar-ly', {
	        months: months,
	        monthsShort: months,
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/\u200FM/\u200FYYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'بعد %s',
	            past: 'منذ %s',
	            s: pluralize('s'),
	            ss: pluralize('s'),
	            m: pluralize('m'),
	            mm: pluralize('m'),
	            h: pluralize('h'),
	            hh: pluralize('h'),
	            d: pluralize('d'),
	            dd: pluralize('d'),
	            M: pluralize('M'),
	            MM: pluralize('M'),
	            y: pluralize('y'),
	            yy: pluralize('y'),
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return arLy;
	
	})));


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var arMa = moment.defineLocale('ar-ma', {
	        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return arMa;
	
	})));


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '١',
	            2: '٢',
	            3: '٣',
	            4: '٤',
	            5: '٥',
	            6: '٦',
	            7: '٧',
	            8: '٨',
	            9: '٩',
	            0: '٠',
	        },
	        numberMap = {
	            '١': '1',
	            '٢': '2',
	            '٣': '3',
	            '٤': '4',
	            '٥': '5',
	            '٦': '6',
	            '٧': '7',
	            '٨': '8',
	            '٩': '9',
	            '٠': '0',
	        };
	
	    var arSa = moment.defineLocale('ar-sa', {
	        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ص|م/,
	        isPM: function (input) {
	            return 'م' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return arSa;
	
	})));


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var arTn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split(
	                '_'
	            ),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            ss: '%d ثانية',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return arTn;
	
	})));


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı',
	    };
	
	    var az = moment.defineLocale('az', {
	        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
	            '_'
	        ),
	        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays:
	            'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split(
	                '_'
	            ),
	        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[bugün saat] LT',
	            nextDay: '[sabah saat] LT',
	            nextWeek: '[gələn həftə] dddd [saat] LT',
	            lastDay: '[dünən] LT',
	            lastWeek: '[keçən həftə] dddd [saat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s sonra',
	            past: '%s əvvəl',
	            s: 'bir neçə saniyə',
	            ss: '%d saniyə',
	            m: 'bir dəqiqə',
	            mm: '%d dəqiqə',
	            h: 'bir saat',
	            hh: '%d saat',
	            d: 'bir gün',
	            dd: '%d gün',
	            M: 'bir ay',
	            MM: '%d ay',
	            y: 'bir il',
	            yy: '%d il',
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM: function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal: function (number) {
	            if (number === 0) {
	                // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = (number % 100) - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return az;
	
	})));


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11
	            ? forms[0]
	            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
	            ? forms[1]
	            : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            mm: withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            hh: withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            dd: 'дзень_дні_дзён',
	            MM: 'месяц_месяцы_месяцаў',
	            yy: 'год_гады_гадоў',
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        } else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	
	    var be = moment.defineLocale('be', {
	        months: {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split(
	                '_'
	            ),
	            standalone:
	                'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split(
	                    '_'
	                ),
	        },
	        monthsShort:
	            'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays: {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split(
	                '_'
	            ),
	            standalone:
	                'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split(
	                    '_'
	                ),
	            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/,
	        },
	        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY г.',
	            LLL: 'D MMMM YYYY г., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY г., HH:mm',
	        },
	        calendar: {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[У мінулую] dddd [ў] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'праз %s',
	            past: '%s таму',
	            s: 'некалькі секунд',
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: relativeTimeWithPlural,
	            hh: relativeTimeWithPlural,
	            d: 'дзень',
	            dd: relativeTimeWithPlural,
	            M: 'месяц',
	            MM: relativeTimeWithPlural,
	            y: 'год',
	            yy: relativeTimeWithPlural,
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM: function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return (number % 10 === 2 || number % 10 === 3) &&
	                        number % 100 !== 12 &&
	                        number % 100 !== 13
	                        ? number + '-і'
	                        : number + '-ы';
	                case 'D':
	                    return number + '-га';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return be;
	
	})));


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var bg = moment.defineLocale('bg', {
	        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split(
	            '_'
	        ),
	        monthsShort: 'яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split(
	            '_'
	        ),
	        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[Днес в] LT',
	            nextDay: '[Утре в] LT',
	            nextWeek: 'dddd [в] LT',
	            lastDay: '[Вчера в] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Миналата] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Миналия] dddd [в] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'след %s',
	            past: 'преди %s',
	            s: 'няколко секунди',
	            ss: '%d секунди',
	            m: 'минута',
	            mm: '%d минути',
	            h: 'час',
	            hh: '%d часа',
	            d: 'ден',
	            dd: '%d дена',
	            w: 'седмица',
	            ww: '%d седмици',
	            M: 'месец',
	            MM: '%d месеца',
	            y: 'година',
	            yy: '%d години',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal: function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return bg;
	
	})));


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bambara [bm]
	//! author : Estelle Comment : https://github.com/estellecomment
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var bm = moment.defineLocale('bm', {
	        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split(
	            '_'
	        ),
	        monthsShort: 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
	        weekdays: 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
	        weekdaysShort: 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
	        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'MMMM [tile] D [san] YYYY',
	            LLL: 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	            LLLL: 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
	        },
	        calendar: {
	            sameDay: '[Bi lɛrɛ] LT',
	            nextDay: '[Sini lɛrɛ] LT',
	            nextWeek: 'dddd [don lɛrɛ] LT',
	            lastDay: '[Kunu lɛrɛ] LT',
	            lastWeek: 'dddd [tɛmɛnen lɛrɛ] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s kɔnɔ',
	            past: 'a bɛ %s bɔ',
	            s: 'sanga dama dama',
	            ss: 'sekondi %d',
	            m: 'miniti kelen',
	            mm: 'miniti %d',
	            h: 'lɛrɛ kelen',
	            hh: 'lɛrɛ %d',
	            d: 'tile kelen',
	            dd: 'tile %d',
	            M: 'kalo kelen',
	            MM: 'kalo %d',
	            y: 'san kelen',
	            yy: 'san %d',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return bm;
	
	})));


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '১',
	            2: '২',
	            3: '৩',
	            4: '৪',
	            5: '৫',
	            6: '৬',
	            7: '৭',
	            8: '৮',
	            9: '৯',
	            0: '০',
	        },
	        numberMap = {
	            '১': '1',
	            '২': '2',
	            '৩': '3',
	            '৪': '4',
	            '৫': '5',
	            '৬': '6',
	            '৭': '7',
	            '৮': '8',
	            '৯': '9',
	            '০': '0',
	        };
	
	    var bn = moment.defineLocale('bn', {
	        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
	            '_'
	        ),
	        monthsShort:
	            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
	                '_'
	            ),
	        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
	            '_'
	        ),
	        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm সময়',
	            LTS: 'A h:mm:ss সময়',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm সময়',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
	        },
	        calendar: {
	            sameDay: '[আজ] LT',
	            nextDay: '[আগামীকাল] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[গতকাল] LT',
	            lastWeek: '[গত] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s পরে',
	            past: '%s আগে',
	            s: 'কয়েক সেকেন্ড',
	            ss: '%d সেকেন্ড',
	            m: 'এক মিনিট',
	            mm: '%d মিনিট',
	            h: 'এক ঘন্টা',
	            hh: '%d ঘন্টা',
	            d: 'এক দিন',
	            dd: '%d দিন',
	            M: 'এক মাস',
	            MM: '%d মাস',
	            y: 'এক বছর',
	            yy: '%d বছর',
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                (meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল'
	            ) {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return bn;
	
	})));


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali (Bangladesh) [bn-bd]
	//! author : Asraf Hossain Patoary : https://github.com/ashwoolford
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '১',
	            2: '২',
	            3: '৩',
	            4: '৪',
	            5: '৫',
	            6: '৬',
	            7: '৭',
	            8: '৮',
	            9: '৯',
	            0: '০',
	        },
	        numberMap = {
	            '১': '1',
	            '২': '2',
	            '৩': '3',
	            '৪': '4',
	            '৫': '5',
	            '৬': '6',
	            '৭': '7',
	            '৮': '8',
	            '৯': '9',
	            '০': '0',
	        };
	
	    var bnBd = moment.defineLocale('bn-bd', {
	        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(
	            '_'
	        ),
	        monthsShort:
	            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(
	                '_'
	            ),
	        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(
	            '_'
	        ),
	        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm সময়',
	            LTS: 'A h:mm:ss সময়',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm সময়',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',
	        },
	        calendar: {
	            sameDay: '[আজ] LT',
	            nextDay: '[আগামীকাল] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[গতকাল] LT',
	            lastWeek: '[গত] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s পরে',
	            past: '%s আগে',
	            s: 'কয়েক সেকেন্ড',
	            ss: '%d সেকেন্ড',
	            m: 'এক মিনিট',
	            mm: '%d মিনিট',
	            h: 'এক ঘন্টা',
	            hh: '%d ঘন্টা',
	            d: 'এক দিন',
	            dd: '%d দিন',
	            M: 'এক মাস',
	            MM: '%d মাস',
	            y: 'এক বছর',
	            yy: '%d বছর',
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	
	        meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'রাত') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ভোর') {
	                return hour;
	            } else if (meridiem === 'সকাল') {
	                return hour;
	            } else if (meridiem === 'দুপুর') {
	                return hour >= 3 ? hour : hour + 12;
	            } else if (meridiem === 'বিকাল') {
	                return hour + 12;
	            } else if (meridiem === 'সন্ধ্যা') {
	                return hour + 12;
	            }
	        },
	
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 6) {
	                return 'ভোর';
	            } else if (hour < 12) {
	                return 'সকাল';
	            } else if (hour < 15) {
	                return 'দুপুর';
	            } else if (hour < 18) {
	                return 'বিকাল';
	            } else if (hour < 20) {
	                return 'সন্ধ্যা';
	            } else {
	                return 'রাত';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return bnBd;
	
	})));


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '༡',
	            2: '༢',
	            3: '༣',
	            4: '༤',
	            5: '༥',
	            6: '༦',
	            7: '༧',
	            8: '༨',
	            9: '༩',
	            0: '༠',
	        },
	        numberMap = {
	            '༡': '1',
	            '༢': '2',
	            '༣': '3',
	            '༤': '4',
	            '༥': '5',
	            '༦': '6',
	            '༧': '7',
	            '༨': '8',
	            '༩': '9',
	            '༠': '0',
	        };
	
	    var bo = moment.defineLocale('bo', {
	        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12'.split(
	                '_'
	            ),
	        monthsShortRegex: /^(ཟླ་\d{1,2})/,
	        monthsParseExact: true,
	        weekdays:
	            'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split(
	                '_'
	            ),
	        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split(
	            '_'
	        ),
	        weekdaysMin: 'ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm',
	        },
	        calendar: {
	            sameDay: '[དི་རིང] LT',
	            nextDay: '[སང་ཉིན] LT',
	            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay: '[ཁ་སང] LT',
	            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ལ་',
	            past: '%s སྔན་ལ',
	            s: 'ལམ་སང',
	            ss: '%d སྐར་ཆ།',
	            m: 'སྐར་མ་གཅིག',
	            mm: '%d སྐར་མ',
	            h: 'ཆུ་ཚོད་གཅིག',
	            hh: '%d ཆུ་ཚོད',
	            d: 'ཉིན་གཅིག',
	            dd: '%d ཉིན་',
	            M: 'ཟླ་བ་གཅིག',
	            MM: '%d ཟླ་བ',
	            y: 'ལོ་གཅིག',
	            yy: '%d ལོ',
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                (meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག'
	            ) {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return bo;
	
	})));


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            mm: 'munutenn',
	            MM: 'miz',
	            dd: 'devezh',
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	            case 1:
	            case 3:
	            case 4:
	            case 5:
	            case 9:
	                return number + ' bloaz';
	            default:
	                return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            m: 'v',
	            b: 'v',
	            d: 'z',
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }
	
	    var monthsParse = [
	            /^gen/i,
	            /^c[ʼ\']hwe/i,
	            /^meu/i,
	            /^ebr/i,
	            /^mae/i,
	            /^(mez|eve)/i,
	            /^gou/i,
	            /^eos/i,
	            /^gwe/i,
	            /^her/i,
	            /^du/i,
	            /^ker/i,
	        ],
	        monthsRegex =
	            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
	        monthsStrictRegex =
	            /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
	        monthsShortStrictRegex =
	            /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
	        fullWeekdaysParse = [
	            /^sul/i,
	            /^lun/i,
	            /^meurzh/i,
	            /^merc[ʼ\']her/i,
	            /^yaou/i,
	            /^gwener/i,
	            /^sadorn/i,
	        ],
	        shortWeekdaysParse = [
	            /^Sul/i,
	            /^Lun/i,
	            /^Meu/i,
	            /^Mer/i,
	            /^Yao/i,
	            /^Gwe/i,
	            /^Sad/i,
	        ],
	        minWeekdaysParse = [
	            /^Su/i,
	            /^Lu/i,
	            /^Me([^r]|$)/i,
	            /^Mer/i,
	            /^Ya/i,
	            /^Gw/i,
	            /^Sa/i,
	        ];
	
	    var br = moment.defineLocale('br', {
	        months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
	            '_'
	        ),
	        monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParse: minWeekdaysParse,
	        fullWeekdaysParse: fullWeekdaysParse,
	        shortWeekdaysParse: shortWeekdaysParse,
	        minWeekdaysParse: minWeekdaysParse,
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: monthsStrictRegex,
	        monthsShortStrictRegex: monthsShortStrictRegex,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [a viz] MMMM YYYY',
	            LLL: 'D [a viz] MMMM YYYY HH:mm',
	            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hiziv da] LT',
	            nextDay: '[Warcʼhoazh da] LT',
	            nextWeek: 'dddd [da] LT',
	            lastDay: '[Decʼh da] LT',
	            lastWeek: 'dddd [paset da] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'a-benn %s',
	            past: '%s ʼzo',
	            s: 'un nebeud segondennoù',
	            ss: '%d eilenn',
	            m: 'ur vunutenn',
	            mm: relativeTimeWithMutation,
	            h: 'un eur',
	            hh: '%d eur',
	            d: 'un devezh',
	            dd: relativeTimeWithMutation,
	            M: 'ur miz',
	            MM: relativeTimeWithMutation,
	            y: 'ur bloaz',
	            yy: specialMutationForYears,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
	        ordinal: function (number) {
	            var output = number === 1 ? 'añ' : 'vet';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
	        isPM: function (token) {
	            return token === 'g.m.';
	        },
	        meridiem: function (hour, minute, isLower) {
	            return hour < 12 ? 'a.m.' : 'g.m.';
	        },
	    });
	
	    return br;
	
	})));


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }
	
	    var bs = moment.defineLocale('bs', {
	        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[jučer u] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'par sekundi',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: 'dan',
	            dd: translate,
	            M: 'mjesec',
	            MM: translate,
	            y: 'godinu',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return bs;
	
	})));


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ca = moment.defineLocale('ca', {
	        months: {
	            standalone:
	                'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
	                    '_'
	                ),
	            format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
	                '_'
	            ),
	            isFormat: /D[oD]?(\s)+MMMM/,
	        },
	        monthsShort:
	            'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
	                '_'
	            ),
	        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [de] YYYY',
	            ll: 'D MMM YYYY',
	            LLL: 'D MMMM [de] YYYY [a les] H:mm',
	            lll: 'D MMM YYYY, H:mm',
	            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
	            llll: 'ddd D MMM YYYY, H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            nextDay: function () {
	                return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            lastDay: function () {
	                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [passat a ' +
	                    (this.hours() !== 1 ? 'les' : 'la') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: "d'aquí %s",
	            past: 'fa %s',
	            s: 'uns segons',
	            ss: '%d segons',
	            m: 'un minut',
	            mm: '%d minuts',
	            h: 'una hora',
	            hh: '%d hores',
	            d: 'un dia',
	            dd: '%d dies',
	            M: 'un mes',
	            MM: '%d mesos',
	            y: 'un any',
	            yy: '%d anys',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal: function (number, period) {
	            var output =
	                number === 1
	                    ? 'r'
	                    : number === 2
	                    ? 'n'
	                    : number === 3
	                    ? 'r'
	                    : number === 4
	                    ? 't'
	                    : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ca;
	
	})));


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = {
	            format: 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split(
	                '_'
	            ),
	            standalone:
	                'ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince'.split(
	                    '_'
	                ),
	        },
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_'),
	        monthsParse = [
	            /^led/i,
	            /^úno/i,
	            /^bře/i,
	            /^dub/i,
	            /^kvě/i,
	            /^(čvn|červen$|června)/i,
	            /^(čvc|červenec|července)/i,
	            /^srp/i,
	            /^zář/i,
	            /^říj/i,
	            /^lis/i,
	            /^pro/i,
	        ],
	        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
	        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
	        monthsRegex =
	            /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;
	
	    function plural(n) {
	        return n > 1 && n < 5 && ~~(n / 10) !== 1;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's': // a few seconds / in a few seconds / a few seconds ago
	                return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';
	            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekund');
	                } else {
	                    return result + 'sekundami';
	                }
	            case 'm': // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minuty' : 'minut');
	                } else {
	                    return result + 'minutami';
	                }
	            case 'h': // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodin');
	                } else {
	                    return result + 'hodinami';
	                }
	            case 'd': // a day / in a day / a day ago
	                return withoutSuffix || isFuture ? 'den' : 'dnem';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dny' : 'dní');
	                } else {
	                    return result + 'dny';
	                }
	            case 'M': // a month / in a month / a month ago
	                return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'měsíce' : 'měsíců');
	                } else {
	                    return result + 'měsíci';
	                }
	            case 'y': // a year / in a year / a year ago
	                return withoutSuffix || isFuture ? 'rok' : 'rokem';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'let');
	                } else {
	                    return result + 'lety';
	                }
	        }
	    }
	
	    var cs = moment.defineLocale('cs', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
	        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
	        monthsStrictRegex:
	            /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
	        monthsShortStrictRegex:
	            /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd D. MMMM YYYY H:mm',
	            l: 'D. M. YYYY',
	        },
	        calendar: {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [v] LT';
	                    case 3:
	                        return '[ve středu v] LT';
	                    case 4:
	                        return '[ve čtvrtek v] LT';
	                    case 5:
	                        return '[v pátek v] LT';
	                    case 6:
	                        return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulou neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[minulé] dddd [v] LT';
	                    case 3:
	                        return '[minulou středu v] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [v] LT';
	                    case 6:
	                        return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'před %s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return cs;
	
	})));


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var cv = moment.defineLocale('cv', {
	        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split(
	            '_'
	        ),
	        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays:
	            'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split(
	                '_'
	            ),
	        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        },
	        calendar: {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (output) {
	                var affix = /сехет$/i.exec(output)
	                    ? 'рен'
	                    : /ҫул$/i.exec(output)
	                    ? 'тан'
	                    : 'ран';
	                return output + affix;
	            },
	            past: '%s каялла',
	            s: 'пӗр-ик ҫеккунт',
	            ss: '%d ҫеккунт',
	            m: 'пӗр минут',
	            mm: '%d минут',
	            h: 'пӗр сехет',
	            hh: '%d сехет',
	            d: 'пӗр кун',
	            dd: '%d кун',
	            M: 'пӗр уйӑх',
	            MM: '%d уйӑх',
	            y: 'пӗр ҫул',
	            yy: '%d ҫул',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
	        ordinal: '%d-мӗш',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return cv;
	
	})));


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
	            '_'
	        ),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
	            '_'
	        ),
	        weekdays:
	            'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
	                '_'
	            ),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact: true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            ss: '%d eiliad',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '',
	                    'af',
	                    'il',
	                    'ydd',
	                    'ydd',
	                    'ed',
	                    'ed',
	                    'ed',
	                    'fed',
	                    'fed',
	                    'fed', // 1af to 10fed
	                    'eg',
	                    'fed',
	                    'eg',
	                    'eg',
	                    'fed',
	                    'eg',
	                    'eg',
	                    'fed',
	                    'eg',
	                    'fed', // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return cy;
	
	})));


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var da = moment.defineLocale('da', {
	        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'på dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[i] dddd[s kl.] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s siden',
	            s: 'få sekunder',
	            ss: '%d sekunder',
	            m: 'et minut',
	            mm: '%d minutter',
	            h: 'en time',
	            hh: '%d timer',
	            d: 'en dag',
	            dd: '%d dage',
	            M: 'en måned',
	            MM: '%d måneder',
	            y: 'et år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return da;
	
	})));


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eine Minute', 'einer Minute'],
	            h: ['eine Stunde', 'einer Stunde'],
	            d: ['ein Tag', 'einem Tag'],
	            dd: [number + ' Tage', number + ' Tagen'],
	            w: ['eine Woche', 'einer Woche'],
	            M: ['ein Monat', 'einem Monat'],
	            MM: [number + ' Monate', number + ' Monaten'],
	            y: ['ein Jahr', 'einem Jahr'],
	            yy: [number + ' Jahre', number + ' Jahren'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var de = moment.defineLocale('de', {
	        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays:
	            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
	                '_'
	            ),
	        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            w: processRelativeTime,
	            ww: '%d Wochen',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return de;
	
	})));


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eine Minute', 'einer Minute'],
	            h: ['eine Stunde', 'einer Stunde'],
	            d: ['ein Tag', 'einem Tag'],
	            dd: [number + ' Tage', number + ' Tagen'],
	            w: ['eine Woche', 'einer Woche'],
	            M: ['ein Monat', 'einem Monat'],
	            MM: [number + ' Monate', number + ' Monaten'],
	            y: ['ein Jahr', 'einem Jahr'],
	            yy: [number + ' Jahre', number + ' Jahren'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var deAt = moment.defineLocale('de-at', {
	        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays:
	            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
	                '_'
	            ),
	        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            w: processRelativeTime,
	            ww: '%d Wochen',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return deAt;
	
	})));


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Switzerland) [de-ch]
	//! author : sschueller : https://github.com/sschueller
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eine Minute', 'einer Minute'],
	            h: ['eine Stunde', 'einer Stunde'],
	            d: ['ein Tag', 'einem Tag'],
	            dd: [number + ' Tage', number + ' Tagen'],
	            w: ['eine Woche', 'einer Woche'],
	            M: ['ein Monat', 'einem Monat'],
	            MM: [number + ' Monate', number + ' Monaten'],
	            y: ['ein Jahr', 'einem Jahr'],
	            yy: [number + ' Jahre', number + ' Jahren'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	
	    var deCh = moment.defineLocale('de-ch', {
	        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays:
	            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
	                '_'
	            ),
	        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY HH:mm',
	            LLLL: 'dddd, D. MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: 'vor %s',
	            s: 'ein paar Sekunden',
	            ss: '%d Sekunden',
	            m: processRelativeTime,
	            mm: '%d Minuten',
	            h: processRelativeTime,
	            hh: '%d Stunden',
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            w: processRelativeTime,
	            ww: '%d Wochen',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return deCh;
	
	})));


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'ޖެނުއަރީ',
	            'ފެބްރުއަރީ',
	            'މާރިޗު',
	            'އޭޕްރީލު',
	            'މޭ',
	            'ޖޫން',
	            'ޖުލައި',
	            'އޯގަސްޓު',
	            'ސެޕްޓެމްބަރު',
	            'އޮކްޓޯބަރު',
	            'ނޮވެމްބަރު',
	            'ޑިސެމްބަރު',
	        ],
	        weekdays = [
	            'އާދިއްތަ',
	            'ހޯމަ',
	            'އަންގާރަ',
	            'ބުދަ',
	            'ބުރާސްފަތި',
	            'ހުކުރު',
	            'ހޮނިހިރު',
	        ];
	
	    var dv = moment.defineLocale('dv', {
	        months: months,
	        monthsShort: months,
	        weekdays: weekdays,
	        weekdaysShort: weekdays,
	        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'D/M/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM: function (input) {
	            return 'މފ' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar: {
	            sameDay: '[މިއަދު] LT',
	            nextDay: '[މާދަމާ] LT',
	            nextWeek: 'dddd LT',
	            lastDay: '[އިއްޔެ] LT',
	            lastWeek: '[ފާއިތުވި] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ތެރޭގައި %s',
	            past: 'ކުރިން %s',
	            s: 'ސިކުންތުކޮޅެއް',
	            ss: 'd% ސިކުންތު',
	            m: 'މިނިޓެއް',
	            mm: 'މިނިޓު %d',
	            h: 'ގަޑިއިރެއް',
	            hh: 'ގަޑިއިރު %d',
	            d: 'ދުވަހެއް',
	            dd: 'ދުވަސް %d',
	            M: 'މަހެއް',
	            MM: 'މަސް %d',
	            y: 'އަހަރެއް',
	            yy: 'އަހަރު %d',
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 7, // Sunday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return dv;
	
	})));


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }
	
	    var el = moment.defineLocale('el', {
	        monthsNominativeEl:
	            'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split(
	                '_'
	            ),
	        monthsGenitiveEl:
	            'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split(
	                '_'
	            ),
	        months: function (momentToFormat, format) {
	            if (!momentToFormat) {
	                return this._monthsNominativeEl;
	            } else if (
	                typeof format === 'string' &&
	                /D/.test(format.substring(0, format.indexOf('MMMM')))
	            ) {
	                // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split(
	            '_'
	        ),
	        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM: function (input) {
	            return (input + '').toLowerCase()[0] === 'μ';
	        },
	        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendarEl: {
	            sameDay: '[Σήμερα {}] LT',
	            nextDay: '[Αύριο {}] LT',
	            nextWeek: 'dddd [{}] LT',
	            lastDay: '[Χθες {}] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        calendar: function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');
	        },
	        relativeTime: {
	            future: 'σε %s',
	            past: '%s πριν',
	            s: 'λίγα δευτερόλεπτα',
	            ss: '%d δευτερόλεπτα',
	            m: 'ένα λεπτό',
	            mm: '%d λεπτά',
	            h: 'μία ώρα',
	            hh: '%d ώρες',
	            d: 'μία μέρα',
	            dd: '%d μέρες',
	            M: 'ένας μήνας',
	            MM: '%d μήνες',
	            y: 'ένας χρόνος',
	            yy: '%d χρόνια',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4st is the first week of the year.
	        },
	    });
	
	    return el;
	
	})));


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enAu = moment.defineLocale('en-au', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enAu;
	
	})));


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enCa = moment.defineLocale('en-ca', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'YYYY-MM-DD',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY h:mm A',
	            LLLL: 'dddd, MMMM D, YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    return enCa;
	
	})));


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enGb = moment.defineLocale('en-gb', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enGb;
	
	})));


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enIe = moment.defineLocale('en-ie', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enIe;
	
	})));


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Israel) [en-il]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enIl = moment.defineLocale('en-il', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });
	
	    return enIl;
	
	})));


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (India) [en-in]
	//! author : Jatin Agrawal : https://github.com/jatinag22
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enIn = moment.defineLocale('en-in', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 1st is the first week of the year.
	        },
	    });
	
	    return enIn;
	
	})));


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enNz = moment.defineLocale('en-nz', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enNz;
	
	})));


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Singapore) [en-sg]
	//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var enSg = moment.defineLocale('en-sg', {
	        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Today at] LT',
	            nextDay: '[Tomorrow at] LT',
	            nextWeek: 'dddd [at] LT',
	            lastDay: '[Yesterday at] LT',
	            lastWeek: '[Last] dddd [at] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'in %s',
	            past: '%s ago',
	            s: 'a few seconds',
	            ss: '%d seconds',
	            m: 'a minute',
	            mm: '%d minutes',
	            h: 'an hour',
	            hh: '%d hours',
	            d: 'a day',
	            dd: '%d days',
	            M: 'a month',
	            MM: '%d months',
	            y: 'a year',
	            yy: '%d years',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return enSg;
	
	})));


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
	//! comment : miestasmia corrected the translation by colindean
	//! comment : Vivakvo corrected the translation by colindean and miestasmia
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var eo = moment.defineLocale('eo', {
	        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec'.split('_'),
	        weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
	        weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: '[la] D[-an de] MMMM, YYYY',
	            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
	            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
	            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar: {
	            sameDay: '[Hodiaŭ je] LT',
	            nextDay: '[Morgaŭ je] LT',
	            nextWeek: 'dddd[n je] LT',
	            lastDay: '[Hieraŭ je] LT',
	            lastWeek: '[pasintan] dddd[n je] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'post %s',
	            past: 'antaŭ %s',
	            s: 'kelkaj sekundoj',
	            ss: '%d sekundoj',
	            m: 'unu minuto',
	            mm: '%d minutoj',
	            h: 'unu horo',
	            hh: '%d horoj',
	            d: 'unu tago', //ne 'diurno', ĉar estas uzita por proksimumo
	            dd: '%d tagoj',
	            M: 'unu monato',
	            MM: '%d monatoj',
	            y: 'unu jaro',
	            yy: '%d jaroj',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}a/,
	        ordinal: '%da',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return eo;
	
	})));


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var es = moment.defineLocale('es', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	        invalidDate: 'Fecha inválida',
	    });
	
	    return es;
	
	})));


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esDo = moment.defineLocale('es-do', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return esDo;
	
	})));


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Mexico) [es-mx]
	//! author : JC Franco : https://github.com/jcfranco
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esMx = moment.defineLocale('es-mx', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	        invalidDate: 'Fecha inválida',
	    });
	
	    return esMx;
	
	})));


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (United States) [es-us]
	//! author : bustta : https://github.com/bustta
	//! author : chrisrodz : https://github.com/chrisrodz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortDot =
	            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
	                '_'
	            ),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
	        monthsParse = [
	            /^ene/i,
	            /^feb/i,
	            /^mar/i,
	            /^abr/i,
	            /^may/i,
	            /^jun/i,
	            /^jul/i,
	            /^ago/i,
	            /^sep/i,
	            /^oct/i,
	            /^nov/i,
	            /^dic/i,
	        ],
	        monthsRegex =
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
	
	    var esUs = moment.defineLocale('es-us', {
	        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortDot;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
	        monthsShortStrictRegex:
	            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'MM/DD/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastDay: function () {
	                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[el] dddd [pasado a la' +
	                    (this.hours() !== 1 ? 's' : '') +
	                    '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'en %s',
	            past: 'hace %s',
	            s: 'unos segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'una hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            w: 'una semana',
	            ww: '%d semanas',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un año',
	            yy: '%d años',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return esUs;
	
	})));


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            ss: [number + 'sekundi', number + 'sekundit'],
	            m: ['ühe minuti', 'üks minut'],
	            mm: [number + ' minuti', number + ' minutit'],
	            h: ['ühe tunni', 'tund aega', 'üks tund'],
	            hh: [number + ' tunni', number + ' tundi'],
	            d: ['ühe päeva', 'üks päev'],
	            M: ['kuu aja', 'kuu aega', 'üks kuu'],
	            MM: [number + ' kuu', number + ' kuud'],
	            y: ['ühe aasta', 'aasta', 'üks aasta'],
	            yy: [number + ' aasta', number + ' aastat'],
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var et = moment.defineLocale('et', {
	        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
	            '_'
	        ),
	        monthsShort:
	            'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays:
	            'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split(
	                '_'
	            ),
	        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[Täna,] LT',
	            nextDay: '[Homme,] LT',
	            nextWeek: '[Järgmine] dddd LT',
	            lastDay: '[Eile,] LT',
	            lastWeek: '[Eelmine] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s pärast',
	            past: '%s tagasi',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: '%d päeva',
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return et;
	
	})));


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var eu = moment.defineLocale('eu', {
	        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
	            '_'
	        ),
	        monthsShort:
	            'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
	                '_'
	            ),
	        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY[ko] MMMM[ren] D[a]',
	            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l: 'YYYY-M-D',
	            ll: 'YYYY[ko] MMM D[a]',
	            lll: 'YYYY[ko] MMM D[a] HH:mm',
	            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
	        },
	        calendar: {
	            sameDay: '[gaur] LT[etan]',
	            nextDay: '[bihar] LT[etan]',
	            nextWeek: 'dddd LT[etan]',
	            lastDay: '[atzo] LT[etan]',
	            lastWeek: '[aurreko] dddd LT[etan]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s barru',
	            past: 'duela %s',
	            s: 'segundo batzuk',
	            ss: '%d segundo',
	            m: 'minutu bat',
	            mm: '%d minutu',
	            h: 'ordu bat',
	            hh: '%d ordu',
	            d: 'egun bat',
	            dd: '%d egun',
	            M: 'hilabete bat',
	            MM: '%d hilabete',
	            y: 'urte bat',
	            yy: '%d urte',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return eu;
	
	})));


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '۱',
	            2: '۲',
	            3: '۳',
	            4: '۴',
	            5: '۵',
	            6: '۶',
	            7: '۷',
	            8: '۸',
	            9: '۹',
	            0: '۰',
	        },
	        numberMap = {
	            '۱': '1',
	            '۲': '2',
	            '۳': '3',
	            '۴': '4',
	            '۵': '5',
	            '۶': '6',
	            '۷': '7',
	            '۸': '8',
	            '۹': '9',
	            '۰': '0',
	        };
	
	    var fa = moment.defineLocale('fa', {
	        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
	            '_'
	        ),
	        monthsShort:
	            'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split(
	                '_'
	            ),
	        weekdays:
	            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
	                '_'
	            ),
	        weekdaysShort:
	            'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split(
	                '_'
	            ),
	        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar: {
	            sameDay: '[امروز ساعت] LT',
	            nextDay: '[فردا ساعت] LT',
	            nextWeek: 'dddd [ساعت] LT',
	            lastDay: '[دیروز ساعت] LT',
	            lastWeek: 'dddd [پیش] [ساعت] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'در %s',
	            past: '%s پیش',
	            s: 'چند ثانیه',
	            ss: '%d ثانیه',
	            m: 'یک دقیقه',
	            mm: '%d دقیقه',
	            h: 'یک ساعت',
	            hh: '%d ساعت',
	            d: 'یک روز',
	            dd: '%d روز',
	            M: 'یک ماه',
	            MM: '%d ماه',
	            y: 'یک سال',
	            yy: '%d سال',
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[۰-۹]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}م/,
	        ordinal: '%dم',
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return fa;
	
	})));


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var numbersPast =
	            'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(
	                ' '
	            ),
	        numbersFuture = [
	            'nolla',
	            'yhden',
	            'kahden',
	            'kolmen',
	            'neljän',
	            'viiden',
	            'kuuden',
	            numbersPast[7],
	            numbersPast[8],
	            numbersPast[9],
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	            case 's':
	                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	            case 'ss':
	                result = isFuture ? 'sekunnin' : 'sekuntia';
	                break;
	            case 'm':
	                return isFuture ? 'minuutin' : 'minuutti';
	            case 'mm':
	                result = isFuture ? 'minuutin' : 'minuuttia';
	                break;
	            case 'h':
	                return isFuture ? 'tunnin' : 'tunti';
	            case 'hh':
	                result = isFuture ? 'tunnin' : 'tuntia';
	                break;
	            case 'd':
	                return isFuture ? 'päivän' : 'päivä';
	            case 'dd':
	                result = isFuture ? 'päivän' : 'päivää';
	                break;
	            case 'M':
	                return isFuture ? 'kuukauden' : 'kuukausi';
	            case 'MM':
	                result = isFuture ? 'kuukauden' : 'kuukautta';
	                break;
	            case 'y':
	                return isFuture ? 'vuoden' : 'vuosi';
	            case 'yy':
	                result = isFuture ? 'vuoden' : 'vuotta';
	                break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10
	            ? isFuture
	                ? numbersFuture[number]
	                : numbersPast[number]
	            : number;
	    }
	
	    var fi = moment.defineLocale('fi', {
	        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
	            '_'
	        ),
	        monthsShort:
	            'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split(
	                '_'
	            ),
	        weekdays:
	            'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
	                '_'
	            ),
	        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD.MM.YYYY',
	            LL: 'Do MMMM[ta] YYYY',
	            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l: 'D.M.YYYY',
	            ll: 'Do MMM YYYY',
	            lll: 'Do MMM YYYY, [klo] HH.mm',
	            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
	        },
	        calendar: {
	            sameDay: '[tänään] [klo] LT',
	            nextDay: '[huomenna] [klo] LT',
	            nextWeek: 'dddd [klo] LT',
	            lastDay: '[eilen] [klo] LT',
	            lastWeek: '[viime] dddd[na] [klo] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s päästä',
	            past: '%s sitten',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fi;
	
	})));


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Filipino [fil]
	//! author : Dan Hagman : https://github.com/hagmandan
	//! author : Matthew Co : https://github.com/matthewdeeco
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var fil = moment.defineLocale('fil', {
	        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
	            '_'
	        ),
	        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
	            '_'
	        ),
	        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'MM/D/YYYY',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY HH:mm',
	            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: 'LT [ngayong araw]',
	            nextDay: '[Bukas ng] LT',
	            nextWeek: 'LT [sa susunod na] dddd',
	            lastDay: 'LT [kahapon]',
	            lastWeek: 'LT [noong nakaraang] dddd',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'sa loob ng %s',
	            past: '%s ang nakalipas',
	            s: 'ilang segundo',
	            ss: '%d segundo',
	            m: 'isang minuto',
	            mm: '%d minuto',
	            h: 'isang oras',
	            hh: '%d oras',
	            d: 'isang araw',
	            dd: '%d araw',
	            M: 'isang buwan',
	            MM: '%d buwan',
	            y: 'isang taon',
	            yy: '%d taon',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function (number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fil;
	
	})));


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	//! author : Kristian Sakarisson : https://github.com/sakarisson
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var fo = moment.defineLocale('fo', {
	        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays:
	            'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split(
	                '_'
	            ),
	        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D. MMMM, YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Í dag kl.] LT',
	            nextDay: '[Í morgin kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[Í gjár kl.] LT',
	            lastWeek: '[síðstu] dddd [kl] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'um %s',
	            past: '%s síðani',
	            s: 'fá sekund',
	            ss: '%d sekundir',
	            m: 'ein minuttur',
	            mm: '%d minuttir',
	            h: 'ein tími',
	            hh: '%d tímar',
	            d: 'ein dagur',
	            dd: '%d dagar',
	            M: 'ein mánaður',
	            MM: '%d mánaðir',
	            y: 'eitt ár',
	            yy: '%d ár',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fo;
	
	})));


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsStrictRegex =
	            /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
	        monthsShortStrictRegex =
	            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
	        monthsRegex =
	            /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
	        monthsParse = [
	            /^janv/i,
	            /^févr/i,
	            /^mars/i,
	            /^avr/i,
	            /^mai/i,
	            /^juin/i,
	            /^juil/i,
	            /^août/i,
	            /^sept/i,
	            /^oct/i,
	            /^nov/i,
	            /^déc/i,
	        ];
	
	    var fr = moment.defineLocale('fr', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
	            '_'
	        ),
	        monthsShort:
	            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
	                '_'
	            ),
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: monthsStrictRegex,
	        monthsShortStrictRegex: monthsShortStrictRegex,
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            w: 'une semaine',
	            ww: '%d semaines',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // TODO: Return 'e' when day of month > 1. Move this case inside
	                // block for masculine words below.
	                // See https://github.com/moment/moment/issues/3375
	                case 'D':
	                    return number + (number === 1 ? 'er' : '');
	
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fr;
	
	})));


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var frCa = moment.defineLocale('fr-ca', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
	            '_'
	        ),
	        monthsShort:
	            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	    });
	
	    return frCa;
	
	})));


/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var frCh = moment.defineLocale('fr-ch', {
	        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split(
	            '_'
	        ),
	        monthsShort:
	            'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Aujourd’hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dans %s',
	            past: 'il y a %s',
	            s: 'quelques secondes',
	            ss: '%d secondes',
	            m: 'une minute',
	            mm: '%d minutes',
	            h: 'une heure',
	            hh: '%d heures',
	            d: 'un jour',
	            dd: '%d jours',
	            M: 'un mois',
	            MM: '%d mois',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // Words with masculine grammatical gender: mois, trimestre, jour
	                default:
	                case 'M':
	                case 'Q':
	                case 'D':
	                case 'DDD':
	                case 'd':
	                    return number + (number === 1 ? 'er' : 'e');
	
	                // Words with feminine grammatical gender: semaine
	                case 'w':
	                case 'W':
	                    return number + (number === 1 ? 're' : 'e');
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return frCh;
	
	})));


/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortWithDots =
	            'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots =
	            'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	    var fy = moment.defineLocale('fy', {
	        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact: true,
	        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
	            '_'
	        ),
	        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'oer %s',
	            past: '%s lyn',
	            s: 'in pear sekonden',
	            ss: '%d sekonden',
	            m: 'ien minút',
	            mm: '%d minuten',
	            h: 'ien oere',
	            hh: '%d oeren',
	            d: 'ien dei',
	            dd: '%d dagen',
	            M: 'ien moanne',
	            MM: '%d moannen',
	            y: 'ien jier',
	            yy: '%d jierren',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            );
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return fy;
	
	})));


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Irish or Irish Gaelic [ga]
	//! author : André Silva : https://github.com/askpt
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'Eanáir',
	            'Feabhra',
	            'Márta',
	            'Aibreán',
	            'Bealtaine',
	            'Meitheamh',
	            'Iúil',
	            'Lúnasa',
	            'Meán Fómhair',
	            'Deireadh Fómhair',
	            'Samhain',
	            'Nollaig',
	        ],
	        monthsShort = [
	            'Ean',
	            'Feabh',
	            'Márt',
	            'Aib',
	            'Beal',
	            'Meith',
	            'Iúil',
	            'Lún',
	            'M.F.',
	            'D.F.',
	            'Samh',
	            'Noll',
	        ],
	        weekdays = [
	            'Dé Domhnaigh',
	            'Dé Luain',
	            'Dé Máirt',
	            'Dé Céadaoin',
	            'Déardaoin',
	            'Dé hAoine',
	            'Dé Sathairn',
	        ],
	        weekdaysShort = ['Domh', 'Luan', 'Máirt', 'Céad', 'Déar', 'Aoine', 'Sath'],
	        weekdaysMin = ['Do', 'Lu', 'Má', 'Cé', 'Dé', 'A', 'Sa'];
	
	    var ga = moment.defineLocale('ga', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsParseExact: true,
	        weekdays: weekdays,
	        weekdaysShort: weekdaysShort,
	        weekdaysMin: weekdaysMin,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Inniu ag] LT',
	            nextDay: '[Amárach ag] LT',
	            nextWeek: 'dddd [ag] LT',
	            lastDay: '[Inné ag] LT',
	            lastWeek: 'dddd [seo caite] [ag] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'i %s',
	            past: '%s ó shin',
	            s: 'cúpla soicind',
	            ss: '%d soicind',
	            m: 'nóiméad',
	            mm: '%d nóiméad',
	            h: 'uair an chloig',
	            hh: '%d uair an chloig',
	            d: 'lá',
	            dd: '%d lá',
	            M: 'mí',
	            MM: '%d míonna',
	            y: 'bliain',
	            yy: '%d bliain',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
	        ordinal: function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ga;
	
	})));


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'Am Faoilleach',
	            'An Gearran',
	            'Am Màrt',
	            'An Giblean',
	            'An Cèitean',
	            'An t-Ògmhios',
	            'An t-Iuchar',
	            'An Lùnastal',
	            'An t-Sultain',
	            'An Dàmhair',
	            'An t-Samhain',
	            'An Dùbhlachd',
	        ],
	        monthsShort = [
	            'Faoi',
	            'Gear',
	            'Màrt',
	            'Gibl',
	            'Cèit',
	            'Ògmh',
	            'Iuch',
	            'Lùn',
	            'Sult',
	            'Dàmh',
	            'Samh',
	            'Dùbh',
	        ],
	        weekdays = [
	            'Didòmhnaich',
	            'Diluain',
	            'Dimàirt',
	            'Diciadain',
	            'Diardaoin',
	            'Dihaoine',
	            'Disathairne',
	        ],
	        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
	        weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	    var gd = moment.defineLocale('gd', {
	        months: months,
	        monthsShort: monthsShort,
	        monthsParseExact: true,
	        weekdays: weekdays,
	        weekdaysShort: weekdaysShort,
	        weekdaysMin: weekdaysMin,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[An-diugh aig] LT',
	            nextDay: '[A-màireach aig] LT',
	            nextWeek: 'dddd [aig] LT',
	            lastDay: '[An-dè aig] LT',
	            lastWeek: 'dddd [seo chaidh] [aig] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ann an %s',
	            past: 'bho chionn %s',
	            s: 'beagan diogan',
	            ss: '%d diogan',
	            m: 'mionaid',
	            mm: '%d mionaidean',
	            h: 'uair',
	            hh: '%d uairean',
	            d: 'latha',
	            dd: '%d latha',
	            M: 'mìos',
	            MM: '%d mìosan',
	            y: 'bliadhna',
	            yy: '%d bliadhna',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
	        ordinal: function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return gd;
	
	})));


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var gl = moment.defineLocale('gl', {
	        months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split(
	            '_'
	        ),
	        monthsShort:
	            'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	        weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	        weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY H:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
	            },
	            nextDay: function () {
	                return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek: function () {
	                return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';
	            },
	            lastDay: function () {
	                return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';
	            },
	            lastWeek: function () {
	                return (
	                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT'
	                );
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (str) {
	                if (str.indexOf('un') === 0) {
	                    return 'n' + str;
	                }
	                return 'en ' + str;
	            },
	            past: 'hai %s',
	            s: 'uns segundos',
	            ss: '%d segundos',
	            m: 'un minuto',
	            mm: '%d minutos',
	            h: 'unha hora',
	            hh: '%d horas',
	            d: 'un día',
	            dd: '%d días',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un ano',
	            yy: '%d anos',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return gl;
	
	})));


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Devanagari script [gom-deva]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['थोडया सॅकंडांनी', 'थोडे सॅकंड'],
	            ss: [number + ' सॅकंडांनी', number + ' सॅकंड'],
	            m: ['एका मिणटान', 'एक मिनूट'],
	            mm: [number + ' मिणटांनी', number + ' मिणटां'],
	            h: ['एका वरान', 'एक वर'],
	            hh: [number + ' वरांनी', number + ' वरां'],
	            d: ['एका दिसान', 'एक दीस'],
	            dd: [number + ' दिसांनी', number + ' दीस'],
	            M: ['एका म्हयन्यान', 'एक म्हयनो'],
	            MM: [number + ' म्हयन्यानी', number + ' म्हयने'],
	            y: ['एका वर्सान', 'एक वर्स'],
	            yy: [number + ' वर्सांनी', number + ' वर्सां'],
	        };
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var gomDeva = moment.defineLocale('gom-deva', {
	        months: {
	            standalone:
	                'जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
	                    '_'
	                ),
	            format: 'जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या'.split(
	                '_'
	            ),
	            isFormat: /MMMM(\s)+D[oD]?/,
	        },
	        monthsShort:
	            'जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार'.split('_'),
	        weekdaysShort: 'आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.'.split('_'),
	        weekdaysMin: 'आ_सो_मं_बु_ब्रे_सु_शे'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'A h:mm [वाजतां]',
	            LTS: 'A h:mm:ss [वाजतां]',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY A h:mm [वाजतां]',
	            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [वाजतां]',
	            llll: 'ddd, D MMM YYYY, A h:mm [वाजतां]',
	        },
	        calendar: {
	            sameDay: '[आयज] LT',
	            nextDay: '[फाल्यां] LT',
	            nextWeek: '[फुडलो] dddd[,] LT',
	            lastDay: '[काल] LT',
	            lastWeek: '[फाटलो] dddd[,] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s',
	            past: '%s आदीं',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // the ordinal 'वेर' only applies to day of the month
	                case 'D':
	                    return number + 'वेर';
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                case 'w':
	                case 'W':
	                    return number;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week
	            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
	        },
	        meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राती') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळीं') {
	                return hour;
	            } else if (meridiem === 'दनपारां') {
	                return hour > 12 ? hour : hour + 12;
	            } else if (meridiem === 'सांजे') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'राती';
	            } else if (hour < 12) {
	                return 'सकाळीं';
	            } else if (hour < 16) {
	                return 'दनपारां';
	            } else if (hour < 20) {
	                return 'सांजे';
	            } else {
	                return 'राती';
	            }
	        },
	    });
	
	    return gomDeva;
	
	})));


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Konkani Latin script [gom-latn]
	//! author : The Discoverer : https://github.com/WikiDiscoverer
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['thoddea sekondamni', 'thodde sekond'],
	            ss: [number + ' sekondamni', number + ' sekond'],
	            m: ['eka mintan', 'ek minut'],
	            mm: [number + ' mintamni', number + ' mintam'],
	            h: ['eka voran', 'ek vor'],
	            hh: [number + ' voramni', number + ' voram'],
	            d: ['eka disan', 'ek dis'],
	            dd: [number + ' disamni', number + ' dis'],
	            M: ['eka mhoinean', 'ek mhoino'],
	            MM: [number + ' mhoineamni', number + ' mhoine'],
	            y: ['eka vorsan', 'ek voros'],
	            yy: [number + ' vorsamni', number + ' vorsam'],
	        };
	        return isFuture ? format[key][0] : format[key][1];
	    }
	
	    var gomLatn = moment.defineLocale('gom-latn', {
	        months: {
	            standalone:
	                'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
	                    '_'
	                ),
	            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
	                '_'
	            ),
	            isFormat: /MMMM(\s)+D[oD]?/,
	        },
	        monthsShort:
	            'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
	        monthsParseExact: true,
	        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
	        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
	        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'A h:mm [vazta]',
	            LTS: 'A h:mm:ss [vazta]',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY A h:mm [vazta]',
	            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
	            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
	        },
	        calendar: {
	            sameDay: '[Aiz] LT',
	            nextDay: '[Faleam] LT',
	            nextWeek: '[Fuddlo] dddd[,] LT',
	            lastDay: '[Kal] LT',
	            lastWeek: '[Fattlo] dddd[,] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s',
	            past: '%s adim',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                // the ordinal 'er' only applies to day of the month
	                case 'D':
	                    return number + 'er';
	                default:
	                case 'M':
	                case 'Q':
	                case 'DDD':
	                case 'd':
	                case 'w':
	                case 'W':
	                    return number;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week
	            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
	        },
	        meridiemParse: /rati|sokallim|donparam|sanje/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'rati') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'sokallim') {
	                return hour;
	            } else if (meridiem === 'donparam') {
	                return hour > 12 ? hour : hour + 12;
	            } else if (meridiem === 'sanje') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'rati';
	            } else if (hour < 12) {
	                return 'sokallim';
	            } else if (hour < 16) {
	                return 'donparam';
	            } else if (hour < 20) {
	                return 'sanje';
	            } else {
	                return 'rati';
	            }
	        },
	    });
	
	    return gomLatn;
	
	})));


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Gujarati [gu]
	//! author : Kaushik Thanki : https://github.com/Kaushik1987
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '૧',
	            2: '૨',
	            3: '૩',
	            4: '૪',
	            5: '૫',
	            6: '૬',
	            7: '૭',
	            8: '૮',
	            9: '૯',
	            0: '૦',
	        },
	        numberMap = {
	            '૧': '1',
	            '૨': '2',
	            '૩': '3',
	            '૪': '4',
	            '૫': '5',
	            '૬': '6',
	            '૭': '7',
	            '૮': '8',
	            '૯': '9',
	            '૦': '0',
	        };
	
	    var gu = moment.defineLocale('gu', {
	        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(
	            '_'
	        ),
	        monthsShort:
	            'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(
	            '_'
	        ),
	        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
	        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm વાગ્યે',
	            LTS: 'A h:mm:ss વાગ્યે',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',
	        },
	        calendar: {
	            sameDay: '[આજ] LT',
	            nextDay: '[કાલે] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ગઇકાલે] LT',
	            lastWeek: '[પાછલા] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s મા',
	            past: '%s પહેલા',
	            s: 'અમુક પળો',
	            ss: '%d સેકંડ',
	            m: 'એક મિનિટ',
	            mm: '%d મિનિટ',
	            h: 'એક કલાક',
	            hh: '%d કલાક',
	            d: 'એક દિવસ',
	            dd: '%d દિવસ',
	            M: 'એક મહિનો',
	            MM: '%d મહિનો',
	            y: 'એક વર્ષ',
	            yy: '%d વર્ષ',
	        },
	        preparse: function (string) {
	            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
	        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'રાત') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'સવાર') {
	                return hour;
	            } else if (meridiem === 'બપોર') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'સાંજ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'રાત';
	            } else if (hour < 10) {
	                return 'સવાર';
	            } else if (hour < 17) {
	                return 'બપોર';
	            } else if (hour < 20) {
	                return 'સાંજ';
	            } else {
	                return 'રાત';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return gu;
	
	})));


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var he = moment.defineLocale('he', {
	        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split(
	            '_'
	        ),
	        monthsShort:
	            'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [ב]MMMM YYYY',
	            LLL: 'D [ב]MMMM YYYY HH:mm',
	            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
	            l: 'D/M/YYYY',
	            ll: 'D MMM YYYY',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd, D MMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[היום ב־]LT',
	            nextDay: '[מחר ב־]LT',
	            nextWeek: 'dddd [בשעה] LT',
	            lastDay: '[אתמול ב־]LT',
	            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'בעוד %s',
	            past: 'לפני %s',
	            s: 'מספר שניות',
	            ss: '%d שניות',
	            m: 'דקה',
	            mm: '%d דקות',
	            h: 'שעה',
	            hh: function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d: 'יום',
	            dd: function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M: 'חודש',
	            MM: function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y: 'שנה',
	            yy: function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            },
	        },
	        meridiemParse:
	            /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM: function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        },
	    });
	
	    return he;
	
	})));


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '१',
	            2: '२',
	            3: '३',
	            4: '४',
	            5: '५',
	            6: '६',
	            7: '७',
	            8: '८',
	            9: '९',
	            0: '०',
	        },
	        numberMap = {
	            '१': '1',
	            '२': '2',
	            '३': '3',
	            '४': '4',
	            '५': '5',
	            '६': '6',
	            '७': '7',
	            '८': '8',
	            '९': '9',
	            '०': '0',
	        },
	        monthsParse = [
	            /^जन/i,
	            /^फ़र|फर/i,
	            /^मार्च/i,
	            /^अप्रै/i,
	            /^मई/i,
	            /^जून/i,
	            /^जुल/i,
	            /^अग/i,
	            /^सितं|सित/i,
	            /^अक्टू/i,
	            /^नव|नवं/i,
	            /^दिसं|दिस/i,
	        ],
	        shortMonthsParse = [
	            /^जन/i,
	            /^फ़र/i,
	            /^मार्च/i,
	            /^अप्रै/i,
	            /^मई/i,
	            /^जून/i,
	            /^जुल/i,
	            /^अग/i,
	            /^सित/i,
	            /^अक्टू/i,
	            /^नव/i,
	            /^दिस/i,
	        ];
	
	    var hi = moment.defineLocale('hi', {
	        months: {
	            format: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split(
	                '_'
	            ),
	            standalone:
	                'जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर'.split(
	                    '_'
	                ),
	        },
	        monthsShort:
	            'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm बजे',
	            LTS: 'A h:mm:ss बजे',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm बजे',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे',
	        },
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: shortMonthsParse,
	
	        monthsRegex:
	            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
	
	        monthsShortRegex:
	            /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
	
	        monthsStrictRegex:
	            /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,
	
	        monthsShortStrictRegex:
	            /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,
	
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[कल] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[कल] LT',
	            lastWeek: '[पिछले] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s में',
	            past: '%s पहले',
	            s: 'कुछ ही क्षण',
	            ss: '%d सेकंड',
	            m: 'एक मिनट',
	            mm: '%d मिनट',
	            h: 'एक घंटा',
	            hh: '%d घंटे',
	            d: 'एक दिन',
	            dd: '%d दिन',
	            M: 'एक महीने',
	            MM: '%d महीने',
	            y: 'एक वर्ष',
	            yy: '%d वर्ष',
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return hi;
	
	})));


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                if (number === 1) {
	                    result += 'sekunda';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sekunde';
	                } else {
	                    result += 'sekundi';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }
	
	    var hr = moment.defineLocale('hr', {
	        months: {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
	                '_'
	            ),
	            standalone:
	                'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
	                    '_'
	                ),
	        },
	        monthsShort:
	            'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'Do MMMM YYYY',
	            LLL: 'Do MMMM YYYY H:mm',
	            LLLL: 'dddd, Do MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[jučer u] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prošlu] [nedjelju] [u] LT';
	                    case 3:
	                        return '[prošlu] [srijedu] [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'par sekundi',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: 'dan',
	            dd: translate,
	            M: 'mjesec',
	            MM: translate,
	            y: 'godinu',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return hr;
	
	})));


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	//! author : Peter Viszt  : https://github.com/passatgt
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var weekEndings =
	        'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number;
	        switch (key) {
	            case 's':
	                return isFuture || withoutSuffix
	                    ? 'néhány másodperc'
	                    : 'néhány másodperce';
	            case 'ss':
	                return num + (isFuture || withoutSuffix)
	                    ? ' másodperc'
	                    : ' másodperce';
	            case 'm':
	                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'mm':
	                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'h':
	                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'hh':
	                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'd':
	                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'dd':
	                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'M':
	                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'MM':
	                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'y':
	                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	            case 'yy':
	                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (
	            (isFuture ? '' : '[múlt] ') +
	            '[' +
	            weekEndings[this.day()] +
	            '] LT[-kor]'
	        );
	    }
	
	    var hu = moment.defineLocale('hu', {
	        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'YYYY.MM.DD.',
	            LL: 'YYYY. MMMM D.',
	            LLL: 'YYYY. MMMM D. H:mm',
	            LLLL: 'YYYY. MMMM D., dddd H:mm',
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar: {
	            sameDay: '[ma] LT[-kor]',
	            nextDay: '[holnap] LT[-kor]',
	            nextWeek: function () {
	                return week.call(this, true);
	            },
	            lastDay: '[tegnap] LT[-kor]',
	            lastWeek: function () {
	                return week.call(this, false);
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s múlva',
	            past: '%s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return hu;
	
	})));


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var hyAm = moment.defineLocale('hy-am', {
	        months: {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split(
	                '_'
	            ),
	            standalone:
	                'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split(
	                    '_'
	                ),
	        },
	        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays:
	            'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split(
	                '_'
	            ),
	        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY թ.',
	            LLL: 'D MMMM YYYY թ., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY թ., HH:mm',
	        },
	        calendar: {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s հետո',
	            past: '%s առաջ',
	            s: 'մի քանի վայրկյան',
	            ss: '%d վայրկյան',
	            m: 'րոպե',
	            mm: '%d րոպե',
	            h: 'ժամ',
	            hh: '%d ժամ',
	            d: 'օր',
	            dd: '%d օր',
	            M: 'ամիս',
	            MM: '%d ամիս',
	            y: 'տարի',
	            yy: '%d տարի',
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem: function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'DDD':
	                case 'w':
	                case 'W':
	                case 'DDDo':
	                    if (number === 1) {
	                        return number + '-ին';
	                    }
	                    return number + '-րդ';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return hyAm;
	
	})));


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var id = moment.defineLocale('id', {
	        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
	        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Besok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kemarin pukul] LT',
	            lastWeek: 'dddd [lalu pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lalu',
	            s: 'beberapa detik',
	            ss: '%d detik',
	            m: 'semenit',
	            mm: '%d menit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun',
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return id;
	
	})));


/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture
	                    ? 'nokkrar sekúndur'
	                    : 'nokkrum sekúndum';
	            case 'ss':
	                if (plural(number)) {
	                    return (
	                        result +
	                        (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum')
	                    );
	                }
	                return result + 'sekúnda';
	            case 'm':
	                return withoutSuffix ? 'mínúta' : 'mínútu';
	            case 'mm':
	                if (plural(number)) {
	                    return (
	                        result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum')
	                    );
	                } else if (withoutSuffix) {
	                    return result + 'mínúta';
	                }
	                return result + 'mínútu';
	            case 'hh':
	                if (plural(number)) {
	                    return (
	                        result +
	                        (withoutSuffix || isFuture
	                            ? 'klukkustundir'
	                            : 'klukkustundum')
	                    );
	                }
	                return result + 'klukkustund';
	            case 'd':
	                if (withoutSuffix) {
	                    return 'dagur';
	                }
	                return isFuture ? 'dag' : 'degi';
	            case 'dd':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'dagar';
	                    }
	                    return result + (isFuture ? 'daga' : 'dögum');
	                } else if (withoutSuffix) {
	                    return result + 'dagur';
	                }
	                return result + (isFuture ? 'dag' : 'degi');
	            case 'M':
	                if (withoutSuffix) {
	                    return 'mánuður';
	                }
	                return isFuture ? 'mánuð' : 'mánuði';
	            case 'MM':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'mánuðir';
	                    }
	                    return result + (isFuture ? 'mánuði' : 'mánuðum');
	                } else if (withoutSuffix) {
	                    return result + 'mánuður';
	                }
	                return result + (isFuture ? 'mánuð' : 'mánuði');
	            case 'y':
	                return withoutSuffix || isFuture ? 'ár' : 'ári';
	            case 'yy':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	                }
	                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }
	
	    var is = moment.defineLocale('is', {
	        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays:
	            'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split(
	                '_'
	            ),
	        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] H:mm',
	            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
	        },
	        calendar: {
	            sameDay: '[í dag kl.] LT',
	            nextDay: '[á morgun kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[í gær kl.] LT',
	            lastWeek: '[síðasta] dddd [kl.] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'eftir %s',
	            past: 'fyrir %s síðan',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: 'klukkustund',
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return is;
	
	})));


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	//! author: Marco : https://github.com/Manfre98
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var it = moment.defineLocale('it', {
	        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
	            '_'
	        ),
	        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
	            '_'
	        ),
	        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: function () {
	                return (
	                    '[Oggi a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            nextDay: function () {
	                return (
	                    '[Domani a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            nextWeek: function () {
	                return (
	                    'dddd [a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            lastDay: function () {
	                return (
	                    '[Ieri a' +
	                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
	                    ']LT'
	                );
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return (
	                            '[La scorsa] dddd [a' +
	                            (this.hours() > 1
	                                ? 'lle '
	                                : this.hours() === 0
	                                ? ' '
	                                : "ll'") +
	                            ']LT'
	                        );
	                    default:
	                        return (
	                            '[Lo scorso] dddd [a' +
	                            (this.hours() > 1
	                                ? 'lle '
	                                : this.hours() === 0
	                                ? ' '
	                                : "ll'") +
	                            ']LT'
	                        );
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'tra %s',
	            past: '%s fa',
	            s: 'alcuni secondi',
	            ss: '%d secondi',
	            m: 'un minuto',
	            mm: '%d minuti',
	            h: "un'ora",
	            hh: '%d ore',
	            d: 'un giorno',
	            dd: '%d giorni',
	            w: 'una settimana',
	            ww: '%d settimane',
	            M: 'un mese',
	            MM: '%d mesi',
	            y: 'un anno',
	            yy: '%d anni',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return it;
	
	})));


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian (Switzerland) [it-ch]
	//! author : xfh : https://github.com/xfh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var itCh = moment.defineLocale('it-ch', {
	        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
	            '_'
	        ),
	        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split(
	            '_'
	        ),
	        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
	        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (s) {
	                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past: '%s fa',
	            s: 'alcuni secondi',
	            ss: '%d secondi',
	            m: 'un minuto',
	            mm: '%d minuti',
	            h: "un'ora",
	            hh: '%d ore',
	            d: 'un giorno',
	            dd: '%d giorni',
	            M: 'un mese',
	            MM: '%d mesi',
	            y: 'un anno',
	            yy: '%d anni',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return itCh;
	
	})));


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ja = moment.defineLocale('ja', {
	        eras: [
	            {
	                since: '2019-05-01',
	                offset: 1,
	                name: '令和',
	                narrow: '㋿',
	                abbr: 'R',
	            },
	            {
	                since: '1989-01-08',
	                until: '2019-04-30',
	                offset: 1,
	                name: '平成',
	                narrow: '㍻',
	                abbr: 'H',
	            },
	            {
	                since: '1926-12-25',
	                until: '1989-01-07',
	                offset: 1,
	                name: '昭和',
	                narrow: '㍼',
	                abbr: 'S',
	            },
	            {
	                since: '1912-07-30',
	                until: '1926-12-24',
	                offset: 1,
	                name: '大正',
	                narrow: '㍽',
	                abbr: 'T',
	            },
	            {
	                since: '1873-01-01',
	                until: '1912-07-29',
	                offset: 6,
	                name: '明治',
	                narrow: '㍾',
	                abbr: 'M',
	            },
	            {
	                since: '0001-01-01',
	                until: '1873-12-31',
	                offset: 1,
	                name: '西暦',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: '紀元前',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        eraYearOrdinalRegex: /(元|\d+)年/,
	        eraYearOrdinalParse: function (input, match) {
	            return match[1] === '元' ? 1 : parseInt(match[1] || input, 10);
	        },
	        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日 dddd HH:mm',
	            l: 'YYYY/MM/DD',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日(ddd) HH:mm',
	        },
	        meridiemParse: /午前|午後/i,
	        isPM: function (input) {
	            return input === '午後';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar: {
	            sameDay: '[今日] LT',
	            nextDay: '[明日] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    return '[来週]dddd LT';
	                } else {
	                    return 'dddd LT';
	                }
	            },
	            lastDay: '[昨日] LT',
	            lastWeek: function (now) {
	                if (this.week() !== now.week()) {
	                    return '[先週]dddd LT';
	                } else {
	                    return 'dddd LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}日/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'y':
	                    return number === 1 ? '元年' : number + '年';
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '数秒',
	            ss: '%d秒',
	            m: '1分',
	            mm: '%d分',
	            h: '1時間',
	            hh: '%d時間',
	            d: '1日',
	            dd: '%d日',
	            M: '1ヶ月',
	            MM: '%dヶ月',
	            y: '1年',
	            yy: '%d年',
	        },
	    });
	
	    return ja;
	
	})));


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var jv = moment.defineLocale('jv', {
	        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar: {
	            sameDay: '[Dinten puniko pukul] LT',
	            nextDay: '[Mbenjang pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kala wingi pukul] LT',
	            lastWeek: 'dddd [kepengker pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'wonten ing %s',
	            past: '%s ingkang kepengker',
	            s: 'sawetawis detik',
	            ss: '%d detik',
	            m: 'setunggal menit',
	            mm: '%d menit',
	            h: 'setunggal jam',
	            hh: '%d jam',
	            d: 'sedinten',
	            dd: '%d dinten',
	            M: 'sewulan',
	            MM: '%d wulan',
	            y: 'setaun',
	            yy: '%d taun',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return jv;
	
	})));


/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/IrakliJani
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ka = moment.defineLocale('ka', {
	        months: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split(
	            '_'
	        ),
	        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays: {
	            standalone:
	                'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split(
	                    '_'
	                ),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split(
	                '_'
	            ),
	            isFormat: /(წინა|შემდეგ)/,
	        },
	        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[დღეს] LT[-ზე]',
	            nextDay: '[ხვალ] LT[-ზე]',
	            lastDay: '[გუშინ] LT[-ზე]',
	            nextWeek: '[შემდეგ] dddd LT[-ზე]',
	            lastWeek: '[წინა] dddd LT-ზე',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: function (s) {
	                return s.replace(
	                    /(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,
	                    function ($0, $1, $2) {
	                        return $2 === 'ი' ? $1 + 'ში' : $1 + $2 + 'ში';
	                    }
	                );
	            },
	            past: function (s) {
	                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if (/წელი/.test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	                return s;
	            },
	            s: 'რამდენიმე წამი',
	            ss: '%d წამი',
	            m: 'წუთი',
	            mm: '%d წუთი',
	            h: 'საათი',
	            hh: '%d საათი',
	            d: 'დღე',
	            dd: '%d დღე',
	            M: 'თვე',
	            MM: '%d თვე',
	            y: 'წელი',
	            yy: '%d წელი',
	        },
	        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal: function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if (
	                number < 20 ||
	                (number <= 100 && number % 20 === 0) ||
	                number % 100 === 0
	            ) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week: {
	            dow: 1,
	            doy: 7,
	        },
	    });
	
	    return ka;
	
	})));


/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші',
	    };
	
	    var kk = moment.defineLocale('kk', {
	        months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split(
	            '_'
	        ),
	        monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split(
	            '_'
	        ),
	        weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Бүгін сағат] LT',
	            nextDay: '[Ертең сағат] LT',
	            nextWeek: 'dddd [сағат] LT',
	            lastDay: '[Кеше сағат] LT',
	            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ішінде',
	            past: '%s бұрын',
	            s: 'бірнеше секунд',
	            ss: '%d секунд',
	            m: 'бір минут',
	            mm: '%d минут',
	            h: 'бір сағат',
	            hh: '%d сағат',
	            d: 'бір күн',
	            dd: '%d күн',
	            M: 'бір ай',
	            MM: '%d ай',
	            y: 'бір жыл',
	            yy: '%d жыл',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return kk;
	
	})));


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '១',
	            2: '២',
	            3: '៣',
	            4: '៤',
	            5: '៥',
	            6: '៦',
	            7: '៧',
	            8: '៨',
	            9: '៩',
	            0: '០',
	        },
	        numberMap = {
	            '១': '1',
	            '២': '2',
	            '៣': '3',
	            '៤': '4',
	            '៥': '5',
	            '៦': '6',
	            '៧': '7',
	            '៨': '8',
	            '៩': '9',
	            '០': '0',
	        };
	
	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
	            '_'
	        ),
	        monthsShort:
	            'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
	                '_'
	            ),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
	        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ព្រឹក|ល្ងាច/,
	        isPM: function (input) {
	            return input === 'ល្ងាច';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ព្រឹក';
	            } else {
	                return 'ល្ងាច';
	            }
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            ss: '%d វិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ',
	        },
	        dayOfMonthOrdinalParse: /ទី\d{1,2}/,
	        ordinal: 'ទី%d',
	        preparse: function (string) {
	            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return km;
	
	})));


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kannada [kn]
	//! author : Rajeev Naik : https://github.com/rajeevnaikte
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '೧',
	            2: '೨',
	            3: '೩',
	            4: '೪',
	            5: '೫',
	            6: '೬',
	            7: '೭',
	            8: '೮',
	            9: '೯',
	            0: '೦',
	        },
	        numberMap = {
	            '೧': '1',
	            '೨': '2',
	            '೩': '3',
	            '೪': '4',
	            '೫': '5',
	            '೬': '6',
	            '೭': '7',
	            '೮': '8',
	            '೯': '9',
	            '೦': '0',
	        };
	
	    var kn = moment.defineLocale('kn', {
	        months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split(
	            '_'
	        ),
	        monthsShort:
	            'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split(
	            '_'
	        ),
	        weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
	        weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm',
	        },
	        calendar: {
	            sameDay: '[ಇಂದು] LT',
	            nextDay: '[ನಾಳೆ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ನಿನ್ನೆ] LT',
	            lastWeek: '[ಕೊನೆಯ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ನಂತರ',
	            past: '%s ಹಿಂದೆ',
	            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',
	            ss: '%d ಸೆಕೆಂಡುಗಳು',
	            m: 'ಒಂದು ನಿಮಿಷ',
	            mm: '%d ನಿಮಿಷ',
	            h: 'ಒಂದು ಗಂಟೆ',
	            hh: '%d ಗಂಟೆ',
	            d: 'ಒಂದು ದಿನ',
	            dd: '%d ದಿನ',
	            M: 'ಒಂದು ತಿಂಗಳು',
	            MM: '%d ತಿಂಗಳು',
	            y: 'ಒಂದು ವರ್ಷ',
	            yy: '%d ವರ್ಷ',
	        },
	        preparse: function (string) {
	            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ರಾತ್ರಿ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
	                return hour;
	            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ಸಂಜೆ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ರಾತ್ರಿ';
	            } else if (hour < 10) {
	                return 'ಬೆಳಿಗ್ಗೆ';
	            } else if (hour < 17) {
	                return 'ಮಧ್ಯಾಹ್ನ';
	            } else if (hour < 20) {
	                return 'ಸಂಜೆ';
	            } else {
	                return 'ರಾತ್ರಿ';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
	        ordinal: function (number) {
	            return number + 'ನೇ';
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return kn;
	
	})));


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ko = moment.defineLocale('ko', {
	        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split(
	            '_'
	        ),
	        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'YYYY.MM.DD.',
	            LL: 'YYYY년 MMMM D일',
	            LLL: 'YYYY년 MMMM D일 A h:mm',
	            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
	            l: 'YYYY.MM.DD.',
	            ll: 'YYYY년 MMMM D일',
	            lll: 'YYYY년 MMMM D일 A h:mm',
	            llll: 'YYYY년 MMMM D일 dddd A h:mm',
	        },
	        calendar: {
	            sameDay: '오늘 LT',
	            nextDay: '내일 LT',
	            nextWeek: 'dddd LT',
	            lastDay: '어제 LT',
	            lastWeek: '지난주 dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s 후',
	            past: '%s 전',
	            s: '몇 초',
	            ss: '%d초',
	            m: '1분',
	            mm: '%d분',
	            h: '한 시간',
	            hh: '%d시간',
	            d: '하루',
	            dd: '%d일',
	            M: '한 달',
	            MM: '%d달',
	            y: '일 년',
	            yy: '%d년',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '일';
	                case 'M':
	                    return number + '월';
	                case 'w':
	                case 'W':
	                    return number + '주';
	                default:
	                    return number;
	            }
	        },
	        meridiemParse: /오전|오후/,
	        isPM: function (token) {
	            return token === '오후';
	        },
	        meridiem: function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        },
	    });
	
	    return ko;
	
	})));


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kurdish [ku]
	//! author : Shahram Mebashar : https://github.com/ShahramMebashar
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '١',
	            2: '٢',
	            3: '٣',
	            4: '٤',
	            5: '٥',
	            6: '٦',
	            7: '٧',
	            8: '٨',
	            9: '٩',
	            0: '٠',
	        },
	        numberMap = {
	            '١': '1',
	            '٢': '2',
	            '٣': '3',
	            '٤': '4',
	            '٥': '5',
	            '٦': '6',
	            '٧': '7',
	            '٨': '8',
	            '٩': '9',
	            '٠': '0',
	        },
	        months = [
	            'کانونی دووەم',
	            'شوبات',
	            'ئازار',
	            'نیسان',
	            'ئایار',
	            'حوزەیران',
	            'تەمموز',
	            'ئاب',
	            'ئەیلوول',
	            'تشرینی یەكەم',
	            'تشرینی دووەم',
	            'كانونی یەکەم',
	        ];
	
	    var ku = moment.defineLocale('ku', {
	        months: months,
	        monthsShort: months,
	        weekdays:
	            'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split(
	                '_'
	            ),
	        weekdaysShort:
	            'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
	        weekdaysMin: 'ی_د_س_چ_پ_ه_ش'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ئێواره‌|به‌یانی/,
	        isPM: function (input) {
	            return /ئێواره‌/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'به‌یانی';
	            } else {
	                return 'ئێواره‌';
	            }
	        },
	        calendar: {
	            sameDay: '[ئه‌مرۆ كاتژمێر] LT',
	            nextDay: '[به‌یانی كاتژمێر] LT',
	            nextWeek: 'dddd [كاتژمێر] LT',
	            lastDay: '[دوێنێ كاتژمێر] LT',
	            lastWeek: 'dddd [كاتژمێر] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'له‌ %s',
	            past: '%s',
	            s: 'چه‌ند چركه‌یه‌ك',
	            ss: 'چركه‌ %d',
	            m: 'یه‌ك خوله‌ك',
	            mm: '%d خوله‌ك',
	            h: 'یه‌ك كاتژمێر',
	            hh: '%d كاتژمێر',
	            d: 'یه‌ك ڕۆژ',
	            dd: '%d ڕۆژ',
	            M: 'یه‌ك مانگ',
	            MM: '%d مانگ',
	            y: 'یه‌ك ساڵ',
	            yy: '%d ساڵ',
	        },
	        preparse: function (string) {
	            return string
	                .replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                    return numberMap[match];
	                })
	                .replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string
	                .replace(/\d/g, function (match) {
	                    return symbolMap[match];
	                })
	                .replace(/,/g, '،');
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return ku;
	
	})));


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү',
	    };
	
	    var ky = moment.defineLocale('ky', {
	        months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
	            '_'
	        ),
	        monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split(
	            '_'
	        ),
	        weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split(
	            '_'
	        ),
	        weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Бүгүн саат] LT',
	            nextDay: '[Эртең саат] LT',
	            nextWeek: 'dddd [саат] LT',
	            lastDay: '[Кечээ саат] LT',
	            lastWeek: '[Өткөн аптанын] dddd [күнү] [саат] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ичинде',
	            past: '%s мурун',
	            s: 'бирнече секунд',
	            ss: '%d секунд',
	            m: 'бир мүнөт',
	            mm: '%d мүнөт',
	            h: 'бир саат',
	            hh: '%d саат',
	            d: 'бир күн',
	            dd: '%d күн',
	            M: 'бир ай',
	            MM: '%d ай',
	            y: 'бир жыл',
	            yy: '%d жыл',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return ky;
	
	})));


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            m: ['eng Minutt', 'enger Minutt'],
	            h: ['eng Stonn', 'enger Stonn'],
	            d: ['een Dag', 'engem Dag'],
	            M: ['ee Mount', 'engem Mount'],
	            y: ['ee Joer', 'engem Joer'],
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10,
	                firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }
	
	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
	            '_'
	        ),
	        monthsShort:
	            'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split(
	                '_'
	            ),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            },
	        },
	        relativeTime: {
	            future: processFutureTime,
	            past: processPastTime,
	            s: 'e puer Sekonnen',
	            ss: '%d Sekonnen',
	            m: processRelativeTime,
	            mm: '%d Minutten',
	            h: processRelativeTime,
	            hh: '%d Stonnen',
	            d: processRelativeTime,
	            dd: '%d Deeg',
	            M: processRelativeTime,
	            MM: '%d Méint',
	            y: processRelativeTime,
	            yy: '%d Joer',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return lb;
	
	})));


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var lo = moment.defineLocale('lo', {
	        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split(
	                '_'
	            ),
	        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'ວັນdddd D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar: {
	            sameDay: '[ມື້ນີ້ເວລາ] LT',
	            nextDay: '[ມື້ອື່ນເວລາ] LT',
	            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ອີກ %s',
	            past: '%sຜ່ານມາ',
	            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
	            ss: '%d ວິນາທີ',
	            m: '1 ນາທີ',
	            mm: '%d ນາທີ',
	            h: '1 ຊົ່ວໂມງ',
	            hh: '%d ຊົ່ວໂມງ',
	            d: '1 ມື້',
	            dd: '%d ມື້',
	            M: '1 ເດືອນ',
	            MM: '%d ເດືອນ',
	            y: '1 ປີ',
	            yy: '%d ປີ',
	        },
	        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
	        ordinal: function (number) {
	            return 'ທີ່' + number;
	        },
	    });
	
	    return lo;
	
	})));


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var units = {
	        ss: 'sekundė_sekundžių_sekundes',
	        m: 'minutė_minutės_minutę',
	        mm: 'minutės_minučių_minutes',
	        h: 'valanda_valandos_valandą',
	        hh: 'valandos_valandų_valandas',
	        d: 'diena_dienos_dieną',
	        dd: 'dienos_dienų_dienas',
	        M: 'mėnuo_mėnesio_mėnesį',
	        MM: 'mėnesiai_mėnesių_mėnesius',
	        y: 'metai_metų_metus',
	        yy: 'metai_metų_metus',
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix
	            ? forms(key)[0]
	            : isFuture
	            ? forms(key)[1]
	            : forms(key)[2];
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return (
	                result + translateSingular(number, withoutSuffix, key[0], isFuture)
	            );
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months: {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split(
	                '_'
	            ),
	            standalone:
	                'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split(
	                    '_'
	                ),
	            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
	        },
	        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays: {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split(
	                '_'
	            ),
	            standalone:
	                'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split(
	                    '_'
	                ),
	            isFormat: /dddd HH:mm/,
	        },
	        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY [m.] MMMM D [d.]',
	            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l: 'YYYY-MM-DD',
	            ll: 'YYYY [m.] MMMM D [d.]',
	            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
	        },
	        calendar: {
	            sameDay: '[Šiandien] LT',
	            nextDay: '[Rytoj] LT',
	            nextWeek: 'dddd LT',
	            lastDay: '[Vakar] LT',
	            lastWeek: '[Praėjusį] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'po %s',
	            past: 'prieš %s',
	            s: translateSeconds,
	            ss: translate,
	            m: translateSingular,
	            mm: translate,
	            h: translateSingular,
	            hh: translate,
	            d: translateSingular,
	            dd: translate,
	            M: translateSingular,
	            MM: translate,
	            y: translateSingular,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
	        ordinal: function (number) {
	            return number + '-oji';
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return lt;
	
	})));


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var units = {
	        ss: 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
	        m: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        mm: 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        h: 'stundas_stundām_stunda_stundas'.split('_'),
	        hh: 'stundas_stundām_stunda_stundas'.split('_'),
	        d: 'dienas_dienām_diena_dienas'.split('_'),
	        dd: 'dienas_dienām_diena_dienas'.split('_'),
	        M: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        MM: 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        y: 'gada_gadiem_gads_gadi'.split('_'),
	        yy: 'gada_gadiem_gads_gadi'.split('_'),
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }
	
	    var lv = moment.defineLocale('lv', {
	        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays:
	            'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split(
	                '_'
	            ),
	        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY.',
	            LL: 'YYYY. [gada] D. MMMM',
	            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
	        },
	        calendar: {
	            sameDay: '[Šodien pulksten] LT',
	            nextDay: '[Rīt pulksten] LT',
	            nextWeek: 'dddd [pulksten] LT',
	            lastDay: '[Vakar pulksten] LT',
	            lastWeek: '[Pagājušā] dddd [pulksten] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'pēc %s',
	            past: 'pirms %s',
	            s: relativeSeconds,
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithSingular,
	            mm: relativeTimeWithPlural,
	            h: relativeTimeWithSingular,
	            hh: relativeTimeWithPlural,
	            d: relativeTimeWithSingular,
	            dd: relativeTimeWithPlural,
	            M: relativeTimeWithSingular,
	            MM: relativeTimeWithPlural,
	            y: relativeTimeWithSingular,
	            yy: relativeTimeWithPlural,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return lv;
	
	})));


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var translator = {
	        words: {
	            //Different grammatical cases
	            ss: ['sekund', 'sekunda', 'sekundi'],
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina'],
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1
	                ? wordKey[0]
	                : number >= 2 && number <= 4
	                ? wordKey[1]
	                : wordKey[2];
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return (
	                    number +
	                    ' ' +
	                    translator.correctGrammaticalCase(number, wordKey)
	                );
	            }
	        },
	    };
	
	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',
	
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[juče u] LT',
	            lastWeek: function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT',
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'prije %s',
	            s: 'nekoliko sekundi',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: 'dan',
	            dd: translator.translate,
	            M: 'mjesec',
	            MM: translator.translate,
	            y: 'godinu',
	            yy: translator.translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return me;
	
	})));


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var mi = moment.defineLocale('mi', {
	        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split(
	            '_'
	        ),
	        monthsShort:
	            'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
	                '_'
	            ),
	        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [i] HH:mm',
	            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
	        },
	        calendar: {
	            sameDay: '[i teie mahana, i] LT',
	            nextDay: '[apopo i] LT',
	            nextWeek: 'dddd [i] LT',
	            lastDay: '[inanahi i] LT',
	            lastWeek: 'dddd [whakamutunga i] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'i roto i %s',
	            past: '%s i mua',
	            s: 'te hēkona ruarua',
	            ss: '%d hēkona',
	            m: 'he meneti',
	            mm: '%d meneti',
	            h: 'te haora',
	            hh: '%d haora',
	            d: 'he ra',
	            dd: '%d ra',
	            M: 'he marama',
	            MM: '%d marama',
	            y: 'he tau',
	            yy: '%d tau',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return mi;
	
	})));


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	//! author : Sashko Todorov : https://github.com/bkyceh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var mk = moment.defineLocale('mk', {
	        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split(
	            '_'
	        ),
	        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split(
	            '_'
	        ),
	        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[Денес во] LT',
	            nextDay: '[Утре во] LT',
	            nextWeek: '[Во] dddd [во] LT',
	            lastDay: '[Вчера во] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Изминатата] dddd [во] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: 'пред %s',
	            s: 'неколку секунди',
	            ss: '%d секунди',
	            m: 'една минута',
	            mm: '%d минути',
	            h: 'еден час',
	            hh: '%d часа',
	            d: 'еден ден',
	            dd: '%d дена',
	            M: 'еден месец',
	            MM: '%d месеци',
	            y: 'една година',
	            yy: '%d години',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal: function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return mk;
	
	})));


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ml = moment.defineLocale('ml', {
	        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split(
	                '_'
	            ),
	        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm -നു',
	            LTS: 'A h:mm:ss -നു',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm -നു',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു',
	        },
	        calendar: {
	            sameDay: '[ഇന്ന്] LT',
	            nextDay: '[നാളെ] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[ഇന്നലെ] LT',
	            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s കഴിഞ്ഞ്',
	            past: '%s മുൻപ്',
	            s: 'അൽപ നിമിഷങ്ങൾ',
	            ss: '%d സെക്കൻഡ്',
	            m: 'ഒരു മിനിറ്റ്',
	            mm: '%d മിനിറ്റ്',
	            h: 'ഒരു മണിക്കൂർ',
	            hh: '%d മണിക്കൂർ',
	            d: 'ഒരു ദിവസം',
	            dd: '%d ദിവസം',
	            M: 'ഒരു മാസം',
	            MM: '%d മാസം',
	            y: 'ഒരു വർഷം',
	            yy: '%d വർഷം',
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                (meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം'
	            ) {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        },
	    });
	
	    return ml;
	
	})));


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Mongolian [mn]
	//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function translate(number, withoutSuffix, key, isFuture) {
	        switch (key) {
	            case 's':
	                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
	            case 'ss':
	                return number + (withoutSuffix ? ' секунд' : ' секундын');
	            case 'm':
	            case 'mm':
	                return number + (withoutSuffix ? ' минут' : ' минутын');
	            case 'h':
	            case 'hh':
	                return number + (withoutSuffix ? ' цаг' : ' цагийн');
	            case 'd':
	            case 'dd':
	                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
	            case 'M':
	            case 'MM':
	                return number + (withoutSuffix ? ' сар' : ' сарын');
	            case 'y':
	            case 'yy':
	                return number + (withoutSuffix ? ' жил' : ' жилийн');
	            default:
	                return number;
	        }
	    }
	
	    var mn = moment.defineLocale('mn', {
	        months: 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split(
	            '_'
	        ),
	        monthsShort:
	            '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
	        weekdaysShort: 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
	        weekdaysMin: 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY оны MMMMын D',
	            LLL: 'YYYY оны MMMMын D HH:mm',
	            LLLL: 'dddd, YYYY оны MMMMын D HH:mm',
	        },
	        meridiemParse: /ҮӨ|ҮХ/i,
	        isPM: function (input) {
	            return input === 'ҮХ';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ҮӨ';
	            } else {
	                return 'ҮХ';
	            }
	        },
	        calendar: {
	            sameDay: '[Өнөөдөр] LT',
	            nextDay: '[Маргааш] LT',
	            nextWeek: '[Ирэх] dddd LT',
	            lastDay: '[Өчигдөр] LT',
	            lastWeek: '[Өнгөрсөн] dddd LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s дараа',
	            past: '%s өмнө',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + ' өдөр';
	                default:
	                    return number;
	            }
	        },
	    });
	
	    return mn;
	
	})));


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '१',
	            2: '२',
	            3: '३',
	            4: '४',
	            5: '५',
	            6: '६',
	            7: '७',
	            8: '८',
	            9: '९',
	            0: '०',
	        },
	        numberMap = {
	            '१': '1',
	            '२': '2',
	            '३': '3',
	            '४': '4',
	            '५': '5',
	            '६': '6',
	            '७': '7',
	            '८': '8',
	            '९': '9',
	            '०': '0',
	        };
	
	    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's':
	                    output = 'काही सेकंद';
	                    break;
	                case 'ss':
	                    output = '%d सेकंद';
	                    break;
	                case 'm':
	                    output = 'एक मिनिट';
	                    break;
	                case 'mm':
	                    output = '%d मिनिटे';
	                    break;
	                case 'h':
	                    output = 'एक तास';
	                    break;
	                case 'hh':
	                    output = '%d तास';
	                    break;
	                case 'd':
	                    output = 'एक दिवस';
	                    break;
	                case 'dd':
	                    output = '%d दिवस';
	                    break;
	                case 'M':
	                    output = 'एक महिना';
	                    break;
	                case 'MM':
	                    output = '%d महिने';
	                    break;
	                case 'y':
	                    output = 'एक वर्ष';
	                    break;
	                case 'yy':
	                    output = '%d वर्षे';
	                    break;
	            }
	        } else {
	            switch (string) {
	                case 's':
	                    output = 'काही सेकंदां';
	                    break;
	                case 'ss':
	                    output = '%d सेकंदां';
	                    break;
	                case 'm':
	                    output = 'एका मिनिटा';
	                    break;
	                case 'mm':
	                    output = '%d मिनिटां';
	                    break;
	                case 'h':
	                    output = 'एका तासा';
	                    break;
	                case 'hh':
	                    output = '%d तासां';
	                    break;
	                case 'd':
	                    output = 'एका दिवसा';
	                    break;
	                case 'dd':
	                    output = '%d दिवसां';
	                    break;
	                case 'M':
	                    output = 'एका महिन्या';
	                    break;
	                case 'MM':
	                    output = '%d महिन्यां';
	                    break;
	                case 'y':
	                    output = 'एका वर्षा';
	                    break;
	                case 'yy':
	                    output = '%d वर्षां';
	                    break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }
	
	    var mr = moment.defineLocale('mr', {
	        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split(
	            '_'
	        ),
	        monthsShort:
	            'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm वाजता',
	            LTS: 'A h:mm:ss वाजता',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm वाजता',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता',
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[उद्या] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            ss: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr,
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'पहाटे' || meridiem === 'सकाळी') {
	                return hour;
	            } else if (
	                meridiem === 'दुपारी' ||
	                meridiem === 'सायंकाळी' ||
	                meridiem === 'रात्री'
	            ) {
	                return hour >= 12 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour >= 0 && hour < 6) {
	                return 'पहाटे';
	            } else if (hour < 12) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return mr;
	
	})));


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ms = moment.defineLocale('ms', {
	        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Esok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kelmarin pukul] LT',
	            lastWeek: 'dddd [lepas pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lepas',
	            s: 'beberapa saat',
	            ss: '%d saat',
	            m: 'seminit',
	            mm: '%d minit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return ms;
	
	})));


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var msMy = moment.defineLocale('ms-my', {
	        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [pukul] HH.mm',
	            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar: {
	            sameDay: '[Hari ini pukul] LT',
	            nextDay: '[Esok pukul] LT',
	            nextWeek: 'dddd [pukul] LT',
	            lastDay: '[Kelmarin pukul] LT',
	            lastWeek: 'dddd [lepas pukul] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dalam %s',
	            past: '%s yang lepas',
	            s: 'beberapa saat',
	            ss: '%d saat',
	            m: 'seminit',
	            mm: '%d minit',
	            h: 'sejam',
	            hh: '%d jam',
	            d: 'sehari',
	            dd: '%d hari',
	            M: 'sebulan',
	            MM: '%d bulan',
	            y: 'setahun',
	            yy: '%d tahun',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return msMy;
	
	})));


/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maltese (Malta) [mt]
	//! author : Alessandro Maruccia : https://github.com/alesma
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var mt = moment.defineLocale('mt', {
	        months: 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
	        weekdays:
	            'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split(
	                '_'
	            ),
	        weekdaysShort: 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
	        weekdaysMin: 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Illum fil-]LT',
	            nextDay: '[Għada fil-]LT',
	            nextWeek: 'dddd [fil-]LT',
	            lastDay: '[Il-bieraħ fil-]LT',
	            lastWeek: 'dddd [li għadda] [fil-]LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'f’ %s',
	            past: '%s ilu',
	            s: 'ftit sekondi',
	            ss: '%d sekondi',
	            m: 'minuta',
	            mm: '%d minuti',
	            h: 'siegħa',
	            hh: '%d siegħat',
	            d: 'ġurnata',
	            dd: '%d ġranet',
	            M: 'xahar',
	            MM: '%d xhur',
	            y: 'sena',
	            yy: '%d sni',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return mt;
	
	})));


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '၁',
	            2: '၂',
	            3: '၃',
	            4: '၄',
	            5: '၅',
	            6: '၆',
	            7: '၇',
	            8: '၈',
	            9: '၉',
	            0: '၀',
	        },
	        numberMap = {
	            '၁': '1',
	            '၂': '2',
	            '၃': '3',
	            '၄': '4',
	            '၅': '5',
	            '၆': '6',
	            '၇': '7',
	            '၈': '8',
	            '၉': '9',
	            '၀': '0',
	        };
	
	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split(
	            '_'
	        ),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split(
	            '_'
	        ),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            ss: '%d စက္ကန့်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်',
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return my;
	
	})));


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	//!           Stephen Ramthun : https://github.com/stephenramthun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var nb = moment.defineLocale('nb', {
	        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s siden',
	            s: 'noen sekunder',
	            ss: '%d sekunder',
	            m: 'ett minutt',
	            mm: '%d minutter',
	            h: 'en time',
	            hh: '%d timer',
	            d: 'en dag',
	            dd: '%d dager',
	            w: 'en uke',
	            ww: '%d uker',
	            M: 'en måned',
	            MM: '%d måneder',
	            y: 'ett år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nb;
	
	})));


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '१',
	            2: '२',
	            3: '३',
	            4: '४',
	            5: '५',
	            6: '६',
	            7: '७',
	            8: '८',
	            9: '९',
	            0: '०',
	        },
	        numberMap = {
	            '१': '1',
	            '२': '2',
	            '३': '3',
	            '४': '4',
	            '५': '5',
	            '६': '6',
	            '७': '7',
	            '८': '8',
	            '९': '9',
	            '०': '0',
	        };
	
	    var ne = moment.defineLocale('ne', {
	        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split(
	            '_'
	        ),
	        monthsShort:
	            'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split(
	            '_'
	        ),
	        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'Aको h:mm बजे',
	            LTS: 'Aको h:mm:ss बजे',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे',
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar: {
	            sameDay: '[आज] LT',
	            nextDay: '[भोलि] LT',
	            nextWeek: '[आउँदो] dddd[,] LT',
	            lastDay: '[हिजो] LT',
	            lastWeek: '[गएको] dddd[,] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sमा',
	            past: '%s अगाडि',
	            s: 'केही क्षण',
	            ss: '%d सेकेण्ड',
	            m: 'एक मिनेट',
	            mm: '%d मिनेट',
	            h: 'एक घण्टा',
	            hh: '%d घण्टा',
	            d: 'एक दिन',
	            dd: '%d दिन',
	            M: 'एक महिना',
	            MM: '%d महिना',
	            y: 'एक बर्ष',
	            yy: '%d बर्ष',
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return ne;
	
	})));


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortWithDots =
	            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots =
	            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        monthsParse = [
	            /^jan/i,
	            /^feb/i,
	            /^maart|mrt.?$/i,
	            /^apr/i,
	            /^mei$/i,
	            /^jun[i.]?$/i,
	            /^jul[i.]?$/i,
	            /^aug/i,
	            /^sep/i,
	            /^okt/i,
	            /^nov/i,
	            /^dec/i,
	        ],
	        monthsRegex =
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	    var nl = moment.defineLocale('nl', {
	        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex:
	            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        weekdays:
	            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD-MM-YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'over %s',
	            past: '%s geleden',
	            s: 'een paar seconden',
	            ss: '%d seconden',
	            m: 'één minuut',
	            mm: '%d minuten',
	            h: 'één uur',
	            hh: '%d uur',
	            d: 'één dag',
	            dd: '%d dagen',
	            w: 'één week',
	            ww: '%d weken',
	            M: 'één maand',
	            MM: '%d maanden',
	            y: 'één jaar',
	            yy: '%d jaar',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            );
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nl;
	
	})));


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsShortWithDots =
	            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots =
	            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        monthsParse = [
	            /^jan/i,
	            /^feb/i,
	            /^maart|mrt.?$/i,
	            /^apr/i,
	            /^mei$/i,
	            /^jun[i.]?$/i,
	            /^jul[i.]?$/i,
	            /^aug/i,
	            /^sep/i,
	            /^okt/i,
	            /^nov/i,
	            /^dec/i,
	        ],
	        monthsRegex =
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	    var nlBe = moment.defineLocale('nl-be', {
	        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: function (m, format) {
	            if (!m) {
	                return monthsShortWithDots;
	            } else if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	
	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex:
	            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex:
	            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        weekdays:
	            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'over %s',
	            past: '%s geleden',
	            s: 'een paar seconden',
	            ss: '%d seconden',
	            m: 'één minuut',
	            mm: '%d minuten',
	            h: 'één uur',
	            hh: '%d uur',
	            d: 'één dag',
	            dd: '%d dagen',
	            M: 'één maand',
	            MM: '%d maanden',
	            y: 'één jaar',
	            yy: '%d jaar',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
	        ordinal: function (number) {
	            return (
	                number +
	                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
	            );
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nlBe;
	
	})));


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! authors : https://github.com/mechuwind
	//!           Stephen Ramthun : https://github.com/stephenramthun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var nn = moment.defineLocale('nn', {
	        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort: 'su._må._ty._on._to._fr._lau.'.split('_'),
	        weekdaysMin: 'su_må_ty_on_to_fr_la'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY [kl.] H:mm',
	            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: '%s sidan',
	            s: 'nokre sekund',
	            ss: '%d sekund',
	            m: 'eit minutt',
	            mm: '%d minutt',
	            h: 'ein time',
	            hh: '%d timar',
	            d: 'ein dag',
	            dd: '%d dagar',
	            w: 'ei veke',
	            ww: '%d veker',
	            M: 'ein månad',
	            MM: '%d månader',
	            y: 'eit år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return nn;
	
	})));


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Occitan, lengadocian dialecte [oc-lnc]
	//! author : Quentin PAGÈS : https://github.com/Quenty31
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ocLnc = moment.defineLocale('oc-lnc', {
	        months: {
	            standalone:
	                'genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre'.split(
	                    '_'
	                ),
	            format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split(
	                '_'
	            ),
	            isFormat: /D[oD]?(\s)+MMMM/,
	        },
	        monthsShort:
	            'gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte'.split(
	            '_'
	        ),
	        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [de] YYYY',
	            ll: 'D MMM YYYY',
	            LLL: 'D MMMM [de] YYYY [a] H:mm',
	            lll: 'D MMM YYYY, H:mm',
	            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
	            llll: 'ddd D MMM YYYY, H:mm',
	        },
	        calendar: {
	            sameDay: '[uèi a] LT',
	            nextDay: '[deman a] LT',
	            nextWeek: 'dddd [a] LT',
	            lastDay: '[ièr a] LT',
	            lastWeek: 'dddd [passat a] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: "d'aquí %s",
	            past: 'fa %s',
	            s: 'unas segondas',
	            ss: '%d segondas',
	            m: 'una minuta',
	            mm: '%d minutas',
	            h: 'una ora',
	            hh: '%d oras',
	            d: 'un jorn',
	            dd: '%d jorns',
	            M: 'un mes',
	            MM: '%d meses',
	            y: 'un an',
	            yy: '%d ans',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal: function (number, period) {
	            var output =
	                number === 1
	                    ? 'r'
	                    : number === 2
	                    ? 'n'
	                    : number === 3
	                    ? 'r'
	                    : number === 4
	                    ? 't'
	                    : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4,
	        },
	    });
	
	    return ocLnc;
	
	})));


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '੧',
	            2: '੨',
	            3: '੩',
	            4: '੪',
	            5: '੫',
	            6: '੬',
	            7: '੭',
	            8: '੮',
	            9: '੯',
	            0: '੦',
	        },
	        numberMap = {
	            '੧': '1',
	            '੨': '2',
	            '੩': '3',
	            '੪': '4',
	            '੫': '5',
	            '੬': '6',
	            '੭': '7',
	            '੮': '8',
	            '੯': '9',
	            '੦': '0',
	        };
	
	    var paIn = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
	        months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split(
	                '_'
	            ),
	        weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split(
	            '_'
	        ),
	        weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm ਵਜੇ',
	            LTS: 'A h:mm:ss ਵਜੇ',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ',
	        },
	        calendar: {
	            sameDay: '[ਅਜ] LT',
	            nextDay: '[ਕਲ] LT',
	            nextWeek: '[ਅਗਲਾ] dddd, LT',
	            lastDay: '[ਕਲ] LT',
	            lastWeek: '[ਪਿਛਲੇ] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s ਵਿੱਚ',
	            past: '%s ਪਿਛਲੇ',
	            s: 'ਕੁਝ ਸਕਿੰਟ',
	            ss: '%d ਸਕਿੰਟ',
	            m: 'ਇਕ ਮਿੰਟ',
	            mm: '%d ਮਿੰਟ',
	            h: 'ਇੱਕ ਘੰਟਾ',
	            hh: '%d ਘੰਟੇ',
	            d: 'ਇੱਕ ਦਿਨ',
	            dd: '%d ਦਿਨ',
	            M: 'ਇੱਕ ਮਹੀਨਾ',
	            MM: '%d ਮਹੀਨੇ',
	            y: 'ਇੱਕ ਸਾਲ',
	            yy: '%d ਸਾਲ',
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return paIn;
	
	})));


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var monthsNominative =
	            'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split(
	                '_'
	            ),
	        monthsSubjective =
	            'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split(
	                '_'
	            ),
	        monthsParse = [
	            /^sty/i,
	            /^lut/i,
	            /^mar/i,
	            /^kwi/i,
	            /^maj/i,
	            /^cze/i,
	            /^lip/i,
	            /^sie/i,
	            /^wrz/i,
	            /^paź/i,
	            /^lis/i,
	            /^gru/i,
	        ];
	    function plural(n) {
	        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'ss':
	                return result + (plural(number) ? 'sekundy' : 'sekund');
	            case 'm':
	                return withoutSuffix ? 'minuta' : 'minutę';
	            case 'mm':
	                return result + (plural(number) ? 'minuty' : 'minut');
	            case 'h':
	                return withoutSuffix ? 'godzina' : 'godzinę';
	            case 'hh':
	                return result + (plural(number) ? 'godziny' : 'godzin');
	            case 'ww':
	                return result + (plural(number) ? 'tygodnie' : 'tygodni');
	            case 'MM':
	                return result + (plural(number) ? 'miesiące' : 'miesięcy');
	            case 'yy':
	                return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }
	
	    var pl = moment.defineLocale('pl', {
	        months: function (momentToFormat, format) {
	            if (!momentToFormat) {
	                return monthsNominative;
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	        weekdays:
	            'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W niedzielę o] LT';
	
	                    case 2:
	                        return '[We wtorek o] LT';
	
	                    case 3:
	                        return '[W środę o] LT';
	
	                    case 6:
	                        return '[W sobotę o] LT';
	
	                    default:
	                        return '[W] dddd [o] LT';
	                }
	            },
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W zeszłą niedzielę o] LT';
	                    case 3:
	                        return '[W zeszłą środę o] LT';
	                    case 6:
	                        return '[W zeszłą sobotę o] LT';
	                    default:
	                        return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: '%s temu',
	            s: 'kilka sekund',
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: '1 dzień',
	            dd: '%d dni',
	            w: 'tydzień',
	            ww: translate,
	            M: 'miesiąc',
	            MM: translate,
	            y: 'rok',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return pl;
	
	})));


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var pt = moment.defineLocale('pt', {
	        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
	            '_'
	        ),
	        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays:
	            'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split(
	                '_'
	            ),
	        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return this.day() === 0 || this.day() === 6
	                    ? '[Último] dddd [às] LT' // Saturday + Sunday
	                    : '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'em %s',
	            past: 'há %s',
	            s: 'segundos',
	            ss: '%d segundos',
	            m: 'um minuto',
	            mm: '%d minutos',
	            h: 'uma hora',
	            hh: '%d horas',
	            d: 'um dia',
	            dd: '%d dias',
	            w: 'uma semana',
	            ww: '%d semanas',
	            M: 'um mês',
	            MM: '%d meses',
	            y: 'um ano',
	            yy: '%d anos',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return pt;
	
	})));


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ptBr = moment.defineLocale('pt-br', {
	        months: 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
	            '_'
	        ),
	        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
	        weekdays:
	            'domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado'.split(
	                '_'
	            ),
	        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sáb'.split('_'),
	        weekdaysMin: 'do_2ª_3ª_4ª_5ª_6ª_sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D [de] MMMM [de] YYYY',
	            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return this.day() === 0 || this.day() === 6
	                    ? '[Último] dddd [às] LT' // Saturday + Sunday
	                    : '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'em %s',
	            past: 'há %s',
	            s: 'poucos segundos',
	            ss: '%d segundos',
	            m: 'um minuto',
	            mm: '%d minutos',
	            h: 'uma hora',
	            hh: '%d horas',
	            d: 'um dia',
	            dd: '%d dias',
	            M: 'um mês',
	            MM: '%d meses',
	            y: 'um ano',
	            yy: '%d anos',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        invalidDate: 'Data inválida',
	    });
	
	    return ptBr;
	
	})));


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	//! author : Emanuel Cepoi : https://github.com/cepem
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                ss: 'secunde',
	                mm: 'minute',
	                hh: 'ore',
	                dd: 'zile',
	                ww: 'săptămâni',
	                MM: 'luni',
	                yy: 'ani',
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }
	
	    var ro = moment.defineLocale('ro', {
	        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
	            '_'
	        ),
	        monthsShort:
	            'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY H:mm',
	            LLLL: 'dddd, D MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'peste %s',
	            past: '%s în urmă',
	            s: 'câteva secunde',
	            ss: relativeTimeWithPlural,
	            m: 'un minut',
	            mm: relativeTimeWithPlural,
	            h: 'o oră',
	            hh: relativeTimeWithPlural,
	            d: 'o zi',
	            dd: relativeTimeWithPlural,
	            w: 'o săptămână',
	            ww: relativeTimeWithPlural,
	            M: 'o lună',
	            MM: relativeTimeWithPlural,
	            y: 'un an',
	            yy: relativeTimeWithPlural,
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return ro;
	
	})));


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11
	            ? forms[0]
	            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
	            ? forms[1]
	            : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            ss: withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
	            mm: withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            hh: 'час_часа_часов',
	            dd: 'день_дня_дней',
	            ww: 'неделя_недели_недель',
	            MM: 'месяц_месяца_месяцев',
	            yy: 'год_года_лет',
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [
	        /^янв/i,
	        /^фев/i,
	        /^мар/i,
	        /^апр/i,
	        /^ма[йя]/i,
	        /^июн/i,
	        /^июл/i,
	        /^авг/i,
	        /^сен/i,
	        /^окт/i,
	        /^ноя/i,
	        /^дек/i,
	    ];
	
	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months: {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split(
	                '_'
	            ),
	            standalone:
	                'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split(
	                    '_'
	                ),
	        },
	        monthsShort: {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split(
	                '_'
	            ),
	            standalone:
	                'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split(
	                    '_'
	                ),
	        },
	        weekdays: {
	            standalone:
	                'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split(
	                    '_'
	                ),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split(
	                '_'
	            ),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/,
	        },
	        weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse: monthsParse,
	        longMonthsParse: monthsParse,
	        shortMonthsParse: monthsParse,
	
	        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	        monthsRegex:
	            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	        // копия предыдущего
	        monthsShortRegex:
	            /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	        // полные названия с падежами
	        monthsStrictRegex:
	            /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	
	        // Выражение, которое соответствует только сокращённым формам
	        monthsShortStrictRegex:
	            /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY г.',
	            LLL: 'D MMMM YYYY г., H:mm',
	            LLLL: 'dddd, D MMMM YYYY г., H:mm',
	        },
	        calendar: {
	            sameDay: '[Сегодня, в] LT',
	            nextDay: '[Завтра, в] LT',
	            lastDay: '[Вчера, в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В следующее] dddd, [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В следующий] dddd, [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В следующую] dddd, [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd, [в] LT';
	                    } else {
	                        return '[В] dddd, [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В прошлое] dddd, [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В прошлый] dddd, [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В прошлую] dddd, [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd, [в] LT';
	                    } else {
	                        return '[В] dddd, [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'через %s',
	            past: '%s назад',
	            s: 'несколько секунд',
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: 'час',
	            hh: relativeTimeWithPlural,
	            d: 'день',
	            dd: relativeTimeWithPlural,
	            w: 'неделя',
	            ww: relativeTimeWithPlural,
	            M: 'месяц',
	            MM: relativeTimeWithPlural,
	            y: 'год',
	            yy: relativeTimeWithPlural,
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM: function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                case 'w':
	                case 'W':
	                    return number + '-я';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ru;
	
	})));


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sindhi [sd]
	//! author : Narain Sagar : https://github.com/narainsagar
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'جنوري',
	            'فيبروري',
	            'مارچ',
	            'اپريل',
	            'مئي',
	            'جون',
	            'جولاءِ',
	            'آگسٽ',
	            'سيپٽمبر',
	            'آڪٽوبر',
	            'نومبر',
	            'ڊسمبر',
	        ],
	        days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];
	
	    var sd = moment.defineLocale('sd', {
	        months: months,
	        monthsShort: months,
	        weekdays: days,
	        weekdaysShort: days,
	        weekdaysMin: days,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd، D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /صبح|شام/,
	        isPM: function (input) {
	            return 'شام' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar: {
	            sameDay: '[اڄ] LT',
	            nextDay: '[سڀاڻي] LT',
	            nextWeek: 'dddd [اڳين هفتي تي] LT',
	            lastDay: '[ڪالهه] LT',
	            lastWeek: '[گزريل هفتي] dddd [تي] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s پوء',
	            past: '%s اڳ',
	            s: 'چند سيڪنڊ',
	            ss: '%d سيڪنڊ',
	            m: 'هڪ منٽ',
	            mm: '%d منٽ',
	            h: 'هڪ ڪلاڪ',
	            hh: '%d ڪلاڪ',
	            d: 'هڪ ڏينهن',
	            dd: '%d ڏينهن',
	            M: 'هڪ مهينو',
	            MM: '%d مهينا',
	            y: 'هڪ سال',
	            yy: '%d سال',
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sd;
	
	})));


/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var se = moment.defineLocale('se', {
	        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split(
	            '_'
	        ),
	        monthsShort:
	            'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays:
	            'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split(
	                '_'
	            ),
	        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'MMMM D. [b.] YYYY',
	            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
	        },
	        calendar: {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s geažes',
	            past: 'maŋit %s',
	            s: 'moadde sekunddat',
	            ss: '%d sekunddat',
	            m: 'okta minuhta',
	            mm: '%d minuhtat',
	            h: 'okta diimmu',
	            hh: '%d diimmut',
	            d: 'okta beaivi',
	            dd: '%d beaivvit',
	            M: 'okta mánnu',
	            MM: '%d mánut',
	            y: 'okta jahki',
	            yy: '%d jagit',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return se;
	
	})));


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split(
	            '_'
	        ),
	        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split(
	            '_'
	        ),
	        weekdays:
	            'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split(
	                '_'
	            ),
	        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'a h:mm',
	            LTS: 'a h:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY MMMM D',
	            LLL: 'YYYY MMMM D, a h:mm',
	            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss',
	        },
	        calendar: {
	            sameDay: '[අද] LT[ට]',
	            nextDay: '[හෙට] LT[ට]',
	            nextWeek: 'dddd LT[ට]',
	            lastDay: '[ඊයේ] LT[ට]',
	            lastWeek: '[පසුගිය] dddd LT[ට]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%sකින්',
	            past: '%sකට පෙර',
	            s: 'තත්පර කිහිපය',
	            ss: 'තත්පර %d',
	            m: 'මිනිත්තුව',
	            mm: 'මිනිත්තු %d',
	            h: 'පැය',
	            hh: 'පැය %d',
	            d: 'දිනය',
	            dd: 'දින %d',
	            M: 'මාසය',
	            MM: 'මාස %d',
	            y: 'වසර',
	            yy: 'වසර %d',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
	        ordinal: function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM: function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        },
	    });
	
	    return si;
	
	})));


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months =
	            'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split(
	                '_'
	            ),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return n > 1 && n < 5;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's': // a few seconds / in a few seconds / a few seconds ago
	                return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';
	            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
	                } else {
	                    return result + 'sekundami';
	                }
	            case 'm': // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minúty' : 'minút');
	                } else {
	                    return result + 'minútami';
	                }
	            case 'h': // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodín');
	                } else {
	                    return result + 'hodinami';
	                }
	            case 'd': // a day / in a day / a day ago
	                return withoutSuffix || isFuture ? 'deň' : 'dňom';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dni' : 'dní');
	                } else {
	                    return result + 'dňami';
	                }
	            case 'M': // a month / in a month / a month ago
	                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
	                } else {
	                    return result + 'mesiacmi';
	                }
	            case 'y': // a year / in a year / a year ago
	                return withoutSuffix || isFuture ? 'rok' : 'rokom';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'rokov');
	                } else {
	                    return result + 'rokmi';
	                }
	        }
	    }
	
	    var sk = moment.defineLocale('sk', {
	        months: months,
	        monthsShort: monthsShort,
	        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [o] LT';
	                    case 3:
	                        return '[v stredu o] LT';
	                    case 4:
	                        return '[vo štvrtok o] LT';
	                    case 5:
	                        return '[v piatok o] LT';
	                    case 6:
	                        return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulú nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[minulý] dddd [o] LT';
	                    case 3:
	                        return '[minulú stredu o] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [o] LT';
	                    case 6:
	                        return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'pred %s',
	            s: translate,
	            ss: translate,
	            m: translate,
	            mm: translate,
	            h: translate,
	            hh: translate,
	            d: translate,
	            dd: translate,
	            M: translate,
	            MM: translate,
	            y: translate,
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sk;
	
	})));


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture
	                    ? 'nekaj sekund'
	                    : 'nekaj sekundami';
	            case 'ss':
	                if (number === 1) {
	                    result += withoutSuffix ? 'sekundo' : 'sekundi';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
	                } else {
	                    result += 'sekund';
	                }
	                return result;
	            case 'm':
	                return withoutSuffix ? 'ena minuta' : 'eno minuto';
	            case 'mm':
	                if (number === 1) {
	                    result += withoutSuffix ? 'minuta' : 'minuto';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'ena ura' : 'eno uro';
	            case 'hh':
	                if (number === 1) {
	                    result += withoutSuffix ? 'ura' : 'uro';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
	                }
	                return result;
	            case 'd':
	                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	            case 'dd':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	                } else {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	                }
	                return result;
	            case 'M':
	                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	            case 'MM':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	                } else {
	                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	                }
	                return result;
	            case 'y':
	                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	            case 'yy':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
	                } else {
	                    result += withoutSuffix || isFuture ? 'let' : 'leti';
	                }
	                return result;
	        }
	    }
	
	    var sl = moment.defineLocale('sl', {
	        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD. MM. YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm',
	        },
	        calendar: {
	            sameDay: '[danes ob] LT',
	            nextDay: '[jutri ob] LT',
	
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[v] [sredo] [ob] LT';
	                    case 6:
	                        return '[v] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay: '[včeraj ob] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prejšnjo] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[prejšnjo] [sredo] [ob] LT';
	                    case 6:
	                        return '[prejšnjo] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'čez %s',
	            past: 'pred %s',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return sl;
	
	})));


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var sq = moment.defineLocale('sq', {
	        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split(
	            '_'
	        ),
	        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact: true,
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem: function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Sot në] LT',
	            nextDay: '[Nesër në] LT',
	            nextWeek: 'dddd [në] LT',
	            lastDay: '[Dje në] LT',
	            lastWeek: 'dddd [e kaluar në] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'në %s',
	            past: '%s më parë',
	            s: 'disa sekonda',
	            ss: '%d sekonda',
	            m: 'një minutë',
	            mm: '%d minuta',
	            h: 'një orë',
	            hh: '%d orë',
	            d: 'një ditë',
	            dd: '%d ditë',
	            M: 'një muaj',
	            MM: '%d muaj',
	            y: 'një vit',
	            yy: '%d vite',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sq;
	
	})));


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var translator = {
	        words: {
	            //Different grammatical cases
	            ss: ['sekunda', 'sekunde', 'sekundi'],
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            d: ['jedan dan', 'jednog dana'],
	            dd: ['dan', 'dana', 'dana'],
	            M: ['jedan mesec', 'jednog meseca'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            y: ['jednu godinu', 'jedne godine'],
	            yy: ['godinu', 'godine', 'godina'],
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            if (
	                number % 10 >= 1 &&
	                number % 10 <= 4 &&
	                (number % 100 < 10 || number % 100 >= 20)
	            ) {
	                return number % 10 === 1 ? wordKey[0] : wordKey[1];
	            }
	            return wordKey[2];
	        },
	        translate: function (number, withoutSuffix, key, isFuture) {
	            var wordKey = translator.words[key],
	                word;
	
	            if (key.length === 1) {
	                // Nominativ
	                if (key === 'y' && withoutSuffix) return 'jedna godina';
	                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
	            }
	
	            word = translator.correctGrammaticalCase(number, wordKey);
	            // Nominativ
	            if (key === 'yy' && withoutSuffix && word === 'godinu') {
	                return number + ' godina';
	            }
	
	            return number + ' ' + word;
	        },
	    };
	
	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
	            '_'
	        ),
	        monthsShort:
	            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split(
	            '_'
	        ),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D. M. YYYY.',
	            LL: 'D. MMMM YYYY.',
	            LLL: 'D. MMMM YYYY. H:mm',
	            LLLL: 'dddd, D. MMMM YYYY. H:mm',
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedelju] [u] LT';
	                    case 3:
	                        return '[u] [sredu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay: '[juče u] LT',
	            lastWeek: function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT',
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'za %s',
	            past: 'pre %s',
	            s: 'nekoliko sekundi',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: translator.translate,
	            dd: translator.translate,
	            M: translator.translate,
	            MM: translator.translate,
	            y: translator.translate,
	            yy: translator.translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return sr;
	
	})));


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	//! author : Stefan Crnjaković <stefan@hotmail.rs> : https://github.com/crnjakovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var translator = {
	        words: {
	            //Different grammatical cases
	            ss: ['секунда', 'секунде', 'секунди'],
	            m: ['један минут', 'једног минута'],
	            mm: ['минут', 'минута', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            d: ['један дан', 'једног дана'],
	            dd: ['дан', 'дана', 'дана'],
	            M: ['један месец', 'једног месеца'],
	            MM: ['месец', 'месеца', 'месеци'],
	            y: ['једну годину', 'једне године'],
	            yy: ['годину', 'године', 'година'],
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            if (
	                number % 10 >= 1 &&
	                number % 10 <= 4 &&
	                (number % 100 < 10 || number % 100 >= 20)
	            ) {
	                return number % 10 === 1 ? wordKey[0] : wordKey[1];
	            }
	            return wordKey[2];
	        },
	        translate: function (number, withoutSuffix, key, isFuture) {
	            var wordKey = translator.words[key],
	                word;
	
	            if (key.length === 1) {
	                // Nominativ
	                if (key === 'y' && withoutSuffix) return 'једна година';
	                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
	            }
	
	            word = translator.correctGrammaticalCase(number, wordKey);
	            // Nominativ
	            if (key === 'yy' && withoutSuffix && word === 'годину') {
	                return number + ' година';
	            }
	
	            return number + ' ' + word;
	        },
	    };
	
	    var srCyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split(
	            '_'
	        ),
	        monthsShort:
	            'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'D. M. YYYY.',
	            LL: 'D. MMMM YYYY.',
	            LLL: 'D. MMMM YYYY. H:mm',
	            LLLL: 'dddd, D. MMMM YYYY. H:mm',
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[у] [недељу] [у] LT';
	                    case 3:
	                        return '[у] [среду] [у] LT';
	                    case 6:
	                        return '[у] [суботу] [у] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[у] dddd [у] LT';
	                }
	            },
	            lastDay: '[јуче у] LT',
	            lastWeek: function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT',
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: 'пре %s',
	            s: 'неколико секунди',
	            ss: translator.translate,
	            m: translator.translate,
	            mm: translator.translate,
	            h: translator.translate,
	            hh: translator.translate,
	            d: translator.translate,
	            dd: translator.translate,
	            M: translator.translate,
	            MM: translator.translate,
	            y: translator.translate,
	            yy: translator.translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 1st is the first week of the year.
	        },
	    });
	
	    return srCyrl;
	
	})));


/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ss = moment.defineLocale('ss', {
	        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
	            '_'
	        ),
	        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays:
	            'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
	                '_'
	            ),
	        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Namuhla nga] LT',
	            nextDay: '[Kusasa nga] LT',
	            nextWeek: 'dddd [nga] LT',
	            lastDay: '[Itolo nga] LT',
	            lastWeek: 'dddd [leliphelile] [nga] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'nga %s',
	            past: 'wenteka nga %s',
	            s: 'emizuzwana lomcane',
	            ss: '%d mzuzwana',
	            m: 'umzuzu',
	            mm: '%d emizuzu',
	            h: 'lihora',
	            hh: '%d emahora',
	            d: 'lilanga',
	            dd: '%d emalanga',
	            M: 'inyanga',
	            MM: '%d tinyanga',
	            y: 'umnyaka',
	            yy: '%d iminyaka',
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: '%d',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ss;
	
	})));


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var sv = moment.defineLocale('sv', {
	        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
	            '_'
	        ),
	        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [kl.] HH:mm',
	            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd D MMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'om %s',
	            past: 'för %s sedan',
	            s: 'några sekunder',
	            ss: '%d sekunder',
	            m: 'en minut',
	            mm: '%d minuter',
	            h: 'en timme',
	            hh: '%d timmar',
	            d: 'en dag',
	            dd: '%d dagar',
	            M: 'en månad',
	            MM: '%d månader',
	            y: 'ett år',
	            yy: '%d år',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? ':e'
	                        : b === 1
	                        ? ':a'
	                        : b === 2
	                        ? ':a'
	                        : b === 3
	                        ? ':e'
	                        : ':e';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return sv;
	
	})));


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var sw = moment.defineLocale('sw', {
	        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays:
	            'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
	                '_'
	            ),
	        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'hh:mm A',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[leo saa] LT',
	            nextDay: '[kesho saa] LT',
	            nextWeek: '[wiki ijayo] dddd [saat] LT',
	            lastDay: '[jana] LT',
	            lastWeek: '[wiki iliyopita] dddd [saat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s baadaye',
	            past: 'tokea %s',
	            s: 'hivi punde',
	            ss: 'sekunde %d',
	            m: 'dakika moja',
	            mm: 'dakika %d',
	            h: 'saa limoja',
	            hh: 'masaa %d',
	            d: 'siku moja',
	            dd: 'siku %d',
	            M: 'mwezi mmoja',
	            MM: 'miezi %d',
	            y: 'mwaka mmoja',
	            yy: 'miaka %d',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return sw;
	
	})));


/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var symbolMap = {
	            1: '௧',
	            2: '௨',
	            3: '௩',
	            4: '௪',
	            5: '௫',
	            6: '௬',
	            7: '௭',
	            8: '௮',
	            9: '௯',
	            0: '௦',
	        },
	        numberMap = {
	            '௧': '1',
	            '௨': '2',
	            '௩': '3',
	            '௪': '4',
	            '௫': '5',
	            '௬': '6',
	            '௭': '7',
	            '௮': '8',
	            '௯': '9',
	            '௦': '0',
	        };
	
	    var ta = moment.defineLocale('ta', {
	        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
	            '_'
	        ),
	        monthsShort:
	            'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split(
	                '_'
	            ),
	        weekdays:
	            'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split(
	                '_'
	            ),
	        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split(
	            '_'
	        ),
	        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, HH:mm',
	            LLLL: 'dddd, D MMMM YYYY, HH:mm',
	        },
	        calendar: {
	            sameDay: '[இன்று] LT',
	            nextDay: '[நாளை] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[நேற்று] LT',
	            lastWeek: '[கடந்த வாரம்] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s இல்',
	            past: '%s முன்',
	            s: 'ஒரு சில விநாடிகள்',
	            ss: '%d விநாடிகள்',
	            m: 'ஒரு நிமிடம்',
	            mm: '%d நிமிடங்கள்',
	            h: 'ஒரு மணி நேரம்',
	            hh: '%d மணி நேரம்',
	            d: 'ஒரு நாள்',
	            dd: '%d நாட்கள்',
	            M: 'ஒரு மாதம்',
	            MM: '%d மாதங்கள்',
	            y: 'ஒரு வருடம்',
	            yy: '%d ஆண்டுகள்',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}வது/,
	        ordinal: function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை'; // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return ta;
	
	})));


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var te = moment.defineLocale('te', {
	        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split(
	            '_'
	        ),
	        monthsShort:
	            'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split(
	                '_'
	            ),
	        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat: {
	            LT: 'A h:mm',
	            LTS: 'A h:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY, A h:mm',
	            LLLL: 'dddd, D MMMM YYYY, A h:mm',
	        },
	        calendar: {
	            sameDay: '[నేడు] LT',
	            nextDay: '[రేపు] LT',
	            nextWeek: 'dddd, LT',
	            lastDay: '[నిన్న] LT',
	            lastWeek: '[గత] dddd, LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s లో',
	            past: '%s క్రితం',
	            s: 'కొన్ని క్షణాలు',
	            ss: '%d సెకన్లు',
	            m: 'ఒక నిమిషం',
	            mm: '%d నిమిషాలు',
	            h: 'ఒక గంట',
	            hh: '%d గంటలు',
	            d: 'ఒక రోజు',
	            dd: '%d రోజులు',
	            M: 'ఒక నెల',
	            MM: '%d నెలలు',
	            y: 'ఒక సంవత్సరం',
	            yy: '%d సంవత్సరాలు',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}వ/,
	        ordinal: '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week: {
	            dow: 0, // Sunday is the first day of the week.
	            doy: 6, // The week that contains Jan 6th is the first week of the year.
	        },
	    });
	
	    return te;
	
	})));


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	//! author : Sonia Simoes : https://github.com/soniasimoes
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tet = moment.defineLocale('tet', {
	        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
	        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
	        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Ohin iha] LT',
	            nextDay: '[Aban iha] LT',
	            nextWeek: 'dddd [iha] LT',
	            lastDay: '[Horiseik iha] LT',
	            lastWeek: 'dddd [semana kotuk] [iha] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'iha %s',
	            past: '%s liuba',
	            s: 'segundu balun',
	            ss: 'segundu %d',
	            m: 'minutu ida',
	            mm: 'minutu %d',
	            h: 'oras ida',
	            hh: 'oras %d',
	            d: 'loron ida',
	            dd: 'loron %d',
	            M: 'fulan ida',
	            MM: 'fulan %d',
	            y: 'tinan ida',
	            yy: 'tinan %d',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return tet;
	
	})));


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tajik [tg]
	//! author : Orif N. Jr. : https://github.com/orif-jr
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        0: '-ум',
	        1: '-ум',
	        2: '-юм',
	        3: '-юм',
	        4: '-ум',
	        5: '-ум',
	        6: '-ум',
	        7: '-ум',
	        8: '-ум',
	        9: '-ум',
	        10: '-ум',
	        12: '-ум',
	        13: '-ум',
	        20: '-ум',
	        30: '-юм',
	        40: '-ум',
	        50: '-ум',
	        60: '-ум',
	        70: '-ум',
	        80: '-ум',
	        90: '-ум',
	        100: '-ум',
	    };
	
	    var tg = moment.defineLocale('tg', {
	        months: {
	            format: 'январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри'.split(
	                '_'
	            ),
	            standalone:
	                'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
	                    '_'
	                ),
	        },
	        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays: 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split(
	            '_'
	        ),
	        weekdaysShort: 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
	        weekdaysMin: 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Имрӯз соати] LT',
	            nextDay: '[Фардо соати] LT',
	            lastDay: '[Дирӯз соати] LT',
	            nextWeek: 'dddd[и] [ҳафтаи оянда соати] LT',
	            lastWeek: 'dddd[и] [ҳафтаи гузашта соати] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'баъди %s',
	            past: '%s пеш',
	            s: 'якчанд сония',
	            m: 'як дақиқа',
	            mm: '%d дақиқа',
	            h: 'як соат',
	            hh: '%d соат',
	            d: 'як рӯз',
	            dd: '%d рӯз',
	            M: 'як моҳ',
	            MM: '%d моҳ',
	            y: 'як сол',
	            yy: '%d сол',
	        },
	        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'шаб') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'субҳ') {
	                return hour;
	            } else if (meridiem === 'рӯз') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'бегоҳ') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'шаб';
	            } else if (hour < 11) {
	                return 'субҳ';
	            } else if (hour < 16) {
	                return 'рӯз';
	            } else if (hour < 19) {
	                return 'бегоҳ';
	            } else {
	                return 'шаб';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
	        ordinal: function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 1th is the first week of the year.
	        },
	    });
	
	    return tg;
	
	})));


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var th = moment.defineLocale('th', {
	        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split(
	            '_'
	        ),
	        monthsShort:
	            'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS: 'H:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY เวลา H:mm',
	            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm',
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar: {
	            sameDay: '[วันนี้ เวลา] LT',
	            nextDay: '[พรุ่งนี้ เวลา] LT',
	            nextWeek: 'dddd[หน้า เวลา] LT',
	            lastDay: '[เมื่อวานนี้ เวลา] LT',
	            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'อีก %s',
	            past: '%sที่แล้ว',
	            s: 'ไม่กี่วินาที',
	            ss: '%d วินาที',
	            m: '1 นาที',
	            mm: '%d นาที',
	            h: '1 ชั่วโมง',
	            hh: '%d ชั่วโมง',
	            d: '1 วัน',
	            dd: '%d วัน',
	            w: '1 สัปดาห์',
	            ww: '%d สัปดาห์',
	            M: '1 เดือน',
	            MM: '%d เดือน',
	            y: '1 ปี',
	            yy: '%d ปี',
	        },
	    });
	
	    return th;
	
	})));


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkmen [tk]
	//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        1: "'inji",
	        5: "'inji",
	        8: "'inji",
	        70: "'inji",
	        80: "'inji",
	        2: "'nji",
	        7: "'nji",
	        20: "'nji",
	        50: "'nji",
	        3: "'ünji",
	        4: "'ünji",
	        100: "'ünji",
	        6: "'njy",
	        9: "'unjy",
	        10: "'unjy",
	        30: "'unjy",
	        60: "'ynjy",
	        90: "'ynjy",
	    };
	
	    var tk = moment.defineLocale('tk', {
	        months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(
	            '_'
	        ),
	        monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),
	        weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(
	            '_'
	        ),
	        weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),
	        weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[bugün sagat] LT',
	            nextDay: '[ertir sagat] LT',
	            nextWeek: '[indiki] dddd [sagat] LT',
	            lastDay: '[düýn] LT',
	            lastWeek: '[geçen] dddd [sagat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s soň',
	            past: '%s öň',
	            s: 'birnäçe sekunt',
	            m: 'bir minut',
	            mm: '%d minut',
	            h: 'bir sagat',
	            hh: '%d sagat',
	            d: 'bir gün',
	            dd: '%d gün',
	            M: 'bir aý',
	            MM: '%d aý',
	            y: 'bir ýyl',
	            yy: '%d ýyl',
	        },
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'Do':
	                case 'DD':
	                    return number;
	                default:
	                    if (number === 0) {
	                        // special case for zero
	                        return number + "'unjy";
	                    }
	                    var a = number % 10,
	                        b = (number % 100) - a,
	                        c = number >= 100 ? 100 : null;
	                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return tk;
	
	})));


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tlPh = moment.defineLocale('tl-ph', {
	        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
	            '_'
	        ),
	        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
	            '_'
	        ),
	        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'MM/D/YYYY',
	            LL: 'MMMM D, YYYY',
	            LLL: 'MMMM D, YYYY HH:mm',
	            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: 'LT [ngayong araw]',
	            nextDay: '[Bukas ng] LT',
	            nextWeek: 'LT [sa susunod na] dddd',
	            lastDay: 'LT [kahapon]',
	            lastWeek: 'LT [noong nakaraang] dddd',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'sa loob ng %s',
	            past: '%s ang nakalipas',
	            s: 'ilang segundo',
	            ss: '%d segundo',
	            m: 'isang minuto',
	            mm: '%d minuto',
	            h: 'isang oras',
	            hh: '%d oras',
	            d: 'isang araw',
	            dd: '%d araw',
	            M: 'isang buwan',
	            MM: '%d buwan',
	            y: 'isang taon',
	            yy: '%d taon',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function (number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return tlPh;
	
	})));


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	    function translateFuture(output) {
	        var time = output;
	        time =
	            output.indexOf('jaj') !== -1
	                ? time.slice(0, -3) + 'leS'
	                : output.indexOf('jar') !== -1
	                ? time.slice(0, -3) + 'waQ'
	                : output.indexOf('DIS') !== -1
	                ? time.slice(0, -3) + 'nem'
	                : time + ' pIq';
	        return time;
	    }
	
	    function translatePast(output) {
	        var time = output;
	        time =
	            output.indexOf('jaj') !== -1
	                ? time.slice(0, -3) + 'Hu’'
	                : output.indexOf('jar') !== -1
	                ? time.slice(0, -3) + 'wen'
	                : output.indexOf('DIS') !== -1
	                ? time.slice(0, -3) + 'ben'
	                : time + ' ret';
	        return time;
	    }
	
	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'ss':
	                return numberNoun + ' lup';
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }
	
	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	            ten = Math.floor((number % 100) / 10),
	            one = number % 10,
	            word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += (word !== '' ? ' ' : '') + numbersNouns[one];
	        }
	        return word === '' ? 'pagh' : word;
	    }
	
	    var tlh = moment.defineLocale('tlh', {
	        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split(
	            '_'
	        ),
	        monthsShort:
	            'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
	            '_'
	        ),
	        weekdaysShort:
	            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin:
	            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: translateFuture,
	            past: translatePast,
	            s: 'puS lup',
	            ss: translate,
	            m: 'wa’ tup',
	            mm: translate,
	            h: 'wa’ rep',
	            hh: translate,
	            d: 'wa’ jaj',
	            dd: translate,
	            M: 'wa’ jar',
	            MM: translate,
	            y: 'wa’ DIS',
	            yy: translate,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return tlh;
	
	})));


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var suffixes = {
	        1: "'inci",
	        5: "'inci",
	        8: "'inci",
	        70: "'inci",
	        80: "'inci",
	        2: "'nci",
	        7: "'nci",
	        20: "'nci",
	        50: "'nci",
	        3: "'üncü",
	        4: "'üncü",
	        100: "'üncü",
	        6: "'ncı",
	        9: "'uncu",
	        10: "'uncu",
	        30: "'uncu",
	        60: "'ıncı",
	        90: "'ıncı",
	    };
	
	    var tr = moment.defineLocale('tr', {
	        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split(
	            '_'
	        ),
	        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split(
	            '_'
	        ),
	        weekdaysShort: 'Paz_Pzt_Sal_Çar_Per_Cum_Cmt'.split('_'),
	        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'öö' : 'ÖÖ';
	            } else {
	                return isLower ? 'ös' : 'ÖS';
	            }
	        },
	        meridiemParse: /öö|ÖÖ|ös|ÖS/,
	        isPM: function (input) {
	            return input === 'ös' || input === 'ÖS';
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[bugün saat] LT',
	            nextDay: '[yarın saat] LT',
	            nextWeek: '[gelecek] dddd [saat] LT',
	            lastDay: '[dün] LT',
	            lastWeek: '[geçen] dddd [saat] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s sonra',
	            past: '%s önce',
	            s: 'birkaç saniye',
	            ss: '%d saniye',
	            m: 'bir dakika',
	            mm: '%d dakika',
	            h: 'bir saat',
	            hh: '%d saat',
	            d: 'bir gün',
	            dd: '%d gün',
	            w: 'bir hafta',
	            ww: '%d hafta',
	            M: 'bir ay',
	            MM: '%d ay',
	            y: 'bir yıl',
	            yy: '%d yıl',
	        },
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'Do':
	                case 'DD':
	                    return number;
	                default:
	                    if (number === 0) {
	                        // special case for zero
	                        return number + "'ıncı";
	                    }
	                    var a = number % 10,
	                        b = (number % 100) - a,
	                        c = number >= 100 ? 100 : null;
	                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return tr;
	
	})));


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split(
	            '_'
	        ),
	        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat: {
	            LT: 'HH.mm',
	            LTS: 'HH.mm.ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM [dallas] YYYY',
	            LLL: 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM: function (input) {
	            return "d'o" === input.toLowerCase();
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? "d'o" : "D'O";
	            } else {
	                return isLower ? "d'a" : "D'A";
	            }
	        },
	        calendar: {
	            sameDay: '[oxhi à] LT',
	            nextDay: '[demà à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[ieiri à] LT',
	            lastWeek: '[sür el] dddd [lasteu à] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'osprei %s',
	            past: 'ja%s',
	            s: processRelativeTime,
	            ss: processRelativeTime,
	            m: processRelativeTime,
	            mm: processRelativeTime,
	            h: processRelativeTime,
	            hh: processRelativeTime,
	            d: processRelativeTime,
	            dd: processRelativeTime,
	            M: processRelativeTime,
	            MM: processRelativeTime,
	            y: processRelativeTime,
	            yy: processRelativeTime,
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            s: ['viensas secunds', "'iensas secunds"],
	            ss: [number + ' secunds', '' + number + ' secunds'],
	            m: ["'n míut", "'iens míut"],
	            mm: [number + ' míuts', '' + number + ' míuts'],
	            h: ["'n þora", "'iensa þora"],
	            hh: [number + ' þoras', '' + number + ' þoras'],
	            d: ["'n ziua", "'iensa ziua"],
	            dd: [number + ' ziuas', '' + number + ' ziuas'],
	            M: ["'n mes", "'iens mes"],
	            MM: [number + ' mesen', '' + number + ' mesen'],
	            y: ["'n ar", "'iens ar"],
	            yy: [number + ' ars', '' + number + ' ars'],
	        };
	        return isFuture
	            ? format[key][0]
	            : withoutSuffix
	            ? format[key][0]
	            : format[key][1];
	    }
	
	    return tzl;
	
	})));


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tzm = moment.defineLocale('tzm', {
	        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
	            '_'
	        ),
	        monthsShort:
	            'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split(
	                '_'
	            ),
	        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past: 'ⵢⴰⵏ %s',
	            s: 'ⵉⵎⵉⴽ',
	            ss: '%d ⵉⵎⵉⴽ',
	            m: 'ⵎⵉⵏⵓⴺ',
	            mm: '%d ⵎⵉⵏⵓⴺ',
	            h: 'ⵙⴰⵄⴰ',
	            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d: 'ⴰⵙⵙ',
	            dd: '%d oⵙⵙⴰⵏ',
	            M: 'ⴰⵢoⵓⵔ',
	            MM: '%d ⵉⵢⵢⵉⵔⵏ',
	            y: 'ⴰⵙⴳⴰⵙ',
	            yy: '%d ⵉⵙⴳⴰⵙⵏ',
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return tzm;
	
	})));


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var tzmLatn = moment.defineLocale('tzm-latn', {
	        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
	            '_'
	        ),
	        monthsShort:
	            'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split(
	                '_'
	            ),
	        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'dadkh s yan %s',
	            past: 'yan %s',
	            s: 'imik',
	            ss: '%d imik',
	            m: 'minuḍ',
	            mm: '%d minuḍ',
	            h: 'saɛa',
	            hh: '%d tassaɛin',
	            d: 'ass',
	            dd: '%d ossan',
	            M: 'ayowr',
	            MM: '%d iyyirn',
	            y: 'asgas',
	            yy: '%d isgasn',
	        },
	        week: {
	            dow: 6, // Saturday is the first day of the week.
	            doy: 12, // The week that contains Jan 12th is the first week of the year.
	        },
	    });
	
	    return tzmLatn;
	
	})));


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uyghur (China) [ug-cn]
	//! author: boyaq : https://github.com/boyaq
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var ugCn = moment.defineLocale('ug-cn', {
	        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
	            '_'
	        ),
	        monthsShort:
	            'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
	                '_'
	            ),
	        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
	            '_'
	        ),
	        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
	        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY-MM-DD',
	            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
	            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
	            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
	        },
	        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (
	                meridiem === 'يېرىم كېچە' ||
	                meridiem === 'سەھەر' ||
	                meridiem === 'چۈشتىن بۇرۇن'
	            ) {
	                return hour;
	            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
	                return hour + 12;
	            } else {
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return 'يېرىم كېچە';
	            } else if (hm < 900) {
	                return 'سەھەر';
	            } else if (hm < 1130) {
	                return 'چۈشتىن بۇرۇن';
	            } else if (hm < 1230) {
	                return 'چۈش';
	            } else if (hm < 1800) {
	                return 'چۈشتىن كېيىن';
	            } else {
	                return 'كەچ';
	            }
	        },
	        calendar: {
	            sameDay: '[بۈگۈن سائەت] LT',
	            nextDay: '[ئەتە سائەت] LT',
	            nextWeek: '[كېلەركى] dddd [سائەت] LT',
	            lastDay: '[تۆنۈگۈن] LT',
	            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s كېيىن',
	            past: '%s بۇرۇن',
	            s: 'نەچچە سېكونت',
	            ss: '%d سېكونت',
	            m: 'بىر مىنۇت',
	            mm: '%d مىنۇت',
	            h: 'بىر سائەت',
	            hh: '%d سائەت',
	            d: 'بىر كۈن',
	            dd: '%d كۈن',
	            M: 'بىر ئاي',
	            MM: '%d ئاي',
	            y: 'بىر يىل',
	            yy: '%d يىل',
	        },
	
	        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '-كۈنى';
	                case 'w':
	                case 'W':
	                    return number + '-ھەپتە';
	                default:
	                    return number;
	            }
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 1st is the first week of the year.
	        },
	    });
	
	    return ugCn;
	
	})));


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11
	            ? forms[0]
	            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
	            ? forms[1]
	            : forms[2];
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            ss: withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
	            mm: withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            hh: withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            dd: 'день_дні_днів',
	            MM: 'місяць_місяці_місяців',
	            yy: 'рік_роки_років',
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        } else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        } else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	                nominative:
	                    'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split(
	                        '_'
	                    ),
	                accusative:
	                    'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split(
	                        '_'
	                    ),
	                genitive:
	                    'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split(
	                        '_'
	                    ),
	            },
	            nounCase;
	
	        if (m === true) {
	            return weekdays['nominative']
	                .slice(1, 7)
	                .concat(weekdays['nominative'].slice(0, 1));
	        }
	        if (!m) {
	            return weekdays['nominative'];
	        }
	
	        nounCase = /(\[[ВвУу]\]) ?dddd/.test(format)
	            ? 'accusative'
	            : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format)
	            ? 'genitive'
	            : 'nominative';
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }
	
	    var uk = moment.defineLocale('uk', {
	        months: {
	            format: 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split(
	                '_'
	            ),
	            standalone:
	                'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split(
	                    '_'
	                ),
	        },
	        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split(
	            '_'
	        ),
	        weekdays: weekdaysCaseReplace,
	        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D MMMM YYYY р.',
	            LLL: 'D MMMM YYYY р., HH:mm',
	            LLLL: 'dddd, D MMMM YYYY р., HH:mm',
	        },
	        calendar: {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return processHoursFunction('[Минулої] dddd [').call(this);
	                    case 1:
	                    case 2:
	                    case 4:
	                        return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'за %s',
	            past: '%s тому',
	            s: 'декілька секунд',
	            ss: relativeTimeWithPlural,
	            m: relativeTimeWithPlural,
	            mm: relativeTimeWithPlural,
	            h: 'годину',
	            hh: relativeTimeWithPlural,
	            d: 'день',
	            dd: relativeTimeWithPlural,
	            M: 'місяць',
	            MM: relativeTimeWithPlural,
	            y: 'рік',
	            yy: relativeTimeWithPlural,
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                default:
	                    return number;
	            }
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return uk;
	
	})));


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Urdu [ur]
	//! author : Sawood Alam : https://github.com/ibnesayeed
	//! author : Zack : https://github.com/ZackVision
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var months = [
	            'جنوری',
	            'فروری',
	            'مارچ',
	            'اپریل',
	            'مئی',
	            'جون',
	            'جولائی',
	            'اگست',
	            'ستمبر',
	            'اکتوبر',
	            'نومبر',
	            'دسمبر',
	        ],
	        days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];
	
	    var ur = moment.defineLocale('ur', {
	        months: months,
	        monthsShort: months,
	        weekdays: days,
	        weekdaysShort: days,
	        weekdaysMin: days,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd، D MMMM YYYY HH:mm',
	        },
	        meridiemParse: /صبح|شام/,
	        isPM: function (input) {
	            return 'شام' === input;
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'صبح';
	            }
	            return 'شام';
	        },
	        calendar: {
	            sameDay: '[آج بوقت] LT',
	            nextDay: '[کل بوقت] LT',
	            nextWeek: 'dddd [بوقت] LT',
	            lastDay: '[گذشتہ روز بوقت] LT',
	            lastWeek: '[گذشتہ] dddd [بوقت] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s بعد',
	            past: '%s قبل',
	            s: 'چند سیکنڈ',
	            ss: '%d سیکنڈ',
	            m: 'ایک منٹ',
	            mm: '%d منٹ',
	            h: 'ایک گھنٹہ',
	            hh: '%d گھنٹے',
	            d: 'ایک دن',
	            dd: '%d دن',
	            M: 'ایک ماہ',
	            MM: '%d ماہ',
	            y: 'ایک سال',
	            yy: '%d سال',
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return ur;
	
	})));


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var uz = moment.defineLocale('uz', {
	        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split(
	            '_'
	        ),
	        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'D MMMM YYYY, dddd HH:mm',
	        },
	        calendar: {
	            sameDay: '[Бугун соат] LT [да]',
	            nextDay: '[Эртага] LT [да]',
	            nextWeek: 'dddd [куни соат] LT [да]',
	            lastDay: '[Кеча соат] LT [да]',
	            lastWeek: '[Утган] dddd [куни соат] LT [да]',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'Якин %s ичида',
	            past: 'Бир неча %s олдин',
	            s: 'фурсат',
	            ss: '%d фурсат',
	            m: 'бир дакика',
	            mm: '%d дакика',
	            h: 'бир соат',
	            hh: '%d соат',
	            d: 'бир кун',
	            dd: '%d кун',
	            M: 'бир ой',
	            MM: '%d ой',
	            y: 'бир йил',
	            yy: '%d йил',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return uz;
	
	})));


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek Latin [uz-latn]
	//! author : Rasulbek Mirzayev : github.com/Rasulbeeek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var uzLatn = moment.defineLocale('uz-latn', {
	        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
	            '_'
	        ),
	        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
	        weekdays:
	            'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
	                '_'
	            ),
	        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
	        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'D MMMM YYYY, dddd HH:mm',
	        },
	        calendar: {
	            sameDay: '[Bugun soat] LT [da]',
	            nextDay: '[Ertaga] LT [da]',
	            nextWeek: 'dddd [kuni soat] LT [da]',
	            lastDay: '[Kecha soat] LT [da]',
	            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'Yaqin %s ichida',
	            past: 'Bir necha %s oldin',
	            s: 'soniya',
	            ss: '%d soniya',
	            m: 'bir daqiqa',
	            mm: '%d daqiqa',
	            h: 'bir soat',
	            hh: '%d soat',
	            d: 'bir kun',
	            dd: '%d kun',
	            M: 'bir oy',
	            MM: '%d oy',
	            y: 'bir yil',
	            yy: '%d yil',
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 7, // The week that contains Jan 7th is the first week of the year.
	        },
	    });
	
	    return uzLatn;
	
	})));


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	//! author : Chien Kira : https://github.com/chienkira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var vi = moment.defineLocale('vi', {
	        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split(
	            '_'
	        ),
	        monthsShort:
	            'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split(
	            '_'
	        ),
	        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact: true,
	        meridiemParse: /sa|ch/i,
	        isPM: function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem: function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM [năm] YYYY',
	            LLL: 'D MMMM [năm] YYYY HH:mm',
	            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
	            l: 'DD/M/YYYY',
	            ll: 'D MMM YYYY',
	            lll: 'D MMM YYYY HH:mm',
	            llll: 'ddd, D MMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần trước lúc] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: '%s tới',
	            past: '%s trước',
	            s: 'vài giây',
	            ss: '%d giây',
	            m: 'một phút',
	            mm: '%d phút',
	            h: 'một giờ',
	            hh: '%d giờ',
	            d: 'một ngày',
	            dd: '%d ngày',
	            w: 'một tuần',
	            ww: '%d tuần',
	            M: 'một tháng',
	            MM: '%d tháng',
	            y: 'một năm',
	            yy: '%d năm',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}/,
	        ordinal: function (number) {
	            return number;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return vi;
	
	})));


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var xPseudo = moment.defineLocale('x-pseudo', {
	        months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split(
	            '_'
	        ),
	        monthsShort:
	            'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split(
	                '_'
	            ),
	        monthsParseExact: true,
	        weekdays:
	            'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split(
	                '_'
	            ),
	        weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact: true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm',
	        },
	        calendar: {
	            sameDay: '[T~ódá~ý át] LT',
	            nextDay: '[T~ómó~rró~w át] LT',
	            nextWeek: 'dddd [át] LT',
	            lastDay: '[Ý~ést~érdá~ý át] LT',
	            lastWeek: '[L~ást] dddd [át] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'í~ñ %s',
	            past: '%s á~gó',
	            s: 'á ~féw ~sécó~ñds',
	            ss: '%d s~écóñ~ds',
	            m: 'á ~míñ~úté',
	            mm: '%d m~íñú~tés',
	            h: 'á~ñ hó~úr',
	            hh: '%d h~óúrs',
	            d: 'á ~dáý',
	            dd: '%d d~áýs',
	            M: 'á ~móñ~th',
	            MM: '%d m~óñt~hs',
	            y: 'á ~ýéár',
	            yy: '%d ý~éárs',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    ~~((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return xPseudo;
	
	})));


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var yo = moment.defineLocale('yo', {
	        months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split(
	            '_'
	        ),
	        monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	        weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	        weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	        weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	        longDateFormat: {
	            LT: 'h:mm A',
	            LTS: 'h:mm:ss A',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY h:mm A',
	            LLLL: 'dddd, D MMMM YYYY h:mm A',
	        },
	        calendar: {
	            sameDay: '[Ònì ni] LT',
	            nextDay: '[Ọ̀la ni] LT',
	            nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
	            lastDay: '[Àna ni] LT',
	            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	            sameElse: 'L',
	        },
	        relativeTime: {
	            future: 'ní %s',
	            past: '%s kọjá',
	            s: 'ìsẹjú aayá die',
	            ss: 'aayá %d',
	            m: 'ìsẹjú kan',
	            mm: 'ìsẹjú %d',
	            h: 'wákati kan',
	            hh: 'wákati %d',
	            d: 'ọjọ́ kan',
	            dd: 'ọjọ́ %d',
	            M: 'osù kan',
	            MM: 'osù %d',
	            y: 'ọdún kan',
	            yy: 'ọdún %d',
	        },
	        dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
	        ordinal: 'ọjọ́ %d',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return yo;
	
	})));


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	//! author : uu109 : https://github.com/uu109
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhCn = moment.defineLocale('zh-cn', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日Ah点mm分',
	            LLLL: 'YYYY年M月D日ddddAh点mm分',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    return '[下]dddLT';
	                } else {
	                    return '[本]dddLT';
	                }
	            },
	            lastDay: '[昨天]LT',
	            lastWeek: function (now) {
	                if (this.week() !== now.week()) {
	                    return '[上]dddLT';
	                } else {
	                    return '[本]dddLT';
	                }
	            },
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s后',
	            past: '%s前',
	            s: '几秒',
	            ss: '%d 秒',
	            m: '1 分钟',
	            mm: '%d 分钟',
	            h: '1 小时',
	            hh: '%d 小时',
	            d: '1 天',
	            dd: '%d 天',
	            w: '1 周',
	            ww: '%d 周',
	            M: '1 个月',
	            MM: '%d 个月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	        week: {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow: 1, // Monday is the first day of the week.
	            doy: 4, // The week that contains Jan 4th is the first week of the year.
	        },
	    });
	
	    return zhCn;
	
	})));


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	//! author : Anthony : https://github.com/anthonylau
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhHk = moment.defineLocale('zh-hk', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1200) {
	                return '上午';
	            } else if (hm === 1200) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天]LT',
	            nextDay: '[明天]LT',
	            nextWeek: '[下]ddddLT',
	            lastDay: '[昨天]LT',
	            lastWeek: '[上]ddddLT',
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	    });
	
	    return zhHk;
	
	})));


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Macau) [zh-mo]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Tan Yuanhong : https://github.com/le0tan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhMo = moment.defineLocale('zh-mo', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'D/M/YYYY',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天] LT',
	            nextDay: '[明天] LT',
	            nextWeek: '[下]dddd LT',
	            lastDay: '[昨天] LT',
	            lastWeek: '[上]dddd LT',
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s內',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	    });
	
	    return zhMo;
	
	})));


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(362)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	    //! moment.js locale configuration
	
	    var zhTw = moment.defineLocale('zh-tw', {
	        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
	            '_'
	        ),
	        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
	            '_'
	        ),
	        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'YYYY/MM/DD',
	            LL: 'YYYY年M月D日',
	            LLL: 'YYYY年M月D日 HH:mm',
	            LLLL: 'YYYY年M月D日dddd HH:mm',
	            l: 'YYYY/M/D',
	            ll: 'YYYY年M月D日',
	            lll: 'YYYY年M月D日 HH:mm',
	            llll: 'YYYY年M月D日dddd HH:mm',
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar: {
	            sameDay: '[今天] LT',
	            nextDay: '[明天] LT',
	            nextWeek: '[下]dddd LT',
	            lastDay: '[昨天] LT',
	            lastWeek: '[上]dddd LT',
	            sameElse: 'L',
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '週';
	                default:
	                    return number;
	            }
	        },
	        relativeTime: {
	            future: '%s後',
	            past: '%s前',
	            s: '幾秒',
	            ss: '%d 秒',
	            m: '1 分鐘',
	            mm: '%d 分鐘',
	            h: '1 小時',
	            hh: '%d 小時',
	            d: '1 天',
	            dd: '%d 天',
	            M: '1 個月',
	            MM: '%d 個月',
	            y: '1 年',
	            yy: '%d 年',
	        },
	    });
	
	    return zhTw;
	
	})));


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	var Birch;
	
	Birch = __webpack_require__(252);
	
	Birch.commands.add('outline-editor', {
	
	  /*
	  'core:cut': (e) -> @cutSelection clipboardAsDatatransfer
	  'core:copy': (e) -> @copySelection clipboardAsDatatransfer
	  'core:paste': (e) -> @pasteToSelection clipboardAsDatatransfer
	  
	  'outline-editor:cut-opml': (e) -> @cutSelection(clipboardAsDatatransfer, ItemSerializer.OPMLMimeType)
	  'outline-editor:copy-opml': (e) -> @copySelection(clipboardAsDatatransfer, ItemSerializer.OPMLMimeType)
	  'outline-editor:paste-opml': (e) -> @pasteToSelection(clipboardAsDatatransfer, ItemSerializer.OPMLMimeType)
	  
	  'outline-editor:cut-text': (e) -> @cutSelection(clipboardAsDatatransfer, ItemSerializer.TEXTMimeType)
	  'outline-editor:copy-text': (e) -> @copySelection(clipboardAsDatatransfer, ItemSerializer.TEXTMimeType)
	  'outline-editor:paste-text': (e) -> @pasteToSelection(clipboardAsDatatransfer, ItemSerializer.TEXTMimeType)
	   */
	  'outline-editor:undo': function(e) {
	    return this.undo();
	  },
	  'outline-editor:redo': function(e) {
	    return this.redo();
	  },
	  'outline-editor:backspace': function(e) {
	    return this.backspace();
	  },
	  'outline-editor:insert-tab': function(e) {
	    return this.insertTab();
	  },
	  'outline-editor:insert-backtab': function(e) {
	    return this.insertBacktab();
	  },
	  'outline-editor:newline': function(e) {
	    return this.insertNewline();
	  },
	  'outline-editor:newline-above': function(e) {
	    return this.insertNewlineAbove();
	  },
	  'outline-editor:newline-below': function(e) {
	    return this.insertNewlineBelow();
	  },
	  'outline-editor:newline-without-indent': function(e) {
	    return this.insertNewlineWithoutIndent();
	  },
	  'outline-editor:move-lines-right': function(e) {
	    return this.moveLinesRight();
	  },
	  'outline-editor:move-lines-left': function(e) {
	    return this.moveLinesLeft();
	  },
	  'outline-editor:move-lines-up': function(e) {
	    return this.moveLinesUp();
	  },
	  'outline-editor:move-lines-down': function(e) {
	    return this.moveLinesDown();
	  },
	  'outline-editor:group-lines': function(e) {
	    return this.groupLines();
	  },
	  'outline-editor:duplicate-lines': function(e) {
	    return this.duplicateLines();
	  },
	  'outline-editor:delete-lines': function(e) {
	    return this.deleteLines();
	  },
	  'outline-editor:move-branches-left': function(e) {
	    return this.moveBranchesLeft();
	  },
	  'outline-editor:move-branches-right': function(e) {
	    return this.moveBranchesRight();
	  },
	  'outline-editor:move-branches-up': function(e) {
	    return this.moveBranchesUp();
	  },
	  'outline-editor:move-branches-down': function(e) {
	    return this.moveBranchesDown();
	  },
	
	  /*
	  'outline-editor:delete-branches': (e) -> @deleteBranches(e?.items)
	  'outline-editor:promote-child-branches': (e) -> @promoteChildBranches()
	  'outline-editor:demote-trailing-sibling-branches': (e) -> @demoteTrailingSiblingBranches()
	  'outline-editor:group-branches': (e) -> @groupBranches()
	  'outline-editor:duplicate-branches': (e) -> @duplicateBranches()
	   */
	  'outline-editor:insert-date': function(e, completedCallback) {
	    return this.insertDate(completedCallback);
	  },
	  'outline-editor:tag-with': function(e, completedCallback) {
	    return this.toggleUserSelectedAttribute(null, true, completedCallback);
	  },
	
	  /*
	  'outline-editor:toggle-abbreviation': (e) -> @toggleTextAttribute 'ABBR'
	  'outline-editor:toggle-bold': (e) -> @toggleTextAttribute 'B'
	  'outline-editor:toggle-citation': (e) -> @toggleTextAttribute 'CITE'
	  'outline-editor:toggle-code': (e) -> @toggleTextAttribute 'CODE'
	  'outline-editor:toggle-definition': (e) -> @toggleTextAttribute 'DFN'
	  'outline-editor:toggle-emphasis': (e) -> @toggleTextAttribute 'EM'
	  'outline-editor:toggle-italic': (e) -> @toggleTextAttribute 'I'
	  'outline-editor:toggle-keyboard-input': (e) -> @toggleTextAttribute 'KBD'
	  'outline-editor:toggle-inline-quote': (e) -> @toggleTextAttribute 'Q'
	  'outline-editor:toggle-strikethrough': (e) -> @toggleTextAttribute 'S'
	  'outline-editor:toggle-sample-output': (e) -> @toggleTextAttribute 'SAMP'
	  'outline-editor:toggle-small': (e) -> @toggleTextAttribute 'SMALL'
	  'outline-editor:toggle-strong': (e) -> @toggleTextAttribute 'STRONG'
	  'outline-editor:toggle-subscript': (e) -> @toggleTextAttribute 'SUB'
	  'outline-editor:toggle-superscript': (e) -> @toggleTextAttribute 'SUP'
	  'outline-editor:toggle-underline': (e) -> @toggleTextAttribute 'U'
	  'outline-editor:toggle-variable': (e) -> @toggleTextAttribute 'VAR'
	  'outline-editor:clear-formatting': (e) -> @clearFormatting()
	   */
	  'outline-editor:upper-case': function(e) {
	    return this.upperCase();
	  },
	  'outline-editor:lower-case': function(e) {
	    return this.lowerCase();
	  },
	  'outline-editor:fold': function(e) {
	    return this.fold(e != null ? e.item : void 0, void 0, e != null ? e.allowFoldAncestor : void 0);
	  },
	  'outline-editor:fold-completely': function(e) {
	    return this.fold(e != null ? e.item : void 0, true);
	  },
	  'outline-editor:expand': function(e) {
	    return this.expand();
	  },
	  'outline-editor:expand-completely': function(e) {
	    return this.expand(null, true);
	  },
	  'outline-editor:expand-all': function(e) {
	    return this.setExpanded(this.hoistedItem.descendants);
	  },
	  'outline-editor:collapse': function(e) {
	    return this.collapse();
	  },
	  'outline-editor:collapse-completely': function(e) {
	    return this.collapse(null, true);
	  },
	  'outline-editor:collapse-all': function(e) {
	    return this.setCollapsed(this.hoistedItem.descendants);
	  },
	  'outline-editor:increase-expansion-level': function(e) {
	    return this.increaseExpansionLevel();
	  },
	  'outline-editor:decrease-expansion-level': function(e) {
	    return this.decreaseExpansionLevel();
	  },
	  'outline-editor:home': function(e) {
	    return this.hoistedItem = null;
	  },
	  'outline-editor:hoist': function(e) {
	    return this.hoist();
	  },
	  'outline-editor:unhoist': function(e) {
	    return this.unhoist();
	  },
	  'outline-editor:focus-in': function(e) {
	    return this.focusIn(e != null ? e.item : void 0);
	  },
	  'outline-editor:focus-out': function(e) {
	    return this.focusOut();
	  },
	  'outline-editor:refresh-search': function(e) {
	    return this.refreshFilter();
	  },
	
	  /*
	  'outline-editor:reveal-item': (e) -> @revealItem()
	  'outline-editor:open-link': (e) -> @openLink()
	  'outline-editor:copy-link': (e) -> @copyLink()
	  'outline-editor:edit-link': (e) -> @editLink()
	  'outline-editor:remove-link': (e) -> @removeLink()
	  'outline-editor:show-link-in-file-manager': (e) -> @showLinkInFileManager()
	  'outline-editor:open-link-with-file-manager': (e) -> @openLinkWithFileManager()
	   */
	  'outline-editor:select-word': function(e) {
	    return this.selectWord();
	  },
	  'outline-editor:select-sentence': function(e) {
	    return this.selectSentence();
	  },
	  'outline-editor:select-item': function(e) {
	    return this.selectItem();
	  },
	  'outline-editor:select-branch': function(e) {
	    return this.selectBranch();
	  },
	  'outline-editor:select-all': function(e) {
	    return this.selectAll();
	  },
	  'outline-editor:expand-selection': function(e) {
	    return this.expandSelection();
	  },
	  'outline-editor:contract-selection': function(e) {
	    return this.contractSelection();
	  }
	});


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	var ChoicePalette, CompositeDisposable, Emitter, fuzzaldrinPlus, ref;
	
	ref = __webpack_require__(242), Emitter = ref.Emitter, CompositeDisposable = ref.CompositeDisposable;
	
	fuzzaldrinPlus = __webpack_require__(246);
	
	module.exports = ChoicePalette = (function() {
	  function ChoicePalette(filterKey) {
	    this.filterKey = filterKey;
	    this._filterQuery = '';
	    this._choicePaletteItems = [];
	    this._matchingChoicePaletteItems = [];
	    this._topChoicePaletteItemIndex = null;
	  }
	
	  Object.defineProperty(ChoicePalette.prototype, 'choicePaletteItems', {
	    get: function() {
	      return this._choicePaletteItems;
	    },
	    set: function(choicePaletteItems) {
	      this._choicePaletteItems = choicePaletteItems != null ? choicePaletteItems : [];
	      this._matchingChoicePaletteItems = null;
	      return this._topChoicePaletteItemIndex = null;
	    }
	  });
	
	  Object.defineProperty(ChoicePalette.prototype, 'filterQuery', {
	    get: function() {
	      return this._filterQuery;
	    },
	    set: function(filterQuery) {
	      this._filterQuery = filterQuery != null ? filterQuery : '';
	      this._matchingChoicePaletteItems = null;
	      return this._topChoicePaletteItemIndex = null;
	    }
	  });
	
	  Object.defineProperty(ChoicePalette.prototype, 'topChoicePaletteItemIndex', {
	    get: function() {
	      if (!this._topChoicePaletteItemIndex) {
	        this.matchingChoicePaletteItems;
	      }
	      return this._topChoicePaletteItemIndex;
	    }
	  });
	
	  Object.defineProperty(ChoicePalette.prototype, 'matchingChoicePaletteItems', {
	    get: function() {
	      var each, flattenTree, i, index, insertIntoTree, inserted, j, len, len1, matches, parentsToChildren, ref1, topChoiceItem;
	      if (!this._matchingChoicePaletteItems) {
	        if (this._filterQuery.length > 0) {
	          this._topChoicePaletteItemIndex = -1;
	          parentsToChildren = new Map;
	          topChoiceItem = null;
	          inserted = new Set;
	          insertIntoTree = function(item) {
	            var childrenList, parent, ref1;
	            if (inserted.has(item)) {
	              return;
	            }
	            if (!item) {
	              inserted.add(null);
	              return;
	            }
	            parent = (ref1 = item.parent) != null ? ref1 : null;
	            insertIntoTree(parent);
	            if (!(childrenList = parentsToChildren.get(parent))) {
	              childrenList = [];
	              parentsToChildren.set(parent, childrenList);
	            }
	            childrenList.push(item);
	            return inserted.add(item);
	          };
	          flattenTree = function(children, results) {
	            var each, i, len, results1;
	            if (!children) {
	              return;
	            }
	            results1 = [];
	            for (i = 0, len = children.length; i < len; i++) {
	              each = children[i];
	              results.push(each);
	              results1.push(flattenTree(parentsToChildren.get(each), results));
	            }
	            return results1;
	          };
	          matches = fuzzaldrinPlus.filter(this.choicePaletteItems, this.filterQuery, {
	            key: this.filterKey
	          });
	          for (i = 0, len = matches.length; i < len; i++) {
	            each = matches[i];
	            if (each.isSelectable) {
	              if (topChoiceItem == null) {
	                topChoiceItem = each;
	              }
	              insertIntoTree(each);
	            }
	          }
	          this._matchingChoicePaletteItems = [];
	          flattenTree(parentsToChildren.get(null), this._matchingChoicePaletteItems);
	          this._topChoicePaletteItemIndex = this._matchingChoicePaletteItems.indexOf(topChoiceItem);
	        } else {
	          this._matchingChoicePaletteItems = this.choicePaletteItems;
	          this._topChoicePaletteItemIndex = -1;
	          ref1 = this._matchingChoicePaletteItems;
	          for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {
	            each = ref1[index];
	            if (each.isSelectable && this._topChoicePaletteItemIndex === -1) {
	              this._topChoicePaletteItemIndex = index;
	            }
	          }
	        }
	      }
	      return this._matchingChoicePaletteItems;
	    }
	  });
	
	  Object.defineProperty(ChoicePalette.prototype, 'numberOfMatchingChoicePaletteItems', {
	    get: function() {
	      return this.matchingChoicePaletteItems.length;
	    }
	  });
	
	  ChoicePalette.prototype.matchingChoicePaletteItemAtIndex = function(index) {
	    var choicePaletteItem;
	    choicePaletteItem = this.matchingChoicePaletteItems[index];
	    choicePaletteItem.titleMatchIndexes = fuzzaldrinPlus.match(choicePaletteItem.title, this.filterQuery);
	    return choicePaletteItem;
	  };
	
	  return ChoicePalette;
	
	})();


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

	var Birch, Item, archiveDone, clearTags, exportCopyToReminders, exportToReminders, importReminderCopies, importReminders, moment, toggleDateAttribute;
	
	Item = __webpack_require__(1).Item;
	
	moment = __webpack_require__(362);
	
	Birch = __webpack_require__(252);
	
	archiveDone = function(editor) {
	  var addProjectTag, archive, doneItems, endItem, outline, removeExtraTags, selection, startItem;
	  outline = editor.outline;
	  selection = editor.selection;
	  startItem = selection.startItem;
	  endItem = selection.endItem;
	  archive = outline.evaluateItemPath("//@text = Archive:")[0];
	  doneItems = Item.getCommonAncestors(outline.evaluateItemPath("//@done except //@text = Archive://@done"));
	  removeExtraTags = Birch.preferences.get('BRemoveExtraTagsWhenArchivingDone');
	  addProjectTag = Birch.preferences.get('BIncludeProjectWhenArchivingDone');
	  outline.groupUndoAndChanges(function() {
	    var each, eachName, eachProject, i, j, len, len1, previousItem, projects, ref;
	    if (!archive) {
	      outline.root.appendChildren(archive = outline.createItem('Archive:'));
	    }
	    for (i = 0, len = doneItems.length; i < len; i++) {
	      each = doneItems[i];
	      if (removeExtraTags) {
	        ref = each.attributeNames;
	        for (j = 0, len1 = ref.length; j < len1; j++) {
	          eachName = ref[j];
	          if (eachName.indexOf('data-') === 0 && eachName !== 'data-type' && eachName !== 'data-done') {
	            each.removeAttribute(eachName);
	          }
	        }
	      }
	      if (addProjectTag) {
	        if (projects = ((function() {
	          var k, len2, ref1, results;
	          ref1 = outline.evaluateItemPath('ancestor::@type=project', each);
	          results = [];
	          for (k = 0, len2 = ref1.length; k < len2; k++) {
	            eachProject = ref1[k];
	            results.push(eachProject.bodyContentString);
	          }
	          return results;
	        })()).join(' / ')) {
	          each.setAttribute('data-project', projects);
	        }
	      }
	      if ((each === startItem || each.contains(startItem)) || (each === endItem || each.contains(endItem))) {
	        if (previousItem = editor.getPreviousDisplayedItem(startItem)) {
	          selection = {
	            startItem: previousItem,
	            startOffset: -1
	          };
	        } else {
	          selection = {
	            start: 0
	          };
	        }
	      }
	    }
	    return archive.insertChildrenBefore(doneItems, archive.firstChild);
	  });
	  return editor.moveSelectionToItems(selection);
	};
	
	toggleDateAttribute = function(editor, placeholder, tag, completedCallback) {
	  var attributeName, items;
	  attributeName = "data-" + tag;
	  items = editor.selection.displayedSelectedItems;
	  if (editor.hasAttribute(attributeName, items)) {
	    editor.setAttribute(items, attributeName, null);
	    return typeof completedCallback === "function" ? completedCallback(true) : void 0;
	  } else {
	    return editor.getDateFromUser(placeholder, "@" + tag + "(%@)", function(date) {
	      if (date) {
	        editor.toggleAttribute(attributeName, Birch.DateTime.format(date, false, false), items);
	        return typeof completedCallback === "function" ? completedCallback(true) : void 0;
	      } else {
	        return typeof completedCallback === "function" ? completedCallback(false) : void 0;
	      }
	    });
	  }
	};
	
	clearTags = function(editor) {
	  var selection;
	  selection = editor.selection;
	  editor.outline.groupUndoAndChanges(function() {
	    var each, eachName, i, len, ref, results;
	    ref = selection.displayedSelectedItems;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      each = ref[i];
	      results.push((function() {
	        var j, len1, ref1, results1;
	        ref1 = each.attributeNames;
	        results1 = [];
	        for (j = 0, len1 = ref1.length; j < len1; j++) {
	          eachName = ref1[j];
	          if (eachName.indexOf('data-') === 0 && eachName !== 'data-type') {
	            results1.push(each.removeAttribute(eachName));
	          } else {
	            results1.push(void 0);
	          }
	        }
	        return results1;
	      })());
	    }
	    return results;
	  });
	  return editor.moveSelectionToItems(selection);
	};
	
	importReminders = function(editor, completedCallback) {
	  return editor.nativeEditor.importRemindersWithCallback(completedCallback);
	};
	
	importReminderCopies = function(editor, completedCallback) {
	  return editor.nativeEditor.importReminderCopiesWithCallback(completedCallback);
	};
	
	exportToReminders = function(editor, completedCallback) {
	  return editor.nativeEditor.exportToRemindersWithCallback(completedCallback);
	};
	
	exportCopyToReminders = function(editor, completedCallback) {
	  return editor.nativeEditor.exportCopyToRemindersWithCallback(completedCallback);
	};
	
	module.exports = function() {
	  Birch.commands.override('outline-editor', {
	    'outline-editor:insert-tab': function(e) {
	      return this.moveLinesRight();
	    },
	    'outline-editor:insert-backtab': function(e) {
	      return this.moveLinesLeft();
	    },
	    'outline-editor:backspace': function(e) {
	      var selection;
	      selection = this.selection;
	      if (selection.length === 0 && selection.startOffset === 0 && selection.startItem.depth > this.hoistedItem.depth + 1) {
	        return this.moveLinesLeft();
	      } else {
	        return this.backspace(e);
	      }
	    }
	  });
	  return Birch.commands.add('outline-editor', {
	    'outline-editor:format-project': function(e) {
	      return this.setAttribute(null, 'data-type', 'project');
	    },
	    'outline-editor:format-task': function(e) {
	      return this.setAttribute(null, 'data-type', 'task');
	    },
	    'outline-editor:format-note': function(e) {
	      return this.setAttribute(null, 'data-type', 'note');
	    },
	    'outline-editor:toggle-done': function(e) {
	      var value;
	      if (Birch.preferences.get('BIncludeDateWhenTaggingDone')) {
	        value = moment().format('YYYY-MM-DD');
	      }
	      return this.toggleAttribute('data-done', value);
	    },
	    'outline-editor:toggle-today': function(e) {
	      return this.toggleAttribute('data-today');
	    },
	    'outline-editor:toggle-start': function(e, completedCallback) {
	      return toggleDateAttribute(this, 'Start Date', 'start', completedCallback);
	    },
	    'outline-editor:toggle-due': function(e, completedCallback) {
	      return toggleDateAttribute(this, 'Due Date', 'due', completedCallback);
	    },
	    'outline-editor:remove-tags': function(e) {
	      return clearTags(this);
	    },
	    'outline-editor:archive-done': function(e) {
	      return archiveDone(this);
	    },
	    'outline-editor:new-task': function(e) {
	      var task;
	      this.focus();
	      task = this.insertItem('- New Task');
	      return this.moveSelectionToItems(task, 2, task, task.bodyString.length);
	    },
	    'outline-editor:new-note': function(e) {
	      var note;
	      this.focus();
	      note = this.insertItem('New Note');
	      return this.moveSelectionToItems(note, 0, note, note.bodyString.length);
	    },
	    'outline-editor:new-project': function(e) {
	      var project;
	      this.focus();
	      project = this.insertItem('New Project:');
	      return this.moveSelectionToItems(project, 0, project, project.bodyString.length - 1);
	    },
	    'outline-editor:import-reminders': function(e, completedCallback) {
	      return importReminders(this, completedCallback);
	    },
	    'outline-editor:import-reminder-copies': function(e, completedCallback) {
	      return importReminderCopies(this, completedCallback);
	    },
	    'outline-editor:export-to-reminders': function(e, completedCallback) {
	      return exportToReminders(this, completedCallback);
	    },
	    'outline-editor:export-copy-to-reminders': function(e, completedCallback) {
	      return exportCopyToReminders(this, completedCallback);
	    }
	  });
	};


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

	var Birch;
	
	Birch = __webpack_require__(252);
	
	module.exports = function() {
	  return Birch.commands.add('outline-editor', {
	    'outline-editor:toggle-bold': function(e) {
	      return this.toggleTextAttribute('b');
	    },
	    'outline-editor:toggle-italic': function(e) {
	      return this.toggleTextAttribute('i');
	    }
	  });
	};


/***/ })
/******/ ]);
//# sourceMappingURL=bircheditor.js.map